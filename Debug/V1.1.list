
V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb28  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a8  0800ed08  0800ed08  0001ed08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f3b0  0800f3b0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f3b0  0800f3b0  0001f3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f3b8  0800f3b8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f3b8  0800f3b8  0001f3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f3bc  0800f3bc  0001f3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800f3c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  200001f0  0800f5b0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  0800f5b0  000205f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af75  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ac  00000000  00000000  0003b195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001600  00000000  00000000  0003e348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b8  00000000  00000000  0003f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a28d  00000000  00000000  00040e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e21  00000000  00000000  0006b08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001148aa  00000000  00000000  00084eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00199758  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000074b0  00000000  00000000  001997a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ecf0 	.word	0x0800ecf0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800ecf0 	.word	0x0800ecf0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	b09b      	sub	sp, #108	; 0x6c
 800104c:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f001 f8be 	bl	80021ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001052:	f000 f96f 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001056:	f000 fcd9 	bl	8001a0c <MX_GPIO_Init>
  MX_TIM2_Init();
 800105a:	f000 fb69 	bl	8001730 <MX_TIM2_Init>
  MX_DMA_Init();
 800105e:	f000 fcab 	bl	80019b8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001062:	f000 f9b3 	bl	80013cc <MX_ADC1_Init>
  MX_ADC3_Init();
 8001066:	f000 fa2b 	bl	80014c0 <MX_ADC3_Init>
  MX_TIM3_Init();
 800106a:	f000 fbd7 	bl	800181c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800106e:	f000 fc57 	bl	8001920 <MX_USART2_UART_Init>
  MX_ADC4_Init();
 8001072:	f000 fabf 	bl	80015f4 <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */
  USER_CALLBACK_init();
 8001076:	f008 fe15 	bl	8009ca4 <USER_CALLBACK_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*When receive the data from USART2, it will set value of Timer follow the syntax TIMER-duty-frequency-NumberofTimer-NumberofChannel */
	  if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETTIMER) !=NULL))
 800107a:	4b9c      	ldr	r3, [pc, #624]	; (80012ec <main+0x2a4>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d135      	bne.n	80010ee <main+0xa6>
 8001082:	499b      	ldr	r1, [pc, #620]	; (80012f0 <main+0x2a8>)
 8001084:	489b      	ldr	r0, [pc, #620]	; (80012f4 <main+0x2ac>)
 8001086:	f009 ff97 	bl	800afb8 <strstr>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d02e      	beq.n	80010ee <main+0xa6>
	  {
		  PWM_Variable = USER_TIMER_handleString(Rx_Buffer);
 8001090:	4c99      	ldr	r4, [pc, #612]	; (80012f8 <main+0x2b0>)
 8001092:	463b      	mov	r3, r7
 8001094:	4997      	ldr	r1, [pc, #604]	; (80012f4 <main+0x2ac>)
 8001096:	4618      	mov	r0, r3
 8001098:	f008 ffea 	bl	800a070 <USER_TIMER_handleString>
 800109c:	463b      	mov	r3, r7
 800109e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  USER_TIMER_setValueOfPWM(PWM_Variable);
 80010a4:	4b94      	ldr	r3, [pc, #592]	; (80012f8 <main+0x2b0>)
 80010a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a8:	f008 ff4c 	bl	8009f44 <USER_TIMER_setValueOfPWM>
		  USER_CALLBACK_DeInit();
 80010ac:	f008 fe76 	bl	8009d9c <USER_CALLBACK_DeInit>
#ifdef DEBUG_MAIN
	sprintf(Tx_Buffer,"\r\n--------SYNTAX:TIMER-------\r\nThe Timer: %u\r\nThe Channel: %lu\r\nThe value of CCR = %lu\r\nThe value of ARR = %lu\r\n",PWM_Variable.NumberOfTimer,PWM_Variable.Channel,USER_TIMER_getValueCCR(),USER_TIMER_getValueARR());
 80010b0:	4b91      	ldr	r3, [pc, #580]	; (80012f8 <main+0x2b0>)
 80010b2:	889b      	ldrh	r3, [r3, #4]
 80010b4:	461e      	mov	r6, r3
 80010b6:	4b90      	ldr	r3, [pc, #576]	; (80012f8 <main+0x2b0>)
 80010b8:	689c      	ldr	r4, [r3, #8]
 80010ba:	f009 f83f 	bl	800a13c <USER_TIMER_getValueCCR>
 80010be:	4605      	mov	r5, r0
 80010c0:	f009 f830 	bl	800a124 <USER_TIMER_getValueARR>
 80010c4:	4603      	mov	r3, r0
 80010c6:	9301      	str	r3, [sp, #4]
 80010c8:	9500      	str	r5, [sp, #0]
 80010ca:	4623      	mov	r3, r4
 80010cc:	4632      	mov	r2, r6
 80010ce:	498b      	ldr	r1, [pc, #556]	; (80012fc <main+0x2b4>)
 80010d0:	488b      	ldr	r0, [pc, #556]	; (8001300 <main+0x2b8>)
 80010d2:	f009 ff51 	bl	800af78 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Tx_Buffer,strlen(Tx_Buffer),1000);
 80010d6:	488a      	ldr	r0, [pc, #552]	; (8001300 <main+0x2b8>)
 80010d8:	f7ff f8a2 	bl	8000220 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	b29a      	uxth	r2, r3
 80010e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e4:	4986      	ldr	r1, [pc, #536]	; (8001300 <main+0x2b8>)
 80010e6:	4887      	ldr	r0, [pc, #540]	; (8001304 <main+0x2bc>)
 80010e8:	f006 fcec 	bl	8007ac4 <HAL_UART_Transmit>
 80010ec:	e0da      	b.n	80012a4 <main+0x25c>
#endif
	  }
	  /*With the syntax here, it will set the information of the filter in ADC like cut off frequency, sampling time*/
	  else if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETADC) !=NULL))
 80010ee:	4b7f      	ldr	r3, [pc, #508]	; (80012ec <main+0x2a4>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d163      	bne.n	80011be <main+0x176>
 80010f6:	4984      	ldr	r1, [pc, #528]	; (8001308 <main+0x2c0>)
 80010f8:	487e      	ldr	r0, [pc, #504]	; (80012f4 <main+0x2ac>)
 80010fa:	f009 ff5d 	bl	800afb8 <strstr>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d05c      	beq.n	80011be <main+0x176>
	  {
		  ADCFilter_Variable = USER_ADC_handleString(Rx_Buffer);
 8001104:	487b      	ldr	r0, [pc, #492]	; (80012f4 <main+0x2ac>)
 8001106:	f008 fd6f 	bl	8009be8 <USER_ADC_handleString>
 800110a:	eef0 6a40 	vmov.f32	s13, s0
 800110e:	eeb0 7a60 	vmov.f32	s14, s1
 8001112:	eef0 7a41 	vmov.f32	s15, s2
 8001116:	4b7d      	ldr	r3, [pc, #500]	; (800130c <main+0x2c4>)
 8001118:	edc3 6a00 	vstr	s13, [r3]
 800111c:	ed83 7a01 	vstr	s14, [r3, #4]
 8001120:	edc3 7a02 	vstr	s15, [r3, #8]
		  USER_ADC_ConfigFilter(ADCFilter_Variable);
 8001124:	4b79      	ldr	r3, [pc, #484]	; (800130c <main+0x2c4>)
 8001126:	edd3 6a00 	vldr	s13, [r3]
 800112a:	ed93 7a01 	vldr	s14, [r3, #4]
 800112e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001132:	eeb0 0a66 	vmov.f32	s0, s13
 8001136:	eef0 0a47 	vmov.f32	s1, s14
 800113a:	eeb0 1a67 	vmov.f32	s2, s15
 800113e:	f008 fce7 	bl	8009b10 <USER_ADC_ConfigFilter>
		  USER_CALLBACK_DeInit();
 8001142:	f008 fe2b 	bl	8009d9c <USER_CALLBACK_DeInit>
#ifdef DEBUG_MAIN
	sprintf(Tx_Buffer,"\r\n--------SYNTAX:ADC-------\r\nThe Cutoff: %f\r\nThe sampleFrequency: %f\r\n",USER_ADC_GetInforFilter().cutoffFreq,USER_ADC_GetInforFilter().sampleTime);
 8001146:	f008 fd8d 	bl	8009c64 <USER_ADC_GetInforFilter>
 800114a:	eef0 6a40 	vmov.f32	s13, s0
 800114e:	eeb0 7a60 	vmov.f32	s14, s1
 8001152:	eef0 7a41 	vmov.f32	s15, s2
 8001156:	edc7 6a04 	vstr	s13, [r7, #16]
 800115a:	ed87 7a05 	vstr	s14, [r7, #20]
 800115e:	edc7 7a06 	vstr	s15, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fa17 	bl	8000598 <__aeabi_f2d>
 800116a:	4604      	mov	r4, r0
 800116c:	460d      	mov	r5, r1
 800116e:	f008 fd79 	bl	8009c64 <USER_ADC_GetInforFilter>
 8001172:	eef0 6a40 	vmov.f32	s13, s0
 8001176:	eeb0 7a60 	vmov.f32	s14, s1
 800117a:	eef0 7a41 	vmov.f32	s15, s2
 800117e:	edc7 6a07 	vstr	s13, [r7, #28]
 8001182:	ed87 7a08 	vstr	s14, [r7, #32]
 8001186:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fa03 	bl	8000598 <__aeabi_f2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	e9cd 2300 	strd	r2, r3, [sp]
 800119a:	4622      	mov	r2, r4
 800119c:	462b      	mov	r3, r5
 800119e:	495c      	ldr	r1, [pc, #368]	; (8001310 <main+0x2c8>)
 80011a0:	4857      	ldr	r0, [pc, #348]	; (8001300 <main+0x2b8>)
 80011a2:	f009 fee9 	bl	800af78 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Tx_Buffer,strlen(Tx_Buffer),1000);
 80011a6:	4856      	ldr	r0, [pc, #344]	; (8001300 <main+0x2b8>)
 80011a8:	f7ff f83a 	bl	8000220 <strlen>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b4:	4952      	ldr	r1, [pc, #328]	; (8001300 <main+0x2b8>)
 80011b6:	4853      	ldr	r0, [pc, #332]	; (8001304 <main+0x2bc>)
 80011b8:	f006 fc84 	bl	8007ac4 <HAL_UART_Transmit>
 80011bc:	e072      	b.n	80012a4 <main+0x25c>
#endif
	  }
	  /*With the syntax it will modify and value of ADC will be controlled by duty cycle */
	  else if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETPWMWITHADC) !=NULL))
 80011be:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <main+0x2a4>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d140      	bne.n	8001248 <main+0x200>
 80011c6:	4953      	ldr	r1, [pc, #332]	; (8001314 <main+0x2cc>)
 80011c8:	484a      	ldr	r0, [pc, #296]	; (80012f4 <main+0x2ac>)
 80011ca:	f009 fef5 	bl	800afb8 <strstr>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d039      	beq.n	8001248 <main+0x200>
	  {
		  PWM_Variable.Duty = USER_TIMER_ConvertADCValueToDutyCycle(ADC_Variable[2]);
 80011d4:	4b50      	ldr	r3, [pc, #320]	; (8001318 <main+0x2d0>)
 80011d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011da:	eeb0 0a67 	vmov.f32	s0, s15
 80011de:	f008 ffbb 	bl	800a158 <USER_TIMER_ConvertADCValueToDutyCycle>
 80011e2:	eef0 7a40 	vmov.f32	s15, s0
 80011e6:	4b44      	ldr	r3, [pc, #272]	; (80012f8 <main+0x2b0>)
 80011e8:	edc3 7a00 	vstr	s15, [r3]
		  PWM_Variable.NumberOfTimer = 2;
 80011ec:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <main+0x2b0>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	809a      	strh	r2, [r3, #4]
		  PWM_Variable.Channel = 2;
 80011f2:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <main+0x2b0>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	609a      	str	r2, [r3, #8]
		  USER_TIMER_setValueOfPWM(PWM_Variable);
 80011f8:	4b3f      	ldr	r3, [pc, #252]	; (80012f8 <main+0x2b0>)
 80011fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011fc:	f008 fea2 	bl	8009f44 <USER_TIMER_setValueOfPWM>
		  USER_CALLBACK_DeInit();
 8001200:	f008 fdcc 	bl	8009d9c <USER_CALLBACK_DeInit>
#ifdef DEBUG_MAIN
	sprintf(Tx_Buffer,"\r\n--------SYNTAX:PWMBYSIGNAL-------\r\nThe ADV Value: %0.2f\r\nThe Duty Cycle: %.2f",ADC_Variable[2],PWM_Variable.Duty);
 8001204:	4b44      	ldr	r3, [pc, #272]	; (8001318 <main+0x2d0>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f9c5 	bl	8000598 <__aeabi_f2d>
 800120e:	4604      	mov	r4, r0
 8001210:	460d      	mov	r5, r1
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <main+0x2b0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f9be 	bl	8000598 <__aeabi_f2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	e9cd 2300 	strd	r2, r3, [sp]
 8001224:	4622      	mov	r2, r4
 8001226:	462b      	mov	r3, r5
 8001228:	493c      	ldr	r1, [pc, #240]	; (800131c <main+0x2d4>)
 800122a:	4835      	ldr	r0, [pc, #212]	; (8001300 <main+0x2b8>)
 800122c:	f009 fea4 	bl	800af78 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Tx_Buffer,strlen(Tx_Buffer),1000);
 8001230:	4833      	ldr	r0, [pc, #204]	; (8001300 <main+0x2b8>)
 8001232:	f7fe fff5 	bl	8000220 <strlen>
 8001236:	4603      	mov	r3, r0
 8001238:	b29a      	uxth	r2, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	4930      	ldr	r1, [pc, #192]	; (8001300 <main+0x2b8>)
 8001240:	4830      	ldr	r0, [pc, #192]	; (8001304 <main+0x2bc>)
 8001242:	f006 fc3f 	bl	8007ac4 <HAL_UART_Transmit>
 8001246:	e02d      	b.n	80012a4 <main+0x25c>
#endif
	  }
	  /*With the syntax, it will trigger ADC at the middle of timer, with channel of timer 3 is 2 and trigger adc by channel 1 of timer 3 */
	  else if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETADCTIMER) !=NULL))
 8001248:	4b28      	ldr	r3, [pc, #160]	; (80012ec <main+0x2a4>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d129      	bne.n	80012a4 <main+0x25c>
 8001250:	4933      	ldr	r1, [pc, #204]	; (8001320 <main+0x2d8>)
 8001252:	4828      	ldr	r0, [pc, #160]	; (80012f4 <main+0x2ac>)
 8001254:	f009 feb0 	bl	800afb8 <strstr>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d022      	beq.n	80012a4 <main+0x25c>
	  {
		  USER_TIMER_DividedIntoTwoCCR(htim3);
 800125e:	4e31      	ldr	r6, [pc, #196]	; (8001324 <main+0x2dc>)
 8001260:	466d      	mov	r5, sp
 8001262:	f106 0410 	add.w	r4, r6, #16
 8001266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800126c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800126e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001272:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001276:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800127a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800127e:	f008 ffa3 	bl	800a1c8 <USER_TIMER_DividedIntoTwoCCR>
		  USER_CALLBACK_DeInit();
 8001282:	f008 fd8b 	bl	8009d9c <USER_CALLBACK_DeInit>
#ifdef DEBUG_MAIN
	sprintf(Tx_Buffer,"\r\n--------SYNTAX:TRIGGERDMIDDLE-------\r\n");
 8001286:	4928      	ldr	r1, [pc, #160]	; (8001328 <main+0x2e0>)
 8001288:	481d      	ldr	r0, [pc, #116]	; (8001300 <main+0x2b8>)
 800128a:	f009 fe75 	bl	800af78 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Tx_Buffer,strlen(Tx_Buffer),1000);
 800128e:	481c      	ldr	r0, [pc, #112]	; (8001300 <main+0x2b8>)
 8001290:	f7fe ffc6 	bl	8000220 <strlen>
 8001294:	4603      	mov	r3, r0
 8001296:	b29a      	uxth	r2, r3
 8001298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129c:	4918      	ldr	r1, [pc, #96]	; (8001300 <main+0x2b8>)
 800129e:	4819      	ldr	r0, [pc, #100]	; (8001304 <main+0x2bc>)
 80012a0:	f006 fc10 	bl	8007ac4 <HAL_UART_Transmit>
#endif
	  }
//	  /*When the ADC trigger, it will run here */
	  if(CheckFlagADC == 1)
 80012a4:	4b21      	ldr	r3, [pc, #132]	; (800132c <main+0x2e4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	f47f aee6 	bne.w	800107a <main+0x32>
	  {
		  HAL_GPIO_TogglePin(TEST_ADC_GPIO_Port,TEST_ADC_Pin);
 80012ae:	2120      	movs	r1, #32
 80012b0:	481f      	ldr	r0, [pc, #124]	; (8001330 <main+0x2e8>)
 80012b2:	f004 fa49 	bl	8005748 <HAL_GPIO_TogglePin>
		  ADC_Variable[0] = USER_ADC_GetADCFilterValue(1); /*Get value from channel 1*/
 80012b6:	2001      	movs	r0, #1
 80012b8:	f008 fc46 	bl	8009b48 <USER_ADC_GetADCFilterValue>
 80012bc:	eef0 7a40 	vmov.f32	s15, s0
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <main+0x2d0>)
 80012c2:	edc3 7a00 	vstr	s15, [r3]
		  ADC_Variable[1] = USER_ADC_GetADCFilterValue(5); /*Get value from channel 5*/
 80012c6:	2005      	movs	r0, #5
 80012c8:	f008 fc3e 	bl	8009b48 <USER_ADC_GetADCFilterValue>
 80012cc:	eef0 7a40 	vmov.f32	s15, s0
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <main+0x2d0>)
 80012d2:	edc3 7a01 	vstr	s15, [r3, #4]
		  ADC_Variable[2] = USER_ADC_GetADCFilterValue(12); /*Get value from channel 12 - PB0*/
 80012d6:	200c      	movs	r0, #12
 80012d8:	f008 fc36 	bl	8009b48 <USER_ADC_GetADCFilterValue>
 80012dc:	eef0 7a40 	vmov.f32	s15, s0
 80012e0:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <main+0x2d0>)
 80012e2:	edc3 7a02 	vstr	s15, [r3, #8]

		 // HAL_GPIO_TogglePin(TEST_ADC_GPIO_Port,TEST_ADC_Pin);
		  USER_CALLBACK_DeInit();
 80012e6:	f008 fd59 	bl	8009d9c <USER_CALLBACK_DeInit>
	  if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETTIMER) !=NULL))
 80012ea:	e6c6      	b.n	800107a <main+0x32>
 80012ec:	200005be 	.word	0x200005be
 80012f0:	0800ed08 	.word	0x0800ed08
 80012f4:	200005a8 	.word	0x200005a8
 80012f8:	200004d8 	.word	0x200004d8
 80012fc:	0800ed10 	.word	0x0800ed10
 8001300:	20000500 	.word	0x20000500
 8001304:	20000448 	.word	0x20000448
 8001308:	0800ed84 	.word	0x0800ed84
 800130c:	200004e8 	.word	0x200004e8
 8001310:	0800ed88 	.word	0x0800ed88
 8001314:	0800edd0 	.word	0x0800edd0
 8001318:	200004f4 	.word	0x200004f4
 800131c:	0800eddc 	.word	0x0800eddc
 8001320:	0800ee2c 	.word	0x0800ee2c
 8001324:	200003fc 	.word	0x200003fc
 8001328:	0800ee3c 	.word	0x0800ee3c
 800132c:	200005bd 	.word	0x200005bd
 8001330:	48000400 	.word	0x48000400

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	; 0x50
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	2238      	movs	r2, #56	; 0x38
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f008 ff90 	bl	800a268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
 8001354:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001356:	f44f 7000 	mov.w	r0, #512	; 0x200
 800135a:	f004 fa0f 	bl	800577c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001368:	2340      	movs	r3, #64	; 0x40
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136c:	2302      	movs	r3, #2
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001370:	2302      	movs	r3, #2
 8001372:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001374:	2304      	movs	r3, #4
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001378:	234b      	movs	r3, #75	; 0x4b
 800137a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800137c:	2302      	movs	r3, #2
 800137e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001380:	2302      	movs	r3, #2
 8001382:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	4618      	mov	r0, r3
 800138e:	f004 faa9 	bl	80058e4 <HAL_RCC_OscConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001398:	f000 fb82 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139c:	230f      	movs	r3, #15
 800139e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a0:	2303      	movs	r3, #3
 80013a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2104      	movs	r1, #4
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 fdad 	bl	8005f14 <HAL_RCC_ClockConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80013c0:	f000 fb6e 	bl	8001aa0 <Error_Handler>
  }
}
 80013c4:	bf00      	nop
 80013c6:	3750      	adds	r7, #80	; 0x50
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08c      	sub	sp, #48	; 0x30
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]
 80013dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2220      	movs	r2, #32
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f008 ff3f 	bl	800a268 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ea:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <MX_ADC1_Init+0xec>)
 80013ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <MX_ADC1_Init+0xec>)
 80013f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013fa:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <MX_ADC1_Init+0xec>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <MX_ADC1_Init+0xec>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001406:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <MX_ADC1_Init+0xec>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MX_ADC1_Init+0xec>)
 800140e:	2200      	movs	r2, #0
 8001410:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <MX_ADC1_Init+0xec>)
 8001414:	2204      	movs	r2, #4
 8001416:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001418:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <MX_ADC1_Init+0xec>)
 800141a:	2200      	movs	r2, #0
 800141c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <MX_ADC1_Init+0xec>)
 8001420:	2200      	movs	r2, #0
 8001422:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <MX_ADC1_Init+0xec>)
 8001426:	2201      	movs	r2, #1
 8001428:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <MX_ADC1_Init+0xec>)
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_CC2;
 8001432:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <MX_ADC1_Init+0xec>)
 8001434:	f44f 628c 	mov.w	r2, #1120	; 0x460
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_ADC1_Init+0xec>)
 800143c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001440:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001442:	4b1d      	ldr	r3, [pc, #116]	; (80014b8 <MX_ADC1_Init+0xec>)
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800144a:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_ADC1_Init+0xec>)
 800144c:	2200      	movs	r2, #0
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_ADC1_Init+0xec>)
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001458:	4817      	ldr	r0, [pc, #92]	; (80014b8 <MX_ADC1_Init+0xec>)
 800145a:	f001 f96d 	bl	8002738 <HAL_ADC_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001464:	f000 fb1c 	bl	8001aa0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800146c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001470:	4619      	mov	r1, r3
 8001472:	4811      	ldr	r0, [pc, #68]	; (80014b8 <MX_ADC1_Init+0xec>)
 8001474:	f003 fa56 	bl	8004924 <HAL_ADCEx_MultiModeConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800147e:	f000 fb0f 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_ADC1_Init+0xf0>)
 8001484:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001486:	2306      	movs	r3, #6
 8001488:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800148e:	237f      	movs	r3, #127	; 0x7f
 8001490:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001492:	2304      	movs	r3, #4
 8001494:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	; (80014b8 <MX_ADC1_Init+0xec>)
 80014a0:	f001 fe5e 	bl	8003160 <HAL_ADC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80014aa:	f000 faf9 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3730      	adds	r7, #48	; 0x30
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2000020c 	.word	0x2000020c
 80014bc:	04300002 	.word	0x04300002

080014c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2220      	movs	r2, #32
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f008 fec5 	bl	800a268 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014de:	4b40      	ldr	r3, [pc, #256]	; (80015e0 <MX_ADC3_Init+0x120>)
 80014e0:	4a40      	ldr	r2, [pc, #256]	; (80015e4 <MX_ADC3_Init+0x124>)
 80014e2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80014e4:	4b3e      	ldr	r3, [pc, #248]	; (80015e0 <MX_ADC3_Init+0x120>)
 80014e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014ea:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014ec:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <MX_ADC3_Init+0x120>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <MX_ADC3_Init+0x120>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80014f8:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <MX_ADC3_Init+0x120>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014fe:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <MX_ADC3_Init+0x120>)
 8001500:	2201      	movs	r2, #1
 8001502:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001504:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <MX_ADC3_Init+0x120>)
 8001506:	2204      	movs	r2, #4
 8001508:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800150a:	4b35      	ldr	r3, [pc, #212]	; (80015e0 <MX_ADC3_Init+0x120>)
 800150c:	2200      	movs	r2, #0
 800150e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001510:	4b33      	ldr	r3, [pc, #204]	; (80015e0 <MX_ADC3_Init+0x120>)
 8001512:	2200      	movs	r2, #0
 8001514:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 3;
 8001516:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <MX_ADC3_Init+0x120>)
 8001518:	2203      	movs	r2, #3
 800151a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <MX_ADC3_Init+0x120>)
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_CC1;
 8001524:	4b2e      	ldr	r3, [pc, #184]	; (80015e0 <MX_ADC3_Init+0x120>)
 8001526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800152c:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <MX_ADC3_Init+0x120>)
 800152e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001532:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001534:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <MX_ADC3_Init+0x120>)
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <MX_ADC3_Init+0x120>)
 800153e:	2200      	movs	r2, #0
 8001540:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001542:	4b27      	ldr	r3, [pc, #156]	; (80015e0 <MX_ADC3_Init+0x120>)
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800154a:	4825      	ldr	r0, [pc, #148]	; (80015e0 <MX_ADC3_Init+0x120>)
 800154c:	f001 f8f4 	bl	8002738 <HAL_ADC_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8001556:	f000 faa3 	bl	8001aa0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800155e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001562:	4619      	mov	r1, r3
 8001564:	481e      	ldr	r0, [pc, #120]	; (80015e0 <MX_ADC3_Init+0x120>)
 8001566:	f003 f9dd 	bl	8004924 <HAL_ADCEx_MultiModeConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001570:	f000 fa96 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001574:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MX_ADC3_Init+0x128>)
 8001576:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001578:	2306      	movs	r3, #6
 800157a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001580:	237f      	movs	r3, #127	; 0x7f
 8001582:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001584:	2304      	movs	r3, #4
 8001586:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	4619      	mov	r1, r3
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <MX_ADC3_Init+0x120>)
 8001592:	f001 fde5 	bl	8003160 <HAL_ADC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 800159c:	f000 fa80 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MX_ADC3_Init+0x12c>)
 80015a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015a4:	230c      	movs	r3, #12
 80015a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	4619      	mov	r1, r3
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <MX_ADC3_Init+0x120>)
 80015ae:	f001 fdd7 	bl	8003160 <HAL_ADC_ConfigChannel>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_ADC3_Init+0xfc>
  {
    Error_Handler();
 80015b8:	f000 fa72 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_ADC3_Init+0x130>)
 80015be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015c0:	2312      	movs	r3, #18
 80015c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_ADC3_Init+0x120>)
 80015ca:	f001 fdc9 	bl	8003160 <HAL_ADC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC3_Init+0x118>
  {
    Error_Handler();
 80015d4:	f000 fa64 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	3730      	adds	r7, #48	; 0x30
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000278 	.word	0x20000278
 80015e4:	50000400 	.word	0x50000400
 80015e8:	04300002 	.word	0x04300002
 80015ec:	14f00020 	.word	0x14f00020
 80015f0:	32601000 	.word	0x32601000

080015f4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b098      	sub	sp, #96	; 0x60
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015fe:	2220      	movs	r2, #32
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f008 fe30 	bl	800a268 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001608:	1d3b      	adds	r3, r7, #4
 800160a:	223c      	movs	r2, #60	; 0x3c
 800160c:	2100      	movs	r1, #0
 800160e:	4618      	mov	r0, r3
 8001610:	f008 fe2a 	bl	800a268 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001614:	4b43      	ldr	r3, [pc, #268]	; (8001724 <MX_ADC4_Init+0x130>)
 8001616:	4a44      	ldr	r2, [pc, #272]	; (8001728 <MX_ADC4_Init+0x134>)
 8001618:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800161a:	4b42      	ldr	r3, [pc, #264]	; (8001724 <MX_ADC4_Init+0x130>)
 800161c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001620:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001622:	4b40      	ldr	r3, [pc, #256]	; (8001724 <MX_ADC4_Init+0x130>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001628:	4b3e      	ldr	r3, [pc, #248]	; (8001724 <MX_ADC4_Init+0x130>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800162e:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <MX_ADC4_Init+0x130>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001634:	4b3b      	ldr	r3, [pc, #236]	; (8001724 <MX_ADC4_Init+0x130>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800163a:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <MX_ADC4_Init+0x130>)
 800163c:	2204      	movs	r2, #4
 800163e:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001640:	4b38      	ldr	r3, [pc, #224]	; (8001724 <MX_ADC4_Init+0x130>)
 8001642:	2200      	movs	r2, #0
 8001644:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001646:	4b37      	ldr	r3, [pc, #220]	; (8001724 <MX_ADC4_Init+0x130>)
 8001648:	2200      	movs	r2, #0
 800164a:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800164c:	4b35      	ldr	r3, [pc, #212]	; (8001724 <MX_ADC4_Init+0x130>)
 800164e:	2201      	movs	r2, #1
 8001650:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001652:	4b34      	ldr	r3, [pc, #208]	; (8001724 <MX_ADC4_Init+0x130>)
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800165a:	4b32      	ldr	r3, [pc, #200]	; (8001724 <MX_ADC4_Init+0x130>)
 800165c:	2200      	movs	r2, #0
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001660:	4b30      	ldr	r3, [pc, #192]	; (8001724 <MX_ADC4_Init+0x130>)
 8001662:	2200      	movs	r2, #0
 8001664:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001666:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <MX_ADC4_Init+0x130>)
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800166e:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <MX_ADC4_Init+0x130>)
 8001670:	2200      	movs	r2, #0
 8001672:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <MX_ADC4_Init+0x130>)
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800167c:	4829      	ldr	r0, [pc, #164]	; (8001724 <MX_ADC4_Init+0x130>)
 800167e:	f001 f85b 	bl	8002738 <HAL_ADC_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8001688:	f000 fa0a 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800168c:	4b27      	ldr	r3, [pc, #156]	; (800172c <MX_ADC4_Init+0x138>)
 800168e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001690:	2306      	movs	r3, #6
 8001692:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001694:	2300      	movs	r3, #0
 8001696:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001698:	237f      	movs	r3, #127	; 0x7f
 800169a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800169c:	2304      	movs	r3, #4
 800169e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.Offset = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80016a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016a8:	4619      	mov	r1, r3
 80016aa:	481e      	ldr	r0, [pc, #120]	; (8001724 <MX_ADC4_Init+0x130>)
 80016ac:	f001 fd58 	bl	8003160 <HAL_ADC_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_ADC4_Init+0xc6>
  {
    Error_Handler();
 80016b6:	f000 f9f3 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_ADC4_Init+0x138>)
 80016bc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80016be:	2309      	movs	r3, #9
 80016c0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80016c6:	237f      	movs	r3, #127	; 0x7f
 80016c8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80016ca:	2304      	movs	r3, #4
 80016cc:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T3_TRGO;
 80016e8:	23b0      	movs	r3, #176	; 0xb0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	480a      	ldr	r0, [pc, #40]	; (8001724 <MX_ADC4_Init+0x130>)
 80016fc:	f002 fbe6 	bl	8003ecc <HAL_ADCEx_InjectedConfigChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_ADC4_Init+0x116>
  {
    Error_Handler();
 8001706:	f000 f9cb 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_ADCEx_EnableInjectedQueue(&hadc4) != HAL_OK)
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_ADC4_Init+0x130>)
 800170c:	f003 fa12 	bl	8004b34 <HAL_ADCEx_EnableInjectedQueue>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_ADC4_Init+0x126>
  {
    Error_Handler();
 8001716:	f000 f9c3 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3760      	adds	r7, #96	; 0x60
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200002e4 	.word	0x200002e4
 8001728:	50000500 	.word	0x50000500
 800172c:	0c900008 	.word	0x0c900008

08001730 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08e      	sub	sp, #56	; 0x38
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001750:	463b      	mov	r3, r7
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001762:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <MX_TIM2_Init+0xe8>)
 8001764:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001768:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 800176a:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <MX_TIM2_Init+0xe8>)
 800176c:	2209      	movs	r2, #9
 800176e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <MX_TIM2_Init+0xe8>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 149;
 8001776:	4b28      	ldr	r3, [pc, #160]	; (8001818 <MX_TIM2_Init+0xe8>)
 8001778:	2295      	movs	r2, #149	; 0x95
 800177a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b26      	ldr	r3, [pc, #152]	; (8001818 <MX_TIM2_Init+0xe8>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b25      	ldr	r3, [pc, #148]	; (8001818 <MX_TIM2_Init+0xe8>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001788:	4823      	ldr	r0, [pc, #140]	; (8001818 <MX_TIM2_Init+0xe8>)
 800178a:	f005 f82d 	bl	80067e8 <HAL_TIM_Base_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001794:	f000 f984 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800179e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017a2:	4619      	mov	r1, r3
 80017a4:	481c      	ldr	r0, [pc, #112]	; (8001818 <MX_TIM2_Init+0xe8>)
 80017a6:	f005 fafd 	bl	8006da4 <HAL_TIM_ConfigClockSource>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017b0:	f000 f976 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017b4:	4818      	ldr	r0, [pc, #96]	; (8001818 <MX_TIM2_Init+0xe8>)
 80017b6:	f005 f86e 	bl	8006896 <HAL_TIM_PWM_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017c0:	f000 f96e 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017c4:	2320      	movs	r3, #32
 80017c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	4811      	ldr	r0, [pc, #68]	; (8001818 <MX_TIM2_Init+0xe8>)
 80017d4:	f006 f890 	bl	80078f8 <HAL_TIMEx_MasterConfigSynchronization>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80017de:	f000 f95f 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e2:	2360      	movs	r3, #96	; 0x60
 80017e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017f2:	463b      	mov	r3, r7
 80017f4:	2204      	movs	r2, #4
 80017f6:	4619      	mov	r1, r3
 80017f8:	4807      	ldr	r0, [pc, #28]	; (8001818 <MX_TIM2_Init+0xe8>)
 80017fa:	f005 f9bf 	bl	8006b7c <HAL_TIM_PWM_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001804:	f000 f94c 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001808:	4803      	ldr	r0, [pc, #12]	; (8001818 <MX_TIM2_Init+0xe8>)
 800180a:	f000 fabf 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 800180e:	bf00      	nop
 8001810:	3738      	adds	r7, #56	; 0x38
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200003b0 	.word	0x200003b0

0800181c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08e      	sub	sp, #56	; 0x38
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]
 800184a:	615a      	str	r2, [r3, #20]
 800184c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <MX_TIM3_Init+0xfc>)
 8001850:	4a32      	ldr	r2, [pc, #200]	; (800191c <MX_TIM3_Init+0x100>)
 8001852:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001854:	4b30      	ldr	r3, [pc, #192]	; (8001918 <MX_TIM3_Init+0xfc>)
 8001856:	2209      	movs	r2, #9
 8001858:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185a:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <MX_TIM3_Init+0xfc>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 149;
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <MX_TIM3_Init+0xfc>)
 8001862:	2295      	movs	r2, #149	; 0x95
 8001864:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001866:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <MX_TIM3_Init+0xfc>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800186c:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <MX_TIM3_Init+0xfc>)
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001872:	4829      	ldr	r0, [pc, #164]	; (8001918 <MX_TIM3_Init+0xfc>)
 8001874:	f004 ffb8 	bl	80067e8 <HAL_TIM_Base_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800187e:	f000 f90f 	bl	8001aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001888:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188c:	4619      	mov	r1, r3
 800188e:	4822      	ldr	r0, [pc, #136]	; (8001918 <MX_TIM3_Init+0xfc>)
 8001890:	f005 fa88 	bl	8006da4 <HAL_TIM_ConfigClockSource>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800189a:	f000 f901 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800189e:	481e      	ldr	r0, [pc, #120]	; (8001918 <MX_TIM3_Init+0xfc>)
 80018a0:	f004 fff9 	bl	8006896 <HAL_TIM_PWM_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018aa:	f000 f8f9 	bl	8001aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018ae:	2320      	movs	r3, #32
 80018b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4816      	ldr	r0, [pc, #88]	; (8001918 <MX_TIM3_Init+0xfc>)
 80018be:	f006 f81b 	bl	80078f8 <HAL_TIMEx_MasterConfigSynchronization>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80018c8:	f000 f8ea 	bl	8001aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018cc:	2360      	movs	r3, #96	; 0x60
 80018ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	4619      	mov	r1, r3
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_TIM3_Init+0xfc>)
 80018e4:	f005 f94a 	bl	8006b7c <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80018ee:	f000 f8d7 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018f2:	463b      	mov	r3, r7
 80018f4:	2204      	movs	r2, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <MX_TIM3_Init+0xfc>)
 80018fa:	f005 f93f 	bl	8006b7c <HAL_TIM_PWM_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001904:	f000 f8cc 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <MX_TIM3_Init+0xfc>)
 800190a:	f000 fa3f 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 800190e:	bf00      	nop
 8001910:	3738      	adds	r7, #56	; 0x38
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200003fc 	.word	0x200003fc
 800191c:	40000400 	.word	0x40000400

08001920 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 8001926:	4a23      	ldr	r2, [pc, #140]	; (80019b4 <MX_USART2_UART_Init+0x94>)
 8001928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 800192c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001932:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001968:	4811      	ldr	r0, [pc, #68]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 800196a:	f006 f85b 	bl	8007a24 <HAL_UART_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001974:	f000 f894 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001978:	2100      	movs	r1, #0
 800197a:	480d      	ldr	r0, [pc, #52]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 800197c:	f007 fffd 	bl	800997a <HAL_UARTEx_SetTxFifoThreshold>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001986:	f000 f88b 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800198a:	2100      	movs	r1, #0
 800198c:	4808      	ldr	r0, [pc, #32]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 800198e:	f008 f832 	bl	80099f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001998:	f000 f882 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800199c:	4804      	ldr	r0, [pc, #16]	; (80019b0 <MX_USART2_UART_Init+0x90>)
 800199e:	f007 ffb3 	bl	8009908 <HAL_UARTEx_DisableFifoMode>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80019a8:	f000 f87a 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000448 	.word	0x20000448
 80019b4:	40004400 	.word	0x40004400

080019b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <MX_DMA_Init+0x50>)
 80019c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019c2:	4a11      	ldr	r2, [pc, #68]	; (8001a08 <MX_DMA_Init+0x50>)
 80019c4:	f043 0304 	orr.w	r3, r3, #4
 80019c8:	6493      	str	r3, [r2, #72]	; 0x48
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MX_DMA_Init+0x50>)
 80019cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_DMA_Init+0x50>)
 80019d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <MX_DMA_Init+0x50>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6493      	str	r3, [r2, #72]	; 0x48
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_DMA_Init+0x50>)
 80019e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	200b      	movs	r0, #11
 80019f4:	f003 f9a7 	bl	8004d46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019f8:	200b      	movs	r0, #11
 80019fa:	f003 f9be 	bl	8004d7a <HAL_NVIC_EnableIRQ>

}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40021000 	.word	0x40021000

08001a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	4a1c      	ldr	r2, [pc, #112]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60bb      	str	r3, [r7, #8]
 8001a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a3e:	4a16      	ldr	r2, [pc, #88]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_GPIO_Init+0x8c>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_ADC_GPIO_Port, TEST_ADC_Pin, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	480b      	ldr	r0, [pc, #44]	; (8001a9c <MX_GPIO_Init+0x90>)
 8001a70:	f003 fe52 	bl	8005718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_ADC_Pin */
  GPIO_InitStruct.Pin = TEST_ADC_Pin;
 8001a74:	2320      	movs	r3, #32
 8001a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST_ADC_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4804      	ldr	r0, [pc, #16]	; (8001a9c <MX_GPIO_Init+0x90>)
 8001a8c:	f003 fcc2 	bl	8005414 <HAL_GPIO_Init>

}
 8001a90:	bf00      	nop
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	48000400 	.word	0x48000400

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <Error_Handler+0x8>
	...

08001aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6613      	str	r3, [r2, #96]	; 0x60
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_MspInit+0x44>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x44>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ae2:	f003 feef 	bl	80058c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b0a2      	sub	sp, #136	; 0x88
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b0c:	f107 0320 	add.w	r3, r7, #32
 8001b10:	2254      	movs	r2, #84	; 0x54
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f008 fba7 	bl	800a268 <memset>
  if(hadc->Instance==ADC1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b22:	d13d      	bne.n	8001ba0 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001b24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b28:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001b2a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b2e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b30:	f107 0320 	add.w	r3, r7, #32
 8001b34:	4618      	mov	r0, r3
 8001b36:	f004 fc09 	bl	800634c <HAL_RCCEx_PeriphCLKConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001b40:	f7ff ffae 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b44:	4b71      	ldr	r3, [pc, #452]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b48:	4a70      	ldr	r2, [pc, #448]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001b4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b50:	4b6e      	ldr	r3, [pc, #440]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5c:	4b6b      	ldr	r3, [pc, #428]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	4a6a      	ldr	r2, [pc, #424]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b68:	4b68      	ldr	r3, [pc, #416]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	61bb      	str	r3, [r7, #24]
 8001b72:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b74:	2301      	movs	r3, #1
 8001b76:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8a:	f003 fc43 	bl	8005414 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	2012      	movs	r0, #18
 8001b94:	f003 f8d7 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b98:	2012      	movs	r0, #18
 8001b9a:	f003 f8ee 	bl	8004d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001b9e:	e0b1      	b.n	8001d04 <HAL_ADC_MspInit+0x210>
  else if(hadc->Instance==ADC3)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a5a      	ldr	r2, [pc, #360]	; (8001d10 <HAL_ADC_MspInit+0x21c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d169      	bne.n	8001c7e <HAL_ADC_MspInit+0x18a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001baa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bae:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001bb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001bb4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb6:	f107 0320 	add.w	r3, r7, #32
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f004 fbc6 	bl	800634c <HAL_RCCEx_PeriphCLKConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 8001bc6:	f7ff ff6b 	bl	8001aa0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001bca:	4b52      	ldr	r3, [pc, #328]	; (8001d14 <HAL_ADC_MspInit+0x220>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	4a50      	ldr	r2, [pc, #320]	; (8001d14 <HAL_ADC_MspInit+0x220>)
 8001bd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001bd4:	4b4f      	ldr	r3, [pc, #316]	; (8001d14 <HAL_ADC_MspInit+0x220>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10b      	bne.n	8001bf4 <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001bdc:	4b4b      	ldr	r3, [pc, #300]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	4a4a      	ldr	r2, [pc, #296]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be8:	4b48      	ldr	r3, [pc, #288]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf4:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf8:	4a44      	ldr	r2, [pc, #272]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001bfa:	f043 0302 	orr.w	r3, r3, #2
 8001bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c00:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 8001c0c:	f242 0303 	movw	r3, #8195	; 0x2003
 8001c10:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c12:	2303      	movs	r3, #3
 8001c14:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c1e:	4619      	mov	r1, r3
 8001c20:	483d      	ldr	r0, [pc, #244]	; (8001d18 <HAL_ADC_MspInit+0x224>)
 8001c22:	f003 fbf7 	bl	8005414 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8001c26:	4b3d      	ldr	r3, [pc, #244]	; (8001d1c <HAL_ADC_MspInit+0x228>)
 8001c28:	4a3d      	ldr	r2, [pc, #244]	; (8001d20 <HAL_ADC_MspInit+0x22c>)
 8001c2a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001c2c:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <HAL_ADC_MspInit+0x228>)
 8001c2e:	2225      	movs	r2, #37	; 0x25
 8001c30:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c32:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <HAL_ADC_MspInit+0x228>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c38:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <HAL_ADC_MspInit+0x228>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001c3e:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <HAL_ADC_MspInit+0x228>)
 8001c40:	2280      	movs	r2, #128	; 0x80
 8001c42:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c44:	4b35      	ldr	r3, [pc, #212]	; (8001d1c <HAL_ADC_MspInit+0x228>)
 8001c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c4c:	4b33      	ldr	r3, [pc, #204]	; (8001d1c <HAL_ADC_MspInit+0x228>)
 8001c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c52:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_ADC_MspInit+0x228>)
 8001c56:	2220      	movs	r2, #32
 8001c58:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001c5a:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_ADC_MspInit+0x228>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001c60:	482e      	ldr	r0, [pc, #184]	; (8001d1c <HAL_ADC_MspInit+0x228>)
 8001c62:	f003 f8a5 	bl	8004db0 <HAL_DMA_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <HAL_ADC_MspInit+0x17c>
      Error_Handler();
 8001c6c:	f7ff ff18 	bl	8001aa0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a2a      	ldr	r2, [pc, #168]	; (8001d1c <HAL_ADC_MspInit+0x228>)
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
 8001c76:	4a29      	ldr	r2, [pc, #164]	; (8001d1c <HAL_ADC_MspInit+0x228>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001c7c:	e042      	b.n	8001d04 <HAL_ADC_MspInit+0x210>
  else if(hadc->Instance==ADC4)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a28      	ldr	r2, [pc, #160]	; (8001d24 <HAL_ADC_MspInit+0x230>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d13d      	bne.n	8001d04 <HAL_ADC_MspInit+0x210>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001c8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c92:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c94:	f107 0320 	add.w	r3, r7, #32
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f004 fb57 	bl	800634c <HAL_RCCEx_PeriphCLKConfig>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 8001ca4:	f7ff fefc 	bl	8001aa0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_ADC_MspInit+0x220>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_ADC_MspInit+0x220>)
 8001cb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001cb2:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <HAL_ADC_MspInit+0x220>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_ADC_MspInit+0x1de>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	4a13      	ldr	r2, [pc, #76]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001cc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cce:	60fb      	str	r3, [r7, #12]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_ADC_MspInit+0x218>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cee:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <HAL_ADC_MspInit+0x224>)
 8001d00:	f003 fb88 	bl	8005414 <HAL_GPIO_Init>
}
 8001d04:	bf00      	nop
 8001d06:	3788      	adds	r7, #136	; 0x88
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	50000400 	.word	0x50000400
 8001d14:	20000598 	.word	0x20000598
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	20000350 	.word	0x20000350
 8001d20:	40020008 	.word	0x40020008
 8001d24:	50000500 	.word	0x50000500

08001d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d38:	d10c      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_TIM_Base_MspInit+0x5c>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	4a11      	ldr	r2, [pc, #68]	; (8001d84 <HAL_TIM_Base_MspInit+0x5c>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_TIM_Base_MspInit+0x5c>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d52:	e010      	b.n	8001d76 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <HAL_TIM_Base_MspInit+0x60>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d10b      	bne.n	8001d76 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_TIM_Base_MspInit+0x5c>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_TIM_Base_MspInit+0x5c>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6593      	str	r3, [r2, #88]	; 0x58
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_TIM_Base_MspInit+0x5c>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40000400 	.word	0x40000400

08001d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dac:	d11d      	bne.n	8001dea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <HAL_TIM_MspPostInit+0xe0>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db2:	4a2e      	ldr	r2, [pc, #184]	; (8001e6c <HAL_TIM_MspPostInit+0xe0>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dba:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <HAL_TIM_MspPostInit+0xe0>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	f107 0314 	add.w	r3, r7, #20
 8001dde:	4619      	mov	r1, r3
 8001de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de4:	f003 fb16 	bl	8005414 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001de8:	e03c      	b.n	8001e64 <HAL_TIM_MspPostInit+0xd8>
  else if(htim->Instance==TIM3)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <HAL_TIM_MspPostInit+0xe4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d137      	bne.n	8001e64 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_TIM_MspPostInit+0xe0>)
 8001df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df8:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_TIM_MspPostInit+0xe0>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <HAL_TIM_MspPostInit+0xe0>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <HAL_TIM_MspPostInit+0xe0>)
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e10:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <HAL_TIM_MspPostInit+0xe0>)
 8001e12:	f043 0302 	orr.w	r3, r3, #2
 8001e16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e18:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_TIM_MspPostInit+0xe0>)
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e34:	2302      	movs	r3, #2
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480d      	ldr	r0, [pc, #52]	; (8001e74 <HAL_TIM_MspPostInit+0xe8>)
 8001e40:	f003 fae8 	bl	8005414 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e44:	2310      	movs	r3, #16
 8001e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e54:	2302      	movs	r3, #2
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4806      	ldr	r0, [pc, #24]	; (8001e78 <HAL_TIM_MspPostInit+0xec>)
 8001e60:	f003 fad8 	bl	8005414 <HAL_GPIO_Init>
}
 8001e64:	bf00      	nop
 8001e66:	3728      	adds	r7, #40	; 0x28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40000400 	.word	0x40000400
 8001e74:	48000800 	.word	0x48000800
 8001e78:	48000400 	.word	0x48000400

08001e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b09e      	sub	sp, #120	; 0x78
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	2254      	movs	r2, #84	; 0x54
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f008 f9e3 	bl	800a268 <memset>
  if(huart->Instance==USART2)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <HAL_UART_MspInit+0xb8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d13e      	bne.n	8001f2a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f004 fa47 	bl	800634c <HAL_RCCEx_PeriphCLKConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ec4:	f7ff fdec 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_UART_MspInit+0xbc>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	4a1a      	ldr	r2, [pc, #104]	; (8001f38 <HAL_UART_MspInit+0xbc>)
 8001ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <HAL_UART_MspInit+0xbc>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_UART_MspInit+0xbc>)
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <HAL_UART_MspInit+0xbc>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_UART_MspInit+0xbc>)
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ef8:	230c      	movs	r3, #12
 8001efa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f10:	4619      	mov	r1, r3
 8001f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f16:	f003 fa7d 	bl	8005414 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2026      	movs	r0, #38	; 0x26
 8001f20:	f002 ff11 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f24:	2026      	movs	r0, #38	; 0x26
 8001f26:	f002 ff28 	bl	8004d7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3778      	adds	r7, #120	; 0x78
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40004400 	.word	0x40004400
 8001f38:	40021000 	.word	0x40021000

08001f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <NMI_Handler+0x4>

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <MemManage_Handler+0x4>

08001f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f88:	f000 f974 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <DMA1_Channel1_IRQHandler+0x10>)
 8001f96:	f003 f8ee 	bl	8005176 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000350 	.word	0x20000350

08001fa4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <ADC1_2_IRQHandler+0x10>)
 8001faa:	f000 fe5b 	bl	8002c64 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000020c 	.word	0x2000020c

08001fb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <USART2_IRQHandler+0x10>)
 8001fbe:	f005 fe6d 	bl	8007c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000448 	.word	0x20000448

08001fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
	return 1;
 8001fd0:	2301      	movs	r3, #1
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <_kill>:

int _kill(int pid, int sig)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fe6:	f008 f907 	bl	800a1f8 <__errno>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2216      	movs	r2, #22
 8001fee:	601a      	str	r2, [r3, #0]
	return -1;
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_exit>:

void _exit (int status)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002004:	f04f 31ff 	mov.w	r1, #4294967295
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ffe7 	bl	8001fdc <_kill>
	while (1) {}		/* Make sure we hang here */
 800200e:	e7fe      	b.n	800200e <_exit+0x12>

08002010 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e00a      	b.n	8002038 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002022:	f3af 8000 	nop.w
 8002026:	4601      	mov	r1, r0
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	60ba      	str	r2, [r7, #8]
 800202e:	b2ca      	uxtb	r2, r1
 8002030:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	429a      	cmp	r2, r3
 800203e:	dbf0      	blt.n	8002022 <_read+0x12>
	}

return len;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	e009      	b.n	8002070 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbf1      	blt.n	800205c <_write+0x12>
	}
	return len;
 8002078:	687b      	ldr	r3, [r7, #4]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_close>:

int _close(int file)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020aa:	605a      	str	r2, [r3, #4]
	return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_isatty>:

int _isatty(int file)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	return 1;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f4:	4a14      	ldr	r2, [pc, #80]	; (8002148 <_sbrk+0x5c>)
 80020f6:	4b15      	ldr	r3, [pc, #84]	; (800214c <_sbrk+0x60>)
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002100:	4b13      	ldr	r3, [pc, #76]	; (8002150 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d102      	bne.n	800210e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <_sbrk+0x64>)
 800210a:	4a12      	ldr	r2, [pc, #72]	; (8002154 <_sbrk+0x68>)
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <_sbrk+0x64>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	429a      	cmp	r2, r3
 800211a:	d207      	bcs.n	800212c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800211c:	f008 f86c 	bl	800a1f8 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	220c      	movs	r2, #12
 8002124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e009      	b.n	8002140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <_sbrk+0x64>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	4a05      	ldr	r2, [pc, #20]	; (8002150 <_sbrk+0x64>)
 800213c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213e:	68fb      	ldr	r3, [r7, #12]
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20020000 	.word	0x20020000
 800214c:	00000400 	.word	0x00000400
 8002150:	2000059c 	.word	0x2000059c
 8002154:	200005f0 	.word	0x200005f0

08002158 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <SystemInit+0x20>)
 800215e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <SystemInit+0x20>)
 8002164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002168:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800216c:	bf00      	nop
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800217e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002180:	480d      	ldr	r0, [pc, #52]	; (80021b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002182:	490e      	ldr	r1, [pc, #56]	; (80021bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002184:	4a0e      	ldr	r2, [pc, #56]	; (80021c0 <LoopForever+0xe>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002198:	4c0b      	ldr	r4, [pc, #44]	; (80021c8 <LoopForever+0x16>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021a6:	f7ff ffd7 	bl	8002158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021aa:	f008 f82b 	bl	800a204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ae:	f7fe ff4b 	bl	8001048 <main>

080021b2 <LoopForever>:

LoopForever:
    b LoopForever
 80021b2:	e7fe      	b.n	80021b2 <LoopForever>
  ldr   r0, =_estack
 80021b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80021c0:	0800f3c0 	.word	0x0800f3c0
  ldr r2, =_sbss
 80021c4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80021c8:	200005f0 	.word	0x200005f0

080021cc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC3_IRQHandler>

080021ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d8:	2003      	movs	r0, #3
 80021da:	f002 fda9 	bl	8004d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021de:	200f      	movs	r0, #15
 80021e0:	f000 f80e 	bl	8002200 <HAL_InitTick>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	71fb      	strb	r3, [r7, #7]
 80021ee:	e001      	b.n	80021f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021f0:	f7ff fc5c 	bl	8001aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021f4:	79fb      	ldrb	r3, [r7, #7]

}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_InitTick+0x68>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d022      	beq.n	800225a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <HAL_InitTick+0x6c>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_InitTick+0x68>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002220:	fbb1 f3f3 	udiv	r3, r1, r3
 8002224:	fbb2 f3f3 	udiv	r3, r2, r3
 8002228:	4618      	mov	r0, r3
 800222a:	f002 fdb4 	bl	8004d96 <HAL_SYSTICK_Config>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10f      	bne.n	8002254 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b0f      	cmp	r3, #15
 8002238:	d809      	bhi.n	800224e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800223a:	2200      	movs	r2, #0
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	f04f 30ff 	mov.w	r0, #4294967295
 8002242:	f002 fd80 	bl	8004d46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_InitTick+0x70>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	e007      	b.n	800225e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	e004      	b.n	800225e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e001      	b.n	800225e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000008 	.word	0x20000008
 800226c:	20000000 	.word	0x20000000
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_IncTick+0x1c>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_IncTick+0x20>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4413      	add	r3, r2
 8002282:	4a03      	ldr	r2, [pc, #12]	; (8002290 <HAL_IncTick+0x1c>)
 8002284:	6013      	str	r3, [r2, #0]
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	200005a0 	.word	0x200005a0
 8002294:	20000008 	.word	0x20000008

08002298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b03      	ldr	r3, [pc, #12]	; (80022ac <HAL_GetTick+0x14>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	200005a0 	.word	0x200005a0

080022b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	3360      	adds	r3, #96	; 0x60
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <LL_ADC_SetOffset+0x44>)
 800233a:	4013      	ands	r3, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	4313      	orrs	r3, r2
 8002348:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002350:	bf00      	nop
 8002352:	371c      	adds	r7, #28
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	03fff000 	.word	0x03fff000

08002360 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3360      	adds	r3, #96	; 0x60
 800236e:	461a      	mov	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002380:	4618      	mov	r0, r3
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3360      	adds	r3, #96	; 0x60
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	431a      	orrs	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b087      	sub	sp, #28
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3360      	adds	r3, #96	; 0x60
 80023d2:	461a      	mov	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023ec:	bf00      	nop
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3360      	adds	r3, #96	; 0x60
 8002408:	461a      	mov	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	615a      	str	r2, [r3, #20]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800247a:	b480      	push	{r7}
 800247c:	b087      	sub	sp, #28
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3330      	adds	r3, #48	; 0x30
 800248a:	461a      	mov	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	4413      	add	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	f003 031f 	and.w	r3, r3, #31
 80024a4:	211f      	movs	r1, #31
 80024a6:	fa01 f303 	lsl.w	r3, r1, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	401a      	ands	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	0e9b      	lsrs	r3, r3, #26
 80024b2:	f003 011f 	and.w	r1, r3, #31
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	431a      	orrs	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024c6:	bf00      	nop
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	3314      	adds	r3, #20
 8002508:	461a      	mov	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	0e5b      	lsrs	r3, r3, #25
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	4413      	add	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	0d1b      	lsrs	r3, r3, #20
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	2107      	movs	r1, #7
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	401a      	ands	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	0d1b      	lsrs	r3, r3, #20
 8002532:	f003 031f 	and.w	r3, r3, #31
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	fa01 f303 	lsl.w	r3, r1, r3
 800253c:	431a      	orrs	r2, r3
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002542:	bf00      	nop
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a0f      	ldr	r2, [pc, #60]	; (800259c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d10a      	bne.n	800257a <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002578:	e00a      	b.n	8002590 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002586:	43db      	mvns	r3, r3
 8002588:	401a      	ands	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	407f0000 	.word	0x407f0000

080025a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 031f 	and.w	r3, r3, #31
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80025e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6093      	str	r3, [r2, #8]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800260c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002610:	d101      	bne.n	8002616 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002638:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002660:	d101      	bne.n	8002666 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002684:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002688:	f043 0201 	orr.w	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <LL_ADC_IsEnabled+0x18>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <LL_ADC_IsEnabled+0x1a>
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026d6:	f043 0204 	orr.w	r2, r3, #4
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d101      	bne.n	8002702 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 0308 	and.w	r3, r3, #8
 8002720:	2b08      	cmp	r3, #8
 8002722:	d101      	bne.n	8002728 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002724:	2301      	movs	r3, #1
 8002726:	e000      	b.n	800272a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002744:	2300      	movs	r3, #0
 8002746:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e1af      	b.n	8002ab2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d109      	bne.n	8002774 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff f9c7 	bl	8001af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff3f 	bl	80025fc <LL_ADC_IsDeepPowerDownEnabled>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d004      	beq.n	800278e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff ff25 	bl	80025d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff ff5a 	bl	800264c <LL_ADC_IsInternalRegulatorEnabled>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d115      	bne.n	80027ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff3e 	bl	8002624 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027a8:	4b9f      	ldr	r3, [pc, #636]	; (8002a28 <HAL_ADC_Init+0x2f0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	099b      	lsrs	r3, r3, #6
 80027ae:	4a9f      	ldr	r2, [pc, #636]	; (8002a2c <HAL_ADC_Init+0x2f4>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	3301      	adds	r3, #1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027bc:	e002      	b.n	80027c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f9      	bne.n	80027be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff3c 	bl	800264c <LL_ADC_IsInternalRegulatorEnabled>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10d      	bne.n	80027f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027de:	f043 0210 	orr.w	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff ff75 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 8002800:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	f003 0310 	and.w	r3, r3, #16
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 8148 	bne.w	8002aa0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 8144 	bne.w	8002aa0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002820:	f043 0202 	orr.w	r2, r3, #2
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff35 	bl	800269c <LL_ADC_IsEnabled>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d141      	bne.n	80028bc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002840:	d004      	beq.n	800284c <HAL_ADC_Init+0x114>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a7a      	ldr	r2, [pc, #488]	; (8002a30 <HAL_ADC_Init+0x2f8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d10f      	bne.n	800286c <HAL_ADC_Init+0x134>
 800284c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002850:	f7ff ff24 	bl	800269c <LL_ADC_IsEnabled>
 8002854:	4604      	mov	r4, r0
 8002856:	4876      	ldr	r0, [pc, #472]	; (8002a30 <HAL_ADC_Init+0x2f8>)
 8002858:	f7ff ff20 	bl	800269c <LL_ADC_IsEnabled>
 800285c:	4603      	mov	r3, r0
 800285e:	4323      	orrs	r3, r4
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e012      	b.n	8002892 <HAL_ADC_Init+0x15a>
 800286c:	4871      	ldr	r0, [pc, #452]	; (8002a34 <HAL_ADC_Init+0x2fc>)
 800286e:	f7ff ff15 	bl	800269c <LL_ADC_IsEnabled>
 8002872:	4604      	mov	r4, r0
 8002874:	4870      	ldr	r0, [pc, #448]	; (8002a38 <HAL_ADC_Init+0x300>)
 8002876:	f7ff ff11 	bl	800269c <LL_ADC_IsEnabled>
 800287a:	4603      	mov	r3, r0
 800287c:	431c      	orrs	r4, r3
 800287e:	486f      	ldr	r0, [pc, #444]	; (8002a3c <HAL_ADC_Init+0x304>)
 8002880:	f7ff ff0c 	bl	800269c <LL_ADC_IsEnabled>
 8002884:	4603      	mov	r3, r0
 8002886:	4323      	orrs	r3, r4
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800289e:	d004      	beq.n	80028aa <HAL_ADC_Init+0x172>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a62      	ldr	r2, [pc, #392]	; (8002a30 <HAL_ADC_Init+0x2f8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_Init+0x176>
 80028aa:	4a65      	ldr	r2, [pc, #404]	; (8002a40 <HAL_ADC_Init+0x308>)
 80028ac:	e000      	b.n	80028b0 <HAL_ADC_Init+0x178>
 80028ae:	4a65      	ldr	r2, [pc, #404]	; (8002a44 <HAL_ADC_Init+0x30c>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4610      	mov	r0, r2
 80028b8:	f7ff fcfa 	bl	80022b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	7f5b      	ldrb	r3, [r3, #29]
 80028c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80028cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80028d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d106      	bne.n	80028f8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	3b01      	subs	r3, #1
 80028f0:	045b      	lsls	r3, r3, #17
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4313      	orrs	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	4b4b      	ldr	r3, [pc, #300]	; (8002a48 <HAL_ADC_Init+0x310>)
 800291c:	4013      	ands	r3, r2
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6812      	ldr	r2, [r2, #0]
 8002922:	69b9      	ldr	r1, [r7, #24]
 8002924:	430b      	orrs	r3, r1
 8002926:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fed1 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 8002948:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fede 	bl	8002710 <LL_ADC_INJ_IsConversionOngoing>
 8002954:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d17f      	bne.n	8002a5c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d17c      	bne.n	8002a5c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002966:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800296e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800297e:	f023 0302 	bic.w	r3, r3, #2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6812      	ldr	r2, [r2, #0]
 8002986:	69b9      	ldr	r1, [r7, #24]
 8002988:	430b      	orrs	r3, r1
 800298a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d017      	beq.n	80029c4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6911      	ldr	r1, [r2, #16]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	430b      	orrs	r3, r1
 80029be:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80029c2:	e013      	b.n	80029ec <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691a      	ldr	r2, [r3, #16]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d12a      	bne.n	8002a4c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a0c:	4311      	orrs	r1, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a12:	4311      	orrs	r1, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0201 	orr.w	r2, r2, #1
 8002a24:	611a      	str	r2, [r3, #16]
 8002a26:	e019      	b.n	8002a5c <HAL_ADC_Init+0x324>
 8002a28:	20000000 	.word	0x20000000
 8002a2c:	053e2d63 	.word	0x053e2d63
 8002a30:	50000100 	.word	0x50000100
 8002a34:	50000400 	.word	0x50000400
 8002a38:	50000500 	.word	0x50000500
 8002a3c:	50000600 	.word	0x50000600
 8002a40:	50000300 	.word	0x50000300
 8002a44:	50000700 	.word	0x50000700
 8002a48:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d10c      	bne.n	8002a7e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f023 010f 	bic.w	r1, r3, #15
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	1e5a      	subs	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a7c:	e007      	b.n	8002a8e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 020f 	bic.w	r2, r2, #15
 8002a8c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a9e:	e007      	b.n	8002ab0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	f043 0210 	orr.w	r2, r3, #16
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ab0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3724      	adds	r7, #36	; 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd90      	pop	{r4, r7, pc}
 8002aba:	bf00      	nop

08002abc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ad0:	d004      	beq.n	8002adc <HAL_ADC_Start_DMA+0x20>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a5a      	ldr	r2, [pc, #360]	; (8002c40 <HAL_ADC_Start_DMA+0x184>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d101      	bne.n	8002ae0 <HAL_ADC_Start_DMA+0x24>
 8002adc:	4b59      	ldr	r3, [pc, #356]	; (8002c44 <HAL_ADC_Start_DMA+0x188>)
 8002ade:	e000      	b.n	8002ae2 <HAL_ADC_Start_DMA+0x26>
 8002ae0:	4b59      	ldr	r3, [pc, #356]	; (8002c48 <HAL_ADC_Start_DMA+0x18c>)
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fd5c 	bl	80025a0 <LL_ADC_GetMultimode>
 8002ae8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fdfb 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 809b 	bne.w	8002c32 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_Start_DMA+0x4e>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e096      	b.n	8002c38 <HAL_ADC_Start_DMA+0x17c>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a4d      	ldr	r2, [pc, #308]	; (8002c4c <HAL_ADC_Start_DMA+0x190>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d008      	beq.n	8002b2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	2b05      	cmp	r3, #5
 8002b26:	d002      	beq.n	8002b2e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	2b09      	cmp	r3, #9
 8002b2c:	d17a      	bne.n	8002c24 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 ff56 	bl	80039e0 <ADC_Enable>
 8002b34:	4603      	mov	r3, r0
 8002b36:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d16d      	bne.n	8002c1a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a3a      	ldr	r2, [pc, #232]	; (8002c40 <HAL_ADC_Start_DMA+0x184>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d009      	beq.n	8002b70 <HAL_ADC_Start_DMA+0xb4>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <HAL_ADC_Start_DMA+0x194>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d002      	beq.n	8002b6c <HAL_ADC_Start_DMA+0xb0>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	e003      	b.n	8002b74 <HAL_ADC_Start_DMA+0xb8>
 8002b6c:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <HAL_ADC_Start_DMA+0x198>)
 8002b6e:	e001      	b.n	8002b74 <HAL_ADC_Start_DMA+0xb8>
 8002b70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d002      	beq.n	8002b82 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d105      	bne.n	8002b8e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d006      	beq.n	8002ba8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9e:	f023 0206 	bic.w	r2, r3, #6
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	661a      	str	r2, [r3, #96]	; 0x60
 8002ba6:	e002      	b.n	8002bae <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb2:	4a29      	ldr	r2, [pc, #164]	; (8002c58 <HAL_ADC_Start_DMA+0x19c>)
 8002bb4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bba:	4a28      	ldr	r2, [pc, #160]	; (8002c5c <HAL_ADC_Start_DMA+0x1a0>)
 8002bbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	4a27      	ldr	r2, [pc, #156]	; (8002c60 <HAL_ADC_Start_DMA+0x1a4>)
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	221c      	movs	r2, #28
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0210 	orr.w	r2, r2, #16
 8002be4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0201 	orr.w	r2, r2, #1
 8002bf4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3340      	adds	r3, #64	; 0x40
 8002c00:	4619      	mov	r1, r3
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f002 f97b 	bl	8004f00 <HAL_DMA_Start_IT>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fd55 	bl	80026c2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002c18:	e00d      	b.n	8002c36 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002c22:	e008      	b.n	8002c36 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002c30:	e001      	b.n	8002c36 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
 8002c34:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	50000100 	.word	0x50000100
 8002c44:	50000300 	.word	0x50000300
 8002c48:	50000700 	.word	0x50000700
 8002c4c:	50000600 	.word	0x50000600
 8002c50:	50000500 	.word	0x50000500
 8002c54:	50000400 	.word	0x50000400
 8002c58:	08003aa5 	.word	0x08003aa5
 8002c5c:	08003b7d 	.word	0x08003b7d
 8002c60:	08003b99 	.word	0x08003b99

08002c64 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	; 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c88:	d004      	beq.n	8002c94 <HAL_ADC_IRQHandler+0x30>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a8e      	ldr	r2, [pc, #568]	; (8002ec8 <HAL_ADC_IRQHandler+0x264>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_ADC_IRQHandler+0x34>
 8002c94:	4b8d      	ldr	r3, [pc, #564]	; (8002ecc <HAL_ADC_IRQHandler+0x268>)
 8002c96:	e000      	b.n	8002c9a <HAL_ADC_IRQHandler+0x36>
 8002c98:	4b8d      	ldr	r3, [pc, #564]	; (8002ed0 <HAL_ADC_IRQHandler+0x26c>)
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fc80 	bl	80025a0 <LL_ADC_GetMultimode>
 8002ca0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d017      	beq.n	8002cdc <HAL_ADC_IRQHandler+0x78>
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d012      	beq.n	8002cdc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f001 f8f1 	bl	8003eb6 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <HAL_ADC_IRQHandler+0x8c>
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10b      	bne.n	8002d08 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 8094 	beq.w	8002e24 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 808e 	beq.w	8002e24 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d105      	bne.n	8002d20 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fb95 	bl	8002454 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d072      	beq.n	8002e16 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a64      	ldr	r2, [pc, #400]	; (8002ec8 <HAL_ADC_IRQHandler+0x264>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_ADC_IRQHandler+0xea>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a65      	ldr	r2, [pc, #404]	; (8002ed4 <HAL_ADC_IRQHandler+0x270>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d002      	beq.n	8002d4a <HAL_ADC_IRQHandler+0xe6>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	e003      	b.n	8002d52 <HAL_ADC_IRQHandler+0xee>
 8002d4a:	4b63      	ldr	r3, [pc, #396]	; (8002ed8 <HAL_ADC_IRQHandler+0x274>)
 8002d4c:	e001      	b.n	8002d52 <HAL_ADC_IRQHandler+0xee>
 8002d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6812      	ldr	r2, [r2, #0]
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d008      	beq.n	8002d6c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	d002      	beq.n	8002d6c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b09      	cmp	r3, #9
 8002d6a:	d104      	bne.n	8002d76 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	e014      	b.n	8002da0 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a53      	ldr	r2, [pc, #332]	; (8002ec8 <HAL_ADC_IRQHandler+0x264>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d009      	beq.n	8002d94 <HAL_ADC_IRQHandler+0x130>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a53      	ldr	r2, [pc, #332]	; (8002ed4 <HAL_ADC_IRQHandler+0x270>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d002      	beq.n	8002d90 <HAL_ADC_IRQHandler+0x12c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	e003      	b.n	8002d98 <HAL_ADC_IRQHandler+0x134>
 8002d90:	4b51      	ldr	r3, [pc, #324]	; (8002ed8 <HAL_ADC_IRQHandler+0x274>)
 8002d92:	e001      	b.n	8002d98 <HAL_ADC_IRQHandler+0x134>
 8002d94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d98:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002da0:	6a3b      	ldr	r3, [r7, #32]
 8002da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d135      	bne.n	8002e16 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d12e      	bne.n	8002e16 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fc94 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d11a      	bne.n	8002dfe <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 020c 	bic.w	r2, r2, #12
 8002dd6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ddc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d112      	bne.n	8002e16 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df4:	f043 0201 	orr.w	r2, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dfc:	e00b      	b.n	8002e16 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	f043 0210 	orr.w	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f006 ff9e 	bl	8009d58 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	220c      	movs	r2, #12
 8002e22:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <HAL_ADC_IRQHandler+0x1d4>
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10b      	bne.n	8002e50 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80b3 	beq.w	8002faa <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80ad 	beq.w	8002faa <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	f003 0310 	and.w	r3, r3, #16
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fb30 	bl	80024d2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002e72:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff faeb 	bl	8002454 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e7e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a10      	ldr	r2, [pc, #64]	; (8002ec8 <HAL_ADC_IRQHandler+0x264>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_ADC_IRQHandler+0x23a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a11      	ldr	r2, [pc, #68]	; (8002ed4 <HAL_ADC_IRQHandler+0x270>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d002      	beq.n	8002e9a <HAL_ADC_IRQHandler+0x236>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	e003      	b.n	8002ea2 <HAL_ADC_IRQHandler+0x23e>
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <HAL_ADC_IRQHandler+0x274>)
 8002e9c:	e001      	b.n	8002ea2 <HAL_ADC_IRQHandler+0x23e>
 8002e9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d008      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d002      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b07      	cmp	r3, #7
 8002eba:	d10f      	bne.n	8002edc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	623b      	str	r3, [r7, #32]
 8002ec4:	e01f      	b.n	8002f06 <HAL_ADC_IRQHandler+0x2a2>
 8002ec6:	bf00      	nop
 8002ec8:	50000100 	.word	0x50000100
 8002ecc:	50000300 	.word	0x50000300
 8002ed0:	50000700 	.word	0x50000700
 8002ed4:	50000500 	.word	0x50000500
 8002ed8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a8b      	ldr	r2, [pc, #556]	; (8003110 <HAL_ADC_IRQHandler+0x4ac>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_ADC_IRQHandler+0x296>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a8a      	ldr	r2, [pc, #552]	; (8003114 <HAL_ADC_IRQHandler+0x4b0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d002      	beq.n	8002ef6 <HAL_ADC_IRQHandler+0x292>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	e003      	b.n	8002efe <HAL_ADC_IRQHandler+0x29a>
 8002ef6:	4b88      	ldr	r3, [pc, #544]	; (8003118 <HAL_ADC_IRQHandler+0x4b4>)
 8002ef8:	e001      	b.n	8002efe <HAL_ADC_IRQHandler+0x29a>
 8002efa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002efe:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d047      	beq.n	8002f9c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d007      	beq.n	8002f26 <HAL_ADC_IRQHandler+0x2c2>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d03f      	beq.n	8002f9c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d13a      	bne.n	8002f9c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	d133      	bne.n	8002f9c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002f34:	6a3b      	ldr	r3, [r7, #32]
 8002f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d12e      	bne.n	8002f9c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fbe4 	bl	8002710 <LL_ADC_INJ_IsConversionOngoing>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11a      	bne.n	8002f84 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f5c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d112      	bne.n	8002f9c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f82:	e00b      	b.n	8002f9c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f88:	f043 0210 	orr.w	r2, r3, #16
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f94:	f043 0201 	orr.w	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 ff62 	bl	8003e66 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2260      	movs	r2, #96	; 0x60
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d011      	beq.n	8002fd8 <HAL_ADC_IRQHandler+0x374>
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00c      	beq.n	8002fd8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8b4 	bl	8003138 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d012      	beq.n	8003008 <HAL_ADC_IRQHandler+0x3a4>
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00d      	beq.n	8003008 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 ff48 	bl	8003e8e <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003006:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300e:	2b00      	cmp	r3, #0
 8003010:	d012      	beq.n	8003038 <HAL_ADC_IRQHandler+0x3d4>
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00d      	beq.n	8003038 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 ff3a 	bl	8003ea2 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003036:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	d043      	beq.n	80030ca <HAL_ADC_IRQHandler+0x466>
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	d03e      	beq.n	80030ca <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003054:	2301      	movs	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	e021      	b.n	800309e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d015      	beq.n	800308c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003068:	d004      	beq.n	8003074 <HAL_ADC_IRQHandler+0x410>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a28      	ldr	r2, [pc, #160]	; (8003110 <HAL_ADC_IRQHandler+0x4ac>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_ADC_IRQHandler+0x414>
 8003074:	4b29      	ldr	r3, [pc, #164]	; (800311c <HAL_ADC_IRQHandler+0x4b8>)
 8003076:	e000      	b.n	800307a <HAL_ADC_IRQHandler+0x416>
 8003078:	4b29      	ldr	r3, [pc, #164]	; (8003120 <HAL_ADC_IRQHandler+0x4bc>)
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fa9e 	bl	80025bc <LL_ADC_GetMultiDMATransfer>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003086:	2301      	movs	r3, #1
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
 800308a:	e008      	b.n	800309e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800309a:	2301      	movs	r3, #1
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d10e      	bne.n	80030c2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b4:	f043 0202 	orr.w	r2, r3, #2
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f845 	bl	800314c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2210      	movs	r2, #16
 80030c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d018      	beq.n	8003106 <HAL_ADC_IRQHandler+0x4a2>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d013      	beq.n	8003106 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ee:	f043 0208 	orr.w	r2, r3, #8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030fe:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 feba 	bl	8003e7a <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003106:	bf00      	nop
 8003108:	3728      	adds	r7, #40	; 0x28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	50000100 	.word	0x50000100
 8003114:	50000500 	.word	0x50000500
 8003118:	50000400 	.word	0x50000400
 800311c:	50000300 	.word	0x50000300
 8003120:	50000700 	.word	0x50000700

08003124 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b0b6      	sub	sp, #216	; 0xd8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x24>
 800317e:	2302      	movs	r3, #2
 8003180:	f000 bc13 	b.w	80039aa <HAL_ADC_ConfigChannel+0x84a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff faaa 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	f040 83f3 	bne.w	8003984 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	f7ff f965 	bl	800247a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fa98 	bl	80026ea <LL_ADC_REG_IsConversionOngoing>
 80031ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff faa4 	bl	8002710 <LL_ADC_INJ_IsConversionOngoing>
 80031c8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f040 81d9 	bne.w	8003588 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f040 81d4 	bne.w	8003588 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031e8:	d10f      	bne.n	800320a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2200      	movs	r2, #0
 80031f4:	4619      	mov	r1, r3
 80031f6:	f7ff f97f 	bl	80024f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff f913 	bl	800242e <LL_ADC_SetSamplingTimeCommonConfig>
 8003208:	e00e      	b.n	8003228 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6818      	ldr	r0, [r3, #0]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	6819      	ldr	r1, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	461a      	mov	r2, r3
 8003218:	f7ff f96e 	bl	80024f8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f903 	bl	800242e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	08db      	lsrs	r3, r3, #3
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b04      	cmp	r3, #4
 8003248:	d022      	beq.n	8003290 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6919      	ldr	r1, [r3, #16]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800325a:	f7ff f85d 	bl	8002318 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6919      	ldr	r1, [r3, #16]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	461a      	mov	r2, r3
 800326c:	f7ff f8a9 	bl	80023c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6818      	ldr	r0, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	6919      	ldr	r1, [r3, #16]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	7f1b      	ldrb	r3, [r3, #28]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d102      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x126>
 8003280:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003284:	e000      	b.n	8003288 <HAL_ADC_ConfigChannel+0x128>
 8003286:	2300      	movs	r3, #0
 8003288:	461a      	mov	r2, r3
 800328a:	f7ff f8b5 	bl	80023f8 <LL_ADC_SetOffsetSaturation>
 800328e:	e17b      	b.n	8003588 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2100      	movs	r1, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff f862 	bl	8002360 <LL_ADC_GetOffsetChannel>
 800329c:	4603      	mov	r3, r0
 800329e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x15c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2100      	movs	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff f857 	bl	8002360 <LL_ADC_GetOffsetChannel>
 80032b2:	4603      	mov	r3, r0
 80032b4:	0e9b      	lsrs	r3, r3, #26
 80032b6:	f003 021f 	and.w	r2, r3, #31
 80032ba:	e01e      	b.n	80032fa <HAL_ADC_ConfigChannel+0x19a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff f84c 	bl	8002360 <LL_ADC_GetOffsetChannel>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80032ea:	2320      	movs	r3, #32
 80032ec:	e004      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80032ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032f2:	fab3 f383 	clz	r3, r3
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d105      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x1b2>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	e018      	b.n	8003344 <HAL_ADC_ConfigChannel+0x1e4>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003326:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800332a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800332e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003336:	2320      	movs	r3, #32
 8003338:	e004      	b.n	8003344 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800333a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003344:	429a      	cmp	r2, r3
 8003346:	d106      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2200      	movs	r2, #0
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff f81b 	bl	800238c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2101      	movs	r1, #1
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe ffff 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8003362:	4603      	mov	r3, r0
 8003364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10a      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x222>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2101      	movs	r1, #1
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fff4 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8003378:	4603      	mov	r3, r0
 800337a:	0e9b      	lsrs	r3, r3, #26
 800337c:	f003 021f 	and.w	r2, r3, #31
 8003380:	e01e      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x260>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe ffe9 	bl	8002360 <LL_ADC_GetOffsetChannel>
 800338e:	4603      	mov	r3, r0
 8003390:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80033a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80033a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80033b0:	2320      	movs	r3, #32
 80033b2:	e004      	b.n	80033be <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80033b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033b8:	fab3 f383 	clz	r3, r3
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d105      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x278>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0e9b      	lsrs	r3, r3, #26
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	e018      	b.n	800340a <HAL_ADC_ConfigChannel+0x2aa>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80033ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80033f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80033fc:	2320      	movs	r3, #32
 80033fe:	e004      	b.n	800340a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800340a:	429a      	cmp	r2, r3
 800340c:	d106      	bne.n	800341c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2200      	movs	r2, #0
 8003414:	2101      	movs	r1, #1
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe ffb8 	bl	800238c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2102      	movs	r1, #2
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe ff9c 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8003428:	4603      	mov	r3, r0
 800342a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x2e8>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2102      	movs	r1, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe ff91 	bl	8002360 <LL_ADC_GetOffsetChannel>
 800343e:	4603      	mov	r3, r0
 8003440:	0e9b      	lsrs	r3, r3, #26
 8003442:	f003 021f 	and.w	r2, r3, #31
 8003446:	e01e      	b.n	8003486 <HAL_ADC_ConfigChannel+0x326>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2102      	movs	r1, #2
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe ff86 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8003454:	4603      	mov	r3, r0
 8003456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003466:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800346a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800346e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003476:	2320      	movs	r3, #32
 8003478:	e004      	b.n	8003484 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800347a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
 8003484:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348e:	2b00      	cmp	r3, #0
 8003490:	d105      	bne.n	800349e <HAL_ADC_ConfigChannel+0x33e>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0e9b      	lsrs	r3, r3, #26
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	e016      	b.n	80034cc <HAL_ADC_ConfigChannel+0x36c>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80034b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80034b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80034be:	2320      	movs	r3, #32
 80034c0:	e004      	b.n	80034cc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80034c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d106      	bne.n	80034de <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2200      	movs	r2, #0
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fe ff57 	bl	800238c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2103      	movs	r1, #3
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe ff3b 	bl	8002360 <LL_ADC_GetOffsetChannel>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <HAL_ADC_ConfigChannel+0x3aa>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2103      	movs	r1, #3
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe ff30 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8003500:	4603      	mov	r3, r0
 8003502:	0e9b      	lsrs	r3, r3, #26
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	e017      	b.n	800353a <HAL_ADC_ConfigChannel+0x3da>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2103      	movs	r1, #3
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe ff25 	bl	8002360 <LL_ADC_GetOffsetChannel>
 8003516:	4603      	mov	r3, r0
 8003518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003524:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800352c:	2320      	movs	r3, #32
 800352e:	e003      	b.n	8003538 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003542:	2b00      	cmp	r3, #0
 8003544:	d105      	bne.n	8003552 <HAL_ADC_ConfigChannel+0x3f2>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	0e9b      	lsrs	r3, r3, #26
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	e011      	b.n	8003576 <HAL_ADC_ConfigChannel+0x416>
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800355a:	fa93 f3a3 	rbit	r3, r3
 800355e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003562:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800356a:	2320      	movs	r3, #32
 800356c:	e003      	b.n	8003576 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800356e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003570:	fab3 f383 	clz	r3, r3
 8003574:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003576:	429a      	cmp	r2, r3
 8003578:	d106      	bne.n	8003588 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2200      	movs	r2, #0
 8003580:	2103      	movs	r1, #3
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe ff02 	bl	800238c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff f885 	bl	800269c <LL_ADC_IsEnabled>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	f040 813d 	bne.w	8003814 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	6819      	ldr	r1, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f7fe ffd2 	bl	8002550 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4aa2      	ldr	r2, [pc, #648]	; (800383c <HAL_ADC_ConfigChannel+0x6dc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	f040 812e 	bne.w	8003814 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10b      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x480>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0e9b      	lsrs	r3, r3, #26
 80035ce:	3301      	adds	r3, #1
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2b09      	cmp	r3, #9
 80035d6:	bf94      	ite	ls
 80035d8:	2301      	movls	r3, #1
 80035da:	2300      	movhi	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	e019      	b.n	8003614 <HAL_ADC_ConfigChannel+0x4b4>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80035ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80035f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80035f8:	2320      	movs	r3, #32
 80035fa:	e003      	b.n	8003604 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80035fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2b09      	cmp	r3, #9
 800360c:	bf94      	ite	ls
 800360e:	2301      	movls	r3, #1
 8003610:	2300      	movhi	r3, #0
 8003612:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003614:	2b00      	cmp	r3, #0
 8003616:	d079      	beq.n	800370c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003620:	2b00      	cmp	r3, #0
 8003622:	d107      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x4d4>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0e9b      	lsrs	r3, r3, #26
 800362a:	3301      	adds	r3, #1
 800362c:	069b      	lsls	r3, r3, #26
 800362e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003632:	e015      	b.n	8003660 <HAL_ADC_ConfigChannel+0x500>
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003644:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800364c:	2320      	movs	r3, #32
 800364e:	e003      	b.n	8003658 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	3301      	adds	r3, #1
 800365a:	069b      	lsls	r3, r3, #26
 800365c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003668:	2b00      	cmp	r3, #0
 800366a:	d109      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x520>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	0e9b      	lsrs	r3, r3, #26
 8003672:	3301      	adds	r3, #1
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	2101      	movs	r1, #1
 800367a:	fa01 f303 	lsl.w	r3, r1, r3
 800367e:	e017      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x550>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003688:	fa93 f3a3 	rbit	r3, r3
 800368c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800368e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003690:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003698:	2320      	movs	r3, #32
 800369a:	e003      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800369c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	3301      	adds	r3, #1
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	2101      	movs	r1, #1
 80036ac:	fa01 f303 	lsl.w	r3, r1, r3
 80036b0:	ea42 0103 	orr.w	r1, r2, r3
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10a      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x576>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	3301      	adds	r3, #1
 80036c8:	f003 021f 	and.w	r2, r3, #31
 80036cc:	4613      	mov	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	051b      	lsls	r3, r3, #20
 80036d4:	e018      	b.n	8003708 <HAL_ADC_ConfigChannel+0x5a8>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80036e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80036ee:	2320      	movs	r3, #32
 80036f0:	e003      	b.n	80036fa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80036f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f4:	fab3 f383 	clz	r3, r3
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	3301      	adds	r3, #1
 80036fc:	f003 021f 	and.w	r2, r3, #31
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003708:	430b      	orrs	r3, r1
 800370a:	e07e      	b.n	800380a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003714:	2b00      	cmp	r3, #0
 8003716:	d107      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x5c8>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	0e9b      	lsrs	r3, r3, #26
 800371e:	3301      	adds	r3, #1
 8003720:	069b      	lsls	r3, r3, #26
 8003722:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003726:	e015      	b.n	8003754 <HAL_ADC_ConfigChannel+0x5f4>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	fa93 f3a3 	rbit	r3, r3
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003738:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003740:	2320      	movs	r3, #32
 8003742:	e003      	b.n	800374c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	3301      	adds	r3, #1
 800374e:	069b      	lsls	r3, r3, #26
 8003750:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375c:	2b00      	cmp	r3, #0
 800375e:	d109      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x614>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	0e9b      	lsrs	r3, r3, #26
 8003766:	3301      	adds	r3, #1
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2101      	movs	r1, #1
 800376e:	fa01 f303 	lsl.w	r3, r1, r3
 8003772:	e017      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x644>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	fa93 f3a3 	rbit	r3, r3
 8003780:	61fb      	str	r3, [r7, #28]
  return result;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800378c:	2320      	movs	r3, #32
 800378e:	e003      	b.n	8003798 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	3301      	adds	r3, #1
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	2101      	movs	r1, #1
 80037a0:	fa01 f303 	lsl.w	r3, r1, r3
 80037a4:	ea42 0103 	orr.w	r1, r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x670>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	0e9b      	lsrs	r3, r3, #26
 80037ba:	3301      	adds	r3, #1
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	4613      	mov	r3, r2
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4413      	add	r3, r2
 80037c6:	3b1e      	subs	r3, #30
 80037c8:	051b      	lsls	r3, r3, #20
 80037ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037ce:	e01b      	b.n	8003808 <HAL_ADC_ConfigChannel+0x6a8>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	613b      	str	r3, [r7, #16]
  return result;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80037e8:	2320      	movs	r3, #32
 80037ea:	e003      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	fab3 f383 	clz	r3, r3
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	3301      	adds	r3, #1
 80037f6:	f003 021f 	and.w	r2, r3, #31
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	3b1e      	subs	r3, #30
 8003802:	051b      	lsls	r3, r3, #20
 8003804:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003808:	430b      	orrs	r3, r1
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	6892      	ldr	r2, [r2, #8]
 800380e:	4619      	mov	r1, r3
 8003810:	f7fe fe72 	bl	80024f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <HAL_ADC_ConfigChannel+0x6e0>)
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80be 	beq.w	800399e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800382a:	d004      	beq.n	8003836 <HAL_ADC_ConfigChannel+0x6d6>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a04      	ldr	r2, [pc, #16]	; (8003844 <HAL_ADC_ConfigChannel+0x6e4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10a      	bne.n	800384c <HAL_ADC_ConfigChannel+0x6ec>
 8003836:	4b04      	ldr	r3, [pc, #16]	; (8003848 <HAL_ADC_ConfigChannel+0x6e8>)
 8003838:	e009      	b.n	800384e <HAL_ADC_ConfigChannel+0x6ee>
 800383a:	bf00      	nop
 800383c:	407f0000 	.word	0x407f0000
 8003840:	80080000 	.word	0x80080000
 8003844:	50000100 	.word	0x50000100
 8003848:	50000300 	.word	0x50000300
 800384c:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_ADC_ConfigChannel+0x854>)
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fd54 	bl	80022fc <LL_ADC_GetCommonPathInternalCh>
 8003854:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a56      	ldr	r2, [pc, #344]	; (80039b8 <HAL_ADC_ConfigChannel+0x858>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d004      	beq.n	800386c <HAL_ADC_ConfigChannel+0x70c>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a55      	ldr	r2, [pc, #340]	; (80039bc <HAL_ADC_ConfigChannel+0x85c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d13a      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800386c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003870:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d134      	bne.n	80038e2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003880:	d005      	beq.n	800388e <HAL_ADC_ConfigChannel+0x72e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a4e      	ldr	r2, [pc, #312]	; (80039c0 <HAL_ADC_ConfigChannel+0x860>)
 8003888:	4293      	cmp	r3, r2
 800388a:	f040 8085 	bne.w	8003998 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003896:	d004      	beq.n	80038a2 <HAL_ADC_ConfigChannel+0x742>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a49      	ldr	r2, [pc, #292]	; (80039c4 <HAL_ADC_ConfigChannel+0x864>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_ADC_ConfigChannel+0x746>
 80038a2:	4a49      	ldr	r2, [pc, #292]	; (80039c8 <HAL_ADC_ConfigChannel+0x868>)
 80038a4:	e000      	b.n	80038a8 <HAL_ADC_ConfigChannel+0x748>
 80038a6:	4a43      	ldr	r2, [pc, #268]	; (80039b4 <HAL_ADC_ConfigChannel+0x854>)
 80038a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f7fe fd0f 	bl	80022d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038b8:	4b44      	ldr	r3, [pc, #272]	; (80039cc <HAL_ADC_ConfigChannel+0x86c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	099b      	lsrs	r3, r3, #6
 80038be:	4a44      	ldr	r2, [pc, #272]	; (80039d0 <HAL_ADC_ConfigChannel+0x870>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038d2:	e002      	b.n	80038da <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f9      	bne.n	80038d4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e0:	e05a      	b.n	8003998 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a3b      	ldr	r2, [pc, #236]	; (80039d4 <HAL_ADC_ConfigChannel+0x874>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d125      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x7d8>
 80038ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11f      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a31      	ldr	r2, [pc, #196]	; (80039c4 <HAL_ADC_ConfigChannel+0x864>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d104      	bne.n	800390c <HAL_ADC_ConfigChannel+0x7ac>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a34      	ldr	r2, [pc, #208]	; (80039d8 <HAL_ADC_ConfigChannel+0x878>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d047      	beq.n	800399c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003914:	d004      	beq.n	8003920 <HAL_ADC_ConfigChannel+0x7c0>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <HAL_ADC_ConfigChannel+0x864>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x7c4>
 8003920:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <HAL_ADC_ConfigChannel+0x868>)
 8003922:	e000      	b.n	8003926 <HAL_ADC_ConfigChannel+0x7c6>
 8003924:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <HAL_ADC_ConfigChannel+0x854>)
 8003926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800392a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f7fe fcd0 	bl	80022d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003936:	e031      	b.n	800399c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a27      	ldr	r2, [pc, #156]	; (80039dc <HAL_ADC_ConfigChannel+0x87c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d12d      	bne.n	800399e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003942:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d127      	bne.n	800399e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_ADC_ConfigChannel+0x864>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d022      	beq.n	800399e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003960:	d004      	beq.n	800396c <HAL_ADC_ConfigChannel+0x80c>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a17      	ldr	r2, [pc, #92]	; (80039c4 <HAL_ADC_ConfigChannel+0x864>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d101      	bne.n	8003970 <HAL_ADC_ConfigChannel+0x810>
 800396c:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <HAL_ADC_ConfigChannel+0x868>)
 800396e:	e000      	b.n	8003972 <HAL_ADC_ConfigChannel+0x812>
 8003970:	4a10      	ldr	r2, [pc, #64]	; (80039b4 <HAL_ADC_ConfigChannel+0x854>)
 8003972:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003976:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800397a:	4619      	mov	r1, r3
 800397c:	4610      	mov	r0, r2
 800397e:	f7fe fcaa 	bl	80022d6 <LL_ADC_SetCommonPathInternalCh>
 8003982:	e00c      	b.n	800399e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003988:	f043 0220 	orr.w	r2, r3, #32
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003996:	e002      	b.n	800399e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003998:	bf00      	nop
 800399a:	e000      	b.n	800399e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800399c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80039a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	37d8      	adds	r7, #216	; 0xd8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	50000700 	.word	0x50000700
 80039b8:	c3210000 	.word	0xc3210000
 80039bc:	90c00010 	.word	0x90c00010
 80039c0:	50000600 	.word	0x50000600
 80039c4:	50000100 	.word	0x50000100
 80039c8:	50000300 	.word	0x50000300
 80039cc:	20000000 	.word	0x20000000
 80039d0:	053e2d63 	.word	0x053e2d63
 80039d4:	c7520000 	.word	0xc7520000
 80039d8:	50000500 	.word	0x50000500
 80039dc:	cb840000 	.word	0xcb840000

080039e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fe55 	bl	800269c <LL_ADC_IsEnabled>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d14d      	bne.n	8003a94 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	4b28      	ldr	r3, [pc, #160]	; (8003aa0 <ADC_Enable+0xc0>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00d      	beq.n	8003a22 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a0a:	f043 0210 	orr.w	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a16:	f043 0201 	orr.w	r2, r3, #1
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e039      	b.n	8003a96 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe fe24 	bl	8002674 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a2c:	f7fe fc34 	bl	8002298 <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a32:	e028      	b.n	8003a86 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7fe fe2f 	bl	800269c <LL_ADC_IsEnabled>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe fe13 	bl	8002674 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a4e:	f7fe fc23 	bl	8002298 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d914      	bls.n	8003a86 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d00d      	beq.n	8003a86 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	f043 0210 	orr.w	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7a:	f043 0201 	orr.w	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e007      	b.n	8003a96 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d1cf      	bne.n	8003a34 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	8000003f 	.word	0x8000003f

08003aa4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d14b      	bne.n	8003b56 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d021      	beq.n	8003b1c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe fcb9 	bl	8002454 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d032      	beq.n	8003b4e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d12b      	bne.n	8003b4e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d11f      	bne.n	8003b4e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	f043 0201 	orr.w	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b1a:	e018      	b.n	8003b4e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d111      	bne.n	8003b4e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f006 f902 	bl	8009d58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b54:	e00e      	b.n	8003b74 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7ff faf2 	bl	800314c <HAL_ADC_ErrorCallback>
}
 8003b68:	e004      	b.n	8003b74 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	4798      	blx	r3
}
 8003b74:	bf00      	nop
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f7ff faca 	bl	8003124 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b90:	bf00      	nop
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003baa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb6:	f043 0204 	orr.w	r2, r3, #4
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff fac4 	bl	800314c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bc4:	bf00      	nop
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <LL_ADC_SetCommonPathInternalCh>:
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	609a      	str	r2, [r3, #8]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <LL_ADC_GetCommonPathInternalCh>:
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <LL_ADC_SetOffset>:
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	3360      	adds	r3, #96	; 0x60
 8003c22:	461a      	mov	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <LL_ADC_SetOffset+0x44>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	601a      	str	r2, [r3, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	03fff000 	.word	0x03fff000

08003c58 <LL_ADC_GetOffsetChannel>:
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3360      	adds	r3, #96	; 0x60
 8003c66:	461a      	mov	r2, r3
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <LL_ADC_SetOffsetState>:
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3360      	adds	r3, #96	; 0x60
 8003c94:	461a      	mov	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	601a      	str	r2, [r3, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_ADC_SetOffsetSign>:
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b087      	sub	sp, #28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3360      	adds	r3, #96	; 0x60
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	601a      	str	r2, [r3, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <LL_ADC_SetOffsetSaturation>:
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3360      	adds	r3, #96	; 0x60
 8003d00:	461a      	mov	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	431a      	orrs	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	601a      	str	r2, [r3, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	371c      	adds	r7, #28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	615a      	str	r2, [r3, #20]
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <LL_ADC_SetChannelSamplingTime>:
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3314      	adds	r3, #20
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	0e5b      	lsrs	r3, r3, #25
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	f003 0304 	and.w	r3, r3, #4
 8003d68:	4413      	add	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	0d1b      	lsrs	r3, r3, #20
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2107      	movs	r1, #7
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	401a      	ands	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	0d1b      	lsrs	r3, r3, #20
 8003d86:	f003 031f 	and.w	r3, r3, #31
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d90:	431a      	orrs	r2, r3
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	601a      	str	r2, [r3, #0]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <LL_ADC_SetChannelSingleDiff>:
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a0f      	ldr	r2, [pc, #60]	; (8003df0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d10a      	bne.n	8003dce <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003dcc:	e00a      	b.n	8003de4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	401a      	ands	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	407f0000 	.word	0x407f0000

08003df4 <LL_ADC_IsEnabled>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <LL_ADC_IsEnabled+0x18>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <LL_ADC_IsEnabled+0x1a>
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <LL_ADC_REG_IsConversionOngoing>:
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b04      	cmp	r3, #4
 8003e2c:	d101      	bne.n	8003e32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d101      	bne.n	8003e58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b0b6      	sub	sp, #216	; 0xd8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d102      	bne.n	8003ef6 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	f000 bcfd 	b.w	80048f0 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d130      	bne.n	8003f70 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b09      	cmp	r3, #9
 8003f14:	d179      	bne.n	800400a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d010      	beq.n	8003f40 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	0e9b      	lsrs	r3, r3, #26
 8003f24:	025b      	lsls	r3, r3, #9
 8003f26:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003f32:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f3e:	e007      	b.n	8003f50 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	0e9b      	lsrs	r3, r3, #26
 8003f46:	025b      	lsls	r3, r3, #9
 8003f48:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003f4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f56:	4b84      	ldr	r3, [pc, #528]	; (8004168 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003f62:	430b      	orrs	r3, r1
 8003f64:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f6c:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003f6e:	e04c      	b.n	800400a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11d      	bne.n	8003fb4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6a1a      	ldr	r2, [r3, #32]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00d      	beq.n	8003faa <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003f9c:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fa8:	e004      	b.n	8003fb4 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	0e9b      	lsrs	r3, r3, #26
 8003fba:	f003 021f 	and.w	r2, r3, #31
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd8:	1e5a      	subs	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003fe2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ffa:	4b5b      	ldr	r3, [pc, #364]	; (8004168 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6812      	ldr	r2, [r2, #0]
 8004006:	430b      	orrs	r3, r1
 8004008:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff ff16 	bl	8003e40 <LL_ADC_INJ_IsConversionOngoing>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d124      	bne.n	8004064 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004020:	2b00      	cmp	r3, #0
 8004022:	d112      	bne.n	800404a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004034:	055a      	lsls	r2, r3, #21
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800403c:	051b      	lsls	r3, r3, #20
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	60da      	str	r2, [r3, #12]
 8004048:	e00c      	b.n	8004064 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800405a:	055a      	lsls	r2, r3, #21
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff fed6 	bl	8003e1a <LL_ADC_REG_IsConversionOngoing>
 800406e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fee2 	bl	8003e40 <LL_ADC_INJ_IsConversionOngoing>
 800407c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004080:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004084:	2b00      	cmp	r3, #0
 8004086:	f040 822e 	bne.w	80044e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800408a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800408e:	2b00      	cmp	r3, #0
 8004090:	f040 8229 	bne.w	80044e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d116      	bne.n	80040d2 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d108      	bne.n	80040c0 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80040bc:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80040be:	e01f      	b.n	8004100 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68da      	ldr	r2, [r3, #12]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80040ce:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80040d0:	e016      	b.n	8004100 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d109      	bne.n	80040f0 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e0:	f043 0220 	orr.w	r2, r3, #32
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80040ee:	e007      	b.n	8004100 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80040fe:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004106:	2b01      	cmp	r3, #1
 8004108:	d110      	bne.n	800412c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411c:	430b      	orrs	r3, r1
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f042 0202 	orr.w	r2, r2, #2
 8004128:	611a      	str	r2, [r3, #16]
 800412a:	e007      	b.n	800413c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	691a      	ldr	r2, [r3, #16]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0202 	bic.w	r2, r2, #2
 800413a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004144:	d112      	bne.n	800416c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	4619      	mov	r1, r3
 8004152:	f7ff fdfb 	bl	8003d4c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fde1 	bl	8003d26 <LL_ADC_SetSamplingTimeCommonConfig>
 8004164:	e011      	b.n	800418a <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004166:	bf00      	nop
 8004168:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	6819      	ldr	r1, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	461a      	mov	r2, r3
 800417a:	f7ff fde7 	bl	8003d4c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2100      	movs	r1, #0
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fdce 	bl	8003d26 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	695a      	ldr	r2, [r3, #20]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	08db      	lsrs	r3, r3, #3
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	fa02 f303 	lsl.w	r3, r2, r3
 80041a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d022      	beq.n	80041f2 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	6919      	ldr	r1, [r3, #16]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041bc:	f7ff fd28 	bl	8003c10 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	6919      	ldr	r1, [r3, #16]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	461a      	mov	r2, r3
 80041ce:	f7ff fd74 	bl	8003cba <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d102      	bne.n	80041e8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 80041e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041e6:	e000      	b.n	80041ea <HAL_ADCEx_InjectedConfigChannel+0x31e>
 80041e8:	2300      	movs	r3, #0
 80041ea:	461a      	mov	r2, r3
 80041ec:	f7ff fd80 	bl	8003cf0 <LL_ADC_SetOffsetSaturation>
 80041f0:	e179      	b.n	80044e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2100      	movs	r1, #0
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fd2d 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 80041fe:	4603      	mov	r3, r0
 8004200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fd22 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 8004214:	4603      	mov	r3, r0
 8004216:	0e9b      	lsrs	r3, r3, #26
 8004218:	f003 021f 	and.w	r2, r3, #31
 800421c:	e01e      	b.n	800425c <HAL_ADCEx_InjectedConfigChannel+0x390>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fd17 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 800422a:	4603      	mov	r3, r0
 800422c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004234:	fa93 f3a3 	rbit	r3, r3
 8004238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800423c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004244:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 800424c:	2320      	movs	r3, #32
 800424e:	e004      	b.n	800425a <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8004250:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004254:	fab3 f383 	clz	r3, r3
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	0e9b      	lsrs	r3, r3, #26
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	e018      	b.n	80042a6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004280:	fa93 f3a3 	rbit	r3, r3
 8004284:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800428c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004290:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8004298:	2320      	movs	r3, #32
 800429a:	e004      	b.n	80042a6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 800429c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d106      	bne.n	80042b8 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2200      	movs	r2, #0
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff fce6 	bl	8003c84 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2101      	movs	r1, #1
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fcca 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <HAL_ADCEx_InjectedConfigChannel+0x418>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2101      	movs	r1, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff fcbf 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 80042da:	4603      	mov	r3, r0
 80042dc:	0e9b      	lsrs	r3, r3, #26
 80042de:	f003 021f 	and.w	r2, r3, #31
 80042e2:	e01e      	b.n	8004322 <HAL_ADCEx_InjectedConfigChannel+0x456>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2101      	movs	r1, #1
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fcb4 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 80042f0:	4603      	mov	r3, r0
 80042f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004306:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800430a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004312:	2320      	movs	r3, #32
 8004314:	e004      	b.n	8004320 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8004316:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432a:	2b00      	cmp	r3, #0
 800432c:	d105      	bne.n	800433a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	0e9b      	lsrs	r3, r3, #26
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	e018      	b.n	800436c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800434e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004352:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004356:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800435e:	2320      	movs	r3, #32
 8004360:	e004      	b.n	800436c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8004362:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800436c:	429a      	cmp	r2, r3
 800436e:	d106      	bne.n	800437e <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2200      	movs	r2, #0
 8004376:	2101      	movs	r1, #1
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff fc83 	bl	8003c84 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2102      	movs	r1, #2
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fc67 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 800438a:	4603      	mov	r3, r0
 800438c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2102      	movs	r1, #2
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fc5c 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 80043a0:	4603      	mov	r3, r0
 80043a2:	0e9b      	lsrs	r3, r3, #26
 80043a4:	f003 021f 	and.w	r2, r3, #31
 80043a8:	e01e      	b.n	80043e8 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2102      	movs	r1, #2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fc51 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043c0:	fa93 f3a3 	rbit	r3, r3
 80043c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80043c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80043cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80043d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80043d8:	2320      	movs	r3, #32
 80043da:	e004      	b.n	80043e6 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80043dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043e0:	fab3 f383 	clz	r3, r3
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d105      	bne.n	8004400 <HAL_ADCEx_InjectedConfigChannel+0x534>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	0e9b      	lsrs	r3, r3, #26
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	e014      	b.n	800442a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004406:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004408:	fa93 f3a3 	rbit	r3, r3
 800440c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800440e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004414:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800441c:	2320      	movs	r3, #32
 800441e:	e004      	b.n	800442a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004420:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004424:	fab3 f383 	clz	r3, r3
 8004428:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800442a:	429a      	cmp	r2, r3
 800442c:	d106      	bne.n	800443c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2200      	movs	r2, #0
 8004434:	2102      	movs	r1, #2
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fc24 	bl	8003c84 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2103      	movs	r1, #3
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fc08 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 8004448:	4603      	mov	r3, r0
 800444a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2103      	movs	r1, #3
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff fbfd 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 800445e:	4603      	mov	r3, r0
 8004460:	0e9b      	lsrs	r3, r3, #26
 8004462:	f003 021f 	and.w	r2, r3, #31
 8004466:	e017      	b.n	8004498 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2103      	movs	r1, #3
 800446e:	4618      	mov	r0, r3
 8004470:	f7ff fbf2 	bl	8003c58 <LL_ADC_GetOffsetChannel>
 8004474:	4603      	mov	r3, r0
 8004476:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004478:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800447a:	fa93 f3a3 	rbit	r3, r3
 800447e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004482:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800448a:	2320      	movs	r3, #32
 800448c:	e003      	b.n	8004496 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800448e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004490:	fab3 f383 	clz	r3, r3
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d105      	bne.n	80044b0 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	0e9b      	lsrs	r3, r3, #26
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	e011      	b.n	80044d4 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044b8:	fa93 f3a3 	rbit	r3, r3
 80044bc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80044be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044c0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80044c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80044c8:	2320      	movs	r3, #32
 80044ca:	e003      	b.n	80044d4 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80044cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ce:	fab3 f383 	clz	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d106      	bne.n	80044e6 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2200      	movs	r2, #0
 80044de:	2103      	movs	r1, #3
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fbcf 	bl	8003c84 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff fc82 	bl	8003df4 <LL_ADC_IsEnabled>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f040 813d 	bne.w	8004772 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6819      	ldr	r1, [r3, #0]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	461a      	mov	r2, r3
 8004506:	f7ff fc4d 	bl	8003da4 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	4aa2      	ldr	r2, [pc, #648]	; (8004798 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8004510:	4293      	cmp	r3, r2
 8004512:	f040 812e 	bne.w	8004772 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	0e9b      	lsrs	r3, r3, #26
 800452c:	3301      	adds	r3, #1
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	2b09      	cmp	r3, #9
 8004534:	bf94      	ite	ls
 8004536:	2301      	movls	r3, #1
 8004538:	2300      	movhi	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	e019      	b.n	8004572 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800454c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800454e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8004556:	2320      	movs	r3, #32
 8004558:	e003      	b.n	8004562 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800455a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	3301      	adds	r3, #1
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2b09      	cmp	r3, #9
 800456a:	bf94      	ite	ls
 800456c:	2301      	movls	r3, #1
 800456e:	2300      	movhi	r3, #0
 8004570:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004572:	2b00      	cmp	r3, #0
 8004574:	d079      	beq.n	800466a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457e:	2b00      	cmp	r3, #0
 8004580:	d107      	bne.n	8004592 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	0e9b      	lsrs	r3, r3, #26
 8004588:	3301      	adds	r3, #1
 800458a:	069b      	lsls	r3, r3, #26
 800458c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004590:	e015      	b.n	80045be <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459a:	fa93 f3a3 	rbit	r3, r3
 800459e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80045a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80045a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80045aa:	2320      	movs	r3, #32
 80045ac:	e003      	b.n	80045b6 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80045ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b0:	fab3 f383 	clz	r3, r3
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	3301      	adds	r3, #1
 80045b8:	069b      	lsls	r3, r3, #26
 80045ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <HAL_ADCEx_InjectedConfigChannel+0x712>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	0e9b      	lsrs	r3, r3, #26
 80045d0:	3301      	adds	r3, #1
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2101      	movs	r1, #1
 80045d8:	fa01 f303 	lsl.w	r3, r1, r3
 80045dc:	e017      	b.n	800460e <HAL_ADCEx_InjectedConfigChannel+0x742>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e6:	fa93 f3a3 	rbit	r3, r3
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80045ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80045f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80045f6:	2320      	movs	r3, #32
 80045f8:	e003      	b.n	8004602 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80045fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fc:	fab3 f383 	clz	r3, r3
 8004600:	b2db      	uxtb	r3, r3
 8004602:	3301      	adds	r3, #1
 8004604:	f003 031f 	and.w	r3, r3, #31
 8004608:	2101      	movs	r1, #1
 800460a:	fa01 f303 	lsl.w	r3, r1, r3
 800460e:	ea42 0103 	orr.w	r1, r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	0e9b      	lsrs	r3, r3, #26
 8004624:	3301      	adds	r3, #1
 8004626:	f003 021f 	and.w	r2, r3, #31
 800462a:	4613      	mov	r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4413      	add	r3, r2
 8004630:	051b      	lsls	r3, r3, #20
 8004632:	e018      	b.n	8004666 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463c:	fa93 f3a3 	rbit	r3, r3
 8004640:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004648:	2b00      	cmp	r3, #0
 800464a:	d101      	bne.n	8004650 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 800464c:	2320      	movs	r3, #32
 800464e:	e003      	b.n	8004658 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	fab3 f383 	clz	r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	3301      	adds	r3, #1
 800465a:	f003 021f 	and.w	r2, r3, #31
 800465e:	4613      	mov	r3, r2
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	4413      	add	r3, r2
 8004664:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004666:	430b      	orrs	r3, r1
 8004668:	e07e      	b.n	8004768 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004672:	2b00      	cmp	r3, #0
 8004674:	d107      	bne.n	8004686 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	0e9b      	lsrs	r3, r3, #26
 800467c:	3301      	adds	r3, #1
 800467e:	069b      	lsls	r3, r3, #26
 8004680:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004684:	e015      	b.n	80046b2 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468e:	fa93 f3a3 	rbit	r3, r3
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800469e:	2320      	movs	r3, #32
 80046a0:	e003      	b.n	80046aa <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	fab3 f383 	clz	r3, r3
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	3301      	adds	r3, #1
 80046ac:	069b      	lsls	r3, r3, #26
 80046ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <HAL_ADCEx_InjectedConfigChannel+0x806>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	0e9b      	lsrs	r3, r3, #26
 80046c4:	3301      	adds	r3, #1
 80046c6:	f003 031f 	and.w	r3, r3, #31
 80046ca:	2101      	movs	r1, #1
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	e017      	b.n	8004702 <HAL_ADCEx_InjectedConfigChannel+0x836>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	fa93 f3a3 	rbit	r3, r3
 80046de:	61bb      	str	r3, [r7, #24]
  return result;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80046e4:	6a3b      	ldr	r3, [r7, #32]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80046ea:	2320      	movs	r3, #32
 80046ec:	e003      	b.n	80046f6 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	fab3 f383 	clz	r3, r3
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	3301      	adds	r3, #1
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	2101      	movs	r1, #1
 80046fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004702:	ea42 0103 	orr.w	r1, r2, r3
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10d      	bne.n	800472e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	0e9b      	lsrs	r3, r3, #26
 8004718:	3301      	adds	r3, #1
 800471a:	f003 021f 	and.w	r2, r3, #31
 800471e:	4613      	mov	r3, r2
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4413      	add	r3, r2
 8004724:	3b1e      	subs	r3, #30
 8004726:	051b      	lsls	r3, r3, #20
 8004728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800472c:	e01b      	b.n	8004766 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	fa93 f3a3 	rbit	r3, r3
 800473a:	60fb      	str	r3, [r7, #12]
  return result;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d101      	bne.n	800474a <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8004746:	2320      	movs	r3, #32
 8004748:	e003      	b.n	8004752 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	fab3 f383 	clz	r3, r3
 8004750:	b2db      	uxtb	r3, r3
 8004752:	3301      	adds	r3, #1
 8004754:	f003 021f 	and.w	r2, r3, #31
 8004758:	4613      	mov	r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	4413      	add	r3, r2
 800475e:	3b1e      	subs	r3, #30
 8004760:	051b      	lsls	r3, r3, #20
 8004762:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004766:	430b      	orrs	r3, r1
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	6892      	ldr	r2, [r2, #8]
 800476c:	4619      	mov	r1, r3
 800476e:	f7ff faed 	bl	8003d4c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	4b09      	ldr	r3, [pc, #36]	; (800479c <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8004778:	4013      	ands	r3, r2
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80b2 	beq.w	80048e4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004788:	d004      	beq.n	8004794 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a04      	ldr	r2, [pc, #16]	; (80047a0 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d109      	bne.n	80047a8 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8004794:	4b03      	ldr	r3, [pc, #12]	; (80047a4 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8004796:	e008      	b.n	80047aa <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8004798:	407f0000 	.word	0x407f0000
 800479c:	80080000 	.word	0x80080000
 80047a0:	50000100 	.word	0x50000100
 80047a4:	50000300 	.word	0x50000300
 80047a8:	4b53      	ldr	r3, [pc, #332]	; (80048f8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fa21 	bl	8003bf2 <LL_ADC_GetCommonPathInternalCh>
 80047b0:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a50      	ldr	r2, [pc, #320]	; (80048fc <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d004      	beq.n	80047c8 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a4f      	ldr	r2, [pc, #316]	; (8004900 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d139      	bne.n	800483c <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80047c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d133      	bne.n	800483c <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047dc:	d004      	beq.n	80047e8 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a48      	ldr	r2, [pc, #288]	; (8004904 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d17a      	bne.n	80048de <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047f0:	d004      	beq.n	80047fc <HAL_ADCEx_InjectedConfigChannel+0x930>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a44      	ldr	r2, [pc, #272]	; (8004908 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d101      	bne.n	8004800 <HAL_ADCEx_InjectedConfigChannel+0x934>
 80047fc:	4a43      	ldr	r2, [pc, #268]	; (800490c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80047fe:	e000      	b.n	8004802 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8004800:	4a3d      	ldr	r2, [pc, #244]	; (80048f8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004806:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800480a:	4619      	mov	r1, r3
 800480c:	4610      	mov	r0, r2
 800480e:	f7ff f9dd 	bl	8003bcc <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004812:	4b3f      	ldr	r3, [pc, #252]	; (8004910 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	099b      	lsrs	r3, r3, #6
 8004818:	4a3e      	ldr	r2, [pc, #248]	; (8004914 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	099a      	lsrs	r2, r3, #6
 8004820:	4613      	mov	r3, r2
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	3318      	adds	r3, #24
 800482a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800482c:	e002      	b.n	8004834 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	3b01      	subs	r3, #1
 8004832:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f9      	bne.n	800482e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800483a:	e050      	b.n	80048de <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a35      	ldr	r2, [pc, #212]	; (8004918 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d125      	bne.n	8004892 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004846:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800484a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d11f      	bne.n	8004892 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2c      	ldr	r2, [pc, #176]	; (8004908 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d104      	bne.n	8004866 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2e      	ldr	r2, [pc, #184]	; (800491c <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d03d      	beq.n	80048e2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800486e:	d004      	beq.n	800487a <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a24      	ldr	r2, [pc, #144]	; (8004908 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d101      	bne.n	800487e <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 800487a:	4a24      	ldr	r2, [pc, #144]	; (800490c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800487c:	e000      	b.n	8004880 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 800487e:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004880:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004884:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f7ff f99e 	bl	8003bcc <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004890:	e027      	b.n	80048e2 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a22      	ldr	r2, [pc, #136]	; (8004920 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d123      	bne.n	80048e4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800489c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11d      	bne.n	80048e4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a16      	ldr	r2, [pc, #88]	; (8004908 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d018      	beq.n	80048e4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048ba:	d004      	beq.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a11      	ldr	r2, [pc, #68]	; (8004908 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 80048c6:	4a11      	ldr	r2, [pc, #68]	; (800490c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80048c8:	e000      	b.n	80048cc <HAL_ADCEx_InjectedConfigChannel+0xa00>
 80048ca:	4a0b      	ldr	r2, [pc, #44]	; (80048f8 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80048cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048d4:	4619      	mov	r1, r3
 80048d6:	4610      	mov	r0, r2
 80048d8:	f7ff f978 	bl	8003bcc <LL_ADC_SetCommonPathInternalCh>
 80048dc:	e002      	b.n	80048e4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048de:	bf00      	nop
 80048e0:	e000      	b.n	80048e4 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048e2:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80048ec:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	37d8      	adds	r7, #216	; 0xd8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	50000700 	.word	0x50000700
 80048fc:	c3210000 	.word	0xc3210000
 8004900:	90c00010 	.word	0x90c00010
 8004904:	50000600 	.word	0x50000600
 8004908:	50000100 	.word	0x50000100
 800490c:	50000300 	.word	0x50000300
 8004910:	20000000 	.word	0x20000000
 8004914:	053e2d63 	.word	0x053e2d63
 8004918:	c7520000 	.word	0xc7520000
 800491c:	50000500 	.word	0x50000500
 8004920:	cb840000 	.word	0xcb840000

08004924 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004924:	b590      	push	{r4, r7, lr}
 8004926:	b0a1      	sub	sp, #132	; 0x84
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800493e:	2302      	movs	r3, #2
 8004940:	e0e7      	b.n	8004b12 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800494a:	2300      	movs	r3, #0
 800494c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800494e:	2300      	movs	r3, #0
 8004950:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800495a:	d102      	bne.n	8004962 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800495c:	4b6f      	ldr	r3, [pc, #444]	; (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800495e:	60bb      	str	r3, [r7, #8]
 8004960:	e009      	b.n	8004976 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a6e      	ldr	r2, [pc, #440]	; (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d102      	bne.n	8004972 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800496c:	4b6d      	ldr	r3, [pc, #436]	; (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800496e:	60bb      	str	r3, [r7, #8]
 8004970:	e001      	b.n	8004976 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004972:	2300      	movs	r3, #0
 8004974:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004980:	f043 0220 	orr.w	r2, r3, #32
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0be      	b.n	8004b12 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4618      	mov	r0, r3
 8004998:	f7ff fa3f 	bl	8003e1a <LL_ADC_REG_IsConversionOngoing>
 800499c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fa39 	bl	8003e1a <LL_ADC_REG_IsConversionOngoing>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f040 80a0 	bne.w	8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80049b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 809c 	bne.w	8004af0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049c0:	d004      	beq.n	80049cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a55      	ldr	r2, [pc, #340]	; (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d101      	bne.n	80049d0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80049cc:	4b56      	ldr	r3, [pc, #344]	; (8004b28 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80049ce:	e000      	b.n	80049d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80049d0:	4b56      	ldr	r3, [pc, #344]	; (8004b2c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80049d2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d04b      	beq.n	8004a74 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80049dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	6859      	ldr	r1, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80049ee:	035b      	lsls	r3, r3, #13
 80049f0:	430b      	orrs	r3, r1
 80049f2:	431a      	orrs	r2, r3
 80049f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a00:	d004      	beq.n	8004a0c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a45      	ldr	r2, [pc, #276]	; (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d10f      	bne.n	8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004a0c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004a10:	f7ff f9f0 	bl	8003df4 <LL_ADC_IsEnabled>
 8004a14:	4604      	mov	r4, r0
 8004a16:	4841      	ldr	r0, [pc, #260]	; (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a18:	f7ff f9ec 	bl	8003df4 <LL_ADC_IsEnabled>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4323      	orrs	r3, r4
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	e012      	b.n	8004a52 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004a2c:	483c      	ldr	r0, [pc, #240]	; (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a2e:	f7ff f9e1 	bl	8003df4 <LL_ADC_IsEnabled>
 8004a32:	4604      	mov	r4, r0
 8004a34:	483b      	ldr	r0, [pc, #236]	; (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a36:	f7ff f9dd 	bl	8003df4 <LL_ADC_IsEnabled>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	431c      	orrs	r4, r3
 8004a3e:	483c      	ldr	r0, [pc, #240]	; (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004a40:	f7ff f9d8 	bl	8003df4 <LL_ADC_IsEnabled>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4323      	orrs	r3, r4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d056      	beq.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004a5e:	f023 030f 	bic.w	r3, r3, #15
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	6811      	ldr	r1, [r2, #0]
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	6892      	ldr	r2, [r2, #8]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a70:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a72:	e047      	b.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004a74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a7e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a88:	d004      	beq.n	8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a23      	ldr	r2, [pc, #140]	; (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d10f      	bne.n	8004ab4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004a94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004a98:	f7ff f9ac 	bl	8003df4 <LL_ADC_IsEnabled>
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	481f      	ldr	r0, [pc, #124]	; (8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004aa0:	f7ff f9a8 	bl	8003df4 <LL_ADC_IsEnabled>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4323      	orrs	r3, r4
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e012      	b.n	8004ada <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004ab4:	481a      	ldr	r0, [pc, #104]	; (8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004ab6:	f7ff f99d 	bl	8003df4 <LL_ADC_IsEnabled>
 8004aba:	4604      	mov	r4, r0
 8004abc:	4819      	ldr	r0, [pc, #100]	; (8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004abe:	f7ff f999 	bl	8003df4 <LL_ADC_IsEnabled>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	431c      	orrs	r4, r3
 8004ac6:	481a      	ldr	r0, [pc, #104]	; (8004b30 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004ac8:	f7ff f994 	bl	8003df4 <LL_ADC_IsEnabled>
 8004acc:	4603      	mov	r3, r0
 8004ace:	4323      	orrs	r3, r4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d012      	beq.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ae6:	f023 030f 	bic.w	r3, r3, #15
 8004aea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004aec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004aee:	e009      	b.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af4:	f043 0220 	orr.w	r2, r3, #32
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004b02:	e000      	b.n	8004b06 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3784      	adds	r7, #132	; 0x84
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd90      	pop	{r4, r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	50000100 	.word	0x50000100
 8004b20:	50000400 	.word	0x50000400
 8004b24:	50000500 	.word	0x50000500
 8004b28:	50000300 	.word	0x50000300
 8004b2c:	50000700 	.word	0x50000700
 8004b30:	50000600 	.word	0x50000600

08004b34 <HAL_ADCEx_EnableInjectedQueue>:
  *         conversion is ongoing.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_EnableInjectedQueue(ADC_HandleTypeDef *hadc)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff f96a 	bl	8003e1a <LL_ADC_REG_IsConversionOngoing>
 8004b46:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7ff f977 	bl	8003e40 <LL_ADC_INJ_IsConversionOngoing>
 8004b52:	60f8      	str	r0, [r7, #12]

  /* Parameter can be set only if no conversion is on-going */
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d113      	bne.n	8004b82 <HAL_ADCEx_EnableInjectedQueue+0x4e>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d110      	bne.n	8004b82 <HAL_ADCEx_EnableInjectedQueue+0x4e>
     )
  {
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004b6e:	60da      	str	r2, [r3, #12]

    /* Update state, clear previous result related to injected queue overflow */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b74:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	75fb      	strb	r3, [r7, #23]
 8004b80:	e001      	b.n	8004b86 <HAL_ADCEx_EnableInjectedQueue+0x52>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8004b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bac:	4013      	ands	r3, r2
 8004bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bc2:	4a04      	ldr	r2, [pc, #16]	; (8004bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	60d3      	str	r3, [r2, #12]
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	e000ed00 	.word	0xe000ed00

08004bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bdc:	4b04      	ldr	r3, [pc, #16]	; (8004bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	0a1b      	lsrs	r3, r3, #8
 8004be2:	f003 0307 	and.w	r3, r3, #7
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	e000ed00 	.word	0xe000ed00

08004bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	db0b      	blt.n	8004c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	f003 021f 	and.w	r2, r3, #31
 8004c0c:	4907      	ldr	r1, [pc, #28]	; (8004c2c <__NVIC_EnableIRQ+0x38>)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	2001      	movs	r0, #1
 8004c16:	fa00 f202 	lsl.w	r2, r0, r2
 8004c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	e000e100 	.word	0xe000e100

08004c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	6039      	str	r1, [r7, #0]
 8004c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	db0a      	blt.n	8004c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	490c      	ldr	r1, [pc, #48]	; (8004c7c <__NVIC_SetPriority+0x4c>)
 8004c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4e:	0112      	lsls	r2, r2, #4
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	440b      	add	r3, r1
 8004c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c58:	e00a      	b.n	8004c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	4908      	ldr	r1, [pc, #32]	; (8004c80 <__NVIC_SetPriority+0x50>)
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	3b04      	subs	r3, #4
 8004c68:	0112      	lsls	r2, r2, #4
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	761a      	strb	r2, [r3, #24]
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	e000e100 	.word	0xe000e100
 8004c80:	e000ed00 	.word	0xe000ed00

08004c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	; 0x24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f1c3 0307 	rsb	r3, r3, #7
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	bf28      	it	cs
 8004ca2:	2304      	movcs	r3, #4
 8004ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	2b06      	cmp	r3, #6
 8004cac:	d902      	bls.n	8004cb4 <NVIC_EncodePriority+0x30>
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3b03      	subs	r3, #3
 8004cb2:	e000      	b.n	8004cb6 <NVIC_EncodePriority+0x32>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd6:	43d9      	mvns	r1, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cdc:	4313      	orrs	r3, r2
         );
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3724      	adds	r7, #36	; 0x24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cfc:	d301      	bcc.n	8004d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e00f      	b.n	8004d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d02:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <SysTick_Config+0x40>)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d0a:	210f      	movs	r1, #15
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	f7ff ff8e 	bl	8004c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <SysTick_Config+0x40>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d1a:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <SysTick_Config+0x40>)
 8004d1c:	2207      	movs	r2, #7
 8004d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	e000e010 	.word	0xe000e010

08004d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff ff29 	bl	8004b90 <__NVIC_SetPriorityGrouping>
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b086      	sub	sp, #24
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d54:	f7ff ff40 	bl	8004bd8 <__NVIC_GetPriorityGrouping>
 8004d58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	6978      	ldr	r0, [r7, #20]
 8004d60:	f7ff ff90 	bl	8004c84 <NVIC_EncodePriority>
 8004d64:	4602      	mov	r2, r0
 8004d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff ff5f 	bl	8004c30 <__NVIC_SetPriority>
}
 8004d72:	bf00      	nop
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	4603      	mov	r3, r0
 8004d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff ff33 	bl	8004bf4 <__NVIC_EnableIRQ>
}
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b082      	sub	sp, #8
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff ffa4 	bl	8004cec <SysTick_Config>
 8004da4:	4603      	mov	r3, r0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e08d      	b.n	8004ede <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	4b47      	ldr	r3, [pc, #284]	; (8004ee8 <HAL_DMA_Init+0x138>)
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d80f      	bhi.n	8004dee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4b45      	ldr	r3, [pc, #276]	; (8004eec <HAL_DMA_Init+0x13c>)
 8004dd6:	4413      	add	r3, r2
 8004dd8:	4a45      	ldr	r2, [pc, #276]	; (8004ef0 <HAL_DMA_Init+0x140>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	091b      	lsrs	r3, r3, #4
 8004de0:	009a      	lsls	r2, r3, #2
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a42      	ldr	r2, [pc, #264]	; (8004ef4 <HAL_DMA_Init+0x144>)
 8004dea:	641a      	str	r2, [r3, #64]	; 0x40
 8004dec:	e00e      	b.n	8004e0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	4b40      	ldr	r3, [pc, #256]	; (8004ef8 <HAL_DMA_Init+0x148>)
 8004df6:	4413      	add	r3, r2
 8004df8:	4a3d      	ldr	r2, [pc, #244]	; (8004ef0 <HAL_DMA_Init+0x140>)
 8004dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfe:	091b      	lsrs	r3, r3, #4
 8004e00:	009a      	lsls	r2, r3, #2
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a3c      	ldr	r2, [pc, #240]	; (8004efc <HAL_DMA_Init+0x14c>)
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fa76 	bl	8005350 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e6c:	d102      	bne.n	8004e74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d010      	beq.n	8004eb4 <HAL_DMA_Init+0x104>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d80c      	bhi.n	8004eb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa96 	bl	80053cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	e008      	b.n	8004ec6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40020407 	.word	0x40020407
 8004eec:	bffdfff8 	.word	0xbffdfff8
 8004ef0:	cccccccd 	.word	0xcccccccd
 8004ef4:	40020000 	.word	0x40020000
 8004ef8:	bffdfbf8 	.word	0xbffdfbf8
 8004efc:	40020400 	.word	0x40020400

08004f00 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_DMA_Start_IT+0x20>
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	e066      	b.n	8004fee <HAL_DMA_Start_IT+0xee>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d155      	bne.n	8004fe0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0201 	bic.w	r2, r2, #1
 8004f50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f9bb 	bl	80052d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 020e 	orr.w	r2, r2, #14
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	e00f      	b.n	8004f98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0204 	bic.w	r2, r2, #4
 8004f86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 020a 	orr.w	r2, r2, #10
 8004f96:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fb4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d007      	beq.n	8004fce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fcc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f042 0201 	orr.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	e005      	b.n	8004fec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d005      	beq.n	800501a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2204      	movs	r2, #4
 8005012:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
 8005018:	e037      	b.n	800508a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 020e 	bic.w	r2, r2, #14
 8005028:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005038:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0201 	bic.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	f003 021f 	and.w	r2, r3, #31
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2101      	movs	r1, #1
 8005058:	fa01 f202 	lsl.w	r2, r1, r2
 800505c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005066:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00c      	beq.n	800508a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800507e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005088:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800509a:	7bfb      	ldrb	r3, [r7, #15]
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d00d      	beq.n	80050dc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2204      	movs	r2, #4
 80050c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
 80050da:	e047      	b.n	800516c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 020e 	bic.w	r2, r2, #14
 80050ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0201 	bic.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005106:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800510a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	f003 021f 	and.w	r2, r3, #31
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	2101      	movs	r1, #1
 800511a:	fa01 f202 	lsl.w	r2, r1, r2
 800511e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005128:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00c      	beq.n	800514c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005140:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800514a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	4798      	blx	r3
    }
  }
  return status;
 800516c:	7bfb      	ldrb	r3, [r7, #15]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	f003 031f 	and.w	r3, r3, #31
 8005196:	2204      	movs	r2, #4
 8005198:	409a      	lsls	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4013      	ands	r3, r2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d026      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x7a>
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d021      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d107      	bne.n	80051ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0204 	bic.w	r2, r2, #4
 80051c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ce:	f003 021f 	and.w	r2, r3, #31
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	2104      	movs	r1, #4
 80051d8:	fa01 f202 	lsl.w	r2, r1, r2
 80051dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d071      	beq.n	80052ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80051ee:	e06c      	b.n	80052ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f4:	f003 031f 	and.w	r3, r3, #31
 80051f8:	2202      	movs	r2, #2
 80051fa:	409a      	lsls	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4013      	ands	r3, r2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d02e      	beq.n	8005262 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d029      	beq.n	8005262 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0320 	and.w	r3, r3, #32
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10b      	bne.n	8005234 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 020a 	bic.w	r2, r2, #10
 800522a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005238:	f003 021f 	and.w	r2, r3, #31
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2102      	movs	r1, #2
 8005242:	fa01 f202 	lsl.w	r2, r1, r2
 8005246:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005254:	2b00      	cmp	r3, #0
 8005256:	d038      	beq.n	80052ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005260:	e033      	b.n	80052ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	f003 031f 	and.w	r3, r3, #31
 800526a:	2208      	movs	r2, #8
 800526c:	409a      	lsls	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4013      	ands	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d02a      	beq.n	80052cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f003 0308 	and.w	r3, r3, #8
 800527c:	2b00      	cmp	r3, #0
 800527e:	d025      	beq.n	80052cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 020e 	bic.w	r2, r2, #14
 800528e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005294:	f003 021f 	and.w	r2, r3, #31
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529c:	2101      	movs	r1, #1
 800529e:	fa01 f202 	lsl.w	r2, r1, r2
 80052a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d004      	beq.n	80052cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80052ca:	bf00      	nop
 80052cc:	bf00      	nop
}
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80052ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d004      	beq.n	80052fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80052fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	f003 021f 	and.w	r2, r3, #31
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530a:	2101      	movs	r1, #1
 800530c:	fa01 f202 	lsl.w	r2, r1, r2
 8005310:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2b10      	cmp	r3, #16
 8005320:	d108      	bne.n	8005334 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005332:	e007      	b.n	8005344 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	60da      	str	r2, [r3, #12]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	461a      	mov	r2, r3
 800535e:	4b16      	ldr	r3, [pc, #88]	; (80053b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005360:	429a      	cmp	r2, r3
 8005362:	d802      	bhi.n	800536a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005364:	4b15      	ldr	r3, [pc, #84]	; (80053bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005366:	617b      	str	r3, [r7, #20]
 8005368:	e001      	b.n	800536e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800536a:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800536c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	3b08      	subs	r3, #8
 800537a:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800537c:	fba2 2303 	umull	r2, r3, r2, r3
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	089b      	lsrs	r3, r3, #2
 800538a:	009a      	lsls	r2, r3, #2
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	4413      	add	r3, r2
 8005390:	461a      	mov	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a0b      	ldr	r2, [pc, #44]	; (80053c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800539a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	2201      	movs	r2, #1
 80053a4:	409a      	lsls	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40020407 	.word	0x40020407
 80053bc:	40020800 	.word	0x40020800
 80053c0:	40020820 	.word	0x40020820
 80053c4:	cccccccd 	.word	0xcccccccd
 80053c8:	40020880 	.word	0x40020880

080053cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4b0b      	ldr	r3, [pc, #44]	; (800540c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	461a      	mov	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a08      	ldr	r2, [pc, #32]	; (8005410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80053ee:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3b01      	subs	r3, #1
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	2201      	movs	r2, #1
 80053fa:	409a      	lsls	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	1000823f 	.word	0x1000823f
 8005410:	40020940 	.word	0x40020940

08005414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800541e:	2300      	movs	r3, #0
 8005420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005422:	e15a      	b.n	80056da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	2101      	movs	r1, #1
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	fa01 f303 	lsl.w	r3, r1, r3
 8005430:	4013      	ands	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 814c 	beq.w	80056d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	2b01      	cmp	r3, #1
 8005446:	d005      	beq.n	8005454 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005450:	2b02      	cmp	r3, #2
 8005452:	d130      	bne.n	80054b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	2203      	movs	r2, #3
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4013      	ands	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800548a:	2201      	movs	r2, #1
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4013      	ands	r3, r2
 8005498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	091b      	lsrs	r3, r3, #4
 80054a0:	f003 0201 	and.w	r2, r3, #1
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d017      	beq.n	80054f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	2203      	movs	r2, #3
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43db      	mvns	r3, r3
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	4013      	ands	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d123      	bne.n	8005546 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	08da      	lsrs	r2, r3, #3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3208      	adds	r2, #8
 8005506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800550a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	220f      	movs	r2, #15
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43db      	mvns	r3, r3
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	4013      	ands	r3, r2
 8005520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	691a      	ldr	r2, [r3, #16]
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	08da      	lsrs	r2, r3, #3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3208      	adds	r2, #8
 8005540:	6939      	ldr	r1, [r7, #16]
 8005542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	2203      	movs	r2, #3
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	43db      	mvns	r3, r3
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4013      	ands	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f003 0203 	and.w	r2, r3, #3
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80a6 	beq.w	80056d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005588:	4b5b      	ldr	r3, [pc, #364]	; (80056f8 <HAL_GPIO_Init+0x2e4>)
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	4a5a      	ldr	r2, [pc, #360]	; (80056f8 <HAL_GPIO_Init+0x2e4>)
 800558e:	f043 0301 	orr.w	r3, r3, #1
 8005592:	6613      	str	r3, [r2, #96]	; 0x60
 8005594:	4b58      	ldr	r3, [pc, #352]	; (80056f8 <HAL_GPIO_Init+0x2e4>)
 8005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	60bb      	str	r3, [r7, #8]
 800559e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055a0:	4a56      	ldr	r2, [pc, #344]	; (80056fc <HAL_GPIO_Init+0x2e8>)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	089b      	lsrs	r3, r3, #2
 80055a6:	3302      	adds	r3, #2
 80055a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f003 0303 	and.w	r3, r3, #3
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	220f      	movs	r2, #15
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	43db      	mvns	r3, r3
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4013      	ands	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80055ca:	d01f      	beq.n	800560c <HAL_GPIO_Init+0x1f8>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a4c      	ldr	r2, [pc, #304]	; (8005700 <HAL_GPIO_Init+0x2ec>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d019      	beq.n	8005608 <HAL_GPIO_Init+0x1f4>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a4b      	ldr	r2, [pc, #300]	; (8005704 <HAL_GPIO_Init+0x2f0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <HAL_GPIO_Init+0x1f0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a4a      	ldr	r2, [pc, #296]	; (8005708 <HAL_GPIO_Init+0x2f4>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00d      	beq.n	8005600 <HAL_GPIO_Init+0x1ec>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a49      	ldr	r2, [pc, #292]	; (800570c <HAL_GPIO_Init+0x2f8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d007      	beq.n	80055fc <HAL_GPIO_Init+0x1e8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a48      	ldr	r2, [pc, #288]	; (8005710 <HAL_GPIO_Init+0x2fc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d101      	bne.n	80055f8 <HAL_GPIO_Init+0x1e4>
 80055f4:	2305      	movs	r3, #5
 80055f6:	e00a      	b.n	800560e <HAL_GPIO_Init+0x1fa>
 80055f8:	2306      	movs	r3, #6
 80055fa:	e008      	b.n	800560e <HAL_GPIO_Init+0x1fa>
 80055fc:	2304      	movs	r3, #4
 80055fe:	e006      	b.n	800560e <HAL_GPIO_Init+0x1fa>
 8005600:	2303      	movs	r3, #3
 8005602:	e004      	b.n	800560e <HAL_GPIO_Init+0x1fa>
 8005604:	2302      	movs	r3, #2
 8005606:	e002      	b.n	800560e <HAL_GPIO_Init+0x1fa>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <HAL_GPIO_Init+0x1fa>
 800560c:	2300      	movs	r3, #0
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	f002 0203 	and.w	r2, r2, #3
 8005614:	0092      	lsls	r2, r2, #2
 8005616:	4093      	lsls	r3, r2
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800561e:	4937      	ldr	r1, [pc, #220]	; (80056fc <HAL_GPIO_Init+0x2e8>)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	3302      	adds	r3, #2
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800562c:	4b39      	ldr	r3, [pc, #228]	; (8005714 <HAL_GPIO_Init+0x300>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	43db      	mvns	r3, r3
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	4013      	ands	r3, r2
 800563a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005650:	4a30      	ldr	r2, [pc, #192]	; (8005714 <HAL_GPIO_Init+0x300>)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005656:	4b2f      	ldr	r3, [pc, #188]	; (8005714 <HAL_GPIO_Init+0x300>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	43db      	mvns	r3, r3
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4013      	ands	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800567a:	4a26      	ldr	r2, [pc, #152]	; (8005714 <HAL_GPIO_Init+0x300>)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005680:	4b24      	ldr	r3, [pc, #144]	; (8005714 <HAL_GPIO_Init+0x300>)
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	43db      	mvns	r3, r3
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80056a4:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <HAL_GPIO_Init+0x300>)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80056aa:	4b1a      	ldr	r3, [pc, #104]	; (8005714 <HAL_GPIO_Init+0x300>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	43db      	mvns	r3, r3
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4013      	ands	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80056ce:	4a11      	ldr	r2, [pc, #68]	; (8005714 <HAL_GPIO_Init+0x300>)
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	3301      	adds	r3, #1
 80056d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	fa22 f303 	lsr.w	r3, r2, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f47f ae9d 	bne.w	8005424 <HAL_GPIO_Init+0x10>
  }
}
 80056ea:	bf00      	nop
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	40021000 	.word	0x40021000
 80056fc:	40010000 	.word	0x40010000
 8005700:	48000400 	.word	0x48000400
 8005704:	48000800 	.word	0x48000800
 8005708:	48000c00 	.word	0x48000c00
 800570c:	48001000 	.word	0x48001000
 8005710:	48001400 	.word	0x48001400
 8005714:	40010400 	.word	0x40010400

08005718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	807b      	strh	r3, [r7, #2]
 8005724:	4613      	mov	r3, r2
 8005726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005728:	787b      	ldrb	r3, [r7, #1]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800572e:	887a      	ldrh	r2, [r7, #2]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005734:	e002      	b.n	800573c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005736:	887a      	ldrh	r2, [r7, #2]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800575a:	887a      	ldrh	r2, [r7, #2]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4013      	ands	r3, r2
 8005760:	041a      	lsls	r2, r3, #16
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	43d9      	mvns	r1, r3
 8005766:	887b      	ldrh	r3, [r7, #2]
 8005768:	400b      	ands	r3, r1
 800576a:	431a      	orrs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	619a      	str	r2, [r3, #24]
}
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d141      	bne.n	800580e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800578a:	4b4b      	ldr	r3, [pc, #300]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005796:	d131      	bne.n	80057fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005798:	4b47      	ldr	r3, [pc, #284]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800579a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800579e:	4a46      	ldr	r2, [pc, #280]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057a8:	4b43      	ldr	r3, [pc, #268]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057b0:	4a41      	ldr	r2, [pc, #260]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057b8:	4b40      	ldr	r3, [pc, #256]	; (80058bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2232      	movs	r2, #50	; 0x32
 80057be:	fb02 f303 	mul.w	r3, r2, r3
 80057c2:	4a3f      	ldr	r2, [pc, #252]	; (80058c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057c4:	fba2 2303 	umull	r2, r3, r2, r3
 80057c8:	0c9b      	lsrs	r3, r3, #18
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057ce:	e002      	b.n	80057d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057d6:	4b38      	ldr	r3, [pc, #224]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e2:	d102      	bne.n	80057ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f2      	bne.n	80057d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057ea:	4b33      	ldr	r3, [pc, #204]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f6:	d158      	bne.n	80058aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e057      	b.n	80058ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057fc:	4b2e      	ldr	r3, [pc, #184]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005802:	4a2d      	ldr	r2, [pc, #180]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005808:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800580c:	e04d      	b.n	80058aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005814:	d141      	bne.n	800589a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005816:	4b28      	ldr	r3, [pc, #160]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800581e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005822:	d131      	bne.n	8005888 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005824:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800582a:	4a23      	ldr	r2, [pc, #140]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005830:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005834:	4b20      	ldr	r3, [pc, #128]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800583c:	4a1e      	ldr	r2, [pc, #120]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800583e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005842:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005844:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2232      	movs	r2, #50	; 0x32
 800584a:	fb02 f303 	mul.w	r3, r2, r3
 800584e:	4a1c      	ldr	r2, [pc, #112]	; (80058c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005850:	fba2 2303 	umull	r2, r3, r2, r3
 8005854:	0c9b      	lsrs	r3, r3, #18
 8005856:	3301      	adds	r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800585a:	e002      	b.n	8005862 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3b01      	subs	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005862:	4b15      	ldr	r3, [pc, #84]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800586a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586e:	d102      	bne.n	8005876 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f2      	bne.n	800585c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005876:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005882:	d112      	bne.n	80058aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e011      	b.n	80058ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800588a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800588e:	4a0a      	ldr	r2, [pc, #40]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005898:	e007      	b.n	80058aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800589a:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058a2:	4a05      	ldr	r2, [pc, #20]	; (80058b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	40007000 	.word	0x40007000
 80058bc:	20000000 	.word	0x20000000
 80058c0:	431bde83 	.word	0x431bde83

080058c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	4a04      	ldr	r2, [pc, #16]	; (80058e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058d2:	6093      	str	r3, [r2, #8]
}
 80058d4:	bf00      	nop
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40007000 	.word	0x40007000

080058e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e306      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d075      	beq.n	80059ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005902:	4b97      	ldr	r3, [pc, #604]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 030c 	and.w	r3, r3, #12
 800590a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800590c:	4b94      	ldr	r3, [pc, #592]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2b0c      	cmp	r3, #12
 800591a:	d102      	bne.n	8005922 <HAL_RCC_OscConfig+0x3e>
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	2b03      	cmp	r3, #3
 8005920:	d002      	beq.n	8005928 <HAL_RCC_OscConfig+0x44>
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d10b      	bne.n	8005940 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005928:	4b8d      	ldr	r3, [pc, #564]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d05b      	beq.n	80059ec <HAL_RCC_OscConfig+0x108>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d157      	bne.n	80059ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e2e1      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005948:	d106      	bne.n	8005958 <HAL_RCC_OscConfig+0x74>
 800594a:	4b85      	ldr	r3, [pc, #532]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a84      	ldr	r2, [pc, #528]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005954:	6013      	str	r3, [r2, #0]
 8005956:	e01d      	b.n	8005994 <HAL_RCC_OscConfig+0xb0>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005960:	d10c      	bne.n	800597c <HAL_RCC_OscConfig+0x98>
 8005962:	4b7f      	ldr	r3, [pc, #508]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a7e      	ldr	r2, [pc, #504]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	4b7c      	ldr	r3, [pc, #496]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a7b      	ldr	r2, [pc, #492]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	e00b      	b.n	8005994 <HAL_RCC_OscConfig+0xb0>
 800597c:	4b78      	ldr	r3, [pc, #480]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a77      	ldr	r2, [pc, #476]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	4b75      	ldr	r3, [pc, #468]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a74      	ldr	r2, [pc, #464]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 800598e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d013      	beq.n	80059c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599c:	f7fc fc7c 	bl	8002298 <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059a4:	f7fc fc78 	bl	8002298 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b64      	cmp	r3, #100	; 0x64
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e2a6      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059b6:	4b6a      	ldr	r3, [pc, #424]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCC_OscConfig+0xc0>
 80059c2:	e014      	b.n	80059ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c4:	f7fc fc68 	bl	8002298 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059cc:	f7fc fc64 	bl	8002298 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b64      	cmp	r3, #100	; 0x64
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e292      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059de:	4b60      	ldr	r3, [pc, #384]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f0      	bne.n	80059cc <HAL_RCC_OscConfig+0xe8>
 80059ea:	e000      	b.n	80059ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d075      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059fa:	4b59      	ldr	r3, [pc, #356]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 030c 	and.w	r3, r3, #12
 8005a02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a04:	4b56      	ldr	r3, [pc, #344]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0303 	and.w	r3, r3, #3
 8005a0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	2b0c      	cmp	r3, #12
 8005a12:	d102      	bne.n	8005a1a <HAL_RCC_OscConfig+0x136>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d002      	beq.n	8005a20 <HAL_RCC_OscConfig+0x13c>
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d11f      	bne.n	8005a60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a20:	4b4f      	ldr	r3, [pc, #316]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_RCC_OscConfig+0x154>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d101      	bne.n	8005a38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e265      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a38:	4b49      	ldr	r3, [pc, #292]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	061b      	lsls	r3, r3, #24
 8005a46:	4946      	ldr	r1, [pc, #280]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a4c:	4b45      	ldr	r3, [pc, #276]	; (8005b64 <HAL_RCC_OscConfig+0x280>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fc fbd5 	bl	8002200 <HAL_InitTick>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d043      	beq.n	8005ae4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e251      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d023      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a68:	4b3d      	ldr	r3, [pc, #244]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a3c      	ldr	r2, [pc, #240]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a74:	f7fc fc10 	bl	8002298 <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a7c:	f7fc fc0c 	bl	8002298 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e23a      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a8e:	4b34      	ldr	r3, [pc, #208]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f0      	beq.n	8005a7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a9a:	4b31      	ldr	r3, [pc, #196]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	061b      	lsls	r3, r3, #24
 8005aa8:	492d      	ldr	r1, [pc, #180]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	604b      	str	r3, [r1, #4]
 8005aae:	e01a      	b.n	8005ae6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ab0:	4b2b      	ldr	r3, [pc, #172]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a2a      	ldr	r2, [pc, #168]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fc fbec 	bl	8002298 <HAL_GetTick>
 8005ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac4:	f7fc fbe8 	bl	8002298 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e216      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ad6:	4b22      	ldr	r3, [pc, #136]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1f0      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x1e0>
 8005ae2:	e000      	b.n	8005ae6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ae4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d041      	beq.n	8005b76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d01c      	beq.n	8005b34 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005afa:	4b19      	ldr	r3, [pc, #100]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b00:	4a17      	ldr	r2, [pc, #92]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005b02:	f043 0301 	orr.w	r3, r3, #1
 8005b06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0a:	f7fc fbc5 	bl	8002298 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b12:	f7fc fbc1 	bl	8002298 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e1ef      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b24:	4b0e      	ldr	r3, [pc, #56]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0ef      	beq.n	8005b12 <HAL_RCC_OscConfig+0x22e>
 8005b32:	e020      	b.n	8005b76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b34:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b3a:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <HAL_RCC_OscConfig+0x27c>)
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b44:	f7fc fba8 	bl	8002298 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b4a:	e00d      	b.n	8005b68 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b4c:	f7fc fba4 	bl	8002298 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d906      	bls.n	8005b68 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e1d2      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
 8005b5e:	bf00      	nop
 8005b60:	40021000 	.word	0x40021000
 8005b64:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b68:	4b8c      	ldr	r3, [pc, #560]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1ea      	bne.n	8005b4c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80a6 	beq.w	8005cd0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b84:	2300      	movs	r3, #0
 8005b86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b88:	4b84      	ldr	r3, [pc, #528]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_RCC_OscConfig+0x2b4>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <HAL_RCC_OscConfig+0x2b6>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00d      	beq.n	8005bba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b9e:	4b7f      	ldr	r3, [pc, #508]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba2:	4a7e      	ldr	r2, [pc, #504]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8005baa:	4b7c      	ldr	r3, [pc, #496]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bba:	4b79      	ldr	r3, [pc, #484]	; (8005da0 <HAL_RCC_OscConfig+0x4bc>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d118      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bc6:	4b76      	ldr	r3, [pc, #472]	; (8005da0 <HAL_RCC_OscConfig+0x4bc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a75      	ldr	r2, [pc, #468]	; (8005da0 <HAL_RCC_OscConfig+0x4bc>)
 8005bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bd2:	f7fc fb61 	bl	8002298 <HAL_GetTick>
 8005bd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bd8:	e008      	b.n	8005bec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bda:	f7fc fb5d 	bl	8002298 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e18b      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005bec:	4b6c      	ldr	r3, [pc, #432]	; (8005da0 <HAL_RCC_OscConfig+0x4bc>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0f0      	beq.n	8005bda <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d108      	bne.n	8005c12 <HAL_RCC_OscConfig+0x32e>
 8005c00:	4b66      	ldr	r3, [pc, #408]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c06:	4a65      	ldr	r2, [pc, #404]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c10:	e024      	b.n	8005c5c <HAL_RCC_OscConfig+0x378>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b05      	cmp	r3, #5
 8005c18:	d110      	bne.n	8005c3c <HAL_RCC_OscConfig+0x358>
 8005c1a:	4b60      	ldr	r3, [pc, #384]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c20:	4a5e      	ldr	r2, [pc, #376]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005c22:	f043 0304 	orr.w	r3, r3, #4
 8005c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c2a:	4b5c      	ldr	r3, [pc, #368]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c30:	4a5a      	ldr	r2, [pc, #360]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005c32:	f043 0301 	orr.w	r3, r3, #1
 8005c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c3a:	e00f      	b.n	8005c5c <HAL_RCC_OscConfig+0x378>
 8005c3c:	4b57      	ldr	r3, [pc, #348]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c42:	4a56      	ldr	r2, [pc, #344]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005c44:	f023 0301 	bic.w	r3, r3, #1
 8005c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c4c:	4b53      	ldr	r3, [pc, #332]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c52:	4a52      	ldr	r2, [pc, #328]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005c54:	f023 0304 	bic.w	r3, r3, #4
 8005c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d016      	beq.n	8005c92 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c64:	f7fc fb18 	bl	8002298 <HAL_GetTick>
 8005c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c6a:	e00a      	b.n	8005c82 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c6c:	f7fc fb14 	bl	8002298 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e140      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c82:	4b46      	ldr	r3, [pc, #280]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d0ed      	beq.n	8005c6c <HAL_RCC_OscConfig+0x388>
 8005c90:	e015      	b.n	8005cbe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c92:	f7fc fb01 	bl	8002298 <HAL_GetTick>
 8005c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c98:	e00a      	b.n	8005cb0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c9a:	f7fc fafd 	bl	8002298 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e129      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cb0:	4b3a      	ldr	r3, [pc, #232]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1ed      	bne.n	8005c9a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cbe:	7ffb      	ldrb	r3, [r7, #31]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d105      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cc4:	4b35      	ldr	r3, [pc, #212]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc8:	4a34      	ldr	r2, [pc, #208]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d03c      	beq.n	8005d56 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01c      	beq.n	8005d1e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ce4:	4b2d      	ldr	r3, [pc, #180]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cea:	4a2c      	ldr	r2, [pc, #176]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf4:	f7fc fad0 	bl	8002298 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cfc:	f7fc facc 	bl	8002298 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e0fa      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d0e:	4b23      	ldr	r3, [pc, #140]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0ef      	beq.n	8005cfc <HAL_RCC_OscConfig+0x418>
 8005d1c:	e01b      	b.n	8005d56 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d1e:	4b1f      	ldr	r3, [pc, #124]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005d20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d24:	4a1d      	ldr	r2, [pc, #116]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005d26:	f023 0301 	bic.w	r3, r3, #1
 8005d2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2e:	f7fc fab3 	bl	8002298 <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d36:	f7fc faaf 	bl	8002298 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e0dd      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d48:	4b14      	ldr	r3, [pc, #80]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1ef      	bne.n	8005d36 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f000 80d1 	beq.w	8005f02 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d60:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 030c 	and.w	r3, r3, #12
 8005d68:	2b0c      	cmp	r3, #12
 8005d6a:	f000 808b 	beq.w	8005e84 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d15e      	bne.n	8005e34 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d76:	4b09      	ldr	r3, [pc, #36]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a08      	ldr	r2, [pc, #32]	; (8005d9c <HAL_RCC_OscConfig+0x4b8>)
 8005d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d82:	f7fc fa89 	bl	8002298 <HAL_GetTick>
 8005d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d88:	e00c      	b.n	8005da4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d8a:	f7fc fa85 	bl	8002298 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d905      	bls.n	8005da4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e0b3      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
 8005d9c:	40021000 	.word	0x40021000
 8005da0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005da4:	4b59      	ldr	r3, [pc, #356]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1ec      	bne.n	8005d8a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005db0:	4b56      	ldr	r3, [pc, #344]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	4b56      	ldr	r3, [pc, #344]	; (8005f10 <HAL_RCC_OscConfig+0x62c>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6a11      	ldr	r1, [r2, #32]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dc0:	3a01      	subs	r2, #1
 8005dc2:	0112      	lsls	r2, r2, #4
 8005dc4:	4311      	orrs	r1, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005dca:	0212      	lsls	r2, r2, #8
 8005dcc:	4311      	orrs	r1, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005dd2:	0852      	lsrs	r2, r2, #1
 8005dd4:	3a01      	subs	r2, #1
 8005dd6:	0552      	lsls	r2, r2, #21
 8005dd8:	4311      	orrs	r1, r2
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dde:	0852      	lsrs	r2, r2, #1
 8005de0:	3a01      	subs	r2, #1
 8005de2:	0652      	lsls	r2, r2, #25
 8005de4:	4311      	orrs	r1, r2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005dea:	06d2      	lsls	r2, r2, #27
 8005dec:	430a      	orrs	r2, r1
 8005dee:	4947      	ldr	r1, [pc, #284]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005df4:	4b45      	ldr	r3, [pc, #276]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a44      	ldr	r2, [pc, #272]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dfe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e00:	4b42      	ldr	r3, [pc, #264]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	4a41      	ldr	r2, [pc, #260]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e0a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0c:	f7fc fa44 	bl	8002298 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e14:	f7fc fa40 	bl	8002298 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e06e      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e26:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <HAL_RCC_OscConfig+0x530>
 8005e32:	e066      	b.n	8005f02 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e34:	4b35      	ldr	r3, [pc, #212]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a34      	ldr	r2, [pc, #208]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e3e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005e40:	4b32      	ldr	r3, [pc, #200]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	4a31      	ldr	r2, [pc, #196]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e4c:	4b2f      	ldr	r3, [pc, #188]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4a2e      	ldr	r2, [pc, #184]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005e52:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e5a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5c:	f7fc fa1c 	bl	8002298 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e64:	f7fc fa18 	bl	8002298 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e046      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e76:	4b25      	ldr	r3, [pc, #148]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <HAL_RCC_OscConfig+0x580>
 8005e82:	e03e      	b.n	8005f02 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e039      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005e90:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <HAL_RCC_OscConfig+0x628>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f003 0203 	and.w	r2, r3, #3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d12c      	bne.n	8005efe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d123      	bne.n	8005efe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d11b      	bne.n	8005efe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d113      	bne.n	8005efe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	085b      	lsrs	r3, r3, #1
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d109      	bne.n	8005efe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ef4:	085b      	lsrs	r3, r3, #1
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d001      	beq.n	8005f02 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e000      	b.n	8005f04 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3720      	adds	r7, #32
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	40021000 	.word	0x40021000
 8005f10:	019f800c 	.word	0x019f800c

08005f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e11e      	b.n	800616a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f2c:	4b91      	ldr	r3, [pc, #580]	; (8006174 <HAL_RCC_ClockConfig+0x260>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d910      	bls.n	8005f5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3a:	4b8e      	ldr	r3, [pc, #568]	; (8006174 <HAL_RCC_ClockConfig+0x260>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f023 020f 	bic.w	r2, r3, #15
 8005f42:	498c      	ldr	r1, [pc, #560]	; (8006174 <HAL_RCC_ClockConfig+0x260>)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f4a:	4b8a      	ldr	r3, [pc, #552]	; (8006174 <HAL_RCC_ClockConfig+0x260>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 030f 	and.w	r3, r3, #15
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d001      	beq.n	8005f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e106      	b.n	800616a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d073      	beq.n	8006050 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d129      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f70:	4b81      	ldr	r3, [pc, #516]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0f4      	b.n	800616a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005f80:	f000 f99e 	bl	80062c0 <RCC_GetSysClockFreqFromPLLSource>
 8005f84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	4a7c      	ldr	r2, [pc, #496]	; (800617c <HAL_RCC_ClockConfig+0x268>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d93f      	bls.n	800600e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005f8e:	4b7a      	ldr	r3, [pc, #488]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d009      	beq.n	8005fae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d033      	beq.n	800600e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d12f      	bne.n	800600e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fae:	4b72      	ldr	r3, [pc, #456]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fb6:	4a70      	ldr	r2, [pc, #448]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8005fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fbe:	2380      	movs	r3, #128	; 0x80
 8005fc0:	617b      	str	r3, [r7, #20]
 8005fc2:	e024      	b.n	800600e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d107      	bne.n	8005fdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fcc:	4b6a      	ldr	r3, [pc, #424]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d109      	bne.n	8005fec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0c6      	b.n	800616a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fdc:	4b66      	ldr	r3, [pc, #408]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e0be      	b.n	800616a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005fec:	f000 f8ce 	bl	800618c <HAL_RCC_GetSysClockFreq>
 8005ff0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	4a61      	ldr	r2, [pc, #388]	; (800617c <HAL_RCC_ClockConfig+0x268>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d909      	bls.n	800600e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ffa:	4b5f      	ldr	r3, [pc, #380]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006002:	4a5d      	ldr	r2, [pc, #372]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8006004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006008:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800600a:	2380      	movs	r3, #128	; 0x80
 800600c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800600e:	4b5a      	ldr	r3, [pc, #360]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f023 0203 	bic.w	r2, r3, #3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4957      	ldr	r1, [pc, #348]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 800601c:	4313      	orrs	r3, r2
 800601e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006020:	f7fc f93a 	bl	8002298 <HAL_GetTick>
 8006024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006026:	e00a      	b.n	800603e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006028:	f7fc f936 	bl	8002298 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	f241 3288 	movw	r2, #5000	; 0x1388
 8006036:	4293      	cmp	r3, r2
 8006038:	d901      	bls.n	800603e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e095      	b.n	800616a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603e:	4b4e      	ldr	r3, [pc, #312]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f003 020c 	and.w	r2, r3, #12
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	429a      	cmp	r2, r3
 800604e:	d1eb      	bne.n	8006028 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d023      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006068:	4b43      	ldr	r3, [pc, #268]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	4a42      	ldr	r2, [pc, #264]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 800606e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006072:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006080:	4b3d      	ldr	r3, [pc, #244]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006088:	4a3b      	ldr	r2, [pc, #236]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 800608a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800608e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006090:	4b39      	ldr	r3, [pc, #228]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	4936      	ldr	r1, [pc, #216]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	608b      	str	r3, [r1, #8]
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	2b80      	cmp	r3, #128	; 0x80
 80060a8:	d105      	bne.n	80060b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060aa:	4b33      	ldr	r3, [pc, #204]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	4a32      	ldr	r2, [pc, #200]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 80060b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060b6:	4b2f      	ldr	r3, [pc, #188]	; (8006174 <HAL_RCC_ClockConfig+0x260>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d21d      	bcs.n	8006100 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c4:	4b2b      	ldr	r3, [pc, #172]	; (8006174 <HAL_RCC_ClockConfig+0x260>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f023 020f 	bic.w	r2, r3, #15
 80060cc:	4929      	ldr	r1, [pc, #164]	; (8006174 <HAL_RCC_ClockConfig+0x260>)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80060d4:	f7fc f8e0 	bl	8002298 <HAL_GetTick>
 80060d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060da:	e00a      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060dc:	f7fc f8dc 	bl	8002298 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d901      	bls.n	80060f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e03b      	b.n	800616a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b20      	ldr	r3, [pc, #128]	; (8006174 <HAL_RCC_ClockConfig+0x260>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d1ed      	bne.n	80060dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800610c:	4b1a      	ldr	r3, [pc, #104]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4917      	ldr	r1, [pc, #92]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 800611a:	4313      	orrs	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800612a:	4b13      	ldr	r3, [pc, #76]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	490f      	ldr	r1, [pc, #60]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 800613a:	4313      	orrs	r3, r2
 800613c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800613e:	f000 f825 	bl	800618c <HAL_RCC_GetSysClockFreq>
 8006142:	4602      	mov	r2, r0
 8006144:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <HAL_RCC_ClockConfig+0x264>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	091b      	lsrs	r3, r3, #4
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	490c      	ldr	r1, [pc, #48]	; (8006180 <HAL_RCC_ClockConfig+0x26c>)
 8006150:	5ccb      	ldrb	r3, [r1, r3]
 8006152:	f003 031f 	and.w	r3, r3, #31
 8006156:	fa22 f303 	lsr.w	r3, r2, r3
 800615a:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <HAL_RCC_ClockConfig+0x270>)
 800615c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <HAL_RCC_ClockConfig+0x274>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f7fc f84c 	bl	8002200 <HAL_InitTick>
 8006168:	4603      	mov	r3, r0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40022000 	.word	0x40022000
 8006178:	40021000 	.word	0x40021000
 800617c:	04c4b400 	.word	0x04c4b400
 8006180:	0800ee70 	.word	0x0800ee70
 8006184:	20000000 	.word	0x20000000
 8006188:	20000004 	.word	0x20000004

0800618c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006192:	4b2c      	ldr	r3, [pc, #176]	; (8006244 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	2b04      	cmp	r3, #4
 800619c:	d102      	bne.n	80061a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800619e:	4b2a      	ldr	r3, [pc, #168]	; (8006248 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e047      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80061a4:	4b27      	ldr	r3, [pc, #156]	; (8006244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 030c 	and.w	r3, r3, #12
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d102      	bne.n	80061b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061b0:	4b26      	ldr	r3, [pc, #152]	; (800624c <HAL_RCC_GetSysClockFreq+0xc0>)
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	e03e      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80061b6:	4b23      	ldr	r3, [pc, #140]	; (8006244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 030c 	and.w	r3, r3, #12
 80061be:	2b0c      	cmp	r3, #12
 80061c0:	d136      	bne.n	8006230 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061c2:	4b20      	ldr	r3, [pc, #128]	; (8006244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f003 0303 	and.w	r3, r3, #3
 80061ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061cc:	4b1d      	ldr	r3, [pc, #116]	; (8006244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	091b      	lsrs	r3, r3, #4
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	3301      	adds	r3, #1
 80061d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d10c      	bne.n	80061fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061e0:	4a1a      	ldr	r2, [pc, #104]	; (800624c <HAL_RCC_GetSysClockFreq+0xc0>)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e8:	4a16      	ldr	r2, [pc, #88]	; (8006244 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ea:	68d2      	ldr	r2, [r2, #12]
 80061ec:	0a12      	lsrs	r2, r2, #8
 80061ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061f2:	fb02 f303 	mul.w	r3, r2, r3
 80061f6:	617b      	str	r3, [r7, #20]
      break;
 80061f8:	e00c      	b.n	8006214 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061fa:	4a13      	ldr	r2, [pc, #76]	; (8006248 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006202:	4a10      	ldr	r2, [pc, #64]	; (8006244 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006204:	68d2      	ldr	r2, [r2, #12]
 8006206:	0a12      	lsrs	r2, r2, #8
 8006208:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800620c:	fb02 f303 	mul.w	r3, r2, r3
 8006210:	617b      	str	r3, [r7, #20]
      break;
 8006212:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006214:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	0e5b      	lsrs	r3, r3, #25
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	3301      	adds	r3, #1
 8006220:	005b      	lsls	r3, r3, #1
 8006222:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006224:	697a      	ldr	r2, [r7, #20]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	fbb2 f3f3 	udiv	r3, r2, r3
 800622c:	613b      	str	r3, [r7, #16]
 800622e:	e001      	b.n	8006234 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006234:	693b      	ldr	r3, [r7, #16]
}
 8006236:	4618      	mov	r0, r3
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40021000 	.word	0x40021000
 8006248:	00f42400 	.word	0x00f42400
 800624c:	007a1200 	.word	0x007a1200

08006250 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006250:	b480      	push	{r7}
 8006252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006254:	4b03      	ldr	r3, [pc, #12]	; (8006264 <HAL_RCC_GetHCLKFreq+0x14>)
 8006256:	681b      	ldr	r3, [r3, #0]
}
 8006258:	4618      	mov	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	20000000 	.word	0x20000000

08006268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800626c:	f7ff fff0 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 8006270:	4602      	mov	r2, r0
 8006272:	4b06      	ldr	r3, [pc, #24]	; (800628c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	0a1b      	lsrs	r3, r3, #8
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	4904      	ldr	r1, [pc, #16]	; (8006290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800627e:	5ccb      	ldrb	r3, [r1, r3]
 8006280:	f003 031f 	and.w	r3, r3, #31
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40021000 	.word	0x40021000
 8006290:	0800ee80 	.word	0x0800ee80

08006294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006298:	f7ff ffda 	bl	8006250 <HAL_RCC_GetHCLKFreq>
 800629c:	4602      	mov	r2, r0
 800629e:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	0adb      	lsrs	r3, r3, #11
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	4904      	ldr	r1, [pc, #16]	; (80062bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80062aa:	5ccb      	ldrb	r3, [r1, r3]
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40021000 	.word	0x40021000
 80062bc:	0800ee80 	.word	0x0800ee80

080062c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062c6:	4b1e      	ldr	r3, [pc, #120]	; (8006340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062d0:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	091b      	lsrs	r3, r3, #4
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	3301      	adds	r3, #1
 80062dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b03      	cmp	r3, #3
 80062e2:	d10c      	bne.n	80062fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062e4:	4a17      	ldr	r2, [pc, #92]	; (8006344 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ec:	4a14      	ldr	r2, [pc, #80]	; (8006340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062ee:	68d2      	ldr	r2, [r2, #12]
 80062f0:	0a12      	lsrs	r2, r2, #8
 80062f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062f6:	fb02 f303 	mul.w	r3, r2, r3
 80062fa:	617b      	str	r3, [r7, #20]
    break;
 80062fc:	e00c      	b.n	8006318 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80062fe:	4a12      	ldr	r2, [pc, #72]	; (8006348 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	fbb2 f3f3 	udiv	r3, r2, r3
 8006306:	4a0e      	ldr	r2, [pc, #56]	; (8006340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006308:	68d2      	ldr	r2, [r2, #12]
 800630a:	0a12      	lsrs	r2, r2, #8
 800630c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006310:	fb02 f303 	mul.w	r3, r2, r3
 8006314:	617b      	str	r3, [r7, #20]
    break;
 8006316:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006318:	4b09      	ldr	r3, [pc, #36]	; (8006340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	0e5b      	lsrs	r3, r3, #25
 800631e:	f003 0303 	and.w	r3, r3, #3
 8006322:	3301      	adds	r3, #1
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006332:	687b      	ldr	r3, [r7, #4]
}
 8006334:	4618      	mov	r0, r3
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	40021000 	.word	0x40021000
 8006344:	007a1200 	.word	0x007a1200
 8006348:	00f42400 	.word	0x00f42400

0800634c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006354:	2300      	movs	r3, #0
 8006356:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006358:	2300      	movs	r3, #0
 800635a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8098 	beq.w	800649a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800636a:	2300      	movs	r3, #0
 800636c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800636e:	4b43      	ldr	r3, [pc, #268]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10d      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800637a:	4b40      	ldr	r3, [pc, #256]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800637c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800637e:	4a3f      	ldr	r2, [pc, #252]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006384:	6593      	str	r3, [r2, #88]	; 0x58
 8006386:	4b3d      	ldr	r3, [pc, #244]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800638e:	60bb      	str	r3, [r7, #8]
 8006390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006392:	2301      	movs	r3, #1
 8006394:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006396:	4b3a      	ldr	r3, [pc, #232]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a39      	ldr	r2, [pc, #228]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800639c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063a2:	f7fb ff79 	bl	8002298 <HAL_GetTick>
 80063a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063a8:	e009      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063aa:	f7fb ff75 	bl	8002298 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d902      	bls.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	74fb      	strb	r3, [r7, #19]
        break;
 80063bc:	e005      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063be:	4b30      	ldr	r3, [pc, #192]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d0ef      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063ca:	7cfb      	ldrb	r3, [r7, #19]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d159      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063d0:	4b2a      	ldr	r3, [pc, #168]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d01e      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d019      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80063ec:	4b23      	ldr	r3, [pc, #140]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80063f8:	4b20      	ldr	r3, [pc, #128]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fe:	4a1f      	ldr	r2, [pc, #124]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006408:	4b1c      	ldr	r3, [pc, #112]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800640a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800640e:	4a1b      	ldr	r2, [pc, #108]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006418:	4a18      	ldr	r2, [pc, #96]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d016      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642a:	f7fb ff35 	bl	8002298 <HAL_GetTick>
 800642e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006430:	e00b      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006432:	f7fb ff31 	bl	8002298 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006440:	4293      	cmp	r3, r2
 8006442:	d902      	bls.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	74fb      	strb	r3, [r7, #19]
            break;
 8006448:	e006      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800644c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0ec      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006458:	7cfb      	ldrb	r3, [r7, #19]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10b      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800645e:	4b07      	ldr	r3, [pc, #28]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006464:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646c:	4903      	ldr	r1, [pc, #12]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800646e:	4313      	orrs	r3, r2
 8006470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006474:	e008      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006476:	7cfb      	ldrb	r3, [r7, #19]
 8006478:	74bb      	strb	r3, [r7, #18]
 800647a:	e005      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800647c:	40021000 	.word	0x40021000
 8006480:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006484:	7cfb      	ldrb	r3, [r7, #19]
 8006486:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006488:	7c7b      	ldrb	r3, [r7, #17]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d105      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800648e:	4ba7      	ldr	r3, [pc, #668]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006492:	4aa6      	ldr	r2, [pc, #664]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006498:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064a6:	4ba1      	ldr	r3, [pc, #644]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f023 0203 	bic.w	r2, r3, #3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	499d      	ldr	r1, [pc, #628]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00a      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064c8:	4b98      	ldr	r3, [pc, #608]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f023 020c 	bic.w	r2, r3, #12
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	4995      	ldr	r1, [pc, #596]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80064ea:	4b90      	ldr	r3, [pc, #576]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	498c      	ldr	r1, [pc, #560]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0308 	and.w	r3, r3, #8
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800650c:	4b87      	ldr	r3, [pc, #540]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800650e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006512:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	4984      	ldr	r1, [pc, #528]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651c:	4313      	orrs	r3, r2
 800651e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0310 	and.w	r3, r3, #16
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800652e:	4b7f      	ldr	r3, [pc, #508]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	497b      	ldr	r1, [pc, #492]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006550:	4b76      	ldr	r3, [pc, #472]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006556:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	4973      	ldr	r1, [pc, #460]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006560:	4313      	orrs	r3, r2
 8006562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006572:	4b6e      	ldr	r3, [pc, #440]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006578:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	496a      	ldr	r1, [pc, #424]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00a      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006594:	4b65      	ldr	r3, [pc, #404]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	4962      	ldr	r1, [pc, #392]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065b6:	4b5d      	ldr	r3, [pc, #372]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	4959      	ldr	r1, [pc, #356]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00a      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065d8:	4b54      	ldr	r3, [pc, #336]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065de:	f023 0203 	bic.w	r2, r3, #3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	4951      	ldr	r1, [pc, #324]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065fa:	4b4c      	ldr	r3, [pc, #304]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006600:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	4948      	ldr	r1, [pc, #288]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006618:	2b00      	cmp	r3, #0
 800661a:	d015      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800661c:	4b43      	ldr	r3, [pc, #268]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	4940      	ldr	r1, [pc, #256]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662c:	4313      	orrs	r3, r2
 800662e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800663a:	d105      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800663c:	4b3b      	ldr	r3, [pc, #236]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	4a3a      	ldr	r2, [pc, #232]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006646:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006650:	2b00      	cmp	r3, #0
 8006652:	d015      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006654:	4b35      	ldr	r3, [pc, #212]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006662:	4932      	ldr	r1, [pc, #200]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006664:	4313      	orrs	r3, r2
 8006666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006672:	d105      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006674:	4b2d      	ldr	r3, [pc, #180]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	4a2c      	ldr	r2, [pc, #176]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800667e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d015      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800668c:	4b27      	ldr	r3, [pc, #156]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006692:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	4924      	ldr	r1, [pc, #144]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669c:	4313      	orrs	r3, r2
 800669e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066aa:	d105      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066ac:	4b1f      	ldr	r3, [pc, #124]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	4a1e      	ldr	r2, [pc, #120]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d015      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066c4:	4b19      	ldr	r3, [pc, #100]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d2:	4916      	ldr	r1, [pc, #88]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066e2:	d105      	bne.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066e4:	4b11      	ldr	r3, [pc, #68]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	4a10      	ldr	r2, [pc, #64]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d019      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066fc:	4b0b      	ldr	r3, [pc, #44]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670a:	4908      	ldr	r1, [pc, #32]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670c:	4313      	orrs	r3, r2
 800670e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800671a:	d109      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800671c:	4b03      	ldr	r3, [pc, #12]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	4a02      	ldr	r2, [pc, #8]	; (800672c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006726:	60d3      	str	r3, [r2, #12]
 8006728:	e002      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800672a:	bf00      	nop
 800672c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d015      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800673c:	4b29      	ldr	r3, [pc, #164]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800673e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006742:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674a:	4926      	ldr	r1, [pc, #152]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800674c:	4313      	orrs	r3, r2
 800674e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800675a:	d105      	bne.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800675c:	4b21      	ldr	r3, [pc, #132]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	4a20      	ldr	r2, [pc, #128]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006766:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d015      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006774:	4b1b      	ldr	r3, [pc, #108]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006782:	4918      	ldr	r1, [pc, #96]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006784:	4313      	orrs	r3, r2
 8006786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006792:	d105      	bne.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006794:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	4a12      	ldr	r2, [pc, #72]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800679a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800679e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d015      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067ac:	4b0d      	ldr	r3, [pc, #52]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	490a      	ldr	r1, [pc, #40]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ca:	d105      	bne.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067cc:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	4a04      	ldr	r2, [pc, #16]	; (80067e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80067d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40021000 	.word	0x40021000

080067e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e049      	b.n	800688e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d106      	bne.n	8006814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fb fa8a 	bl	8001d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f000 fbd2 	bl	8006fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e049      	b.n	800693c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d106      	bne.n	80068c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f841 	bl	8006944 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f000 fb7b 	bl	8006fd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d109      	bne.n	800697c <HAL_TIM_PWM_Start+0x24>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b01      	cmp	r3, #1
 8006972:	bf14      	ite	ne
 8006974:	2301      	movne	r3, #1
 8006976:	2300      	moveq	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	e03c      	b.n	80069f6 <HAL_TIM_PWM_Start+0x9e>
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b04      	cmp	r3, #4
 8006980:	d109      	bne.n	8006996 <HAL_TIM_PWM_Start+0x3e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b01      	cmp	r3, #1
 800698c:	bf14      	ite	ne
 800698e:	2301      	movne	r3, #1
 8006990:	2300      	moveq	r3, #0
 8006992:	b2db      	uxtb	r3, r3
 8006994:	e02f      	b.n	80069f6 <HAL_TIM_PWM_Start+0x9e>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b08      	cmp	r3, #8
 800699a:	d109      	bne.n	80069b0 <HAL_TIM_PWM_Start+0x58>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	bf14      	ite	ne
 80069a8:	2301      	movne	r3, #1
 80069aa:	2300      	moveq	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	e022      	b.n	80069f6 <HAL_TIM_PWM_Start+0x9e>
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	2b0c      	cmp	r3, #12
 80069b4:	d109      	bne.n	80069ca <HAL_TIM_PWM_Start+0x72>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b01      	cmp	r3, #1
 80069c0:	bf14      	ite	ne
 80069c2:	2301      	movne	r3, #1
 80069c4:	2300      	moveq	r3, #0
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	e015      	b.n	80069f6 <HAL_TIM_PWM_Start+0x9e>
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b10      	cmp	r3, #16
 80069ce:	d109      	bne.n	80069e4 <HAL_TIM_PWM_Start+0x8c>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	bf14      	ite	ne
 80069dc:	2301      	movne	r3, #1
 80069de:	2300      	moveq	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	e008      	b.n	80069f6 <HAL_TIM_PWM_Start+0x9e>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	bf14      	ite	ne
 80069f0:	2301      	movne	r3, #1
 80069f2:	2300      	moveq	r3, #0
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e0a6      	b.n	8006b4c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <HAL_TIM_PWM_Start+0xb6>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a0c:	e023      	b.n	8006a56 <HAL_TIM_PWM_Start+0xfe>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d104      	bne.n	8006a1e <HAL_TIM_PWM_Start+0xc6>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2202      	movs	r2, #2
 8006a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a1c:	e01b      	b.n	8006a56 <HAL_TIM_PWM_Start+0xfe>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_PWM_Start+0xd6>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2202      	movs	r2, #2
 8006a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a2c:	e013      	b.n	8006a56 <HAL_TIM_PWM_Start+0xfe>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2b0c      	cmp	r3, #12
 8006a32:	d104      	bne.n	8006a3e <HAL_TIM_PWM_Start+0xe6>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a3c:	e00b      	b.n	8006a56 <HAL_TIM_PWM_Start+0xfe>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d104      	bne.n	8006a4e <HAL_TIM_PWM_Start+0xf6>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a4c:	e003      	b.n	8006a56 <HAL_TIM_PWM_Start+0xfe>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 ff24 	bl	80078ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a3a      	ldr	r2, [pc, #232]	; (8006b54 <HAL_TIM_PWM_Start+0x1fc>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d018      	beq.n	8006aa0 <HAL_TIM_PWM_Start+0x148>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a39      	ldr	r2, [pc, #228]	; (8006b58 <HAL_TIM_PWM_Start+0x200>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d013      	beq.n	8006aa0 <HAL_TIM_PWM_Start+0x148>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a37      	ldr	r2, [pc, #220]	; (8006b5c <HAL_TIM_PWM_Start+0x204>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d00e      	beq.n	8006aa0 <HAL_TIM_PWM_Start+0x148>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a36      	ldr	r2, [pc, #216]	; (8006b60 <HAL_TIM_PWM_Start+0x208>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d009      	beq.n	8006aa0 <HAL_TIM_PWM_Start+0x148>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a34      	ldr	r2, [pc, #208]	; (8006b64 <HAL_TIM_PWM_Start+0x20c>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d004      	beq.n	8006aa0 <HAL_TIM_PWM_Start+0x148>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a33      	ldr	r2, [pc, #204]	; (8006b68 <HAL_TIM_PWM_Start+0x210>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIM_PWM_Start+0x14c>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <HAL_TIM_PWM_Start+0x14e>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d007      	beq.n	8006aba <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ab8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a25      	ldr	r2, [pc, #148]	; (8006b54 <HAL_TIM_PWM_Start+0x1fc>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d022      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x1b2>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006acc:	d01d      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x1b2>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a26      	ldr	r2, [pc, #152]	; (8006b6c <HAL_TIM_PWM_Start+0x214>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d018      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x1b2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a24      	ldr	r2, [pc, #144]	; (8006b70 <HAL_TIM_PWM_Start+0x218>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x1b2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a23      	ldr	r2, [pc, #140]	; (8006b74 <HAL_TIM_PWM_Start+0x21c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00e      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x1b2>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a19      	ldr	r2, [pc, #100]	; (8006b58 <HAL_TIM_PWM_Start+0x200>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x1b2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <HAL_TIM_PWM_Start+0x204>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_TIM_PWM_Start+0x1b2>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <HAL_TIM_PWM_Start+0x210>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d115      	bne.n	8006b36 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	4b19      	ldr	r3, [pc, #100]	; (8006b78 <HAL_TIM_PWM_Start+0x220>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b06      	cmp	r3, #6
 8006b1a:	d015      	beq.n	8006b48 <HAL_TIM_PWM_Start+0x1f0>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b22:	d011      	beq.n	8006b48 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b34:	e008      	b.n	8006b48 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0201 	orr.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	e000      	b.n	8006b4a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	40012c00 	.word	0x40012c00
 8006b58:	40013400 	.word	0x40013400
 8006b5c:	40014000 	.word	0x40014000
 8006b60:	40014400 	.word	0x40014400
 8006b64:	40014800 	.word	0x40014800
 8006b68:	40015000 	.word	0x40015000
 8006b6c:	40000400 	.word	0x40000400
 8006b70:	40000800 	.word	0x40000800
 8006b74:	40000c00 	.word	0x40000c00
 8006b78:	00010007 	.word	0x00010007

08006b7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d101      	bne.n	8006b9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b96:	2302      	movs	r3, #2
 8006b98:	e0ff      	b.n	8006d9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b14      	cmp	r3, #20
 8006ba6:	f200 80f0 	bhi.w	8006d8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006baa:	a201      	add	r2, pc, #4	; (adr r2, 8006bb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb0:	08006c05 	.word	0x08006c05
 8006bb4:	08006d8b 	.word	0x08006d8b
 8006bb8:	08006d8b 	.word	0x08006d8b
 8006bbc:	08006d8b 	.word	0x08006d8b
 8006bc0:	08006c45 	.word	0x08006c45
 8006bc4:	08006d8b 	.word	0x08006d8b
 8006bc8:	08006d8b 	.word	0x08006d8b
 8006bcc:	08006d8b 	.word	0x08006d8b
 8006bd0:	08006c87 	.word	0x08006c87
 8006bd4:	08006d8b 	.word	0x08006d8b
 8006bd8:	08006d8b 	.word	0x08006d8b
 8006bdc:	08006d8b 	.word	0x08006d8b
 8006be0:	08006cc7 	.word	0x08006cc7
 8006be4:	08006d8b 	.word	0x08006d8b
 8006be8:	08006d8b 	.word	0x08006d8b
 8006bec:	08006d8b 	.word	0x08006d8b
 8006bf0:	08006d09 	.word	0x08006d09
 8006bf4:	08006d8b 	.word	0x08006d8b
 8006bf8:	08006d8b 	.word	0x08006d8b
 8006bfc:	08006d8b 	.word	0x08006d8b
 8006c00:	08006d49 	.word	0x08006d49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fa88 	bl	8007120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699a      	ldr	r2, [r3, #24]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f042 0208 	orr.w	r2, r2, #8
 8006c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0204 	bic.w	r2, r2, #4
 8006c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6999      	ldr	r1, [r3, #24]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	619a      	str	r2, [r3, #24]
      break;
 8006c42:	e0a5      	b.n	8006d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fb02 	bl	8007254 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6999      	ldr	r1, [r3, #24]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	021a      	lsls	r2, r3, #8
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	619a      	str	r2, [r3, #24]
      break;
 8006c84:	e084      	b.n	8006d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fb75 	bl	800737c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f042 0208 	orr.w	r2, r2, #8
 8006ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0204 	bic.w	r2, r2, #4
 8006cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69d9      	ldr	r1, [r3, #28]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	691a      	ldr	r2, [r3, #16]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	61da      	str	r2, [r3, #28]
      break;
 8006cc4:	e064      	b.n	8006d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68b9      	ldr	r1, [r7, #8]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fbe7 	bl	80074a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ce0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	69d9      	ldr	r1, [r3, #28]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	021a      	lsls	r2, r3, #8
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	61da      	str	r2, [r3, #28]
      break;
 8006d06:	e043      	b.n	8006d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68b9      	ldr	r1, [r7, #8]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fc5a 	bl	80075c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0208 	orr.w	r2, r2, #8
 8006d22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0204 	bic.w	r2, r2, #4
 8006d32:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d46:	e023      	b.n	8006d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fca4 	bl	800769c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d72:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	021a      	lsls	r2, r3, #8
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d88:	e002      	b.n	8006d90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop

08006da4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_TIM_ConfigClockSource+0x1c>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e0f6      	b.n	8006fae <HAL_TIM_ConfigClockSource+0x20a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006dde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a6f      	ldr	r2, [pc, #444]	; (8006fb8 <HAL_TIM_ConfigClockSource+0x214>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	f000 80c1 	beq.w	8006f82 <HAL_TIM_ConfigClockSource+0x1de>
 8006e00:	4a6d      	ldr	r2, [pc, #436]	; (8006fb8 <HAL_TIM_ConfigClockSource+0x214>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	f200 80c6 	bhi.w	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e08:	4a6c      	ldr	r2, [pc, #432]	; (8006fbc <HAL_TIM_ConfigClockSource+0x218>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	f000 80b9 	beq.w	8006f82 <HAL_TIM_ConfigClockSource+0x1de>
 8006e10:	4a6a      	ldr	r2, [pc, #424]	; (8006fbc <HAL_TIM_ConfigClockSource+0x218>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	f200 80be 	bhi.w	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e18:	4a69      	ldr	r2, [pc, #420]	; (8006fc0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	f000 80b1 	beq.w	8006f82 <HAL_TIM_ConfigClockSource+0x1de>
 8006e20:	4a67      	ldr	r2, [pc, #412]	; (8006fc0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	f200 80b6 	bhi.w	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e28:	4a66      	ldr	r2, [pc, #408]	; (8006fc4 <HAL_TIM_ConfigClockSource+0x220>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	f000 80a9 	beq.w	8006f82 <HAL_TIM_ConfigClockSource+0x1de>
 8006e30:	4a64      	ldr	r2, [pc, #400]	; (8006fc4 <HAL_TIM_ConfigClockSource+0x220>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	f200 80ae 	bhi.w	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e38:	4a63      	ldr	r2, [pc, #396]	; (8006fc8 <HAL_TIM_ConfigClockSource+0x224>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	f000 80a1 	beq.w	8006f82 <HAL_TIM_ConfigClockSource+0x1de>
 8006e40:	4a61      	ldr	r2, [pc, #388]	; (8006fc8 <HAL_TIM_ConfigClockSource+0x224>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	f200 80a6 	bhi.w	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e48:	4a60      	ldr	r2, [pc, #384]	; (8006fcc <HAL_TIM_ConfigClockSource+0x228>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	f000 8099 	beq.w	8006f82 <HAL_TIM_ConfigClockSource+0x1de>
 8006e50:	4a5e      	ldr	r2, [pc, #376]	; (8006fcc <HAL_TIM_ConfigClockSource+0x228>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	f200 809e 	bhi.w	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e5c:	f000 8091 	beq.w	8006f82 <HAL_TIM_ConfigClockSource+0x1de>
 8006e60:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e64:	f200 8096 	bhi.w	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e6c:	f000 8089 	beq.w	8006f82 <HAL_TIM_ConfigClockSource+0x1de>
 8006e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e74:	f200 808e 	bhi.w	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7c:	d03e      	beq.n	8006efc <HAL_TIM_ConfigClockSource+0x158>
 8006e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e82:	f200 8087 	bhi.w	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e8a:	f000 8086 	beq.w	8006f9a <HAL_TIM_ConfigClockSource+0x1f6>
 8006e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e92:	d87f      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e94:	2b70      	cmp	r3, #112	; 0x70
 8006e96:	d01a      	beq.n	8006ece <HAL_TIM_ConfigClockSource+0x12a>
 8006e98:	2b70      	cmp	r3, #112	; 0x70
 8006e9a:	d87b      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e9c:	2b60      	cmp	r3, #96	; 0x60
 8006e9e:	d050      	beq.n	8006f42 <HAL_TIM_ConfigClockSource+0x19e>
 8006ea0:	2b60      	cmp	r3, #96	; 0x60
 8006ea2:	d877      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ea4:	2b50      	cmp	r3, #80	; 0x50
 8006ea6:	d03c      	beq.n	8006f22 <HAL_TIM_ConfigClockSource+0x17e>
 8006ea8:	2b50      	cmp	r3, #80	; 0x50
 8006eaa:	d873      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eac:	2b40      	cmp	r3, #64	; 0x40
 8006eae:	d058      	beq.n	8006f62 <HAL_TIM_ConfigClockSource+0x1be>
 8006eb0:	2b40      	cmp	r3, #64	; 0x40
 8006eb2:	d86f      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eb4:	2b30      	cmp	r3, #48	; 0x30
 8006eb6:	d064      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0x1de>
 8006eb8:	2b30      	cmp	r3, #48	; 0x30
 8006eba:	d86b      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	d060      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0x1de>
 8006ec0:	2b20      	cmp	r3, #32
 8006ec2:	d867      	bhi.n	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d05c      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0x1de>
 8006ec8:	2b10      	cmp	r3, #16
 8006eca:	d05a      	beq.n	8006f82 <HAL_TIM_ConfigClockSource+0x1de>
 8006ecc:	e062      	b.n	8006f94 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	6899      	ldr	r1, [r3, #8]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f000 fcc5 	bl	800786c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ef0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	609a      	str	r2, [r3, #8]
      break;
 8006efa:	e04f      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	6899      	ldr	r1, [r3, #8]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f000 fcae 	bl	800786c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689a      	ldr	r2, [r3, #8]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f1e:	609a      	str	r2, [r3, #8]
      break;
 8006f20:	e03c      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6859      	ldr	r1, [r3, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f000 fc20 	bl	8007774 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2150      	movs	r1, #80	; 0x50
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fc79 	bl	8007832 <TIM_ITRx_SetConfig>
      break;
 8006f40:	e02c      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6818      	ldr	r0, [r3, #0]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6859      	ldr	r1, [r3, #4]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	f000 fc3f 	bl	80077d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2160      	movs	r1, #96	; 0x60
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fc69 	bl	8007832 <TIM_ITRx_SetConfig>
      break;
 8006f60:	e01c      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6818      	ldr	r0, [r3, #0]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	6859      	ldr	r1, [r3, #4]
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f000 fc00 	bl	8007774 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2140      	movs	r1, #64	; 0x40
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fc59 	bl	8007832 <TIM_ITRx_SetConfig>
      break;
 8006f80:	e00c      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	4610      	mov	r0, r2
 8006f8e:	f000 fc50 	bl	8007832 <TIM_ITRx_SetConfig>
      break;
 8006f92:	e003      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	73fb      	strb	r3, [r7, #15]
      break;
 8006f98:	e000      	b.n	8006f9c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006f9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	00100070 	.word	0x00100070
 8006fbc:	00100060 	.word	0x00100060
 8006fc0:	00100050 	.word	0x00100050
 8006fc4:	00100040 	.word	0x00100040
 8006fc8:	00100030 	.word	0x00100030
 8006fcc:	00100020 	.word	0x00100020

08006fd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a46      	ldr	r2, [pc, #280]	; (80070fc <TIM_Base_SetConfig+0x12c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d017      	beq.n	8007018 <TIM_Base_SetConfig+0x48>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fee:	d013      	beq.n	8007018 <TIM_Base_SetConfig+0x48>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a43      	ldr	r2, [pc, #268]	; (8007100 <TIM_Base_SetConfig+0x130>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00f      	beq.n	8007018 <TIM_Base_SetConfig+0x48>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a42      	ldr	r2, [pc, #264]	; (8007104 <TIM_Base_SetConfig+0x134>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00b      	beq.n	8007018 <TIM_Base_SetConfig+0x48>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a41      	ldr	r2, [pc, #260]	; (8007108 <TIM_Base_SetConfig+0x138>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d007      	beq.n	8007018 <TIM_Base_SetConfig+0x48>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a40      	ldr	r2, [pc, #256]	; (800710c <TIM_Base_SetConfig+0x13c>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d003      	beq.n	8007018 <TIM_Base_SetConfig+0x48>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a3f      	ldr	r2, [pc, #252]	; (8007110 <TIM_Base_SetConfig+0x140>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d108      	bne.n	800702a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a33      	ldr	r2, [pc, #204]	; (80070fc <TIM_Base_SetConfig+0x12c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d023      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007038:	d01f      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a30      	ldr	r2, [pc, #192]	; (8007100 <TIM_Base_SetConfig+0x130>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d01b      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a2f      	ldr	r2, [pc, #188]	; (8007104 <TIM_Base_SetConfig+0x134>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d017      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a2e      	ldr	r2, [pc, #184]	; (8007108 <TIM_Base_SetConfig+0x138>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d013      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a2d      	ldr	r2, [pc, #180]	; (800710c <TIM_Base_SetConfig+0x13c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00f      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a2d      	ldr	r2, [pc, #180]	; (8007114 <TIM_Base_SetConfig+0x144>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00b      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a2c      	ldr	r2, [pc, #176]	; (8007118 <TIM_Base_SetConfig+0x148>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d007      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a2b      	ldr	r2, [pc, #172]	; (800711c <TIM_Base_SetConfig+0x14c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d003      	beq.n	800707a <TIM_Base_SetConfig+0xaa>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a26      	ldr	r2, [pc, #152]	; (8007110 <TIM_Base_SetConfig+0x140>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d108      	bne.n	800708c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a12      	ldr	r2, [pc, #72]	; (80070fc <TIM_Base_SetConfig+0x12c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d013      	beq.n	80070e0 <TIM_Base_SetConfig+0x110>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a14      	ldr	r2, [pc, #80]	; (800710c <TIM_Base_SetConfig+0x13c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00f      	beq.n	80070e0 <TIM_Base_SetConfig+0x110>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	4a14      	ldr	r2, [pc, #80]	; (8007114 <TIM_Base_SetConfig+0x144>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d00b      	beq.n	80070e0 <TIM_Base_SetConfig+0x110>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a13      	ldr	r2, [pc, #76]	; (8007118 <TIM_Base_SetConfig+0x148>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d007      	beq.n	80070e0 <TIM_Base_SetConfig+0x110>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a12      	ldr	r2, [pc, #72]	; (800711c <TIM_Base_SetConfig+0x14c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d003      	beq.n	80070e0 <TIM_Base_SetConfig+0x110>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a0d      	ldr	r2, [pc, #52]	; (8007110 <TIM_Base_SetConfig+0x140>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d103      	bne.n	80070e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	615a      	str	r2, [r3, #20]
}
 80070ee:	bf00      	nop
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	40012c00 	.word	0x40012c00
 8007100:	40000400 	.word	0x40000400
 8007104:	40000800 	.word	0x40000800
 8007108:	40000c00 	.word	0x40000c00
 800710c:	40013400 	.word	0x40013400
 8007110:	40015000 	.word	0x40015000
 8007114:	40014000 	.word	0x40014000
 8007118:	40014400 	.word	0x40014400
 800711c:	40014800 	.word	0x40014800

08007120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	f023 0201 	bic.w	r2, r3, #1
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800714e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f023 0302 	bic.w	r3, r3, #2
 800716c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a30      	ldr	r2, [pc, #192]	; (800723c <TIM_OC1_SetConfig+0x11c>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d013      	beq.n	80071a8 <TIM_OC1_SetConfig+0x88>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a2f      	ldr	r2, [pc, #188]	; (8007240 <TIM_OC1_SetConfig+0x120>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d00f      	beq.n	80071a8 <TIM_OC1_SetConfig+0x88>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a2e      	ldr	r2, [pc, #184]	; (8007244 <TIM_OC1_SetConfig+0x124>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00b      	beq.n	80071a8 <TIM_OC1_SetConfig+0x88>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a2d      	ldr	r2, [pc, #180]	; (8007248 <TIM_OC1_SetConfig+0x128>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d007      	beq.n	80071a8 <TIM_OC1_SetConfig+0x88>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a2c      	ldr	r2, [pc, #176]	; (800724c <TIM_OC1_SetConfig+0x12c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d003      	beq.n	80071a8 <TIM_OC1_SetConfig+0x88>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a2b      	ldr	r2, [pc, #172]	; (8007250 <TIM_OC1_SetConfig+0x130>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d10c      	bne.n	80071c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f023 0308 	bic.w	r3, r3, #8
 80071ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f023 0304 	bic.w	r3, r3, #4
 80071c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a1d      	ldr	r2, [pc, #116]	; (800723c <TIM_OC1_SetConfig+0x11c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d013      	beq.n	80071f2 <TIM_OC1_SetConfig+0xd2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a1c      	ldr	r2, [pc, #112]	; (8007240 <TIM_OC1_SetConfig+0x120>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d00f      	beq.n	80071f2 <TIM_OC1_SetConfig+0xd2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <TIM_OC1_SetConfig+0x124>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00b      	beq.n	80071f2 <TIM_OC1_SetConfig+0xd2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a1a      	ldr	r2, [pc, #104]	; (8007248 <TIM_OC1_SetConfig+0x128>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d007      	beq.n	80071f2 <TIM_OC1_SetConfig+0xd2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a19      	ldr	r2, [pc, #100]	; (800724c <TIM_OC1_SetConfig+0x12c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d003      	beq.n	80071f2 <TIM_OC1_SetConfig+0xd2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a18      	ldr	r2, [pc, #96]	; (8007250 <TIM_OC1_SetConfig+0x130>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d111      	bne.n	8007216 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	695b      	ldr	r3, [r3, #20]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	4313      	orrs	r3, r2
 800720a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	697a      	ldr	r2, [r7, #20]
 800722e:	621a      	str	r2, [r3, #32]
}
 8007230:	bf00      	nop
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	40012c00 	.word	0x40012c00
 8007240:	40013400 	.word	0x40013400
 8007244:	40014000 	.word	0x40014000
 8007248:	40014400 	.word	0x40014400
 800724c:	40014800 	.word	0x40014800
 8007250:	40015000 	.word	0x40015000

08007254 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007254:	b480      	push	{r7}
 8007256:	b087      	sub	sp, #28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	f023 0210 	bic.w	r2, r3, #16
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	699b      	ldr	r3, [r3, #24]
 800727a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800728e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	021b      	lsls	r3, r3, #8
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	4313      	orrs	r3, r2
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f023 0320 	bic.w	r3, r3, #32
 80072a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a2c      	ldr	r2, [pc, #176]	; (8007364 <TIM_OC2_SetConfig+0x110>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d007      	beq.n	80072c8 <TIM_OC2_SetConfig+0x74>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a2b      	ldr	r2, [pc, #172]	; (8007368 <TIM_OC2_SetConfig+0x114>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d003      	beq.n	80072c8 <TIM_OC2_SetConfig+0x74>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a2a      	ldr	r2, [pc, #168]	; (800736c <TIM_OC2_SetConfig+0x118>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d10d      	bne.n	80072e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a1f      	ldr	r2, [pc, #124]	; (8007364 <TIM_OC2_SetConfig+0x110>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d013      	beq.n	8007314 <TIM_OC2_SetConfig+0xc0>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a1e      	ldr	r2, [pc, #120]	; (8007368 <TIM_OC2_SetConfig+0x114>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00f      	beq.n	8007314 <TIM_OC2_SetConfig+0xc0>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a1e      	ldr	r2, [pc, #120]	; (8007370 <TIM_OC2_SetConfig+0x11c>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d00b      	beq.n	8007314 <TIM_OC2_SetConfig+0xc0>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a1d      	ldr	r2, [pc, #116]	; (8007374 <TIM_OC2_SetConfig+0x120>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d007      	beq.n	8007314 <TIM_OC2_SetConfig+0xc0>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a1c      	ldr	r2, [pc, #112]	; (8007378 <TIM_OC2_SetConfig+0x124>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d003      	beq.n	8007314 <TIM_OC2_SetConfig+0xc0>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a17      	ldr	r2, [pc, #92]	; (800736c <TIM_OC2_SetConfig+0x118>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d113      	bne.n	800733c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800731a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007322:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	693a      	ldr	r2, [r7, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	621a      	str	r2, [r3, #32]
}
 8007356:	bf00      	nop
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40012c00 	.word	0x40012c00
 8007368:	40013400 	.word	0x40013400
 800736c:	40015000 	.word	0x40015000
 8007370:	40014000 	.word	0x40014000
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800

0800737c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 0303 	bic.w	r3, r3, #3
 80073b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	021b      	lsls	r3, r3, #8
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a2b      	ldr	r2, [pc, #172]	; (8007488 <TIM_OC3_SetConfig+0x10c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d007      	beq.n	80073ee <TIM_OC3_SetConfig+0x72>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a2a      	ldr	r2, [pc, #168]	; (800748c <TIM_OC3_SetConfig+0x110>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d003      	beq.n	80073ee <TIM_OC3_SetConfig+0x72>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a29      	ldr	r2, [pc, #164]	; (8007490 <TIM_OC3_SetConfig+0x114>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d10d      	bne.n	800740a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a1e      	ldr	r2, [pc, #120]	; (8007488 <TIM_OC3_SetConfig+0x10c>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d013      	beq.n	800743a <TIM_OC3_SetConfig+0xbe>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a1d      	ldr	r2, [pc, #116]	; (800748c <TIM_OC3_SetConfig+0x110>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00f      	beq.n	800743a <TIM_OC3_SetConfig+0xbe>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a1d      	ldr	r2, [pc, #116]	; (8007494 <TIM_OC3_SetConfig+0x118>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00b      	beq.n	800743a <TIM_OC3_SetConfig+0xbe>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a1c      	ldr	r2, [pc, #112]	; (8007498 <TIM_OC3_SetConfig+0x11c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d007      	beq.n	800743a <TIM_OC3_SetConfig+0xbe>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a1b      	ldr	r2, [pc, #108]	; (800749c <TIM_OC3_SetConfig+0x120>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d003      	beq.n	800743a <TIM_OC3_SetConfig+0xbe>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a16      	ldr	r2, [pc, #88]	; (8007490 <TIM_OC3_SetConfig+0x114>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d113      	bne.n	8007462 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	4313      	orrs	r3, r2
 8007460:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	621a      	str	r2, [r3, #32]
}
 800747c:	bf00      	nop
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	40012c00 	.word	0x40012c00
 800748c:	40013400 	.word	0x40013400
 8007490:	40015000 	.word	0x40015000
 8007494:	40014000 	.word	0x40014000
 8007498:	40014400 	.word	0x40014400
 800749c:	40014800 	.word	0x40014800

080074a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b087      	sub	sp, #28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	031b      	lsls	r3, r3, #12
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a2c      	ldr	r2, [pc, #176]	; (80075b0 <TIM_OC4_SetConfig+0x110>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d007      	beq.n	8007514 <TIM_OC4_SetConfig+0x74>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a2b      	ldr	r2, [pc, #172]	; (80075b4 <TIM_OC4_SetConfig+0x114>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d003      	beq.n	8007514 <TIM_OC4_SetConfig+0x74>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a2a      	ldr	r2, [pc, #168]	; (80075b8 <TIM_OC4_SetConfig+0x118>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d10d      	bne.n	8007530 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800751a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	031b      	lsls	r3, r3, #12
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800752e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a1f      	ldr	r2, [pc, #124]	; (80075b0 <TIM_OC4_SetConfig+0x110>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d013      	beq.n	8007560 <TIM_OC4_SetConfig+0xc0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <TIM_OC4_SetConfig+0x114>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d00f      	beq.n	8007560 <TIM_OC4_SetConfig+0xc0>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a1e      	ldr	r2, [pc, #120]	; (80075bc <TIM_OC4_SetConfig+0x11c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00b      	beq.n	8007560 <TIM_OC4_SetConfig+0xc0>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a1d      	ldr	r2, [pc, #116]	; (80075c0 <TIM_OC4_SetConfig+0x120>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d007      	beq.n	8007560 <TIM_OC4_SetConfig+0xc0>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a1c      	ldr	r2, [pc, #112]	; (80075c4 <TIM_OC4_SetConfig+0x124>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d003      	beq.n	8007560 <TIM_OC4_SetConfig+0xc0>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <TIM_OC4_SetConfig+0x118>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d113      	bne.n	8007588 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007566:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800756e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	019b      	lsls	r3, r3, #6
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	019b      	lsls	r3, r3, #6
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	4313      	orrs	r3, r2
 8007586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	621a      	str	r2, [r3, #32]
}
 80075a2:	bf00      	nop
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40012c00 	.word	0x40012c00
 80075b4:	40013400 	.word	0x40013400
 80075b8:	40015000 	.word	0x40015000
 80075bc:	40014000 	.word	0x40014000
 80075c0:	40014400 	.word	0x40014400
 80075c4:	40014800 	.word	0x40014800

080075c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800760c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	041b      	lsls	r3, r3, #16
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	4313      	orrs	r3, r2
 8007618:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a19      	ldr	r2, [pc, #100]	; (8007684 <TIM_OC5_SetConfig+0xbc>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d013      	beq.n	800764a <TIM_OC5_SetConfig+0x82>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a18      	ldr	r2, [pc, #96]	; (8007688 <TIM_OC5_SetConfig+0xc0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00f      	beq.n	800764a <TIM_OC5_SetConfig+0x82>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a17      	ldr	r2, [pc, #92]	; (800768c <TIM_OC5_SetConfig+0xc4>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d00b      	beq.n	800764a <TIM_OC5_SetConfig+0x82>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a16      	ldr	r2, [pc, #88]	; (8007690 <TIM_OC5_SetConfig+0xc8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d007      	beq.n	800764a <TIM_OC5_SetConfig+0x82>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a15      	ldr	r2, [pc, #84]	; (8007694 <TIM_OC5_SetConfig+0xcc>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d003      	beq.n	800764a <TIM_OC5_SetConfig+0x82>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a14      	ldr	r2, [pc, #80]	; (8007698 <TIM_OC5_SetConfig+0xd0>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d109      	bne.n	800765e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007650:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	021b      	lsls	r3, r3, #8
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	4313      	orrs	r3, r2
 800765c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	621a      	str	r2, [r3, #32]
}
 8007678:	bf00      	nop
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	40012c00 	.word	0x40012c00
 8007688:	40013400 	.word	0x40013400
 800768c:	40014000 	.word	0x40014000
 8007690:	40014400 	.word	0x40014400
 8007694:	40014800 	.word	0x40014800
 8007698:	40015000 	.word	0x40015000

0800769c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	021b      	lsls	r3, r3, #8
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4313      	orrs	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	051b      	lsls	r3, r3, #20
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a1a      	ldr	r2, [pc, #104]	; (800775c <TIM_OC6_SetConfig+0xc0>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d013      	beq.n	8007720 <TIM_OC6_SetConfig+0x84>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a19      	ldr	r2, [pc, #100]	; (8007760 <TIM_OC6_SetConfig+0xc4>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d00f      	beq.n	8007720 <TIM_OC6_SetConfig+0x84>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a18      	ldr	r2, [pc, #96]	; (8007764 <TIM_OC6_SetConfig+0xc8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d00b      	beq.n	8007720 <TIM_OC6_SetConfig+0x84>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a17      	ldr	r2, [pc, #92]	; (8007768 <TIM_OC6_SetConfig+0xcc>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d007      	beq.n	8007720 <TIM_OC6_SetConfig+0x84>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a16      	ldr	r2, [pc, #88]	; (800776c <TIM_OC6_SetConfig+0xd0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d003      	beq.n	8007720 <TIM_OC6_SetConfig+0x84>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a15      	ldr	r2, [pc, #84]	; (8007770 <TIM_OC6_SetConfig+0xd4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d109      	bne.n	8007734 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007726:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	029b      	lsls	r3, r3, #10
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	4313      	orrs	r3, r2
 8007732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	621a      	str	r2, [r3, #32]
}
 800774e:	bf00      	nop
 8007750:	371c      	adds	r7, #28
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40012c00 	.word	0x40012c00
 8007760:	40013400 	.word	0x40013400
 8007764:	40014000 	.word	0x40014000
 8007768:	40014400 	.word	0x40014400
 800776c:	40014800 	.word	0x40014800
 8007770:	40015000 	.word	0x40015000

08007774 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6a1b      	ldr	r3, [r3, #32]
 800778a:	f023 0201 	bic.w	r2, r3, #1
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800779e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f023 030a 	bic.w	r3, r3, #10
 80077b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	621a      	str	r2, [r3, #32]
}
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b087      	sub	sp, #28
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	f023 0210 	bic.w	r2, r3, #16
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a1b      	ldr	r3, [r3, #32]
 80077f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	031b      	lsls	r3, r3, #12
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800780e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	621a      	str	r2, [r3, #32]
}
 8007826:	bf00      	nop
 8007828:	371c      	adds	r7, #28
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr

08007832 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007832:	b480      	push	{r7}
 8007834:	b085      	sub	sp, #20
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800784c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4313      	orrs	r3, r2
 8007854:	f043 0307 	orr.w	r3, r3, #7
 8007858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	609a      	str	r2, [r3, #8]
}
 8007860:	bf00      	nop
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
 8007878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	021a      	lsls	r2, r3, #8
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	431a      	orrs	r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	4313      	orrs	r3, r2
 8007894:	697a      	ldr	r2, [r7, #20]
 8007896:	4313      	orrs	r3, r2
 8007898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	609a      	str	r2, [r3, #8]
}
 80078a0:	bf00      	nop
 80078a2:	371c      	adds	r7, #28
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b087      	sub	sp, #28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	2201      	movs	r2, #1
 80078c0:	fa02 f303 	lsl.w	r3, r2, r3
 80078c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a1a      	ldr	r2, [r3, #32]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	43db      	mvns	r3, r3
 80078ce:	401a      	ands	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6a1a      	ldr	r2, [r3, #32]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	fa01 f303 	lsl.w	r3, r1, r3
 80078e4:	431a      	orrs	r2, r3
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	621a      	str	r2, [r3, #32]
}
 80078ea:	bf00      	nop
 80078ec:	371c      	adds	r7, #28
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
	...

080078f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007908:	2b01      	cmp	r3, #1
 800790a:	d101      	bne.n	8007910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800790c:	2302      	movs	r3, #2
 800790e:	e074      	b.n	80079fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2202      	movs	r2, #2
 800791c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a34      	ldr	r2, [pc, #208]	; (8007a08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d009      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a33      	ldr	r2, [pc, #204]	; (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d004      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a31      	ldr	r2, [pc, #196]	; (8007a10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d108      	bne.n	8007960 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007954:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	4313      	orrs	r3, r2
 800795e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a21      	ldr	r2, [pc, #132]	; (8007a08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d022      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007990:	d01d      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a1f      	ldr	r2, [pc, #124]	; (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d018      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a1d      	ldr	r2, [pc, #116]	; (8007a18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d013      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d00e      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a15      	ldr	r2, [pc, #84]	; (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d009      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a18      	ldr	r2, [pc, #96]	; (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d004      	beq.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a11      	ldr	r2, [pc, #68]	; (8007a10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d10c      	bne.n	80079e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	40012c00 	.word	0x40012c00
 8007a0c:	40013400 	.word	0x40013400
 8007a10:	40015000 	.word	0x40015000
 8007a14:	40000400 	.word	0x40000400
 8007a18:	40000800 	.word	0x40000800
 8007a1c:	40000c00 	.word	0x40000c00
 8007a20:	40014000 	.word	0x40014000

08007a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e042      	b.n	8007abc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d106      	bne.n	8007a4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7fa fa17 	bl	8001e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2224      	movs	r2, #36	; 0x24
 8007a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f022 0201 	bic.w	r2, r2, #1
 8007a64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fc50 	bl	800830c <UART_SetConfig>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d101      	bne.n	8007a76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e022      	b.n	8007abc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 ff40 	bl	8008904 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f042 0201 	orr.w	r2, r2, #1
 8007ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 ffc7 	bl	8008a48 <UART_CheckIdleState>
 8007aba:	4603      	mov	r3, r0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08a      	sub	sp, #40	; 0x28
 8007ac8:	af02      	add	r7, sp, #8
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	f040 8083 	bne.w	8007be6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d002      	beq.n	8007aec <HAL_UART_Transmit+0x28>
 8007ae6:	88fb      	ldrh	r3, [r7, #6]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e07b      	b.n	8007be8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_UART_Transmit+0x3a>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e074      	b.n	8007be8 <HAL_UART_Transmit+0x124>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2221      	movs	r2, #33	; 0x21
 8007b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b16:	f7fa fbbf 	bl	8002298 <HAL_GetTick>
 8007b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	88fa      	ldrh	r2, [r7, #6]
 8007b20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	88fa      	ldrh	r2, [r7, #6]
 8007b28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b34:	d108      	bne.n	8007b48 <HAL_UART_Transmit+0x84>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d104      	bne.n	8007b48 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	61bb      	str	r3, [r7, #24]
 8007b46:	e003      	b.n	8007b50 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007b58:	e02c      	b.n	8007bb4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2200      	movs	r2, #0
 8007b62:	2180      	movs	r1, #128	; 0x80
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 ffba 	bl	8008ade <UART_WaitOnFlagUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e039      	b.n	8007be8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10b      	bne.n	8007b92 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	881b      	ldrh	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	3302      	adds	r3, #2
 8007b8e:	61bb      	str	r3, [r7, #24]
 8007b90:	e007      	b.n	8007ba2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	781a      	ldrb	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1cc      	bne.n	8007b5a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2140      	movs	r1, #64	; 0x40
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 ff87 	bl	8008ade <UART_WaitOnFlagUntilTimeout>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e006      	b.n	8007be8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2220      	movs	r2, #32
 8007bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	e000      	b.n	8007be8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007be6:	2302      	movs	r3, #2
  }
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3720      	adds	r7, #32
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08a      	sub	sp, #40	; 0x28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	d142      	bne.n	8007c8e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d002      	beq.n	8007c14 <HAL_UART_Receive_IT+0x24>
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e03b      	b.n	8007c90 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d101      	bne.n	8007c26 <HAL_UART_Receive_IT+0x36>
 8007c22:	2302      	movs	r3, #2
 8007c24:	e034      	b.n	8007c90 <HAL_UART_Receive_IT+0xa0>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a17      	ldr	r2, [pc, #92]	; (8007c98 <HAL_UART_Receive_IT+0xa8>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d01f      	beq.n	8007c7e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d018      	beq.n	8007c7e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	613b      	str	r3, [r7, #16]
   return(result);
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	623b      	str	r3, [r7, #32]
 8007c6c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	69f9      	ldr	r1, [r7, #28]
 8007c70:	6a3a      	ldr	r2, [r7, #32]
 8007c72:	e841 2300 	strex	r3, r2, [r1]
 8007c76:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1e6      	bne.n	8007c4c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	461a      	mov	r2, r3
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 fff3 	bl	8008c70 <UART_Start_Receive_IT>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	e000      	b.n	8007c90 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007c8e:	2302      	movs	r3, #2
  }
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3728      	adds	r7, #40	; 0x28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	40008000 	.word	0x40008000

08007c9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b0ba      	sub	sp, #232	; 0xe8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007cc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007cc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007cca:	4013      	ands	r3, r2
 8007ccc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d11b      	bne.n	8007d10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cdc:	f003 0320 	and.w	r3, r3, #32
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d015      	beq.n	8007d10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce8:	f003 0320 	and.w	r3, r3, #32
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d105      	bne.n	8007cfc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d009      	beq.n	8007d10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 82d6 	beq.w	80082b2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	4798      	blx	r3
      }
      return;
 8007d0e:	e2d0      	b.n	80082b2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 811f 	beq.w	8007f58 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007d1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007d1e:	4b8b      	ldr	r3, [pc, #556]	; (8007f4c <HAL_UART_IRQHandler+0x2b0>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007d26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007d2a:	4b89      	ldr	r3, [pc, #548]	; (8007f50 <HAL_UART_IRQHandler+0x2b4>)
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 8112 	beq.w	8007f58 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d011      	beq.n	8007d64 <HAL_UART_IRQHandler+0xc8>
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2201      	movs	r2, #1
 8007d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d5a:	f043 0201 	orr.w	r2, r3, #1
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d011      	beq.n	8007d94 <HAL_UART_IRQHandler+0xf8>
 8007d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d74:	f003 0301 	and.w	r3, r3, #1
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00b      	beq.n	8007d94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2202      	movs	r2, #2
 8007d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d8a:	f043 0204 	orr.w	r2, r3, #4
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d011      	beq.n	8007dc4 <HAL_UART_IRQHandler+0x128>
 8007da0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007da4:	f003 0301 	and.w	r3, r3, #1
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00b      	beq.n	8007dc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2204      	movs	r2, #4
 8007db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dba:	f043 0202 	orr.w	r2, r3, #2
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dc8:	f003 0308 	and.w	r3, r3, #8
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d017      	beq.n	8007e00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dd4:	f003 0320 	and.w	r3, r3, #32
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d105      	bne.n	8007de8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007ddc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007de0:	4b5a      	ldr	r3, [pc, #360]	; (8007f4c <HAL_UART_IRQHandler+0x2b0>)
 8007de2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2208      	movs	r2, #8
 8007dee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007df6:	f043 0208 	orr.w	r2, r3, #8
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d012      	beq.n	8007e32 <HAL_UART_IRQHandler+0x196>
 8007e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00c      	beq.n	8007e32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e28:	f043 0220 	orr.w	r2, r3, #32
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 823c 	beq.w	80082b6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d013      	beq.n	8007e72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4e:	f003 0320 	and.w	r3, r3, #32
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d105      	bne.n	8007e62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d007      	beq.n	8007e72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	d005      	beq.n	8007e96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d04f      	beq.n	8007f36 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f001 f814 	bl	8008ec4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea6:	2b40      	cmp	r3, #64	; 0x40
 8007ea8:	d141      	bne.n	8007f2e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3308      	adds	r3, #8
 8007eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007eb8:	e853 3f00 	ldrex	r3, [r3]
 8007ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ed6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1d9      	bne.n	8007eaa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d013      	beq.n	8007f26 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f02:	4a14      	ldr	r2, [pc, #80]	; (8007f54 <HAL_UART_IRQHandler+0x2b8>)
 8007f04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fd f8cc 	bl	80050a8 <HAL_DMA_Abort_IT>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d017      	beq.n	8007f46 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007f20:	4610      	mov	r0, r2
 8007f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f24:	e00f      	b.n	8007f46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f9da 	bl	80082e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f2c:	e00b      	b.n	8007f46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f9d6 	bl	80082e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f34:	e007      	b.n	8007f46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f9d2 	bl	80082e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007f44:	e1b7      	b.n	80082b6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f46:	bf00      	nop
    return;
 8007f48:	e1b5      	b.n	80082b6 <HAL_UART_IRQHandler+0x61a>
 8007f4a:	bf00      	nop
 8007f4c:	10000001 	.word	0x10000001
 8007f50:	04000120 	.word	0x04000120
 8007f54:	08008f91 	.word	0x08008f91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	f040 814a 	bne.w	80081f6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f66:	f003 0310 	and.w	r3, r3, #16
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 8143 	beq.w	80081f6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f74:	f003 0310 	and.w	r3, r3, #16
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 813c 	beq.w	80081f6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2210      	movs	r2, #16
 8007f84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f90:	2b40      	cmp	r3, #64	; 0x40
 8007f92:	f040 80b5 	bne.w	8008100 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007fa2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 8187 	beq.w	80082ba <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	f080 817f 	bcs.w	80082ba <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007fc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0320 	and.w	r3, r3, #32
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f040 8086 	bne.w	80080e4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007fec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ff4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008002:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008006:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800800e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008012:	e841 2300 	strex	r3, r2, [r1]
 8008016:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800801a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1da      	bne.n	8007fd8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3308      	adds	r3, #8
 8008028:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008032:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008034:	f023 0301 	bic.w	r3, r3, #1
 8008038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3308      	adds	r3, #8
 8008042:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008046:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800804a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800804e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008052:	e841 2300 	strex	r3, r2, [r1]
 8008056:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1e1      	bne.n	8008022 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3308      	adds	r3, #8
 8008064:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800806e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008074:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3308      	adds	r3, #8
 800807e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008082:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008084:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008088:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008090:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e3      	bne.n	800805e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ac:	e853 3f00 	ldrex	r3, [r3]
 80080b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080b4:	f023 0310 	bic.w	r3, r3, #16
 80080b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	461a      	mov	r2, r3
 80080c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80080c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080ce:	e841 2300 	strex	r3, r2, [r1]
 80080d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1e4      	bne.n	80080a4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fc ff89 	bl	8004ff6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f8fb 	bl	80082f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080fe:	e0dc      	b.n	80082ba <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800810c:	b29b      	uxth	r3, r3
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800811a:	b29b      	uxth	r3, r3
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 80ce 	beq.w	80082be <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008122:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008126:	2b00      	cmp	r3, #0
 8008128:	f000 80c9 	beq.w	80082be <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	e853 3f00 	ldrex	r3, [r3]
 8008138:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800813a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008140:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	461a      	mov	r2, r3
 800814a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800814e:	647b      	str	r3, [r7, #68]	; 0x44
 8008150:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008152:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800815c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e4      	bne.n	800812c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3308      	adds	r3, #8
 8008168:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816c:	e853 3f00 	ldrex	r3, [r3]
 8008170:	623b      	str	r3, [r7, #32]
   return(result);
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008178:	f023 0301 	bic.w	r3, r3, #1
 800817c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3308      	adds	r3, #8
 8008186:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800818a:	633a      	str	r2, [r7, #48]	; 0x30
 800818c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e1      	bne.n	8008162 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	e853 3f00 	ldrex	r3, [r3]
 80081be:	60fb      	str	r3, [r7, #12]
   return(result);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f023 0310 	bic.w	r3, r3, #16
 80081c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80081d4:	61fb      	str	r3, [r7, #28]
 80081d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d8:	69b9      	ldr	r1, [r7, #24]
 80081da:	69fa      	ldr	r2, [r7, #28]
 80081dc:	e841 2300 	strex	r3, r2, [r1]
 80081e0:	617b      	str	r3, [r7, #20]
   return(result);
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1e4      	bne.n	80081b2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f880 	bl	80082f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081f4:	e063      	b.n	80082be <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80081f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00e      	beq.n	8008220 <HAL_UART_IRQHandler+0x584>
 8008202:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d008      	beq.n	8008220 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008216:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f001 fb57 	bl	80098cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800821e:	e051      	b.n	80082c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008228:	2b00      	cmp	r3, #0
 800822a:	d014      	beq.n	8008256 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800822c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008234:	2b00      	cmp	r3, #0
 8008236:	d105      	bne.n	8008244 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800823c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d008      	beq.n	8008256 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008248:	2b00      	cmp	r3, #0
 800824a:	d03a      	beq.n	80082c2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	4798      	blx	r3
    }
    return;
 8008254:	e035      	b.n	80082c2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800825e:	2b00      	cmp	r3, #0
 8008260:	d009      	beq.n	8008276 <HAL_UART_IRQHandler+0x5da>
 8008262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fea4 	bl	8008fbc <UART_EndTransmit_IT>
    return;
 8008274:	e026      	b.n	80082c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800827a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d009      	beq.n	8008296 <HAL_UART_IRQHandler+0x5fa>
 8008282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008286:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 fb30 	bl	80098f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008294:	e016      	b.n	80082c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800829a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d010      	beq.n	80082c4 <HAL_UART_IRQHandler+0x628>
 80082a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	da0c      	bge.n	80082c4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 fb18 	bl	80098e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082b0:	e008      	b.n	80082c4 <HAL_UART_IRQHandler+0x628>
      return;
 80082b2:	bf00      	nop
 80082b4:	e006      	b.n	80082c4 <HAL_UART_IRQHandler+0x628>
    return;
 80082b6:	bf00      	nop
 80082b8:	e004      	b.n	80082c4 <HAL_UART_IRQHandler+0x628>
      return;
 80082ba:	bf00      	nop
 80082bc:	e002      	b.n	80082c4 <HAL_UART_IRQHandler+0x628>
      return;
 80082be:	bf00      	nop
 80082c0:	e000      	b.n	80082c4 <HAL_UART_IRQHandler+0x628>
    return;
 80082c2:	bf00      	nop
  }
}
 80082c4:	37e8      	adds	r7, #232	; 0xe8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop

080082cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008300:	bf00      	nop
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800830c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008310:	b08c      	sub	sp, #48	; 0x30
 8008312:	af00      	add	r7, sp, #0
 8008314:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	431a      	orrs	r2, r3
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	431a      	orrs	r2, r3
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	4313      	orrs	r3, r2
 8008332:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	4baa      	ldr	r3, [pc, #680]	; (80085e4 <UART_SetConfig+0x2d8>)
 800833c:	4013      	ands	r3, r2
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	6812      	ldr	r2, [r2, #0]
 8008342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008344:	430b      	orrs	r3, r1
 8008346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	68da      	ldr	r2, [r3, #12]
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a9f      	ldr	r2, [pc, #636]	; (80085e8 <UART_SetConfig+0x2dc>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d004      	beq.n	8008378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008374:	4313      	orrs	r3, r2
 8008376:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689b      	ldr	r3, [r3, #8]
 800837e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008382:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	6812      	ldr	r2, [r2, #0]
 800838a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800838c:	430b      	orrs	r3, r1
 800838e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008396:	f023 010f 	bic.w	r1, r3, #15
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a90      	ldr	r2, [pc, #576]	; (80085ec <UART_SetConfig+0x2e0>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d125      	bne.n	80083fc <UART_SetConfig+0xf0>
 80083b0:	4b8f      	ldr	r3, [pc, #572]	; (80085f0 <UART_SetConfig+0x2e4>)
 80083b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d81a      	bhi.n	80083f4 <UART_SetConfig+0xe8>
 80083be:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <UART_SetConfig+0xb8>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	080083d5 	.word	0x080083d5
 80083c8:	080083e5 	.word	0x080083e5
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	080083ed 	.word	0x080083ed
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083da:	e116      	b.n	800860a <UART_SetConfig+0x2fe>
 80083dc:	2302      	movs	r3, #2
 80083de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083e2:	e112      	b.n	800860a <UART_SetConfig+0x2fe>
 80083e4:	2304      	movs	r3, #4
 80083e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ea:	e10e      	b.n	800860a <UART_SetConfig+0x2fe>
 80083ec:	2308      	movs	r3, #8
 80083ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f2:	e10a      	b.n	800860a <UART_SetConfig+0x2fe>
 80083f4:	2310      	movs	r3, #16
 80083f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fa:	e106      	b.n	800860a <UART_SetConfig+0x2fe>
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a7c      	ldr	r2, [pc, #496]	; (80085f4 <UART_SetConfig+0x2e8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d138      	bne.n	8008478 <UART_SetConfig+0x16c>
 8008406:	4b7a      	ldr	r3, [pc, #488]	; (80085f0 <UART_SetConfig+0x2e4>)
 8008408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840c:	f003 030c 	and.w	r3, r3, #12
 8008410:	2b0c      	cmp	r3, #12
 8008412:	d82d      	bhi.n	8008470 <UART_SetConfig+0x164>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <UART_SetConfig+0x110>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008451 	.word	0x08008451
 8008420:	08008471 	.word	0x08008471
 8008424:	08008471 	.word	0x08008471
 8008428:	08008471 	.word	0x08008471
 800842c:	08008461 	.word	0x08008461
 8008430:	08008471 	.word	0x08008471
 8008434:	08008471 	.word	0x08008471
 8008438:	08008471 	.word	0x08008471
 800843c:	08008459 	.word	0x08008459
 8008440:	08008471 	.word	0x08008471
 8008444:	08008471 	.word	0x08008471
 8008448:	08008471 	.word	0x08008471
 800844c:	08008469 	.word	0x08008469
 8008450:	2300      	movs	r3, #0
 8008452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008456:	e0d8      	b.n	800860a <UART_SetConfig+0x2fe>
 8008458:	2302      	movs	r3, #2
 800845a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800845e:	e0d4      	b.n	800860a <UART_SetConfig+0x2fe>
 8008460:	2304      	movs	r3, #4
 8008462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008466:	e0d0      	b.n	800860a <UART_SetConfig+0x2fe>
 8008468:	2308      	movs	r3, #8
 800846a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800846e:	e0cc      	b.n	800860a <UART_SetConfig+0x2fe>
 8008470:	2310      	movs	r3, #16
 8008472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008476:	e0c8      	b.n	800860a <UART_SetConfig+0x2fe>
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a5e      	ldr	r2, [pc, #376]	; (80085f8 <UART_SetConfig+0x2ec>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d125      	bne.n	80084ce <UART_SetConfig+0x1c2>
 8008482:	4b5b      	ldr	r3, [pc, #364]	; (80085f0 <UART_SetConfig+0x2e4>)
 8008484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008488:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800848c:	2b30      	cmp	r3, #48	; 0x30
 800848e:	d016      	beq.n	80084be <UART_SetConfig+0x1b2>
 8008490:	2b30      	cmp	r3, #48	; 0x30
 8008492:	d818      	bhi.n	80084c6 <UART_SetConfig+0x1ba>
 8008494:	2b20      	cmp	r3, #32
 8008496:	d00a      	beq.n	80084ae <UART_SetConfig+0x1a2>
 8008498:	2b20      	cmp	r3, #32
 800849a:	d814      	bhi.n	80084c6 <UART_SetConfig+0x1ba>
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <UART_SetConfig+0x19a>
 80084a0:	2b10      	cmp	r3, #16
 80084a2:	d008      	beq.n	80084b6 <UART_SetConfig+0x1aa>
 80084a4:	e00f      	b.n	80084c6 <UART_SetConfig+0x1ba>
 80084a6:	2300      	movs	r3, #0
 80084a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ac:	e0ad      	b.n	800860a <UART_SetConfig+0x2fe>
 80084ae:	2302      	movs	r3, #2
 80084b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b4:	e0a9      	b.n	800860a <UART_SetConfig+0x2fe>
 80084b6:	2304      	movs	r3, #4
 80084b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084bc:	e0a5      	b.n	800860a <UART_SetConfig+0x2fe>
 80084be:	2308      	movs	r3, #8
 80084c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c4:	e0a1      	b.n	800860a <UART_SetConfig+0x2fe>
 80084c6:	2310      	movs	r3, #16
 80084c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084cc:	e09d      	b.n	800860a <UART_SetConfig+0x2fe>
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a4a      	ldr	r2, [pc, #296]	; (80085fc <UART_SetConfig+0x2f0>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d125      	bne.n	8008524 <UART_SetConfig+0x218>
 80084d8:	4b45      	ldr	r3, [pc, #276]	; (80085f0 <UART_SetConfig+0x2e4>)
 80084da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084e2:	2bc0      	cmp	r3, #192	; 0xc0
 80084e4:	d016      	beq.n	8008514 <UART_SetConfig+0x208>
 80084e6:	2bc0      	cmp	r3, #192	; 0xc0
 80084e8:	d818      	bhi.n	800851c <UART_SetConfig+0x210>
 80084ea:	2b80      	cmp	r3, #128	; 0x80
 80084ec:	d00a      	beq.n	8008504 <UART_SetConfig+0x1f8>
 80084ee:	2b80      	cmp	r3, #128	; 0x80
 80084f0:	d814      	bhi.n	800851c <UART_SetConfig+0x210>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <UART_SetConfig+0x1f0>
 80084f6:	2b40      	cmp	r3, #64	; 0x40
 80084f8:	d008      	beq.n	800850c <UART_SetConfig+0x200>
 80084fa:	e00f      	b.n	800851c <UART_SetConfig+0x210>
 80084fc:	2300      	movs	r3, #0
 80084fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008502:	e082      	b.n	800860a <UART_SetConfig+0x2fe>
 8008504:	2302      	movs	r3, #2
 8008506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800850a:	e07e      	b.n	800860a <UART_SetConfig+0x2fe>
 800850c:	2304      	movs	r3, #4
 800850e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008512:	e07a      	b.n	800860a <UART_SetConfig+0x2fe>
 8008514:	2308      	movs	r3, #8
 8008516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800851a:	e076      	b.n	800860a <UART_SetConfig+0x2fe>
 800851c:	2310      	movs	r3, #16
 800851e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008522:	e072      	b.n	800860a <UART_SetConfig+0x2fe>
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a35      	ldr	r2, [pc, #212]	; (8008600 <UART_SetConfig+0x2f4>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d12a      	bne.n	8008584 <UART_SetConfig+0x278>
 800852e:	4b30      	ldr	r3, [pc, #192]	; (80085f0 <UART_SetConfig+0x2e4>)
 8008530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800853c:	d01a      	beq.n	8008574 <UART_SetConfig+0x268>
 800853e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008542:	d81b      	bhi.n	800857c <UART_SetConfig+0x270>
 8008544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008548:	d00c      	beq.n	8008564 <UART_SetConfig+0x258>
 800854a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800854e:	d815      	bhi.n	800857c <UART_SetConfig+0x270>
 8008550:	2b00      	cmp	r3, #0
 8008552:	d003      	beq.n	800855c <UART_SetConfig+0x250>
 8008554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008558:	d008      	beq.n	800856c <UART_SetConfig+0x260>
 800855a:	e00f      	b.n	800857c <UART_SetConfig+0x270>
 800855c:	2300      	movs	r3, #0
 800855e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008562:	e052      	b.n	800860a <UART_SetConfig+0x2fe>
 8008564:	2302      	movs	r3, #2
 8008566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800856a:	e04e      	b.n	800860a <UART_SetConfig+0x2fe>
 800856c:	2304      	movs	r3, #4
 800856e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008572:	e04a      	b.n	800860a <UART_SetConfig+0x2fe>
 8008574:	2308      	movs	r3, #8
 8008576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800857a:	e046      	b.n	800860a <UART_SetConfig+0x2fe>
 800857c:	2310      	movs	r3, #16
 800857e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008582:	e042      	b.n	800860a <UART_SetConfig+0x2fe>
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a17      	ldr	r2, [pc, #92]	; (80085e8 <UART_SetConfig+0x2dc>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d13a      	bne.n	8008604 <UART_SetConfig+0x2f8>
 800858e:	4b18      	ldr	r3, [pc, #96]	; (80085f0 <UART_SetConfig+0x2e4>)
 8008590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008594:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008598:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800859c:	d01a      	beq.n	80085d4 <UART_SetConfig+0x2c8>
 800859e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085a2:	d81b      	bhi.n	80085dc <UART_SetConfig+0x2d0>
 80085a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085a8:	d00c      	beq.n	80085c4 <UART_SetConfig+0x2b8>
 80085aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085ae:	d815      	bhi.n	80085dc <UART_SetConfig+0x2d0>
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d003      	beq.n	80085bc <UART_SetConfig+0x2b0>
 80085b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b8:	d008      	beq.n	80085cc <UART_SetConfig+0x2c0>
 80085ba:	e00f      	b.n	80085dc <UART_SetConfig+0x2d0>
 80085bc:	2300      	movs	r3, #0
 80085be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085c2:	e022      	b.n	800860a <UART_SetConfig+0x2fe>
 80085c4:	2302      	movs	r3, #2
 80085c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ca:	e01e      	b.n	800860a <UART_SetConfig+0x2fe>
 80085cc:	2304      	movs	r3, #4
 80085ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d2:	e01a      	b.n	800860a <UART_SetConfig+0x2fe>
 80085d4:	2308      	movs	r3, #8
 80085d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085da:	e016      	b.n	800860a <UART_SetConfig+0x2fe>
 80085dc:	2310      	movs	r3, #16
 80085de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085e2:	e012      	b.n	800860a <UART_SetConfig+0x2fe>
 80085e4:	cfff69f3 	.word	0xcfff69f3
 80085e8:	40008000 	.word	0x40008000
 80085ec:	40013800 	.word	0x40013800
 80085f0:	40021000 	.word	0x40021000
 80085f4:	40004400 	.word	0x40004400
 80085f8:	40004800 	.word	0x40004800
 80085fc:	40004c00 	.word	0x40004c00
 8008600:	40005000 	.word	0x40005000
 8008604:	2310      	movs	r3, #16
 8008606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4aae      	ldr	r2, [pc, #696]	; (80088c8 <UART_SetConfig+0x5bc>)
 8008610:	4293      	cmp	r3, r2
 8008612:	f040 8097 	bne.w	8008744 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008616:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800861a:	2b08      	cmp	r3, #8
 800861c:	d823      	bhi.n	8008666 <UART_SetConfig+0x35a>
 800861e:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <UART_SetConfig+0x318>)
 8008620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008624:	08008649 	.word	0x08008649
 8008628:	08008667 	.word	0x08008667
 800862c:	08008651 	.word	0x08008651
 8008630:	08008667 	.word	0x08008667
 8008634:	08008657 	.word	0x08008657
 8008638:	08008667 	.word	0x08008667
 800863c:	08008667 	.word	0x08008667
 8008640:	08008667 	.word	0x08008667
 8008644:	0800865f 	.word	0x0800865f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008648:	f7fd fe0e 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 800864c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800864e:	e010      	b.n	8008672 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008650:	4b9e      	ldr	r3, [pc, #632]	; (80088cc <UART_SetConfig+0x5c0>)
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008654:	e00d      	b.n	8008672 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008656:	f7fd fd99 	bl	800618c <HAL_RCC_GetSysClockFreq>
 800865a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800865c:	e009      	b.n	8008672 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800865e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008664:	e005      	b.n	8008672 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008666:	2300      	movs	r3, #0
 8008668:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008670:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 8130 	beq.w	80088da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800867e:	4a94      	ldr	r2, [pc, #592]	; (80088d0 <UART_SetConfig+0x5c4>)
 8008680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008684:	461a      	mov	r2, r3
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	fbb3 f3f2 	udiv	r3, r3, r2
 800868c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	4613      	mov	r3, r2
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	4413      	add	r3, r2
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	429a      	cmp	r2, r3
 800869c:	d305      	bcc.n	80086aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086a4:	69ba      	ldr	r2, [r7, #24]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d903      	bls.n	80086b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086b0:	e113      	b.n	80088da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	2200      	movs	r2, #0
 80086b6:	60bb      	str	r3, [r7, #8]
 80086b8:	60fa      	str	r2, [r7, #12]
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	4a84      	ldr	r2, [pc, #528]	; (80088d0 <UART_SetConfig+0x5c4>)
 80086c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2200      	movs	r2, #0
 80086c8:	603b      	str	r3, [r7, #0]
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086d4:	f7f8 fb00 	bl	8000cd8 <__aeabi_uldivmod>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4610      	mov	r0, r2
 80086de:	4619      	mov	r1, r3
 80086e0:	f04f 0200 	mov.w	r2, #0
 80086e4:	f04f 0300 	mov.w	r3, #0
 80086e8:	020b      	lsls	r3, r1, #8
 80086ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086ee:	0202      	lsls	r2, r0, #8
 80086f0:	6979      	ldr	r1, [r7, #20]
 80086f2:	6849      	ldr	r1, [r1, #4]
 80086f4:	0849      	lsrs	r1, r1, #1
 80086f6:	2000      	movs	r0, #0
 80086f8:	460c      	mov	r4, r1
 80086fa:	4605      	mov	r5, r0
 80086fc:	eb12 0804 	adds.w	r8, r2, r4
 8008700:	eb43 0905 	adc.w	r9, r3, r5
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	2200      	movs	r2, #0
 800870a:	469a      	mov	sl, r3
 800870c:	4693      	mov	fp, r2
 800870e:	4652      	mov	r2, sl
 8008710:	465b      	mov	r3, fp
 8008712:	4640      	mov	r0, r8
 8008714:	4649      	mov	r1, r9
 8008716:	f7f8 fadf 	bl	8000cd8 <__aeabi_uldivmod>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	4613      	mov	r3, r2
 8008720:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008722:	6a3b      	ldr	r3, [r7, #32]
 8008724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008728:	d308      	bcc.n	800873c <UART_SetConfig+0x430>
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008730:	d204      	bcs.n	800873c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6a3a      	ldr	r2, [r7, #32]
 8008738:	60da      	str	r2, [r3, #12]
 800873a:	e0ce      	b.n	80088da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008742:	e0ca      	b.n	80088da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800874c:	d166      	bne.n	800881c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800874e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008752:	2b08      	cmp	r3, #8
 8008754:	d827      	bhi.n	80087a6 <UART_SetConfig+0x49a>
 8008756:	a201      	add	r2, pc, #4	; (adr r2, 800875c <UART_SetConfig+0x450>)
 8008758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875c:	08008781 	.word	0x08008781
 8008760:	08008789 	.word	0x08008789
 8008764:	08008791 	.word	0x08008791
 8008768:	080087a7 	.word	0x080087a7
 800876c:	08008797 	.word	0x08008797
 8008770:	080087a7 	.word	0x080087a7
 8008774:	080087a7 	.word	0x080087a7
 8008778:	080087a7 	.word	0x080087a7
 800877c:	0800879f 	.word	0x0800879f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008780:	f7fd fd72 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8008784:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008786:	e014      	b.n	80087b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008788:	f7fd fd84 	bl	8006294 <HAL_RCC_GetPCLK2Freq>
 800878c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800878e:	e010      	b.n	80087b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008790:	4b4e      	ldr	r3, [pc, #312]	; (80088cc <UART_SetConfig+0x5c0>)
 8008792:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008794:	e00d      	b.n	80087b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008796:	f7fd fcf9 	bl	800618c <HAL_RCC_GetSysClockFreq>
 800879a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800879c:	e009      	b.n	80087b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800879e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087a4:	e005      	b.n	80087b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 8090 	beq.w	80088da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	4a44      	ldr	r2, [pc, #272]	; (80088d0 <UART_SetConfig+0x5c4>)
 80087c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087c4:	461a      	mov	r2, r3
 80087c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80087cc:	005a      	lsls	r2, r3, #1
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	441a      	add	r2, r3
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	fbb2 f3f3 	udiv	r3, r2, r3
 80087de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	2b0f      	cmp	r3, #15
 80087e4:	d916      	bls.n	8008814 <UART_SetConfig+0x508>
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ec:	d212      	bcs.n	8008814 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	f023 030f 	bic.w	r3, r3, #15
 80087f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	085b      	lsrs	r3, r3, #1
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	f003 0307 	and.w	r3, r3, #7
 8008802:	b29a      	uxth	r2, r3
 8008804:	8bfb      	ldrh	r3, [r7, #30]
 8008806:	4313      	orrs	r3, r2
 8008808:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	8bfa      	ldrh	r2, [r7, #30]
 8008810:	60da      	str	r2, [r3, #12]
 8008812:	e062      	b.n	80088da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800881a:	e05e      	b.n	80088da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800881c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008820:	2b08      	cmp	r3, #8
 8008822:	d828      	bhi.n	8008876 <UART_SetConfig+0x56a>
 8008824:	a201      	add	r2, pc, #4	; (adr r2, 800882c <UART_SetConfig+0x520>)
 8008826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882a:	bf00      	nop
 800882c:	08008851 	.word	0x08008851
 8008830:	08008859 	.word	0x08008859
 8008834:	08008861 	.word	0x08008861
 8008838:	08008877 	.word	0x08008877
 800883c:	08008867 	.word	0x08008867
 8008840:	08008877 	.word	0x08008877
 8008844:	08008877 	.word	0x08008877
 8008848:	08008877 	.word	0x08008877
 800884c:	0800886f 	.word	0x0800886f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008850:	f7fd fd0a 	bl	8006268 <HAL_RCC_GetPCLK1Freq>
 8008854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008856:	e014      	b.n	8008882 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008858:	f7fd fd1c 	bl	8006294 <HAL_RCC_GetPCLK2Freq>
 800885c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800885e:	e010      	b.n	8008882 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008860:	4b1a      	ldr	r3, [pc, #104]	; (80088cc <UART_SetConfig+0x5c0>)
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008864:	e00d      	b.n	8008882 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008866:	f7fd fc91 	bl	800618c <HAL_RCC_GetSysClockFreq>
 800886a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800886c:	e009      	b.n	8008882 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800886e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008874:	e005      	b.n	8008882 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008880:	bf00      	nop
    }

    if (pclk != 0U)
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	2b00      	cmp	r3, #0
 8008886:	d028      	beq.n	80088da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888c:	4a10      	ldr	r2, [pc, #64]	; (80088d0 <UART_SetConfig+0x5c4>)
 800888e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008892:	461a      	mov	r2, r3
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	fbb3 f2f2 	udiv	r2, r3, r2
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	085b      	lsrs	r3, r3, #1
 80088a0:	441a      	add	r2, r3
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	2b0f      	cmp	r3, #15
 80088b0:	d910      	bls.n	80088d4 <UART_SetConfig+0x5c8>
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088b8:	d20c      	bcs.n	80088d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088ba:	6a3b      	ldr	r3, [r7, #32]
 80088bc:	b29a      	uxth	r2, r3
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	60da      	str	r2, [r3, #12]
 80088c4:	e009      	b.n	80088da <UART_SetConfig+0x5ce>
 80088c6:	bf00      	nop
 80088c8:	40008000 	.word	0x40008000
 80088cc:	00f42400 	.word	0x00f42400
 80088d0:	0800ee88 	.word	0x0800ee88
      }
      else
      {
        ret = HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2201      	movs	r2, #1
 80088de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	2200      	movs	r2, #0
 80088ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2200      	movs	r2, #0
 80088f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3730      	adds	r7, #48	; 0x30
 80088fe:	46bd      	mov	sp, r7
 8008900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00a      	beq.n	800892e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00a      	beq.n	8008950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	430a      	orrs	r2, r1
 800894e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008976:	f003 0308 	and.w	r3, r3, #8
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00a      	beq.n	8008994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	430a      	orrs	r2, r1
 8008992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008998:	f003 0310 	and.w	r3, r3, #16
 800899c:	2b00      	cmp	r3, #0
 800899e:	d00a      	beq.n	80089b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d01a      	beq.n	8008a1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a02:	d10a      	bne.n	8008a1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00a      	beq.n	8008a3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	430a      	orrs	r2, r1
 8008a3a:	605a      	str	r2, [r3, #4]
  }
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af02      	add	r7, sp, #8
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a58:	f7f9 fc1e 	bl	8002298 <HAL_GetTick>
 8008a5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0308 	and.w	r3, r3, #8
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d10e      	bne.n	8008a8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f82f 	bl	8008ade <UART_WaitOnFlagUntilTimeout>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d001      	beq.n	8008a8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e025      	b.n	8008ad6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f003 0304 	and.w	r3, r3, #4
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d10e      	bne.n	8008ab6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f819 	bl	8008ade <UART_WaitOnFlagUntilTimeout>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e00f      	b.n	8008ad6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2220      	movs	r2, #32
 8008aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b09c      	sub	sp, #112	; 0x70
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	60f8      	str	r0, [r7, #12]
 8008ae6:	60b9      	str	r1, [r7, #8]
 8008ae8:	603b      	str	r3, [r7, #0]
 8008aea:	4613      	mov	r3, r2
 8008aec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aee:	e0a9      	b.n	8008c44 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008af6:	f000 80a5 	beq.w	8008c44 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008afa:	f7f9 fbcd 	bl	8002298 <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d302      	bcc.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d140      	bne.n	8008b92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b18:	e853 3f00 	ldrex	r3, [r3]
 8008b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b24:	667b      	str	r3, [r7, #100]	; 0x64
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b30:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e6      	bne.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b54:	f023 0301 	bic.w	r3, r3, #1
 8008b58:	663b      	str	r3, [r7, #96]	; 0x60
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3308      	adds	r3, #8
 8008b60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b62:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b6a:	e841 2300 	strex	r3, r2, [r1]
 8008b6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1e5      	bne.n	8008b42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2220      	movs	r2, #32
 8008b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2220      	movs	r2, #32
 8008b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e069      	b.n	8008c66 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d051      	beq.n	8008c44 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bae:	d149      	bne.n	8008c44 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bb8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008bce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8008bda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008be0:	e841 2300 	strex	r3, r2, [r1]
 8008be4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1e6      	bne.n	8008bba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	e853 3f00 	ldrex	r3, [r3]
 8008bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	f023 0301 	bic.w	r3, r3, #1
 8008c02:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3308      	adds	r3, #8
 8008c0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c0c:	623a      	str	r2, [r7, #32]
 8008c0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c10:	69f9      	ldr	r1, [r7, #28]
 8008c12:	6a3a      	ldr	r2, [r7, #32]
 8008c14:	e841 2300 	strex	r3, r2, [r1]
 8008c18:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d1e5      	bne.n	8008bec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2220      	movs	r2, #32
 8008c24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e010      	b.n	8008c66 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69da      	ldr	r2, [r3, #28]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	bf0c      	ite	eq
 8008c54:	2301      	moveq	r3, #1
 8008c56:	2300      	movne	r3, #0
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	461a      	mov	r2, r3
 8008c5c:	79fb      	ldrb	r3, [r7, #7]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	f43f af46 	beq.w	8008af0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3770      	adds	r7, #112	; 0x70
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
	...

08008c70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b0a3      	sub	sp, #140	; 0x8c
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	88fa      	ldrh	r2, [r7, #6]
 8008c88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	88fa      	ldrh	r2, [r7, #6]
 8008c90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ca2:	d10e      	bne.n	8008cc2 <UART_Start_Receive_IT+0x52>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d105      	bne.n	8008cb8 <UART_Start_Receive_IT+0x48>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008cb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cb6:	e02d      	b.n	8008d14 <UART_Start_Receive_IT+0xa4>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	22ff      	movs	r2, #255	; 0xff
 8008cbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cc0:	e028      	b.n	8008d14 <UART_Start_Receive_IT+0xa4>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10d      	bne.n	8008ce6 <UART_Start_Receive_IT+0x76>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d104      	bne.n	8008cdc <UART_Start_Receive_IT+0x6c>
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	22ff      	movs	r2, #255	; 0xff
 8008cd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cda:	e01b      	b.n	8008d14 <UART_Start_Receive_IT+0xa4>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	227f      	movs	r2, #127	; 0x7f
 8008ce0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ce4:	e016      	b.n	8008d14 <UART_Start_Receive_IT+0xa4>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cee:	d10d      	bne.n	8008d0c <UART_Start_Receive_IT+0x9c>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d104      	bne.n	8008d02 <UART_Start_Receive_IT+0x92>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	227f      	movs	r2, #127	; 0x7f
 8008cfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d00:	e008      	b.n	8008d14 <UART_Start_Receive_IT+0xa4>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	223f      	movs	r2, #63	; 0x3f
 8008d06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d0a:	e003      	b.n	8008d14 <UART_Start_Receive_IT+0xa4>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2222      	movs	r2, #34	; 0x22
 8008d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3308      	adds	r3, #8
 8008d2a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d2e:	e853 3f00 	ldrex	r3, [r3]
 8008d32:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008d34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d36:	f043 0301 	orr.w	r3, r3, #1
 8008d3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3308      	adds	r3, #8
 8008d44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d48:	673a      	str	r2, [r7, #112]	; 0x70
 8008d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008d4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d50:	e841 2300 	strex	r3, r2, [r1]
 8008d54:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e3      	bne.n	8008d24 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d64:	d153      	bne.n	8008e0e <UART_Start_Receive_IT+0x19e>
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d6c:	88fa      	ldrh	r2, [r7, #6]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d34d      	bcc.n	8008e0e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d7a:	d107      	bne.n	8008d8c <UART_Start_Receive_IT+0x11c>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d103      	bne.n	8008d8c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4a4b      	ldr	r2, [pc, #300]	; (8008eb4 <UART_Start_Receive_IT+0x244>)
 8008d88:	671a      	str	r2, [r3, #112]	; 0x70
 8008d8a:	e002      	b.n	8008d92 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4a4a      	ldr	r2, [pc, #296]	; (8008eb8 <UART_Start_Receive_IT+0x248>)
 8008d90:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d01a      	beq.n	8008dd8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008db6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008dc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008dc6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008dcc:	e841 2300 	strex	r3, r2, [r1]
 8008dd0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1e4      	bne.n	8008da2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3308      	adds	r3, #8
 8008dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de2:	e853 3f00 	ldrex	r3, [r3]
 8008de6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3308      	adds	r3, #8
 8008df6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008df8:	64ba      	str	r2, [r7, #72]	; 0x48
 8008dfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e00:	e841 2300 	strex	r3, r2, [r1]
 8008e04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e5      	bne.n	8008dd8 <UART_Start_Receive_IT+0x168>
 8008e0c:	e04a      	b.n	8008ea4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e16:	d107      	bne.n	8008e28 <UART_Start_Receive_IT+0x1b8>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d103      	bne.n	8008e28 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4a26      	ldr	r2, [pc, #152]	; (8008ebc <UART_Start_Receive_IT+0x24c>)
 8008e24:	671a      	str	r2, [r3, #112]	; 0x70
 8008e26:	e002      	b.n	8008e2e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4a25      	ldr	r2, [pc, #148]	; (8008ec0 <UART_Start_Receive_IT+0x250>)
 8008e2c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d019      	beq.n	8008e72 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	e853 3f00 	ldrex	r3, [r3]
 8008e4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e52:	677b      	str	r3, [r7, #116]	; 0x74
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e5c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e64:	e841 2300 	strex	r3, r2, [r1]
 8008e68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e6      	bne.n	8008e3e <UART_Start_Receive_IT+0x1ce>
 8008e70:	e018      	b.n	8008ea4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	e853 3f00 	ldrex	r3, [r3]
 8008e7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	f043 0320 	orr.w	r3, r3, #32
 8008e86:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e90:	623b      	str	r3, [r7, #32]
 8008e92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e94:	69f9      	ldr	r1, [r7, #28]
 8008e96:	6a3a      	ldr	r2, [r7, #32]
 8008e98:	e841 2300 	strex	r3, r2, [r1]
 8008e9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e6      	bne.n	8008e72 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	378c      	adds	r7, #140	; 0x8c
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	080095cd 	.word	0x080095cd
 8008eb8:	080092d5 	.word	0x080092d5
 8008ebc:	08009173 	.word	0x08009173
 8008ec0:	08009013 	.word	0x08009013

08008ec4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b095      	sub	sp, #84	; 0x54
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eea:	643b      	str	r3, [r7, #64]	; 0x40
 8008eec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e6      	bne.n	8008ecc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3308      	adds	r3, #8
 8008f04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f06:	6a3b      	ldr	r3, [r7, #32]
 8008f08:	e853 3f00 	ldrex	r3, [r3]
 8008f0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f14:	f023 0301 	bic.w	r3, r3, #1
 8008f18:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	3308      	adds	r3, #8
 8008f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f2a:	e841 2300 	strex	r3, r2, [r1]
 8008f2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1e3      	bne.n	8008efe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d118      	bne.n	8008f70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	f023 0310 	bic.w	r3, r3, #16
 8008f52:	647b      	str	r3, [r7, #68]	; 0x44
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f5c:	61bb      	str	r3, [r7, #24]
 8008f5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f60:	6979      	ldr	r1, [r7, #20]
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	e841 2300 	strex	r3, r2, [r1]
 8008f68:	613b      	str	r3, [r7, #16]
   return(result);
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1e6      	bne.n	8008f3e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2220      	movs	r2, #32
 8008f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008f84:	bf00      	nop
 8008f86:	3754      	adds	r7, #84	; 0x54
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f7ff f996 	bl	80082e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fb4:	bf00      	nop
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fd8:	61fb      	str	r3, [r7, #28]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	61bb      	str	r3, [r7, #24]
 8008fe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	6979      	ldr	r1, [r7, #20]
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	e841 2300 	strex	r3, r2, [r1]
 8008fee:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1e6      	bne.n	8008fc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff f961 	bl	80082cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800900a:	bf00      	nop
 800900c:	3720      	adds	r7, #32
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}

08009012 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009012:	b580      	push	{r7, lr}
 8009014:	b096      	sub	sp, #88	; 0x58
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009020:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800902a:	2b22      	cmp	r3, #34	; 0x22
 800902c:	f040 8095 	bne.w	800915a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800903a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800903e:	b2d9      	uxtb	r1, r3
 8009040:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009044:	b2da      	uxtb	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800904a:	400a      	ands	r2, r1
 800904c:	b2d2      	uxtb	r2, r2
 800904e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009060:	b29b      	uxth	r3, r3
 8009062:	3b01      	subs	r3, #1
 8009064:	b29a      	uxth	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009072:	b29b      	uxth	r3, r3
 8009074:	2b00      	cmp	r3, #0
 8009076:	d178      	bne.n	800916a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009088:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800908c:	653b      	str	r3, [r7, #80]	; 0x50
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	461a      	mov	r2, r3
 8009094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009096:	647b      	str	r3, [r7, #68]	; 0x44
 8009098:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800909c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800909e:	e841 2300 	strex	r3, r2, [r1]
 80090a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d1e6      	bne.n	8009078 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3308      	adds	r3, #8
 80090b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	623b      	str	r3, [r7, #32]
   return(result);
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	f023 0301 	bic.w	r3, r3, #1
 80090c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3308      	adds	r3, #8
 80090c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090ca:	633a      	str	r2, [r7, #48]	; 0x30
 80090cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090d2:	e841 2300 	strex	r3, r2, [r1]
 80090d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1e5      	bne.n	80090aa <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d12e      	bne.n	8009152 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	e853 3f00 	ldrex	r3, [r3]
 8009106:	60fb      	str	r3, [r7, #12]
   return(result);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0310 	bic.w	r3, r3, #16
 800910e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009118:	61fb      	str	r3, [r7, #28]
 800911a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911c:	69b9      	ldr	r1, [r7, #24]
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	e841 2300 	strex	r3, r2, [r1]
 8009124:	617b      	str	r3, [r7, #20]
   return(result);
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e6      	bne.n	80090fa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	f003 0310 	and.w	r3, r3, #16
 8009136:	2b10      	cmp	r3, #16
 8009138:	d103      	bne.n	8009142 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	2210      	movs	r2, #16
 8009140:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009148:	4619      	mov	r1, r3
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f7ff f8d2 	bl	80082f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009150:	e00b      	b.n	800916a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fdcc 	bl	8009cf0 <HAL_UART_RxCpltCallback>
}
 8009158:	e007      	b.n	800916a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	699a      	ldr	r2, [r3, #24]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f042 0208 	orr.w	r2, r2, #8
 8009168:	619a      	str	r2, [r3, #24]
}
 800916a:	bf00      	nop
 800916c:	3758      	adds	r7, #88	; 0x58
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b096      	sub	sp, #88	; 0x58
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009180:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800918a:	2b22      	cmp	r3, #34	; 0x22
 800918c:	f040 8095 	bne.w	80092ba <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800919e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80091a0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80091a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80091a8:	4013      	ands	r3, r2
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091ae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b4:	1c9a      	adds	r2, r3, #2
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	3b01      	subs	r3, #1
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d178      	bne.n	80092ca <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e0:	e853 3f00 	ldrex	r3, [r3]
 80091e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091f6:	643b      	str	r3, [r7, #64]	; 0x40
 80091f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091fe:	e841 2300 	strex	r3, r2, [r1]
 8009202:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1e6      	bne.n	80091d8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3308      	adds	r3, #8
 8009210:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	e853 3f00 	ldrex	r3, [r3]
 8009218:	61fb      	str	r3, [r7, #28]
   return(result);
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	f023 0301 	bic.w	r3, r3, #1
 8009220:	64bb      	str	r3, [r7, #72]	; 0x48
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3308      	adds	r3, #8
 8009228:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800922a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800922c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e5      	bne.n	800920a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2220      	movs	r2, #32
 8009242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009250:	2b01      	cmp	r3, #1
 8009252:	d12e      	bne.n	80092b2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	e853 3f00 	ldrex	r3, [r3]
 8009266:	60bb      	str	r3, [r7, #8]
   return(result);
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	f023 0310 	bic.w	r3, r3, #16
 800926e:	647b      	str	r3, [r7, #68]	; 0x44
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	461a      	mov	r2, r3
 8009276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009278:	61bb      	str	r3, [r7, #24]
 800927a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800927c:	6979      	ldr	r1, [r7, #20]
 800927e:	69ba      	ldr	r2, [r7, #24]
 8009280:	e841 2300 	strex	r3, r2, [r1]
 8009284:	613b      	str	r3, [r7, #16]
   return(result);
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d1e6      	bne.n	800925a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	69db      	ldr	r3, [r3, #28]
 8009292:	f003 0310 	and.w	r3, r3, #16
 8009296:	2b10      	cmp	r3, #16
 8009298:	d103      	bne.n	80092a2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2210      	movs	r2, #16
 80092a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7ff f822 	bl	80082f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092b0:	e00b      	b.n	80092ca <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fd1c 	bl	8009cf0 <HAL_UART_RxCpltCallback>
}
 80092b8:	e007      	b.n	80092ca <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	699a      	ldr	r2, [r3, #24]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f042 0208 	orr.w	r2, r2, #8
 80092c8:	619a      	str	r2, [r3, #24]
}
 80092ca:	bf00      	nop
 80092cc:	3758      	adds	r7, #88	; 0x58
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b0a6      	sub	sp, #152	; 0x98
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092e2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69db      	ldr	r3, [r3, #28]
 80092ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800930a:	2b22      	cmp	r3, #34	; 0x22
 800930c:	f040 814f 	bne.w	80095ae <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009316:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800931a:	e0f6      	b.n	800950a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009322:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009326:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800932a:	b2d9      	uxtb	r1, r3
 800932c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009330:	b2da      	uxtb	r2, r3
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009336:	400a      	ands	r2, r1
 8009338:	b2d2      	uxtb	r2, r2
 800933a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800934c:	b29b      	uxth	r3, r3
 800934e:	3b01      	subs	r3, #1
 8009350:	b29a      	uxth	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009362:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009366:	f003 0307 	and.w	r3, r3, #7
 800936a:	2b00      	cmp	r3, #0
 800936c:	d053      	beq.n	8009416 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800936e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	d011      	beq.n	800939e <UART_RxISR_8BIT_FIFOEN+0xca>
 800937a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800937e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00b      	beq.n	800939e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2201      	movs	r2, #1
 800938c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009394:	f043 0201 	orr.w	r2, r3, #1
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800939e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093a2:	f003 0302 	and.w	r3, r3, #2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d011      	beq.n	80093ce <UART_RxISR_8BIT_FIFOEN+0xfa>
 80093aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00b      	beq.n	80093ce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2202      	movs	r2, #2
 80093bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093c4:	f043 0204 	orr.w	r2, r3, #4
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093d2:	f003 0304 	and.w	r3, r3, #4
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d011      	beq.n	80093fe <UART_RxISR_8BIT_FIFOEN+0x12a>
 80093da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00b      	beq.n	80093fe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2204      	movs	r2, #4
 80093ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093f4:	f043 0202 	orr.w	r2, r3, #2
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d006      	beq.n	8009416 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7fe ff69 	bl	80082e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800941c:	b29b      	uxth	r3, r3
 800941e:	2b00      	cmp	r3, #0
 8009420:	d173      	bne.n	800950a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009428:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800942a:	e853 3f00 	ldrex	r3, [r3]
 800942e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009444:	66bb      	str	r3, [r7, #104]	; 0x68
 8009446:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009448:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800944a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800944c:	e841 2300 	strex	r3, r2, [r1]
 8009450:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e4      	bne.n	8009422 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3308      	adds	r3, #8
 800945e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800946a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3308      	adds	r3, #8
 800947a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800947c:	657a      	str	r2, [r7, #84]	; 0x54
 800947e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009480:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009482:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009484:	e841 2300 	strex	r3, r2, [r1]
 8009488:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800948a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1e3      	bne.n	8009458 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2220      	movs	r2, #32
 8009494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d12e      	bne.n	8009504 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2200      	movs	r2, #0
 80094aa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	f023 0310 	bic.w	r3, r3, #16
 80094c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ca:	643b      	str	r3, [r7, #64]	; 0x40
 80094cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e6      	bne.n	80094ac <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	f003 0310 	and.w	r3, r3, #16
 80094e8:	2b10      	cmp	r3, #16
 80094ea:	d103      	bne.n	80094f4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2210      	movs	r2, #16
 80094f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094fa:	4619      	mov	r1, r3
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7fe fef9 	bl	80082f4 <HAL_UARTEx_RxEventCallback>
 8009502:	e002      	b.n	800950a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 fbf3 	bl	8009cf0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800950a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800950e:	2b00      	cmp	r3, #0
 8009510:	d006      	beq.n	8009520 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009512:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009516:	f003 0320 	and.w	r3, r3, #32
 800951a:	2b00      	cmp	r3, #0
 800951c:	f47f aefe 	bne.w	800931c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009526:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800952a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800952e:	2b00      	cmp	r3, #0
 8009530:	d045      	beq.n	80095be <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009538:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800953c:	429a      	cmp	r2, r3
 800953e:	d23e      	bcs.n	80095be <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3308      	adds	r3, #8
 8009546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	e853 3f00 	ldrex	r3, [r3]
 800954e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009556:	673b      	str	r3, [r7, #112]	; 0x70
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3308      	adds	r3, #8
 800955e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009560:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009568:	e841 2300 	strex	r3, r2, [r1]
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009570:	2b00      	cmp	r3, #0
 8009572:	d1e5      	bne.n	8009540 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a14      	ldr	r2, [pc, #80]	; (80095c8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009578:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	e853 3f00 	ldrex	r3, [r3]
 8009586:	60bb      	str	r3, [r7, #8]
   return(result);
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	f043 0320 	orr.w	r3, r3, #32
 800958e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	461a      	mov	r2, r3
 8009596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009598:	61bb      	str	r3, [r7, #24]
 800959a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959c:	6979      	ldr	r1, [r7, #20]
 800959e:	69ba      	ldr	r2, [r7, #24]
 80095a0:	e841 2300 	strex	r3, r2, [r1]
 80095a4:	613b      	str	r3, [r7, #16]
   return(result);
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e6      	bne.n	800957a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095ac:	e007      	b.n	80095be <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	699a      	ldr	r2, [r3, #24]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f042 0208 	orr.w	r2, r2, #8
 80095bc:	619a      	str	r2, [r3, #24]
}
 80095be:	bf00      	nop
 80095c0:	3798      	adds	r7, #152	; 0x98
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	08009013 	.word	0x08009013

080095cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b0a8      	sub	sp, #160	; 0xa0
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095da:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009602:	2b22      	cmp	r3, #34	; 0x22
 8009604:	f040 8153 	bne.w	80098ae <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800960e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009612:	e0fa      	b.n	800980a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009622:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009626:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800962a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800962e:	4013      	ands	r3, r2
 8009630:	b29a      	uxth	r2, r3
 8009632:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009636:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963c:	1c9a      	adds	r2, r3, #2
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009648:	b29b      	uxth	r3, r3
 800964a:	3b01      	subs	r3, #1
 800964c:	b29a      	uxth	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	69db      	ldr	r3, [r3, #28]
 800965a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800965e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	2b00      	cmp	r3, #0
 8009668:	d053      	beq.n	8009712 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800966a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d011      	beq.n	800969a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009676:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800967a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00b      	beq.n	800969a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2201      	movs	r2, #1
 8009688:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009690:	f043 0201 	orr.w	r2, r3, #1
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800969a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800969e:	f003 0302 	and.w	r3, r3, #2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d011      	beq.n	80096ca <UART_RxISR_16BIT_FIFOEN+0xfe>
 80096a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00b      	beq.n	80096ca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2202      	movs	r2, #2
 80096b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096c0:	f043 0204 	orr.w	r2, r3, #4
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096ce:	f003 0304 	and.w	r3, r3, #4
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d011      	beq.n	80096fa <UART_RxISR_16BIT_FIFOEN+0x12e>
 80096d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00b      	beq.n	80096fa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2204      	movs	r2, #4
 80096e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096f0:	f043 0202 	orr.w	r2, r3, #2
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d006      	beq.n	8009712 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f7fe fdeb 	bl	80082e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009718:	b29b      	uxth	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d175      	bne.n	800980a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800972c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800972e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009732:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009740:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009742:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009746:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800974e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e4      	bne.n	800971e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3308      	adds	r3, #8
 800975a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800975e:	e853 3f00 	ldrex	r3, [r3]
 8009762:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800976a:	f023 0301 	bic.w	r3, r3, #1
 800976e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3308      	adds	r3, #8
 8009778:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800977c:	65ba      	str	r2, [r7, #88]	; 0x58
 800977e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009782:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800978a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e1      	bne.n	8009754 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2220      	movs	r2, #32
 8009794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d12e      	bne.n	8009804 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b4:	e853 3f00 	ldrex	r3, [r3]
 80097b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097bc:	f023 0310 	bic.w	r3, r3, #16
 80097c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	461a      	mov	r2, r3
 80097c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097ca:	647b      	str	r3, [r7, #68]	; 0x44
 80097cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097d2:	e841 2300 	strex	r3, r2, [r1]
 80097d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1e6      	bne.n	80097ac <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	69db      	ldr	r3, [r3, #28]
 80097e4:	f003 0310 	and.w	r3, r3, #16
 80097e8:	2b10      	cmp	r3, #16
 80097ea:	d103      	bne.n	80097f4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2210      	movs	r2, #16
 80097f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097fa:	4619      	mov	r1, r3
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f7fe fd79 	bl	80082f4 <HAL_UARTEx_RxEventCallback>
 8009802:	e002      	b.n	800980a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 fa73 	bl	8009cf0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800980a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800980e:	2b00      	cmp	r3, #0
 8009810:	d006      	beq.n	8009820 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009812:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009816:	f003 0320 	and.w	r3, r3, #32
 800981a:	2b00      	cmp	r3, #0
 800981c:	f47f aefa 	bne.w	8009614 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009826:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800982a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800982e:	2b00      	cmp	r3, #0
 8009830:	d045      	beq.n	80098be <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009838:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800983c:	429a      	cmp	r2, r3
 800983e:	d23e      	bcs.n	80098be <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3308      	adds	r3, #8
 8009846:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	e853 3f00 	ldrex	r3, [r3]
 800984e:	623b      	str	r3, [r7, #32]
   return(result);
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009856:	677b      	str	r3, [r7, #116]	; 0x74
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3308      	adds	r3, #8
 800985e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009860:	633a      	str	r2, [r7, #48]	; 0x30
 8009862:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009868:	e841 2300 	strex	r3, r2, [r1]
 800986c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e5      	bne.n	8009840 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a14      	ldr	r2, [pc, #80]	; (80098c8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009878:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	60fb      	str	r3, [r7, #12]
   return(result);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f043 0320 	orr.w	r3, r3, #32
 800988e:	673b      	str	r3, [r7, #112]	; 0x70
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	461a      	mov	r2, r3
 8009896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009898:	61fb      	str	r3, [r7, #28]
 800989a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989c:	69b9      	ldr	r1, [r7, #24]
 800989e:	69fa      	ldr	r2, [r7, #28]
 80098a0:	e841 2300 	strex	r3, r2, [r1]
 80098a4:	617b      	str	r3, [r7, #20]
   return(result);
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1e6      	bne.n	800987a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098ac:	e007      	b.n	80098be <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	699a      	ldr	r2, [r3, #24]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f042 0208 	orr.w	r2, r2, #8
 80098bc:	619a      	str	r2, [r3, #24]
}
 80098be:	bf00      	nop
 80098c0:	37a0      	adds	r7, #160	; 0xa0
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	08009173 	.word	0x08009173

080098cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009916:	2b01      	cmp	r3, #1
 8009918:	d101      	bne.n	800991e <HAL_UARTEx_DisableFifoMode+0x16>
 800991a:	2302      	movs	r3, #2
 800991c:	e027      	b.n	800996e <HAL_UARTEx_DisableFifoMode+0x66>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2224      	movs	r2, #36	; 0x24
 800992a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f022 0201 	bic.w	r2, r2, #1
 8009944:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800994c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2220      	movs	r2, #32
 8009960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800998a:	2b01      	cmp	r3, #1
 800998c:	d101      	bne.n	8009992 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800998e:	2302      	movs	r3, #2
 8009990:	e02d      	b.n	80099ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2224      	movs	r2, #36	; 0x24
 800999e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 0201 	bic.w	r2, r2, #1
 80099b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	430a      	orrs	r2, r1
 80099cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f850 	bl	8009a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2220      	movs	r2, #32
 80099e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}

080099f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
 80099fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d101      	bne.n	8009a0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	e02d      	b.n	8009a6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2224      	movs	r2, #36	; 0x24
 8009a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f022 0201 	bic.w	r2, r2, #1
 8009a34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	430a      	orrs	r2, r1
 8009a48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f812 	bl	8009a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2220      	movs	r2, #32
 8009a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
	...

08009a74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d108      	bne.n	8009a96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a94:	e031      	b.n	8009afa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a96:	2308      	movs	r3, #8
 8009a98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a9a:	2308      	movs	r3, #8
 8009a9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	0e5b      	lsrs	r3, r3, #25
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	f003 0307 	and.w	r3, r3, #7
 8009aac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	0f5b      	lsrs	r3, r3, #29
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	f003 0307 	and.w	r3, r3, #7
 8009abc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009abe:	7bbb      	ldrb	r3, [r7, #14]
 8009ac0:	7b3a      	ldrb	r2, [r7, #12]
 8009ac2:	4911      	ldr	r1, [pc, #68]	; (8009b08 <UARTEx_SetNbDataToProcess+0x94>)
 8009ac4:	5c8a      	ldrb	r2, [r1, r2]
 8009ac6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009aca:	7b3a      	ldrb	r2, [r7, #12]
 8009acc:	490f      	ldr	r1, [pc, #60]	; (8009b0c <UARTEx_SetNbDataToProcess+0x98>)
 8009ace:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ad0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
 8009ade:	7b7a      	ldrb	r2, [r7, #13]
 8009ae0:	4909      	ldr	r1, [pc, #36]	; (8009b08 <UARTEx_SetNbDataToProcess+0x94>)
 8009ae2:	5c8a      	ldrb	r2, [r1, r2]
 8009ae4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ae8:	7b7a      	ldrb	r2, [r7, #13]
 8009aea:	4908      	ldr	r1, [pc, #32]	; (8009b0c <UARTEx_SetNbDataToProcess+0x98>)
 8009aec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009aee:	fb93 f3f2 	sdiv	r3, r3, r2
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009afa:	bf00      	nop
 8009afc:	3714      	adds	r7, #20
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	0800eea0 	.word	0x0800eea0
 8009b0c:	0800eea8 	.word	0x0800eea8

08009b10 <USER_ADC_ConfigFilter>:

COMPONENT_ADCFilter FilterSignal ={50000,100000,0};
/*Static funtion*/

void USER_ADC_ConfigFilter(COMPONENT_ADCFilter FilterSignalConfig)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b085      	sub	sp, #20
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	eef0 6a40 	vmov.f32	s13, s0
 8009b1a:	eeb0 7a60 	vmov.f32	s14, s1
 8009b1e:	eef0 7a41 	vmov.f32	s15, s2
 8009b22:	edc7 6a01 	vstr	s13, [r7, #4]
 8009b26:	ed87 7a02 	vstr	s14, [r7, #8]
 8009b2a:	edc7 7a03 	vstr	s15, [r7, #12]
	FilterSignal.cutoffFreq = FilterSignalConfig.cutoffFreq;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a04      	ldr	r2, [pc, #16]	; (8009b44 <USER_ADC_ConfigFilter+0x34>)
 8009b32:	6013      	str	r3, [r2, #0]
	FilterSignalConfig.sampleTime = FilterSignalConfig.sampleTime;
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	60bb      	str	r3, [r7, #8]
}
 8009b38:	bf00      	nop
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	2000000c 	.word	0x2000000c

08009b48 <USER_ADC_GetADCFilterValue>:
float USER_ADC_GetADCFilterValue(uint8_t channelADC)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	4603      	mov	r3, r0
 8009b50:	71fb      	strb	r3, [r7, #7]
	float rawSignal = 0;
 8009b52:	f04f 0300 	mov.w	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]
	switch(channelADC)
 8009b58:	79fb      	ldrb	r3, [r7, #7]
 8009b5a:	2b0c      	cmp	r3, #12
 8009b5c:	d018      	beq.n	8009b90 <USER_ADC_GetADCFilterValue+0x48>
 8009b5e:	2b0c      	cmp	r3, #12
 8009b60:	dc1f      	bgt.n	8009ba2 <USER_ADC_GetADCFilterValue+0x5a>
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d002      	beq.n	8009b6c <USER_ADC_GetADCFilterValue+0x24>
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d009      	beq.n	8009b7e <USER_ADC_GetADCFilterValue+0x36>
 8009b6a:	e01a      	b.n	8009ba2 <USER_ADC_GetADCFilterValue+0x5a>
	{
		case 1:
			rawSignal = (float)ADCVar[0];
 8009b6c:	4b1c      	ldr	r3, [pc, #112]	; (8009be0 <USER_ADC_GetADCFilterValue+0x98>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	ee07 3a90 	vmov	s15, r3
 8009b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b78:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8009b7c:	e011      	b.n	8009ba2 <USER_ADC_GetADCFilterValue+0x5a>
		case 5:
			rawSignal = (float)ADCVar[1];
 8009b7e:	4b18      	ldr	r3, [pc, #96]	; (8009be0 <USER_ADC_GetADCFilterValue+0x98>)
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	ee07 3a90 	vmov	s15, r3
 8009b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8a:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8009b8e:	e008      	b.n	8009ba2 <USER_ADC_GetADCFilterValue+0x5a>
		case 12:
			rawSignal = (float)ADCVar[2];
 8009b90:	4b13      	ldr	r3, [pc, #76]	; (8009be0 <USER_ADC_GetADCFilterValue+0x98>)
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	ee07 3a90 	vmov	s15, r3
 8009b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b9c:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8009ba0:	bf00      	nop
	}
	FilterSignal.output = __USER_FILTER_LowPassFilter(rawSignal, FilterSignal.cutoffFreq, FilterSignal.sampleTime,channelADC);
 8009ba2:	4b10      	ldr	r3, [pc, #64]	; (8009be4 <USER_ADC_GetADCFilterValue+0x9c>)
 8009ba4:	edd3 7a00 	vldr	s15, [r3]
 8009ba8:	4b0e      	ldr	r3, [pc, #56]	; (8009be4 <USER_ADC_GetADCFilterValue+0x9c>)
 8009baa:	ed93 7a01 	vldr	s14, [r3, #4]
 8009bae:	79fb      	ldrb	r3, [r7, #7]
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	eeb0 1a47 	vmov.f32	s2, s14
 8009bb6:	eef0 0a67 	vmov.f32	s1, s15
 8009bba:	ed97 0a03 	vldr	s0, [r7, #12]
 8009bbe:	f000 f913 	bl	8009de8 <__USER_FILTER_LowPassFilter>
 8009bc2:	eef0 7a40 	vmov.f32	s15, s0
 8009bc6:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <USER_ADC_GetADCFilterValue+0x9c>)
 8009bc8:	edc3 7a02 	vstr	s15, [r3, #8]
	return FilterSignal.output;
 8009bcc:	4b05      	ldr	r3, [pc, #20]	; (8009be4 <USER_ADC_GetADCFilterValue+0x9c>)
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	ee07 3a90 	vmov	s15, r3
}
 8009bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	200005c0 	.word	0x200005c0
 8009be4:	2000000c 	.word	0x2000000c

08009be8 <USER_ADC_handleString>:
/*Syntax buffer ADC-100-100000(ADC-cutoff-samplingtime) */
COMPONENT_ADCFilter USER_ADC_handleString(char* Buffer)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08e      	sub	sp, #56	; 0x38
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6178      	str	r0, [r7, #20]
	COMPONENT_ADCFilter var;
	char* ptr = NULL;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	637b      	str	r3, [r7, #52]	; 0x34
	ptr = strtok(Buffer,"-");
 8009bf4:	491a      	ldr	r1, [pc, #104]	; (8009c60 <USER_ADC_handleString+0x78>)
 8009bf6:	6978      	ldr	r0, [r7, #20]
 8009bf8:	f002 f87a 	bl	800bcf0 <strtok>
 8009bfc:	6378      	str	r0, [r7, #52]	; 0x34
	ptr = strtok(NULL,"-");
 8009bfe:	4918      	ldr	r1, [pc, #96]	; (8009c60 <USER_ADC_handleString+0x78>)
 8009c00:	2000      	movs	r0, #0
 8009c02:	f002 f875 	bl	800bcf0 <strtok>
 8009c06:	6378      	str	r0, [r7, #52]	; 0x34
	var.cutoffFreq = atoff(ptr);
 8009c08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c0a:	f000 faee 	bl	800a1ea <atoff>
 8009c0e:	eef0 7a40 	vmov.f32	s15, s0
 8009c12:	edc7 7a07 	vstr	s15, [r7, #28]
	ptr = strtok(NULL,"-");
 8009c16:	4912      	ldr	r1, [pc, #72]	; (8009c60 <USER_ADC_handleString+0x78>)
 8009c18:	2000      	movs	r0, #0
 8009c1a:	f002 f869 	bl	800bcf0 <strtok>
 8009c1e:	6378      	str	r0, [r7, #52]	; 0x34
	var.sampleTime = atoff(ptr);
 8009c20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c22:	f000 fae2 	bl	800a1ea <atoff>
 8009c26:	eef0 7a40 	vmov.f32	s15, s0
 8009c2a:	edc7 7a08 	vstr	s15, [r7, #32]

	return var;
 8009c2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c32:	f107 021c 	add.w	r2, r7, #28
 8009c36:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	ee06 1a90 	vmov	s13, r1
 8009c46:	ee07 2a10 	vmov	s14, r2
 8009c4a:	ee07 3a90 	vmov	s15, r3
}
 8009c4e:	eeb0 0a66 	vmov.f32	s0, s13
 8009c52:	eef0 0a47 	vmov.f32	s1, s14
 8009c56:	eeb0 1a67 	vmov.f32	s2, s15
 8009c5a:	3738      	adds	r7, #56	; 0x38
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	0800ee68 	.word	0x0800ee68

08009c64 <USER_ADC_GetInforFilter>:

COMPONENT_ADCFilter USER_ADC_GetInforFilter(void)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b089      	sub	sp, #36	; 0x24
 8009c68:	af00      	add	r7, sp, #0
	return FilterSignal;
 8009c6a:	4a0d      	ldr	r2, [pc, #52]	; (8009ca0 <USER_ADC_GetInforFilter+0x3c>)
 8009c6c:	f107 0314 	add.w	r3, r7, #20
 8009c70:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009c76:	6979      	ldr	r1, [r7, #20]
 8009c78:	69ba      	ldr	r2, [r7, #24]
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	ee06 1a90 	vmov	s13, r1
 8009c80:	ee07 2a10 	vmov	s14, r2
 8009c84:	ee07 3a90 	vmov	s15, r3
}
 8009c88:	eeb0 0a66 	vmov.f32	s0, s13
 8009c8c:	eef0 0a47 	vmov.f32	s1, s14
 8009c90:	eeb0 1a67 	vmov.f32	s2, s15
 8009c94:	3724      	adds	r7, #36	; 0x24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	2000000c 	.word	0x2000000c

08009ca4 <USER_CALLBACK_init>:
uint8_t CheckFlagUSART = 0;/*************************************************** Flag checking when UART jump into CallBack funtion*/
uint16_t Voltage_Variable = 0;/*********************************************** Voltage Variable*/
uint32_t ADCVar[3];

void USER_CALLBACK_init(void)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8009ca8:	2104      	movs	r1, #4
 8009caa:	480b      	ldr	r0, [pc, #44]	; (8009cd8 <USER_CALLBACK_init+0x34>)
 8009cac:	f7fc fe54 	bl	8006958 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	480a      	ldr	r0, [pc, #40]	; (8009cdc <USER_CALLBACK_init+0x38>)
 8009cb4:	f7fc fe50 	bl	8006958 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8009cb8:	2104      	movs	r1, #4
 8009cba:	4808      	ldr	r0, [pc, #32]	; (8009cdc <USER_CALLBACK_init+0x38>)
 8009cbc:	f7fc fe4c 	bl	8006958 <HAL_TIM_PWM_Start>
//	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
	 // HAL_TIM_Base_Start_IT(&htim2);
	//  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);/******************************* To disable ADC*/
	  /*Start Interrupt Function*/
	  /****Uart Transfer*****/
	  HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx_data, 1);
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	4907      	ldr	r1, [pc, #28]	; (8009ce0 <USER_CALLBACK_init+0x3c>)
 8009cc4:	4807      	ldr	r0, [pc, #28]	; (8009ce4 <USER_CALLBACK_init+0x40>)
 8009cc6:	f7fd ff93 	bl	8007bf0 <HAL_UART_Receive_IT>
	  /**** ADC Start 1********/
	  //HAL_ADC_Start_IT(&hadc1);
	  /**** ADC 4 Start with DMA*****/
	  HAL_ADC_Start_DMA(&hadc3,ADCVar,3);
 8009cca:	2203      	movs	r2, #3
 8009ccc:	4906      	ldr	r1, [pc, #24]	; (8009ce8 <USER_CALLBACK_init+0x44>)
 8009cce:	4807      	ldr	r0, [pc, #28]	; (8009cec <USER_CALLBACK_init+0x48>)
 8009cd0:	f7f8 fef4 	bl	8002abc <HAL_ADC_Start_DMA>
	  //HAL_ADC_Start(&hadc3);
	  // Use HAL_ADC_Start when want to start mesuare ADC
	  // HAL_ADC_Stop to stop mesuare
}
 8009cd4:	bf00      	nop
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	200003b0 	.word	0x200003b0
 8009cdc:	200003fc 	.word	0x200003fc
 8009ce0:	200005a4 	.word	0x200005a4
 8009ce4:	20000448 	.word	0x20000448
 8009ce8:	200005c0 	.word	0x200005c0
 8009cec:	20000278 	.word	0x20000278

08009cf0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a10      	ldr	r2, [pc, #64]	; (8009d40 <HAL_UART_RxCpltCallback+0x50>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d119      	bne.n	8009d36 <HAL_UART_RxCpltCallback+0x46>
	{
		Rx_Buffer[count++] = Rx_data[0];
 8009d02:	4b10      	ldr	r3, [pc, #64]	; (8009d44 <HAL_UART_RxCpltCallback+0x54>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	b2d1      	uxtb	r1, r2
 8009d0a:	4a0e      	ldr	r2, [pc, #56]	; (8009d44 <HAL_UART_RxCpltCallback+0x54>)
 8009d0c:	7011      	strb	r1, [r2, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	4b0d      	ldr	r3, [pc, #52]	; (8009d48 <HAL_UART_RxCpltCallback+0x58>)
 8009d12:	7819      	ldrb	r1, [r3, #0]
 8009d14:	4b0d      	ldr	r3, [pc, #52]	; (8009d4c <HAL_UART_RxCpltCallback+0x5c>)
 8009d16:	5499      	strb	r1, [r3, r2]
		if((Rx_data[0]) == '\r')
 8009d18:	4b0b      	ldr	r3, [pc, #44]	; (8009d48 <HAL_UART_RxCpltCallback+0x58>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	2b0d      	cmp	r3, #13
 8009d1e:	d105      	bne.n	8009d2c <HAL_UART_RxCpltCallback+0x3c>
		{
			count = 0;
 8009d20:	4b08      	ldr	r3, [pc, #32]	; (8009d44 <HAL_UART_RxCpltCallback+0x54>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	701a      	strb	r2, [r3, #0]
			CheckFlagUSART = 1;
 8009d26:	4b0a      	ldr	r3, [pc, #40]	; (8009d50 <HAL_UART_RxCpltCallback+0x60>)
 8009d28:	2201      	movs	r2, #1
 8009d2a:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, (uint8_t*)Rx_data,1);
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	4906      	ldr	r1, [pc, #24]	; (8009d48 <HAL_UART_RxCpltCallback+0x58>)
 8009d30:	4808      	ldr	r0, [pc, #32]	; (8009d54 <HAL_UART_RxCpltCallback+0x64>)
 8009d32:	f7fd ff5d 	bl	8007bf0 <HAL_UART_Receive_IT>
	}
}
 8009d36:	bf00      	nop
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	40004400 	.word	0x40004400
 8009d44:	200005bc 	.word	0x200005bc
 8009d48:	200005a4 	.word	0x200005a4
 8009d4c:	200005a8 	.word	0x200005a8
 8009d50:	200005be 	.word	0x200005be
 8009d54:	20000448 	.word	0x20000448

08009d58 <HAL_ADC_ConvCpltCallback>:
/********Conversion complete callback in non-blocking mode***/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	4b0a      	ldr	r3, [pc, #40]	; (8009d90 <HAL_ADC_ConvCpltCallback+0x38>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d102      	bne.n	8009d72 <HAL_ADC_ConvCpltCallback+0x1a>
	{
		CheckFlagADC = 1;
 8009d6c:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <HAL_ADC_ConvCpltCallback+0x3c>)
 8009d6e:	2201      	movs	r2, #1
 8009d70:	701a      	strb	r2, [r3, #0]
	}
	if(hadc->Instance == hadc3.Instance)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	4b08      	ldr	r3, [pc, #32]	; (8009d98 <HAL_ADC_ConvCpltCallback+0x40>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d102      	bne.n	8009d84 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		CheckFlagADC = 1;
 8009d7e:	4b05      	ldr	r3, [pc, #20]	; (8009d94 <HAL_ADC_ConvCpltCallback+0x3c>)
 8009d80:	2201      	movs	r2, #1
 8009d82:	701a      	strb	r2, [r3, #0]
	}
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	2000020c 	.word	0x2000020c
 8009d94:	200005bd 	.word	0x200005bd
 8009d98:	20000278 	.word	0x20000278

08009d9c <USER_CALLBACK_DeInit>:

void USER_CALLBACK_DeInit(void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
	memset(Rx_Buffer,'\0',strlen(Rx_Buffer));
 8009da0:	480c      	ldr	r0, [pc, #48]	; (8009dd4 <USER_CALLBACK_DeInit+0x38>)
 8009da2:	f7f6 fa3d 	bl	8000220 <strlen>
 8009da6:	4603      	mov	r3, r0
 8009da8:	461a      	mov	r2, r3
 8009daa:	2100      	movs	r1, #0
 8009dac:	4809      	ldr	r0, [pc, #36]	; (8009dd4 <USER_CALLBACK_DeInit+0x38>)
 8009dae:	f000 fa5b 	bl	800a268 <memset>
	memset(Rx_data,'\0',strlen(Rx_data));
 8009db2:	4809      	ldr	r0, [pc, #36]	; (8009dd8 <USER_CALLBACK_DeInit+0x3c>)
 8009db4:	f7f6 fa34 	bl	8000220 <strlen>
 8009db8:	4603      	mov	r3, r0
 8009dba:	461a      	mov	r2, r3
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	4806      	ldr	r0, [pc, #24]	; (8009dd8 <USER_CALLBACK_DeInit+0x3c>)
 8009dc0:	f000 fa52 	bl	800a268 <memset>
	CheckFlagUSART = 0;
 8009dc4:	4b05      	ldr	r3, [pc, #20]	; (8009ddc <USER_CALLBACK_DeInit+0x40>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	701a      	strb	r2, [r3, #0]
	CheckFlagADC = 0;
 8009dca:	4b05      	ldr	r3, [pc, #20]	; (8009de0 <USER_CALLBACK_DeInit+0x44>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	701a      	strb	r2, [r3, #0]
}
 8009dd0:	bf00      	nop
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	200005a8 	.word	0x200005a8
 8009dd8:	200005a4 	.word	0x200005a4
 8009ddc:	200005be 	.word	0x200005be
 8009de0:	200005bd 	.word	0x200005bd
 8009de4:	00000000 	.word	0x00000000

08009de8 <__USER_FILTER_LowPassFilter>:

#include <USER_Filter.h>

float __USER_FILTER_LowPassFilter(float Signal, float CutOffFreq,
		float SampleRate, uint8_t numberFilter)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08a      	sub	sp, #40	; 0x28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	ed87 0a03 	vstr	s0, [r7, #12]
 8009df2:	edc7 0a02 	vstr	s1, [r7, #8]
 8009df6:	ed87 1a01 	vstr	s2, [r7, #4]
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	70fb      	strb	r3, [r7, #3]
	float RC = 0.0;
 8009dfe:	f04f 0300 	mov.w	r3, #0
 8009e02:	623b      	str	r3, [r7, #32]
	float dt = 0.0;
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	61fb      	str	r3, [r7, #28]
	float alpha = 0.0;
 8009e0a:	f04f 0300 	mov.w	r3, #0
 8009e0e:	61bb      	str	r3, [r7, #24]
	float y = 0.0;
 8009e10:	f04f 0300 	mov.w	r3, #0
 8009e14:	627b      	str	r3, [r7, #36]	; 0x24
	float w0 = 2*M_PI*CutOffFreq;
 8009e16:	68b8      	ldr	r0, [r7, #8]
 8009e18:	f7f6 fbbe 	bl	8000598 <__aeabi_f2d>
 8009e1c:	a341      	add	r3, pc, #260	; (adr r3, 8009f24 <__USER_FILTER_LowPassFilter+0x13c>)
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	f7f6 fc11 	bl	8000648 <__aeabi_dmul>
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4610      	mov	r0, r2
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	f7f6 ff03 	bl	8000c38 <__aeabi_d2f>
 8009e32:	4603      	mov	r3, r0
 8009e34:	617b      	str	r3, [r7, #20]

	static float ylast1 = 0.0; /********** To call ylast continue****/
	static float ylast2 = 0.0;
	static float ylast3 = 0.0;
	RC = 1.0/w0;
 8009e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8009e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e42:	edc7 7a08 	vstr	s15, [r7, #32]
	dt = 1.0/SampleRate;
 8009e46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8009e4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e52:	edc7 7a07 	vstr	s15, [r7, #28]
	alpha = dt/(RC+dt);
 8009e56:	ed97 7a08 	vldr	s14, [r7, #32]
 8009e5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8009e5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e62:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e6a:	edc7 7a06 	vstr	s15, [r7, #24]

	switch(numberFilter)
 8009e6e:	78fb      	ldrb	r3, [r7, #3]
 8009e70:	2b0c      	cmp	r3, #12
 8009e72:	d032      	beq.n	8009eda <__USER_FILTER_LowPassFilter+0xf2>
 8009e74:	2b0c      	cmp	r3, #12
 8009e76:	dc46      	bgt.n	8009f06 <__USER_FILTER_LowPassFilter+0x11e>
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d002      	beq.n	8009e82 <__USER_FILTER_LowPassFilter+0x9a>
 8009e7c:	2b05      	cmp	r3, #5
 8009e7e:	d016      	beq.n	8009eae <__USER_FILTER_LowPassFilter+0xc6>
 8009e80:	e041      	b.n	8009f06 <__USER_FILTER_LowPassFilter+0x11e>
	{
		case 1:
			y = ylast1 + alpha *(Signal - ylast1);
 8009e82:	4b25      	ldr	r3, [pc, #148]	; (8009f18 <__USER_FILTER_LowPassFilter+0x130>)
 8009e84:	edd3 7a00 	vldr	s15, [r3]
 8009e88:	ed97 7a03 	vldr	s14, [r7, #12]
 8009e8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e90:	edd7 7a06 	vldr	s15, [r7, #24]
 8009e94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e98:	4b1f      	ldr	r3, [pc, #124]	; (8009f18 <__USER_FILTER_LowPassFilter+0x130>)
 8009e9a:	edd3 7a00 	vldr	s15, [r3]
 8009e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ea2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			ylast1 = y;
 8009ea6:	4a1c      	ldr	r2, [pc, #112]	; (8009f18 <__USER_FILTER_LowPassFilter+0x130>)
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	6013      	str	r3, [r2, #0]
			break;
 8009eac:	e02b      	b.n	8009f06 <__USER_FILTER_LowPassFilter+0x11e>
		case 5:
			y = ylast2 + alpha *(Signal - ylast2);
 8009eae:	4b1b      	ldr	r3, [pc, #108]	; (8009f1c <__USER_FILTER_LowPassFilter+0x134>)
 8009eb0:	edd3 7a00 	vldr	s15, [r3]
 8009eb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8009eb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009ebc:	edd7 7a06 	vldr	s15, [r7, #24]
 8009ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ec4:	4b15      	ldr	r3, [pc, #84]	; (8009f1c <__USER_FILTER_LowPassFilter+0x134>)
 8009ec6:	edd3 7a00 	vldr	s15, [r3]
 8009eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ece:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			ylast2 = y;
 8009ed2:	4a12      	ldr	r2, [pc, #72]	; (8009f1c <__USER_FILTER_LowPassFilter+0x134>)
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	6013      	str	r3, [r2, #0]
			break;
 8009ed8:	e015      	b.n	8009f06 <__USER_FILTER_LowPassFilter+0x11e>
		case 12:
			y = ylast3 + alpha *(Signal - ylast3);
 8009eda:	4b11      	ldr	r3, [pc, #68]	; (8009f20 <__USER_FILTER_LowPassFilter+0x138>)
 8009edc:	edd3 7a00 	vldr	s15, [r3]
 8009ee0:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ee4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009ee8:	edd7 7a06 	vldr	s15, [r7, #24]
 8009eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009ef0:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <__USER_FILTER_LowPassFilter+0x138>)
 8009ef2:	edd3 7a00 	vldr	s15, [r3]
 8009ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009efa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			ylast3 = y;
 8009efe:	4a08      	ldr	r2, [pc, #32]	; (8009f20 <__USER_FILTER_LowPassFilter+0x138>)
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	6013      	str	r3, [r2, #0]
			break;
 8009f04:	bf00      	nop
	}
	return y;
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	ee07 3a90 	vmov	s15, r3
}
 8009f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8009f10:	3728      	adds	r7, #40	; 0x28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	200005cc 	.word	0x200005cc
 8009f1c:	200005d0 	.word	0x200005d0
 8009f20:	200005d4 	.word	0x200005d4
 8009f24:	54442d18 	.word	0x54442d18
 8009f28:	401921fb 	.word	0x401921fb

08009f2c <__USER_TIMER_convertU16>:
/****Static Prototype *****/
static uint16_t __USER_TIMER_convertU16(int DutyCycle);

/****Define function********************/
static uint16_t __USER_TIMER_convertU16(int DutyCycle)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
	return (uint16_t)DutyCycle;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	b29b      	uxth	r3, r3
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <USER_TIMER_setValueOfPWM>:


void USER_TIMER_setValueOfPWM(COMPONENT_TIMER TimerVariable)
{
 8009f44:	b590      	push	{r4, r7, lr}
 8009f46:	b099      	sub	sp, #100	; 0x64
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	463c      	mov	r4, r7
 8009f4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TIM_HandleTypeDef htim;
	switch(TimerVariable.NumberOfTimer)
 8009f50:	88bb      	ldrh	r3, [r7, #4]
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d002      	beq.n	8009f5c <USER_TIMER_setValueOfPWM+0x18>
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d009      	beq.n	8009f6e <USER_TIMER_setValueOfPWM+0x2a>
 8009f5a:	e011      	b.n	8009f80 <USER_TIMER_setValueOfPWM+0x3c>
	{
		case 2:
			htim = htim2;
 8009f5c:	4a3e      	ldr	r2, [pc, #248]	; (800a058 <USER_TIMER_setValueOfPWM+0x114>)
 8009f5e:	f107 0314 	add.w	r3, r7, #20
 8009f62:	4611      	mov	r1, r2
 8009f64:	224c      	movs	r2, #76	; 0x4c
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 f970 	bl	800a24c <memcpy>
			break;
 8009f6c:	e008      	b.n	8009f80 <USER_TIMER_setValueOfPWM+0x3c>
		case 3:
			htim = htim3;
 8009f6e:	4a3b      	ldr	r2, [pc, #236]	; (800a05c <USER_TIMER_setValueOfPWM+0x118>)
 8009f70:	f107 0314 	add.w	r3, r7, #20
 8009f74:	4611      	mov	r1, r2
 8009f76:	224c      	movs	r2, #76	; 0x4c
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f000 f967 	bl	800a24c <memcpy>
			break;
 8009f7e:	bf00      	nop
	}
	switch (TimerVariable.Channel)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b03      	cmp	r3, #3
 8009f84:	d00c      	beq.n	8009fa0 <USER_TIMER_setValueOfPWM+0x5c>
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d80d      	bhi.n	8009fa6 <USER_TIMER_setValueOfPWM+0x62>
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d002      	beq.n	8009f94 <USER_TIMER_setValueOfPWM+0x50>
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d003      	beq.n	8009f9a <USER_TIMER_setValueOfPWM+0x56>
 8009f92:	e008      	b.n	8009fa6 <USER_TIMER_setValueOfPWM+0x62>
	{
		case 1: /* Channel to trigger ADC */
			TimerVariable.Channel = TIM_CHANNEL_1;
 8009f94:	2300      	movs	r3, #0
 8009f96:	60bb      	str	r3, [r7, #8]
			break;
 8009f98:	e005      	b.n	8009fa6 <USER_TIMER_setValueOfPWM+0x62>
		case 2: /* Channel to PWM */
			TimerVariable.Channel = TIM_CHANNEL_2;
 8009f9a:	2304      	movs	r3, #4
 8009f9c:	60bb      	str	r3, [r7, #8]
			break;
 8009f9e:	e002      	b.n	8009fa6 <USER_TIMER_setValueOfPWM+0x62>
		case 3:
			TimerVariable.Channel = TIM_CHANNEL_3;
 8009fa0:	2308      	movs	r3, #8
 8009fa2:	60bb      	str	r3, [r7, #8]
			break;
 8009fa4:	bf00      	nop
	}
	//assert((TimerVariable.frequency >=100000) || TimerVariable.frequency == 0);
	switch (TimerVariable.frequency)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d104      	bne.n	8009fb6 <USER_TIMER_setValueOfPWM+0x72>
	{
		case 0:
			ValueOfARR = (uint32_t)__HAL_TIM_GET_AUTORELOAD(&htim);
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb0:	4a2b      	ldr	r2, [pc, #172]	; (800a060 <USER_TIMER_setValueOfPWM+0x11c>)
 8009fb2:	6013      	str	r3, [r2, #0]
			break;
 8009fb4:	e010      	b.n	8009fd8 <USER_TIMER_setValueOfPWM+0x94>
		default:
			htim.Instance->ARR = ((uint32_t)((AHBFrequency)/(TimerVariable.frequency*(htim.Init.Prescaler+1))) -1);
 8009fb6:	4b2b      	ldr	r3, [pc, #172]	; (800a064 <USER_TIMER_setValueOfPWM+0x120>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	69b9      	ldr	r1, [r7, #24]
 8009fbe:	3101      	adds	r1, #1
 8009fc0:	fb01 f303 	mul.w	r3, r1, r3
 8009fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	3a01      	subs	r2, #1
 8009fcc:	62da      	str	r2, [r3, #44]	; 0x2c
			ValueOfARR = (uint32_t)__HAL_TIM_GET_AUTORELOAD(&htim);
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd2:	4a23      	ldr	r2, [pc, #140]	; (800a060 <USER_TIMER_setValueOfPWM+0x11c>)
 8009fd4:	6013      	str	r3, [r2, #0]
			break;
 8009fd6:	bf00      	nop
	}
	ValueOfCCR = (((uint32_t)TimerVariable.Duty*ValueOfARR)/100);
 8009fd8:	edd7 7a00 	vldr	s15, [r7]
 8009fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fe0:	ee17 2a90 	vmov	r2, s15
 8009fe4:	4b1e      	ldr	r3, [pc, #120]	; (800a060 <USER_TIMER_setValueOfPWM+0x11c>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	fb02 f303 	mul.w	r3, r2, r3
 8009fec:	4a1e      	ldr	r2, [pc, #120]	; (800a068 <USER_TIMER_setValueOfPWM+0x124>)
 8009fee:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff2:	095b      	lsrs	r3, r3, #5
 8009ff4:	4a1d      	ldr	r2, [pc, #116]	; (800a06c <USER_TIMER_setValueOfPWM+0x128>)
 8009ff6:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d104      	bne.n	800a008 <USER_TIMER_setValueOfPWM+0xc4>
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	4a1a      	ldr	r2, [pc, #104]	; (800a06c <USER_TIMER_setValueOfPWM+0x128>)
 800a002:	6812      	ldr	r2, [r2, #0]
 800a004:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a006:	e023      	b.n	800a050 <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2b04      	cmp	r3, #4
 800a00c:	d104      	bne.n	800a018 <USER_TIMER_setValueOfPWM+0xd4>
 800a00e:	697a      	ldr	r2, [r7, #20]
 800a010:	4b16      	ldr	r3, [pc, #88]	; (800a06c <USER_TIMER_setValueOfPWM+0x128>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a016:	e01b      	b.n	800a050 <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	2b08      	cmp	r3, #8
 800a01c:	d104      	bne.n	800a028 <USER_TIMER_setValueOfPWM+0xe4>
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	4b12      	ldr	r3, [pc, #72]	; (800a06c <USER_TIMER_setValueOfPWM+0x128>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800a026:	e013      	b.n	800a050 <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2b0c      	cmp	r3, #12
 800a02c:	d104      	bne.n	800a038 <USER_TIMER_setValueOfPWM+0xf4>
 800a02e:	697a      	ldr	r2, [r7, #20]
 800a030:	4b0e      	ldr	r3, [pc, #56]	; (800a06c <USER_TIMER_setValueOfPWM+0x128>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6413      	str	r3, [r2, #64]	; 0x40
}
 800a036:	e00b      	b.n	800a050 <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	2b10      	cmp	r3, #16
 800a03c:	d104      	bne.n	800a048 <USER_TIMER_setValueOfPWM+0x104>
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	4b0a      	ldr	r3, [pc, #40]	; (800a06c <USER_TIMER_setValueOfPWM+0x128>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6493      	str	r3, [r2, #72]	; 0x48
}
 800a046:	e003      	b.n	800a050 <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 800a048:	697a      	ldr	r2, [r7, #20]
 800a04a:	4b08      	ldr	r3, [pc, #32]	; (800a06c <USER_TIMER_setValueOfPWM+0x128>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800a050:	bf00      	nop
 800a052:	3764      	adds	r7, #100	; 0x64
 800a054:	46bd      	mov	sp, r7
 800a056:	bd90      	pop	{r4, r7, pc}
 800a058:	200003b0 	.word	0x200003b0
 800a05c:	200003fc 	.word	0x200003fc
 800a060:	200005d8 	.word	0x200005d8
 800a064:	20000018 	.word	0x20000018
 800a068:	51eb851f 	.word	0x51eb851f
 800a06c:	200005dc 	.word	0x200005dc

0800a070 <USER_TIMER_handleString>:
/*Syntax buffer TIMER-30-20000-2-2(TIMER-dutycycle-tanso-numberoftimer-channel) */
COMPONENT_TIMER USER_TIMER_handleString(char* Buffer)
{
 800a070:	b590      	push	{r4, r7, lr}
 800a072:	b089      	sub	sp, #36	; 0x24
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
	char* ptr = NULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	61fb      	str	r3, [r7, #28]
	COMPONENT_TIMER var = {0.0,0,0,0};
 800a07e:	f107 030c 	add.w	r3, r7, #12
 800a082:	2200      	movs	r2, #0
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	605a      	str	r2, [r3, #4]
 800a088:	609a      	str	r2, [r3, #8]
 800a08a:	60da      	str	r2, [r3, #12]


	ptr = strtok(Buffer,"-");
 800a08c:	4924      	ldr	r1, [pc, #144]	; (800a120 <USER_TIMER_handleString+0xb0>)
 800a08e:	6838      	ldr	r0, [r7, #0]
 800a090:	f001 fe2e 	bl	800bcf0 <strtok>
 800a094:	61f8      	str	r0, [r7, #28]
	ptr = strtok(NULL,"-");
 800a096:	4922      	ldr	r1, [pc, #136]	; (800a120 <USER_TIMER_handleString+0xb0>)
 800a098:	2000      	movs	r0, #0
 800a09a:	f001 fe29 	bl	800bcf0 <strtok>
 800a09e:	61f8      	str	r0, [r7, #28]
	var.Duty = __USER_TIMER_convertU16(atoi(ptr));
 800a0a0:	69f8      	ldr	r0, [r7, #28]
 800a0a2:	f000 f8a5 	bl	800a1f0 <atoi>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7ff ff3f 	bl	8009f2c <__USER_TIMER_convertU16>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	ee07 3a90 	vmov	s15, r3
 800a0b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b8:	edc7 7a03 	vstr	s15, [r7, #12]
	ptr = strtok(NULL,"-");
 800a0bc:	4918      	ldr	r1, [pc, #96]	; (800a120 <USER_TIMER_handleString+0xb0>)
 800a0be:	2000      	movs	r0, #0
 800a0c0:	f001 fe16 	bl	800bcf0 <strtok>
 800a0c4:	61f8      	str	r0, [r7, #28]
	var.frequency = (uint32_t)atoi(ptr);
 800a0c6:	69f8      	ldr	r0, [r7, #28]
 800a0c8:	f000 f892 	bl	800a1f0 <atoi>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	61bb      	str	r3, [r7, #24]
	ptr = strtok(NULL,"-");
 800a0d0:	4913      	ldr	r1, [pc, #76]	; (800a120 <USER_TIMER_handleString+0xb0>)
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	f001 fe0c 	bl	800bcf0 <strtok>
 800a0d8:	61f8      	str	r0, [r7, #28]
	var.NumberOfTimer = __USER_TIMER_convertU16(atoi(ptr));
 800a0da:	69f8      	ldr	r0, [r7, #28]
 800a0dc:	f000 f888 	bl	800a1f0 <atoi>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7ff ff22 	bl	8009f2c <__USER_TIMER_convertU16>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	823b      	strh	r3, [r7, #16]
	ptr = strtok(NULL,"-");
 800a0ec:	490c      	ldr	r1, [pc, #48]	; (800a120 <USER_TIMER_handleString+0xb0>)
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	f001 fdfe 	bl	800bcf0 <strtok>
 800a0f4:	61f8      	str	r0, [r7, #28]
	var.Channel = __USER_TIMER_convertU16(atoi(ptr));
 800a0f6:	69f8      	ldr	r0, [r7, #28]
 800a0f8:	f000 f87a 	bl	800a1f0 <atoi>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7ff ff14 	bl	8009f2c <__USER_TIMER_convertU16>
 800a104:	4603      	mov	r3, r0
 800a106:	617b      	str	r3, [r7, #20]
	return var;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	461c      	mov	r4, r3
 800a10c:	f107 030c 	add.w	r3, r7, #12
 800a110:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a112:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	3724      	adds	r7, #36	; 0x24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd90      	pop	{r4, r7, pc}
 800a11e:	bf00      	nop
 800a120:	0800ee6c 	.word	0x0800ee6c

0800a124 <USER_TIMER_getValueARR>:
uint32_t USER_TIMER_getValueARR(void)
{
 800a124:	b480      	push	{r7}
 800a126:	af00      	add	r7, sp, #0
	return ValueOfARR;
 800a128:	4b03      	ldr	r3, [pc, #12]	; (800a138 <USER_TIMER_getValueARR+0x14>)
 800a12a:	681b      	ldr	r3, [r3, #0]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	200005d8 	.word	0x200005d8

0800a13c <USER_TIMER_getValueCCR>:
uint32_t USER_TIMER_getValueCCR(void)
{
 800a13c:	b480      	push	{r7}
 800a13e:	af00      	add	r7, sp, #0
	return ValueOfCCR;
 800a140:	4b03      	ldr	r3, [pc, #12]	; (800a150 <USER_TIMER_getValueCCR+0x14>)
 800a142:	681b      	ldr	r3, [r3, #0]
}
 800a144:	4618      	mov	r0, r3
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	200005dc 	.word	0x200005dc
 800a154:	00000000 	.word	0x00000000

0800a158 <USER_TIMER_ConvertADCValueToDutyCycle>:
  * @brief  Convert ADC value to Dutycycle. Voltage 0 - 3.3V conver 0->100%
  * @note   Parameters of this function
  *          - ADC value
  */
float USER_TIMER_ConvertADCValueToDutyCycle(float ADCValue)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	ed87 0a01 	vstr	s0, [r7, #4]
	float tempValue = (ADCValue/1000);
 800a162:	ed97 7a01 	vldr	s14, [r7, #4]
 800a166:	eddf 6a16 	vldr	s13, [pc, #88]	; 800a1c0 <USER_TIMER_ConvertADCValueToDutyCycle+0x68>
 800a16a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a16e:	edc7 7a03 	vstr	s15, [r7, #12]
	float DutyCycle = 0;
 800a172:	f04f 0300 	mov.w	r3, #0
 800a176:	60bb      	str	r3, [r7, #8]

	DutyCycle = (tempValue*100)/3.3;
 800a178:	edd7 7a03 	vldr	s15, [r7, #12]
 800a17c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800a1c4 <USER_TIMER_ConvertADCValueToDutyCycle+0x6c>
 800a180:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a184:	ee17 0a90 	vmov	r0, s15
 800a188:	f7f6 fa06 	bl	8000598 <__aeabi_f2d>
 800a18c:	a30a      	add	r3, pc, #40	; (adr r3, 800a1b8 <USER_TIMER_ConvertADCValueToDutyCycle+0x60>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	f7f6 fb83 	bl	800089c <__aeabi_ddiv>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4610      	mov	r0, r2
 800a19c:	4619      	mov	r1, r3
 800a19e:	f7f6 fd4b 	bl	8000c38 <__aeabi_d2f>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	60bb      	str	r3, [r7, #8]
	return DutyCycle;
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	ee07 3a90 	vmov	s15, r3
}
 800a1ac:	eeb0 0a67 	vmov.f32	s0, s15
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	66666666 	.word	0x66666666
 800a1bc:	400a6666 	.word	0x400a6666
 800a1c0:	447a0000 	.word	0x447a0000
 800a1c4:	42c80000 	.word	0x42c80000

0800a1c8 <USER_TIMER_DividedIntoTwoCCR>:

void USER_TIMER_DividedIntoTwoCCR(TIM_HandleTypeDef timer)
{
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	b490      	push	{r4, r7}
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	f107 0408 	add.w	r4, r7, #8
 800a1d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	timer.Instance->CCR1 = (timer.Instance->CCR2)/2;
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	0852      	lsrs	r2, r2, #1
 800a1de:	635a      	str	r2, [r3, #52]	; 0x34
}
 800a1e0:	bf00      	nop
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bc90      	pop	{r4, r7}
 800a1e6:	b004      	add	sp, #16
 800a1e8:	4770      	bx	lr

0800a1ea <atoff>:
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	f001 bd24 	b.w	800bc38 <strtof>

0800a1f0 <atoi>:
 800a1f0:	220a      	movs	r2, #10
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	f001 be5c 	b.w	800beb0 <strtol>

0800a1f8 <__errno>:
 800a1f8:	4b01      	ldr	r3, [pc, #4]	; (800a200 <__errno+0x8>)
 800a1fa:	6818      	ldr	r0, [r3, #0]
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	2000001c 	.word	0x2000001c

0800a204 <__libc_init_array>:
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	4d0d      	ldr	r5, [pc, #52]	; (800a23c <__libc_init_array+0x38>)
 800a208:	4c0d      	ldr	r4, [pc, #52]	; (800a240 <__libc_init_array+0x3c>)
 800a20a:	1b64      	subs	r4, r4, r5
 800a20c:	10a4      	asrs	r4, r4, #2
 800a20e:	2600      	movs	r6, #0
 800a210:	42a6      	cmp	r6, r4
 800a212:	d109      	bne.n	800a228 <__libc_init_array+0x24>
 800a214:	4d0b      	ldr	r5, [pc, #44]	; (800a244 <__libc_init_array+0x40>)
 800a216:	4c0c      	ldr	r4, [pc, #48]	; (800a248 <__libc_init_array+0x44>)
 800a218:	f004 fd6a 	bl	800ecf0 <_init>
 800a21c:	1b64      	subs	r4, r4, r5
 800a21e:	10a4      	asrs	r4, r4, #2
 800a220:	2600      	movs	r6, #0
 800a222:	42a6      	cmp	r6, r4
 800a224:	d105      	bne.n	800a232 <__libc_init_array+0x2e>
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	f855 3b04 	ldr.w	r3, [r5], #4
 800a22c:	4798      	blx	r3
 800a22e:	3601      	adds	r6, #1
 800a230:	e7ee      	b.n	800a210 <__libc_init_array+0xc>
 800a232:	f855 3b04 	ldr.w	r3, [r5], #4
 800a236:	4798      	blx	r3
 800a238:	3601      	adds	r6, #1
 800a23a:	e7f2      	b.n	800a222 <__libc_init_array+0x1e>
 800a23c:	0800f3b8 	.word	0x0800f3b8
 800a240:	0800f3b8 	.word	0x0800f3b8
 800a244:	0800f3b8 	.word	0x0800f3b8
 800a248:	0800f3bc 	.word	0x0800f3bc

0800a24c <memcpy>:
 800a24c:	440a      	add	r2, r1
 800a24e:	4291      	cmp	r1, r2
 800a250:	f100 33ff 	add.w	r3, r0, #4294967295
 800a254:	d100      	bne.n	800a258 <memcpy+0xc>
 800a256:	4770      	bx	lr
 800a258:	b510      	push	{r4, lr}
 800a25a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a25e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a262:	4291      	cmp	r1, r2
 800a264:	d1f9      	bne.n	800a25a <memcpy+0xe>
 800a266:	bd10      	pop	{r4, pc}

0800a268 <memset>:
 800a268:	4402      	add	r2, r0
 800a26a:	4603      	mov	r3, r0
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d100      	bne.n	800a272 <memset+0xa>
 800a270:	4770      	bx	lr
 800a272:	f803 1b01 	strb.w	r1, [r3], #1
 800a276:	e7f9      	b.n	800a26c <memset+0x4>

0800a278 <__cvt>:
 800a278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a27c:	ec55 4b10 	vmov	r4, r5, d0
 800a280:	2d00      	cmp	r5, #0
 800a282:	460e      	mov	r6, r1
 800a284:	4619      	mov	r1, r3
 800a286:	462b      	mov	r3, r5
 800a288:	bfbb      	ittet	lt
 800a28a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a28e:	461d      	movlt	r5, r3
 800a290:	2300      	movge	r3, #0
 800a292:	232d      	movlt	r3, #45	; 0x2d
 800a294:	700b      	strb	r3, [r1, #0]
 800a296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a298:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a29c:	4691      	mov	r9, r2
 800a29e:	f023 0820 	bic.w	r8, r3, #32
 800a2a2:	bfbc      	itt	lt
 800a2a4:	4622      	movlt	r2, r4
 800a2a6:	4614      	movlt	r4, r2
 800a2a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a2ac:	d005      	beq.n	800a2ba <__cvt+0x42>
 800a2ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a2b2:	d100      	bne.n	800a2b6 <__cvt+0x3e>
 800a2b4:	3601      	adds	r6, #1
 800a2b6:	2102      	movs	r1, #2
 800a2b8:	e000      	b.n	800a2bc <__cvt+0x44>
 800a2ba:	2103      	movs	r1, #3
 800a2bc:	ab03      	add	r3, sp, #12
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	ab02      	add	r3, sp, #8
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	ec45 4b10 	vmov	d0, r4, r5
 800a2c8:	4653      	mov	r3, sl
 800a2ca:	4632      	mov	r2, r6
 800a2cc:	f001 fea4 	bl	800c018 <_dtoa_r>
 800a2d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a2d4:	4607      	mov	r7, r0
 800a2d6:	d102      	bne.n	800a2de <__cvt+0x66>
 800a2d8:	f019 0f01 	tst.w	r9, #1
 800a2dc:	d022      	beq.n	800a324 <__cvt+0xac>
 800a2de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a2e2:	eb07 0906 	add.w	r9, r7, r6
 800a2e6:	d110      	bne.n	800a30a <__cvt+0x92>
 800a2e8:	783b      	ldrb	r3, [r7, #0]
 800a2ea:	2b30      	cmp	r3, #48	; 0x30
 800a2ec:	d10a      	bne.n	800a304 <__cvt+0x8c>
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	f7f6 fc0f 	bl	8000b18 <__aeabi_dcmpeq>
 800a2fa:	b918      	cbnz	r0, 800a304 <__cvt+0x8c>
 800a2fc:	f1c6 0601 	rsb	r6, r6, #1
 800a300:	f8ca 6000 	str.w	r6, [sl]
 800a304:	f8da 3000 	ldr.w	r3, [sl]
 800a308:	4499      	add	r9, r3
 800a30a:	2200      	movs	r2, #0
 800a30c:	2300      	movs	r3, #0
 800a30e:	4620      	mov	r0, r4
 800a310:	4629      	mov	r1, r5
 800a312:	f7f6 fc01 	bl	8000b18 <__aeabi_dcmpeq>
 800a316:	b108      	cbz	r0, 800a31c <__cvt+0xa4>
 800a318:	f8cd 900c 	str.w	r9, [sp, #12]
 800a31c:	2230      	movs	r2, #48	; 0x30
 800a31e:	9b03      	ldr	r3, [sp, #12]
 800a320:	454b      	cmp	r3, r9
 800a322:	d307      	bcc.n	800a334 <__cvt+0xbc>
 800a324:	9b03      	ldr	r3, [sp, #12]
 800a326:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a328:	1bdb      	subs	r3, r3, r7
 800a32a:	4638      	mov	r0, r7
 800a32c:	6013      	str	r3, [r2, #0]
 800a32e:	b004      	add	sp, #16
 800a330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a334:	1c59      	adds	r1, r3, #1
 800a336:	9103      	str	r1, [sp, #12]
 800a338:	701a      	strb	r2, [r3, #0]
 800a33a:	e7f0      	b.n	800a31e <__cvt+0xa6>

0800a33c <__exponent>:
 800a33c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a33e:	4603      	mov	r3, r0
 800a340:	2900      	cmp	r1, #0
 800a342:	bfb8      	it	lt
 800a344:	4249      	neglt	r1, r1
 800a346:	f803 2b02 	strb.w	r2, [r3], #2
 800a34a:	bfb4      	ite	lt
 800a34c:	222d      	movlt	r2, #45	; 0x2d
 800a34e:	222b      	movge	r2, #43	; 0x2b
 800a350:	2909      	cmp	r1, #9
 800a352:	7042      	strb	r2, [r0, #1]
 800a354:	dd2a      	ble.n	800a3ac <__exponent+0x70>
 800a356:	f10d 0407 	add.w	r4, sp, #7
 800a35a:	46a4      	mov	ip, r4
 800a35c:	270a      	movs	r7, #10
 800a35e:	46a6      	mov	lr, r4
 800a360:	460a      	mov	r2, r1
 800a362:	fb91 f6f7 	sdiv	r6, r1, r7
 800a366:	fb07 1516 	mls	r5, r7, r6, r1
 800a36a:	3530      	adds	r5, #48	; 0x30
 800a36c:	2a63      	cmp	r2, #99	; 0x63
 800a36e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a372:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a376:	4631      	mov	r1, r6
 800a378:	dcf1      	bgt.n	800a35e <__exponent+0x22>
 800a37a:	3130      	adds	r1, #48	; 0x30
 800a37c:	f1ae 0502 	sub.w	r5, lr, #2
 800a380:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a384:	1c44      	adds	r4, r0, #1
 800a386:	4629      	mov	r1, r5
 800a388:	4561      	cmp	r1, ip
 800a38a:	d30a      	bcc.n	800a3a2 <__exponent+0x66>
 800a38c:	f10d 0209 	add.w	r2, sp, #9
 800a390:	eba2 020e 	sub.w	r2, r2, lr
 800a394:	4565      	cmp	r5, ip
 800a396:	bf88      	it	hi
 800a398:	2200      	movhi	r2, #0
 800a39a:	4413      	add	r3, r2
 800a39c:	1a18      	subs	r0, r3, r0
 800a39e:	b003      	add	sp, #12
 800a3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a3aa:	e7ed      	b.n	800a388 <__exponent+0x4c>
 800a3ac:	2330      	movs	r3, #48	; 0x30
 800a3ae:	3130      	adds	r1, #48	; 0x30
 800a3b0:	7083      	strb	r3, [r0, #2]
 800a3b2:	70c1      	strb	r1, [r0, #3]
 800a3b4:	1d03      	adds	r3, r0, #4
 800a3b6:	e7f1      	b.n	800a39c <__exponent+0x60>

0800a3b8 <_printf_float>:
 800a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	ed2d 8b02 	vpush	{d8}
 800a3c0:	b08d      	sub	sp, #52	; 0x34
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a3c8:	4616      	mov	r6, r2
 800a3ca:	461f      	mov	r7, r3
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	f002 ff93 	bl	800d2f8 <_localeconv_r>
 800a3d2:	f8d0 a000 	ldr.w	sl, [r0]
 800a3d6:	4650      	mov	r0, sl
 800a3d8:	f7f5 ff22 	bl	8000220 <strlen>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	930a      	str	r3, [sp, #40]	; 0x28
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	9305      	str	r3, [sp, #20]
 800a3e4:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a3ec:	3307      	adds	r3, #7
 800a3ee:	f023 0307 	bic.w	r3, r3, #7
 800a3f2:	f103 0208 	add.w	r2, r3, #8
 800a3f6:	f8c8 2000 	str.w	r2, [r8]
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a402:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a406:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a40a:	9307      	str	r3, [sp, #28]
 800a40c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a410:	ee08 0a10 	vmov	s16, r0
 800a414:	4b9f      	ldr	r3, [pc, #636]	; (800a694 <_printf_float+0x2dc>)
 800a416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a41a:	f04f 32ff 	mov.w	r2, #4294967295
 800a41e:	f7f6 fbad 	bl	8000b7c <__aeabi_dcmpun>
 800a422:	bb88      	cbnz	r0, 800a488 <_printf_float+0xd0>
 800a424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a428:	4b9a      	ldr	r3, [pc, #616]	; (800a694 <_printf_float+0x2dc>)
 800a42a:	f04f 32ff 	mov.w	r2, #4294967295
 800a42e:	f7f6 fb87 	bl	8000b40 <__aeabi_dcmple>
 800a432:	bb48      	cbnz	r0, 800a488 <_printf_float+0xd0>
 800a434:	2200      	movs	r2, #0
 800a436:	2300      	movs	r3, #0
 800a438:	4640      	mov	r0, r8
 800a43a:	4649      	mov	r1, r9
 800a43c:	f7f6 fb76 	bl	8000b2c <__aeabi_dcmplt>
 800a440:	b110      	cbz	r0, 800a448 <_printf_float+0x90>
 800a442:	232d      	movs	r3, #45	; 0x2d
 800a444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a448:	4b93      	ldr	r3, [pc, #588]	; (800a698 <_printf_float+0x2e0>)
 800a44a:	4894      	ldr	r0, [pc, #592]	; (800a69c <_printf_float+0x2e4>)
 800a44c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a450:	bf94      	ite	ls
 800a452:	4698      	movls	r8, r3
 800a454:	4680      	movhi	r8, r0
 800a456:	2303      	movs	r3, #3
 800a458:	6123      	str	r3, [r4, #16]
 800a45a:	9b05      	ldr	r3, [sp, #20]
 800a45c:	f023 0204 	bic.w	r2, r3, #4
 800a460:	6022      	str	r2, [r4, #0]
 800a462:	f04f 0900 	mov.w	r9, #0
 800a466:	9700      	str	r7, [sp, #0]
 800a468:	4633      	mov	r3, r6
 800a46a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a46c:	4621      	mov	r1, r4
 800a46e:	4628      	mov	r0, r5
 800a470:	f000 f9d8 	bl	800a824 <_printf_common>
 800a474:	3001      	adds	r0, #1
 800a476:	f040 8090 	bne.w	800a59a <_printf_float+0x1e2>
 800a47a:	f04f 30ff 	mov.w	r0, #4294967295
 800a47e:	b00d      	add	sp, #52	; 0x34
 800a480:	ecbd 8b02 	vpop	{d8}
 800a484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a488:	4642      	mov	r2, r8
 800a48a:	464b      	mov	r3, r9
 800a48c:	4640      	mov	r0, r8
 800a48e:	4649      	mov	r1, r9
 800a490:	f7f6 fb74 	bl	8000b7c <__aeabi_dcmpun>
 800a494:	b140      	cbz	r0, 800a4a8 <_printf_float+0xf0>
 800a496:	464b      	mov	r3, r9
 800a498:	2b00      	cmp	r3, #0
 800a49a:	bfbc      	itt	lt
 800a49c:	232d      	movlt	r3, #45	; 0x2d
 800a49e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a4a2:	487f      	ldr	r0, [pc, #508]	; (800a6a0 <_printf_float+0x2e8>)
 800a4a4:	4b7f      	ldr	r3, [pc, #508]	; (800a6a4 <_printf_float+0x2ec>)
 800a4a6:	e7d1      	b.n	800a44c <_printf_float+0x94>
 800a4a8:	6863      	ldr	r3, [r4, #4]
 800a4aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a4ae:	9206      	str	r2, [sp, #24]
 800a4b0:	1c5a      	adds	r2, r3, #1
 800a4b2:	d13f      	bne.n	800a534 <_printf_float+0x17c>
 800a4b4:	2306      	movs	r3, #6
 800a4b6:	6063      	str	r3, [r4, #4]
 800a4b8:	9b05      	ldr	r3, [sp, #20]
 800a4ba:	6861      	ldr	r1, [r4, #4]
 800a4bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	9303      	str	r3, [sp, #12]
 800a4c4:	ab0a      	add	r3, sp, #40	; 0x28
 800a4c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a4ca:	ab09      	add	r3, sp, #36	; 0x24
 800a4cc:	ec49 8b10 	vmov	d0, r8, r9
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	6022      	str	r2, [r4, #0]
 800a4d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a4d8:	4628      	mov	r0, r5
 800a4da:	f7ff fecd 	bl	800a278 <__cvt>
 800a4de:	9b06      	ldr	r3, [sp, #24]
 800a4e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4e2:	2b47      	cmp	r3, #71	; 0x47
 800a4e4:	4680      	mov	r8, r0
 800a4e6:	d108      	bne.n	800a4fa <_printf_float+0x142>
 800a4e8:	1cc8      	adds	r0, r1, #3
 800a4ea:	db02      	blt.n	800a4f2 <_printf_float+0x13a>
 800a4ec:	6863      	ldr	r3, [r4, #4]
 800a4ee:	4299      	cmp	r1, r3
 800a4f0:	dd41      	ble.n	800a576 <_printf_float+0x1be>
 800a4f2:	f1ab 0b02 	sub.w	fp, fp, #2
 800a4f6:	fa5f fb8b 	uxtb.w	fp, fp
 800a4fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4fe:	d820      	bhi.n	800a542 <_printf_float+0x18a>
 800a500:	3901      	subs	r1, #1
 800a502:	465a      	mov	r2, fp
 800a504:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a508:	9109      	str	r1, [sp, #36]	; 0x24
 800a50a:	f7ff ff17 	bl	800a33c <__exponent>
 800a50e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a510:	1813      	adds	r3, r2, r0
 800a512:	2a01      	cmp	r2, #1
 800a514:	4681      	mov	r9, r0
 800a516:	6123      	str	r3, [r4, #16]
 800a518:	dc02      	bgt.n	800a520 <_printf_float+0x168>
 800a51a:	6822      	ldr	r2, [r4, #0]
 800a51c:	07d2      	lsls	r2, r2, #31
 800a51e:	d501      	bpl.n	800a524 <_printf_float+0x16c>
 800a520:	3301      	adds	r3, #1
 800a522:	6123      	str	r3, [r4, #16]
 800a524:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d09c      	beq.n	800a466 <_printf_float+0xae>
 800a52c:	232d      	movs	r3, #45	; 0x2d
 800a52e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a532:	e798      	b.n	800a466 <_printf_float+0xae>
 800a534:	9a06      	ldr	r2, [sp, #24]
 800a536:	2a47      	cmp	r2, #71	; 0x47
 800a538:	d1be      	bne.n	800a4b8 <_printf_float+0x100>
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1bc      	bne.n	800a4b8 <_printf_float+0x100>
 800a53e:	2301      	movs	r3, #1
 800a540:	e7b9      	b.n	800a4b6 <_printf_float+0xfe>
 800a542:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a546:	d118      	bne.n	800a57a <_printf_float+0x1c2>
 800a548:	2900      	cmp	r1, #0
 800a54a:	6863      	ldr	r3, [r4, #4]
 800a54c:	dd0b      	ble.n	800a566 <_printf_float+0x1ae>
 800a54e:	6121      	str	r1, [r4, #16]
 800a550:	b913      	cbnz	r3, 800a558 <_printf_float+0x1a0>
 800a552:	6822      	ldr	r2, [r4, #0]
 800a554:	07d0      	lsls	r0, r2, #31
 800a556:	d502      	bpl.n	800a55e <_printf_float+0x1a6>
 800a558:	3301      	adds	r3, #1
 800a55a:	440b      	add	r3, r1
 800a55c:	6123      	str	r3, [r4, #16]
 800a55e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a560:	f04f 0900 	mov.w	r9, #0
 800a564:	e7de      	b.n	800a524 <_printf_float+0x16c>
 800a566:	b913      	cbnz	r3, 800a56e <_printf_float+0x1b6>
 800a568:	6822      	ldr	r2, [r4, #0]
 800a56a:	07d2      	lsls	r2, r2, #31
 800a56c:	d501      	bpl.n	800a572 <_printf_float+0x1ba>
 800a56e:	3302      	adds	r3, #2
 800a570:	e7f4      	b.n	800a55c <_printf_float+0x1a4>
 800a572:	2301      	movs	r3, #1
 800a574:	e7f2      	b.n	800a55c <_printf_float+0x1a4>
 800a576:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a57c:	4299      	cmp	r1, r3
 800a57e:	db05      	blt.n	800a58c <_printf_float+0x1d4>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	6121      	str	r1, [r4, #16]
 800a584:	07d8      	lsls	r0, r3, #31
 800a586:	d5ea      	bpl.n	800a55e <_printf_float+0x1a6>
 800a588:	1c4b      	adds	r3, r1, #1
 800a58a:	e7e7      	b.n	800a55c <_printf_float+0x1a4>
 800a58c:	2900      	cmp	r1, #0
 800a58e:	bfd4      	ite	le
 800a590:	f1c1 0202 	rsble	r2, r1, #2
 800a594:	2201      	movgt	r2, #1
 800a596:	4413      	add	r3, r2
 800a598:	e7e0      	b.n	800a55c <_printf_float+0x1a4>
 800a59a:	6823      	ldr	r3, [r4, #0]
 800a59c:	055a      	lsls	r2, r3, #21
 800a59e:	d407      	bmi.n	800a5b0 <_printf_float+0x1f8>
 800a5a0:	6923      	ldr	r3, [r4, #16]
 800a5a2:	4642      	mov	r2, r8
 800a5a4:	4631      	mov	r1, r6
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	47b8      	blx	r7
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	d12c      	bne.n	800a608 <_printf_float+0x250>
 800a5ae:	e764      	b.n	800a47a <_printf_float+0xc2>
 800a5b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a5b4:	f240 80e0 	bls.w	800a778 <_printf_float+0x3c0>
 800a5b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2300      	movs	r3, #0
 800a5c0:	f7f6 faaa 	bl	8000b18 <__aeabi_dcmpeq>
 800a5c4:	2800      	cmp	r0, #0
 800a5c6:	d034      	beq.n	800a632 <_printf_float+0x27a>
 800a5c8:	4a37      	ldr	r2, [pc, #220]	; (800a6a8 <_printf_float+0x2f0>)
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	4631      	mov	r1, r6
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	47b8      	blx	r7
 800a5d2:	3001      	adds	r0, #1
 800a5d4:	f43f af51 	beq.w	800a47a <_printf_float+0xc2>
 800a5d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	db02      	blt.n	800a5e6 <_printf_float+0x22e>
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	07d8      	lsls	r0, r3, #31
 800a5e4:	d510      	bpl.n	800a608 <_printf_float+0x250>
 800a5e6:	ee18 3a10 	vmov	r3, s16
 800a5ea:	4652      	mov	r2, sl
 800a5ec:	4631      	mov	r1, r6
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	47b8      	blx	r7
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	f43f af41 	beq.w	800a47a <_printf_float+0xc2>
 800a5f8:	f04f 0800 	mov.w	r8, #0
 800a5fc:	f104 091a 	add.w	r9, r4, #26
 800a600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a602:	3b01      	subs	r3, #1
 800a604:	4543      	cmp	r3, r8
 800a606:	dc09      	bgt.n	800a61c <_printf_float+0x264>
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	079b      	lsls	r3, r3, #30
 800a60c:	f100 8105 	bmi.w	800a81a <_printf_float+0x462>
 800a610:	68e0      	ldr	r0, [r4, #12]
 800a612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a614:	4298      	cmp	r0, r3
 800a616:	bfb8      	it	lt
 800a618:	4618      	movlt	r0, r3
 800a61a:	e730      	b.n	800a47e <_printf_float+0xc6>
 800a61c:	2301      	movs	r3, #1
 800a61e:	464a      	mov	r2, r9
 800a620:	4631      	mov	r1, r6
 800a622:	4628      	mov	r0, r5
 800a624:	47b8      	blx	r7
 800a626:	3001      	adds	r0, #1
 800a628:	f43f af27 	beq.w	800a47a <_printf_float+0xc2>
 800a62c:	f108 0801 	add.w	r8, r8, #1
 800a630:	e7e6      	b.n	800a600 <_printf_float+0x248>
 800a632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a634:	2b00      	cmp	r3, #0
 800a636:	dc39      	bgt.n	800a6ac <_printf_float+0x2f4>
 800a638:	4a1b      	ldr	r2, [pc, #108]	; (800a6a8 <_printf_float+0x2f0>)
 800a63a:	2301      	movs	r3, #1
 800a63c:	4631      	mov	r1, r6
 800a63e:	4628      	mov	r0, r5
 800a640:	47b8      	blx	r7
 800a642:	3001      	adds	r0, #1
 800a644:	f43f af19 	beq.w	800a47a <_printf_float+0xc2>
 800a648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a64c:	4313      	orrs	r3, r2
 800a64e:	d102      	bne.n	800a656 <_printf_float+0x29e>
 800a650:	6823      	ldr	r3, [r4, #0]
 800a652:	07d9      	lsls	r1, r3, #31
 800a654:	d5d8      	bpl.n	800a608 <_printf_float+0x250>
 800a656:	ee18 3a10 	vmov	r3, s16
 800a65a:	4652      	mov	r2, sl
 800a65c:	4631      	mov	r1, r6
 800a65e:	4628      	mov	r0, r5
 800a660:	47b8      	blx	r7
 800a662:	3001      	adds	r0, #1
 800a664:	f43f af09 	beq.w	800a47a <_printf_float+0xc2>
 800a668:	f04f 0900 	mov.w	r9, #0
 800a66c:	f104 0a1a 	add.w	sl, r4, #26
 800a670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a672:	425b      	negs	r3, r3
 800a674:	454b      	cmp	r3, r9
 800a676:	dc01      	bgt.n	800a67c <_printf_float+0x2c4>
 800a678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a67a:	e792      	b.n	800a5a2 <_printf_float+0x1ea>
 800a67c:	2301      	movs	r3, #1
 800a67e:	4652      	mov	r2, sl
 800a680:	4631      	mov	r1, r6
 800a682:	4628      	mov	r0, r5
 800a684:	47b8      	blx	r7
 800a686:	3001      	adds	r0, #1
 800a688:	f43f aef7 	beq.w	800a47a <_printf_float+0xc2>
 800a68c:	f109 0901 	add.w	r9, r9, #1
 800a690:	e7ee      	b.n	800a670 <_printf_float+0x2b8>
 800a692:	bf00      	nop
 800a694:	7fefffff 	.word	0x7fefffff
 800a698:	0800eeb4 	.word	0x0800eeb4
 800a69c:	0800eeb8 	.word	0x0800eeb8
 800a6a0:	0800eec0 	.word	0x0800eec0
 800a6a4:	0800eebc 	.word	0x0800eebc
 800a6a8:	0800eec4 	.word	0x0800eec4
 800a6ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	bfa8      	it	ge
 800a6b4:	461a      	movge	r2, r3
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	4691      	mov	r9, r2
 800a6ba:	dc37      	bgt.n	800a72c <_printf_float+0x374>
 800a6bc:	f04f 0b00 	mov.w	fp, #0
 800a6c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6c4:	f104 021a 	add.w	r2, r4, #26
 800a6c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6ca:	9305      	str	r3, [sp, #20]
 800a6cc:	eba3 0309 	sub.w	r3, r3, r9
 800a6d0:	455b      	cmp	r3, fp
 800a6d2:	dc33      	bgt.n	800a73c <_printf_float+0x384>
 800a6d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	db3b      	blt.n	800a754 <_printf_float+0x39c>
 800a6dc:	6823      	ldr	r3, [r4, #0]
 800a6de:	07da      	lsls	r2, r3, #31
 800a6e0:	d438      	bmi.n	800a754 <_printf_float+0x39c>
 800a6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6e4:	9a05      	ldr	r2, [sp, #20]
 800a6e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6e8:	1a9a      	subs	r2, r3, r2
 800a6ea:	eba3 0901 	sub.w	r9, r3, r1
 800a6ee:	4591      	cmp	r9, r2
 800a6f0:	bfa8      	it	ge
 800a6f2:	4691      	movge	r9, r2
 800a6f4:	f1b9 0f00 	cmp.w	r9, #0
 800a6f8:	dc35      	bgt.n	800a766 <_printf_float+0x3ae>
 800a6fa:	f04f 0800 	mov.w	r8, #0
 800a6fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a702:	f104 0a1a 	add.w	sl, r4, #26
 800a706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a70a:	1a9b      	subs	r3, r3, r2
 800a70c:	eba3 0309 	sub.w	r3, r3, r9
 800a710:	4543      	cmp	r3, r8
 800a712:	f77f af79 	ble.w	800a608 <_printf_float+0x250>
 800a716:	2301      	movs	r3, #1
 800a718:	4652      	mov	r2, sl
 800a71a:	4631      	mov	r1, r6
 800a71c:	4628      	mov	r0, r5
 800a71e:	47b8      	blx	r7
 800a720:	3001      	adds	r0, #1
 800a722:	f43f aeaa 	beq.w	800a47a <_printf_float+0xc2>
 800a726:	f108 0801 	add.w	r8, r8, #1
 800a72a:	e7ec      	b.n	800a706 <_printf_float+0x34e>
 800a72c:	4613      	mov	r3, r2
 800a72e:	4631      	mov	r1, r6
 800a730:	4642      	mov	r2, r8
 800a732:	4628      	mov	r0, r5
 800a734:	47b8      	blx	r7
 800a736:	3001      	adds	r0, #1
 800a738:	d1c0      	bne.n	800a6bc <_printf_float+0x304>
 800a73a:	e69e      	b.n	800a47a <_printf_float+0xc2>
 800a73c:	2301      	movs	r3, #1
 800a73e:	4631      	mov	r1, r6
 800a740:	4628      	mov	r0, r5
 800a742:	9205      	str	r2, [sp, #20]
 800a744:	47b8      	blx	r7
 800a746:	3001      	adds	r0, #1
 800a748:	f43f ae97 	beq.w	800a47a <_printf_float+0xc2>
 800a74c:	9a05      	ldr	r2, [sp, #20]
 800a74e:	f10b 0b01 	add.w	fp, fp, #1
 800a752:	e7b9      	b.n	800a6c8 <_printf_float+0x310>
 800a754:	ee18 3a10 	vmov	r3, s16
 800a758:	4652      	mov	r2, sl
 800a75a:	4631      	mov	r1, r6
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b8      	blx	r7
 800a760:	3001      	adds	r0, #1
 800a762:	d1be      	bne.n	800a6e2 <_printf_float+0x32a>
 800a764:	e689      	b.n	800a47a <_printf_float+0xc2>
 800a766:	9a05      	ldr	r2, [sp, #20]
 800a768:	464b      	mov	r3, r9
 800a76a:	4442      	add	r2, r8
 800a76c:	4631      	mov	r1, r6
 800a76e:	4628      	mov	r0, r5
 800a770:	47b8      	blx	r7
 800a772:	3001      	adds	r0, #1
 800a774:	d1c1      	bne.n	800a6fa <_printf_float+0x342>
 800a776:	e680      	b.n	800a47a <_printf_float+0xc2>
 800a778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a77a:	2a01      	cmp	r2, #1
 800a77c:	dc01      	bgt.n	800a782 <_printf_float+0x3ca>
 800a77e:	07db      	lsls	r3, r3, #31
 800a780:	d538      	bpl.n	800a7f4 <_printf_float+0x43c>
 800a782:	2301      	movs	r3, #1
 800a784:	4642      	mov	r2, r8
 800a786:	4631      	mov	r1, r6
 800a788:	4628      	mov	r0, r5
 800a78a:	47b8      	blx	r7
 800a78c:	3001      	adds	r0, #1
 800a78e:	f43f ae74 	beq.w	800a47a <_printf_float+0xc2>
 800a792:	ee18 3a10 	vmov	r3, s16
 800a796:	4652      	mov	r2, sl
 800a798:	4631      	mov	r1, r6
 800a79a:	4628      	mov	r0, r5
 800a79c:	47b8      	blx	r7
 800a79e:	3001      	adds	r0, #1
 800a7a0:	f43f ae6b 	beq.w	800a47a <_printf_float+0xc2>
 800a7a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	f7f6 f9b4 	bl	8000b18 <__aeabi_dcmpeq>
 800a7b0:	b9d8      	cbnz	r0, 800a7ea <_printf_float+0x432>
 800a7b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7b4:	f108 0201 	add.w	r2, r8, #1
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	4628      	mov	r0, r5
 800a7be:	47b8      	blx	r7
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	d10e      	bne.n	800a7e2 <_printf_float+0x42a>
 800a7c4:	e659      	b.n	800a47a <_printf_float+0xc2>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	4652      	mov	r2, sl
 800a7ca:	4631      	mov	r1, r6
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	47b8      	blx	r7
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	f43f ae52 	beq.w	800a47a <_printf_float+0xc2>
 800a7d6:	f108 0801 	add.w	r8, r8, #1
 800a7da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	4543      	cmp	r3, r8
 800a7e0:	dcf1      	bgt.n	800a7c6 <_printf_float+0x40e>
 800a7e2:	464b      	mov	r3, r9
 800a7e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a7e8:	e6dc      	b.n	800a5a4 <_printf_float+0x1ec>
 800a7ea:	f04f 0800 	mov.w	r8, #0
 800a7ee:	f104 0a1a 	add.w	sl, r4, #26
 800a7f2:	e7f2      	b.n	800a7da <_printf_float+0x422>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	4642      	mov	r2, r8
 800a7f8:	e7df      	b.n	800a7ba <_printf_float+0x402>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	464a      	mov	r2, r9
 800a7fe:	4631      	mov	r1, r6
 800a800:	4628      	mov	r0, r5
 800a802:	47b8      	blx	r7
 800a804:	3001      	adds	r0, #1
 800a806:	f43f ae38 	beq.w	800a47a <_printf_float+0xc2>
 800a80a:	f108 0801 	add.w	r8, r8, #1
 800a80e:	68e3      	ldr	r3, [r4, #12]
 800a810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a812:	1a5b      	subs	r3, r3, r1
 800a814:	4543      	cmp	r3, r8
 800a816:	dcf0      	bgt.n	800a7fa <_printf_float+0x442>
 800a818:	e6fa      	b.n	800a610 <_printf_float+0x258>
 800a81a:	f04f 0800 	mov.w	r8, #0
 800a81e:	f104 0919 	add.w	r9, r4, #25
 800a822:	e7f4      	b.n	800a80e <_printf_float+0x456>

0800a824 <_printf_common>:
 800a824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a828:	4616      	mov	r6, r2
 800a82a:	4699      	mov	r9, r3
 800a82c:	688a      	ldr	r2, [r1, #8]
 800a82e:	690b      	ldr	r3, [r1, #16]
 800a830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a834:	4293      	cmp	r3, r2
 800a836:	bfb8      	it	lt
 800a838:	4613      	movlt	r3, r2
 800a83a:	6033      	str	r3, [r6, #0]
 800a83c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a840:	4607      	mov	r7, r0
 800a842:	460c      	mov	r4, r1
 800a844:	b10a      	cbz	r2, 800a84a <_printf_common+0x26>
 800a846:	3301      	adds	r3, #1
 800a848:	6033      	str	r3, [r6, #0]
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	0699      	lsls	r1, r3, #26
 800a84e:	bf42      	ittt	mi
 800a850:	6833      	ldrmi	r3, [r6, #0]
 800a852:	3302      	addmi	r3, #2
 800a854:	6033      	strmi	r3, [r6, #0]
 800a856:	6825      	ldr	r5, [r4, #0]
 800a858:	f015 0506 	ands.w	r5, r5, #6
 800a85c:	d106      	bne.n	800a86c <_printf_common+0x48>
 800a85e:	f104 0a19 	add.w	sl, r4, #25
 800a862:	68e3      	ldr	r3, [r4, #12]
 800a864:	6832      	ldr	r2, [r6, #0]
 800a866:	1a9b      	subs	r3, r3, r2
 800a868:	42ab      	cmp	r3, r5
 800a86a:	dc26      	bgt.n	800a8ba <_printf_common+0x96>
 800a86c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a870:	1e13      	subs	r3, r2, #0
 800a872:	6822      	ldr	r2, [r4, #0]
 800a874:	bf18      	it	ne
 800a876:	2301      	movne	r3, #1
 800a878:	0692      	lsls	r2, r2, #26
 800a87a:	d42b      	bmi.n	800a8d4 <_printf_common+0xb0>
 800a87c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a880:	4649      	mov	r1, r9
 800a882:	4638      	mov	r0, r7
 800a884:	47c0      	blx	r8
 800a886:	3001      	adds	r0, #1
 800a888:	d01e      	beq.n	800a8c8 <_printf_common+0xa4>
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	68e5      	ldr	r5, [r4, #12]
 800a88e:	6832      	ldr	r2, [r6, #0]
 800a890:	f003 0306 	and.w	r3, r3, #6
 800a894:	2b04      	cmp	r3, #4
 800a896:	bf08      	it	eq
 800a898:	1aad      	subeq	r5, r5, r2
 800a89a:	68a3      	ldr	r3, [r4, #8]
 800a89c:	6922      	ldr	r2, [r4, #16]
 800a89e:	bf0c      	ite	eq
 800a8a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8a4:	2500      	movne	r5, #0
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	bfc4      	itt	gt
 800a8aa:	1a9b      	subgt	r3, r3, r2
 800a8ac:	18ed      	addgt	r5, r5, r3
 800a8ae:	2600      	movs	r6, #0
 800a8b0:	341a      	adds	r4, #26
 800a8b2:	42b5      	cmp	r5, r6
 800a8b4:	d11a      	bne.n	800a8ec <_printf_common+0xc8>
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	e008      	b.n	800a8cc <_printf_common+0xa8>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	4652      	mov	r2, sl
 800a8be:	4649      	mov	r1, r9
 800a8c0:	4638      	mov	r0, r7
 800a8c2:	47c0      	blx	r8
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	d103      	bne.n	800a8d0 <_printf_common+0xac>
 800a8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8d0:	3501      	adds	r5, #1
 800a8d2:	e7c6      	b.n	800a862 <_printf_common+0x3e>
 800a8d4:	18e1      	adds	r1, r4, r3
 800a8d6:	1c5a      	adds	r2, r3, #1
 800a8d8:	2030      	movs	r0, #48	; 0x30
 800a8da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8de:	4422      	add	r2, r4
 800a8e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8e8:	3302      	adds	r3, #2
 800a8ea:	e7c7      	b.n	800a87c <_printf_common+0x58>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	4622      	mov	r2, r4
 800a8f0:	4649      	mov	r1, r9
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	47c0      	blx	r8
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	d0e6      	beq.n	800a8c8 <_printf_common+0xa4>
 800a8fa:	3601      	adds	r6, #1
 800a8fc:	e7d9      	b.n	800a8b2 <_printf_common+0x8e>
	...

0800a900 <_printf_i>:
 800a900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a904:	7e0f      	ldrb	r7, [r1, #24]
 800a906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a908:	2f78      	cmp	r7, #120	; 0x78
 800a90a:	4691      	mov	r9, r2
 800a90c:	4680      	mov	r8, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	469a      	mov	sl, r3
 800a912:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a916:	d807      	bhi.n	800a928 <_printf_i+0x28>
 800a918:	2f62      	cmp	r7, #98	; 0x62
 800a91a:	d80a      	bhi.n	800a932 <_printf_i+0x32>
 800a91c:	2f00      	cmp	r7, #0
 800a91e:	f000 80d8 	beq.w	800aad2 <_printf_i+0x1d2>
 800a922:	2f58      	cmp	r7, #88	; 0x58
 800a924:	f000 80a3 	beq.w	800aa6e <_printf_i+0x16e>
 800a928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a92c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a930:	e03a      	b.n	800a9a8 <_printf_i+0xa8>
 800a932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a936:	2b15      	cmp	r3, #21
 800a938:	d8f6      	bhi.n	800a928 <_printf_i+0x28>
 800a93a:	a101      	add	r1, pc, #4	; (adr r1, 800a940 <_printf_i+0x40>)
 800a93c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a940:	0800a999 	.word	0x0800a999
 800a944:	0800a9ad 	.word	0x0800a9ad
 800a948:	0800a929 	.word	0x0800a929
 800a94c:	0800a929 	.word	0x0800a929
 800a950:	0800a929 	.word	0x0800a929
 800a954:	0800a929 	.word	0x0800a929
 800a958:	0800a9ad 	.word	0x0800a9ad
 800a95c:	0800a929 	.word	0x0800a929
 800a960:	0800a929 	.word	0x0800a929
 800a964:	0800a929 	.word	0x0800a929
 800a968:	0800a929 	.word	0x0800a929
 800a96c:	0800aab9 	.word	0x0800aab9
 800a970:	0800a9dd 	.word	0x0800a9dd
 800a974:	0800aa9b 	.word	0x0800aa9b
 800a978:	0800a929 	.word	0x0800a929
 800a97c:	0800a929 	.word	0x0800a929
 800a980:	0800aadb 	.word	0x0800aadb
 800a984:	0800a929 	.word	0x0800a929
 800a988:	0800a9dd 	.word	0x0800a9dd
 800a98c:	0800a929 	.word	0x0800a929
 800a990:	0800a929 	.word	0x0800a929
 800a994:	0800aaa3 	.word	0x0800aaa3
 800a998:	682b      	ldr	r3, [r5, #0]
 800a99a:	1d1a      	adds	r2, r3, #4
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	602a      	str	r2, [r5, #0]
 800a9a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e0a3      	b.n	800aaf4 <_printf_i+0x1f4>
 800a9ac:	6820      	ldr	r0, [r4, #0]
 800a9ae:	6829      	ldr	r1, [r5, #0]
 800a9b0:	0606      	lsls	r6, r0, #24
 800a9b2:	f101 0304 	add.w	r3, r1, #4
 800a9b6:	d50a      	bpl.n	800a9ce <_printf_i+0xce>
 800a9b8:	680e      	ldr	r6, [r1, #0]
 800a9ba:	602b      	str	r3, [r5, #0]
 800a9bc:	2e00      	cmp	r6, #0
 800a9be:	da03      	bge.n	800a9c8 <_printf_i+0xc8>
 800a9c0:	232d      	movs	r3, #45	; 0x2d
 800a9c2:	4276      	negs	r6, r6
 800a9c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9c8:	485e      	ldr	r0, [pc, #376]	; (800ab44 <_printf_i+0x244>)
 800a9ca:	230a      	movs	r3, #10
 800a9cc:	e019      	b.n	800aa02 <_printf_i+0x102>
 800a9ce:	680e      	ldr	r6, [r1, #0]
 800a9d0:	602b      	str	r3, [r5, #0]
 800a9d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9d6:	bf18      	it	ne
 800a9d8:	b236      	sxthne	r6, r6
 800a9da:	e7ef      	b.n	800a9bc <_printf_i+0xbc>
 800a9dc:	682b      	ldr	r3, [r5, #0]
 800a9de:	6820      	ldr	r0, [r4, #0]
 800a9e0:	1d19      	adds	r1, r3, #4
 800a9e2:	6029      	str	r1, [r5, #0]
 800a9e4:	0601      	lsls	r1, r0, #24
 800a9e6:	d501      	bpl.n	800a9ec <_printf_i+0xec>
 800a9e8:	681e      	ldr	r6, [r3, #0]
 800a9ea:	e002      	b.n	800a9f2 <_printf_i+0xf2>
 800a9ec:	0646      	lsls	r6, r0, #25
 800a9ee:	d5fb      	bpl.n	800a9e8 <_printf_i+0xe8>
 800a9f0:	881e      	ldrh	r6, [r3, #0]
 800a9f2:	4854      	ldr	r0, [pc, #336]	; (800ab44 <_printf_i+0x244>)
 800a9f4:	2f6f      	cmp	r7, #111	; 0x6f
 800a9f6:	bf0c      	ite	eq
 800a9f8:	2308      	moveq	r3, #8
 800a9fa:	230a      	movne	r3, #10
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aa02:	6865      	ldr	r5, [r4, #4]
 800aa04:	60a5      	str	r5, [r4, #8]
 800aa06:	2d00      	cmp	r5, #0
 800aa08:	bfa2      	ittt	ge
 800aa0a:	6821      	ldrge	r1, [r4, #0]
 800aa0c:	f021 0104 	bicge.w	r1, r1, #4
 800aa10:	6021      	strge	r1, [r4, #0]
 800aa12:	b90e      	cbnz	r6, 800aa18 <_printf_i+0x118>
 800aa14:	2d00      	cmp	r5, #0
 800aa16:	d04d      	beq.n	800aab4 <_printf_i+0x1b4>
 800aa18:	4615      	mov	r5, r2
 800aa1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa1e:	fb03 6711 	mls	r7, r3, r1, r6
 800aa22:	5dc7      	ldrb	r7, [r0, r7]
 800aa24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa28:	4637      	mov	r7, r6
 800aa2a:	42bb      	cmp	r3, r7
 800aa2c:	460e      	mov	r6, r1
 800aa2e:	d9f4      	bls.n	800aa1a <_printf_i+0x11a>
 800aa30:	2b08      	cmp	r3, #8
 800aa32:	d10b      	bne.n	800aa4c <_printf_i+0x14c>
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	07de      	lsls	r6, r3, #31
 800aa38:	d508      	bpl.n	800aa4c <_printf_i+0x14c>
 800aa3a:	6923      	ldr	r3, [r4, #16]
 800aa3c:	6861      	ldr	r1, [r4, #4]
 800aa3e:	4299      	cmp	r1, r3
 800aa40:	bfde      	ittt	le
 800aa42:	2330      	movle	r3, #48	; 0x30
 800aa44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa48:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa4c:	1b52      	subs	r2, r2, r5
 800aa4e:	6122      	str	r2, [r4, #16]
 800aa50:	f8cd a000 	str.w	sl, [sp]
 800aa54:	464b      	mov	r3, r9
 800aa56:	aa03      	add	r2, sp, #12
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	f7ff fee2 	bl	800a824 <_printf_common>
 800aa60:	3001      	adds	r0, #1
 800aa62:	d14c      	bne.n	800aafe <_printf_i+0x1fe>
 800aa64:	f04f 30ff 	mov.w	r0, #4294967295
 800aa68:	b004      	add	sp, #16
 800aa6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa6e:	4835      	ldr	r0, [pc, #212]	; (800ab44 <_printf_i+0x244>)
 800aa70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa74:	6829      	ldr	r1, [r5, #0]
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa7c:	6029      	str	r1, [r5, #0]
 800aa7e:	061d      	lsls	r5, r3, #24
 800aa80:	d514      	bpl.n	800aaac <_printf_i+0x1ac>
 800aa82:	07df      	lsls	r7, r3, #31
 800aa84:	bf44      	itt	mi
 800aa86:	f043 0320 	orrmi.w	r3, r3, #32
 800aa8a:	6023      	strmi	r3, [r4, #0]
 800aa8c:	b91e      	cbnz	r6, 800aa96 <_printf_i+0x196>
 800aa8e:	6823      	ldr	r3, [r4, #0]
 800aa90:	f023 0320 	bic.w	r3, r3, #32
 800aa94:	6023      	str	r3, [r4, #0]
 800aa96:	2310      	movs	r3, #16
 800aa98:	e7b0      	b.n	800a9fc <_printf_i+0xfc>
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	f043 0320 	orr.w	r3, r3, #32
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	2378      	movs	r3, #120	; 0x78
 800aaa4:	4828      	ldr	r0, [pc, #160]	; (800ab48 <_printf_i+0x248>)
 800aaa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aaaa:	e7e3      	b.n	800aa74 <_printf_i+0x174>
 800aaac:	0659      	lsls	r1, r3, #25
 800aaae:	bf48      	it	mi
 800aab0:	b2b6      	uxthmi	r6, r6
 800aab2:	e7e6      	b.n	800aa82 <_printf_i+0x182>
 800aab4:	4615      	mov	r5, r2
 800aab6:	e7bb      	b.n	800aa30 <_printf_i+0x130>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	6826      	ldr	r6, [r4, #0]
 800aabc:	6961      	ldr	r1, [r4, #20]
 800aabe:	1d18      	adds	r0, r3, #4
 800aac0:	6028      	str	r0, [r5, #0]
 800aac2:	0635      	lsls	r5, r6, #24
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	d501      	bpl.n	800aacc <_printf_i+0x1cc>
 800aac8:	6019      	str	r1, [r3, #0]
 800aaca:	e002      	b.n	800aad2 <_printf_i+0x1d2>
 800aacc:	0670      	lsls	r0, r6, #25
 800aace:	d5fb      	bpl.n	800aac8 <_printf_i+0x1c8>
 800aad0:	8019      	strh	r1, [r3, #0]
 800aad2:	2300      	movs	r3, #0
 800aad4:	6123      	str	r3, [r4, #16]
 800aad6:	4615      	mov	r5, r2
 800aad8:	e7ba      	b.n	800aa50 <_printf_i+0x150>
 800aada:	682b      	ldr	r3, [r5, #0]
 800aadc:	1d1a      	adds	r2, r3, #4
 800aade:	602a      	str	r2, [r5, #0]
 800aae0:	681d      	ldr	r5, [r3, #0]
 800aae2:	6862      	ldr	r2, [r4, #4]
 800aae4:	2100      	movs	r1, #0
 800aae6:	4628      	mov	r0, r5
 800aae8:	f7f5 fba2 	bl	8000230 <memchr>
 800aaec:	b108      	cbz	r0, 800aaf2 <_printf_i+0x1f2>
 800aaee:	1b40      	subs	r0, r0, r5
 800aaf0:	6060      	str	r0, [r4, #4]
 800aaf2:	6863      	ldr	r3, [r4, #4]
 800aaf4:	6123      	str	r3, [r4, #16]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aafc:	e7a8      	b.n	800aa50 <_printf_i+0x150>
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	462a      	mov	r2, r5
 800ab02:	4649      	mov	r1, r9
 800ab04:	4640      	mov	r0, r8
 800ab06:	47d0      	blx	sl
 800ab08:	3001      	adds	r0, #1
 800ab0a:	d0ab      	beq.n	800aa64 <_printf_i+0x164>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	079b      	lsls	r3, r3, #30
 800ab10:	d413      	bmi.n	800ab3a <_printf_i+0x23a>
 800ab12:	68e0      	ldr	r0, [r4, #12]
 800ab14:	9b03      	ldr	r3, [sp, #12]
 800ab16:	4298      	cmp	r0, r3
 800ab18:	bfb8      	it	lt
 800ab1a:	4618      	movlt	r0, r3
 800ab1c:	e7a4      	b.n	800aa68 <_printf_i+0x168>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	4632      	mov	r2, r6
 800ab22:	4649      	mov	r1, r9
 800ab24:	4640      	mov	r0, r8
 800ab26:	47d0      	blx	sl
 800ab28:	3001      	adds	r0, #1
 800ab2a:	d09b      	beq.n	800aa64 <_printf_i+0x164>
 800ab2c:	3501      	adds	r5, #1
 800ab2e:	68e3      	ldr	r3, [r4, #12]
 800ab30:	9903      	ldr	r1, [sp, #12]
 800ab32:	1a5b      	subs	r3, r3, r1
 800ab34:	42ab      	cmp	r3, r5
 800ab36:	dcf2      	bgt.n	800ab1e <_printf_i+0x21e>
 800ab38:	e7eb      	b.n	800ab12 <_printf_i+0x212>
 800ab3a:	2500      	movs	r5, #0
 800ab3c:	f104 0619 	add.w	r6, r4, #25
 800ab40:	e7f5      	b.n	800ab2e <_printf_i+0x22e>
 800ab42:	bf00      	nop
 800ab44:	0800eec6 	.word	0x0800eec6
 800ab48:	0800eed7 	.word	0x0800eed7

0800ab4c <_scanf_float>:
 800ab4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab50:	b087      	sub	sp, #28
 800ab52:	4617      	mov	r7, r2
 800ab54:	9303      	str	r3, [sp, #12]
 800ab56:	688b      	ldr	r3, [r1, #8]
 800ab58:	1e5a      	subs	r2, r3, #1
 800ab5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ab5e:	bf83      	ittte	hi
 800ab60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ab64:	195b      	addhi	r3, r3, r5
 800ab66:	9302      	strhi	r3, [sp, #8]
 800ab68:	2300      	movls	r3, #0
 800ab6a:	bf86      	itte	hi
 800ab6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ab70:	608b      	strhi	r3, [r1, #8]
 800ab72:	9302      	strls	r3, [sp, #8]
 800ab74:	680b      	ldr	r3, [r1, #0]
 800ab76:	468b      	mov	fp, r1
 800ab78:	2500      	movs	r5, #0
 800ab7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ab7e:	f84b 3b1c 	str.w	r3, [fp], #28
 800ab82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ab86:	4680      	mov	r8, r0
 800ab88:	460c      	mov	r4, r1
 800ab8a:	465e      	mov	r6, fp
 800ab8c:	46aa      	mov	sl, r5
 800ab8e:	46a9      	mov	r9, r5
 800ab90:	9501      	str	r5, [sp, #4]
 800ab92:	68a2      	ldr	r2, [r4, #8]
 800ab94:	b152      	cbz	r2, 800abac <_scanf_float+0x60>
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	2b4e      	cmp	r3, #78	; 0x4e
 800ab9c:	d864      	bhi.n	800ac68 <_scanf_float+0x11c>
 800ab9e:	2b40      	cmp	r3, #64	; 0x40
 800aba0:	d83c      	bhi.n	800ac1c <_scanf_float+0xd0>
 800aba2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800aba6:	b2c8      	uxtb	r0, r1
 800aba8:	280e      	cmp	r0, #14
 800abaa:	d93a      	bls.n	800ac22 <_scanf_float+0xd6>
 800abac:	f1b9 0f00 	cmp.w	r9, #0
 800abb0:	d003      	beq.n	800abba <_scanf_float+0x6e>
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800abbe:	f1ba 0f01 	cmp.w	sl, #1
 800abc2:	f200 8113 	bhi.w	800adec <_scanf_float+0x2a0>
 800abc6:	455e      	cmp	r6, fp
 800abc8:	f200 8105 	bhi.w	800add6 <_scanf_float+0x28a>
 800abcc:	2501      	movs	r5, #1
 800abce:	4628      	mov	r0, r5
 800abd0:	b007      	add	sp, #28
 800abd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800abda:	2a0d      	cmp	r2, #13
 800abdc:	d8e6      	bhi.n	800abac <_scanf_float+0x60>
 800abde:	a101      	add	r1, pc, #4	; (adr r1, 800abe4 <_scanf_float+0x98>)
 800abe0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800abe4:	0800ad23 	.word	0x0800ad23
 800abe8:	0800abad 	.word	0x0800abad
 800abec:	0800abad 	.word	0x0800abad
 800abf0:	0800abad 	.word	0x0800abad
 800abf4:	0800ad83 	.word	0x0800ad83
 800abf8:	0800ad5b 	.word	0x0800ad5b
 800abfc:	0800abad 	.word	0x0800abad
 800ac00:	0800abad 	.word	0x0800abad
 800ac04:	0800ad31 	.word	0x0800ad31
 800ac08:	0800abad 	.word	0x0800abad
 800ac0c:	0800abad 	.word	0x0800abad
 800ac10:	0800abad 	.word	0x0800abad
 800ac14:	0800abad 	.word	0x0800abad
 800ac18:	0800ace9 	.word	0x0800ace9
 800ac1c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ac20:	e7db      	b.n	800abda <_scanf_float+0x8e>
 800ac22:	290e      	cmp	r1, #14
 800ac24:	d8c2      	bhi.n	800abac <_scanf_float+0x60>
 800ac26:	a001      	add	r0, pc, #4	; (adr r0, 800ac2c <_scanf_float+0xe0>)
 800ac28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ac2c:	0800acdb 	.word	0x0800acdb
 800ac30:	0800abad 	.word	0x0800abad
 800ac34:	0800acdb 	.word	0x0800acdb
 800ac38:	0800ad6f 	.word	0x0800ad6f
 800ac3c:	0800abad 	.word	0x0800abad
 800ac40:	0800ac89 	.word	0x0800ac89
 800ac44:	0800acc5 	.word	0x0800acc5
 800ac48:	0800acc5 	.word	0x0800acc5
 800ac4c:	0800acc5 	.word	0x0800acc5
 800ac50:	0800acc5 	.word	0x0800acc5
 800ac54:	0800acc5 	.word	0x0800acc5
 800ac58:	0800acc5 	.word	0x0800acc5
 800ac5c:	0800acc5 	.word	0x0800acc5
 800ac60:	0800acc5 	.word	0x0800acc5
 800ac64:	0800acc5 	.word	0x0800acc5
 800ac68:	2b6e      	cmp	r3, #110	; 0x6e
 800ac6a:	d809      	bhi.n	800ac80 <_scanf_float+0x134>
 800ac6c:	2b60      	cmp	r3, #96	; 0x60
 800ac6e:	d8b2      	bhi.n	800abd6 <_scanf_float+0x8a>
 800ac70:	2b54      	cmp	r3, #84	; 0x54
 800ac72:	d077      	beq.n	800ad64 <_scanf_float+0x218>
 800ac74:	2b59      	cmp	r3, #89	; 0x59
 800ac76:	d199      	bne.n	800abac <_scanf_float+0x60>
 800ac78:	2d07      	cmp	r5, #7
 800ac7a:	d197      	bne.n	800abac <_scanf_float+0x60>
 800ac7c:	2508      	movs	r5, #8
 800ac7e:	e029      	b.n	800acd4 <_scanf_float+0x188>
 800ac80:	2b74      	cmp	r3, #116	; 0x74
 800ac82:	d06f      	beq.n	800ad64 <_scanf_float+0x218>
 800ac84:	2b79      	cmp	r3, #121	; 0x79
 800ac86:	e7f6      	b.n	800ac76 <_scanf_float+0x12a>
 800ac88:	6821      	ldr	r1, [r4, #0]
 800ac8a:	05c8      	lsls	r0, r1, #23
 800ac8c:	d51a      	bpl.n	800acc4 <_scanf_float+0x178>
 800ac8e:	9b02      	ldr	r3, [sp, #8]
 800ac90:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ac94:	6021      	str	r1, [r4, #0]
 800ac96:	f109 0901 	add.w	r9, r9, #1
 800ac9a:	b11b      	cbz	r3, 800aca4 <_scanf_float+0x158>
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	3201      	adds	r2, #1
 800aca0:	9302      	str	r3, [sp, #8]
 800aca2:	60a2      	str	r2, [r4, #8]
 800aca4:	68a3      	ldr	r3, [r4, #8]
 800aca6:	3b01      	subs	r3, #1
 800aca8:	60a3      	str	r3, [r4, #8]
 800acaa:	6923      	ldr	r3, [r4, #16]
 800acac:	3301      	adds	r3, #1
 800acae:	6123      	str	r3, [r4, #16]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	3b01      	subs	r3, #1
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	607b      	str	r3, [r7, #4]
 800acb8:	f340 8084 	ble.w	800adc4 <_scanf_float+0x278>
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	3301      	adds	r3, #1
 800acc0:	603b      	str	r3, [r7, #0]
 800acc2:	e766      	b.n	800ab92 <_scanf_float+0x46>
 800acc4:	eb1a 0f05 	cmn.w	sl, r5
 800acc8:	f47f af70 	bne.w	800abac <_scanf_float+0x60>
 800accc:	6822      	ldr	r2, [r4, #0]
 800acce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800acd2:	6022      	str	r2, [r4, #0]
 800acd4:	f806 3b01 	strb.w	r3, [r6], #1
 800acd8:	e7e4      	b.n	800aca4 <_scanf_float+0x158>
 800acda:	6822      	ldr	r2, [r4, #0]
 800acdc:	0610      	lsls	r0, r2, #24
 800acde:	f57f af65 	bpl.w	800abac <_scanf_float+0x60>
 800ace2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ace6:	e7f4      	b.n	800acd2 <_scanf_float+0x186>
 800ace8:	f1ba 0f00 	cmp.w	sl, #0
 800acec:	d10e      	bne.n	800ad0c <_scanf_float+0x1c0>
 800acee:	f1b9 0f00 	cmp.w	r9, #0
 800acf2:	d10e      	bne.n	800ad12 <_scanf_float+0x1c6>
 800acf4:	6822      	ldr	r2, [r4, #0]
 800acf6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800acfa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800acfe:	d108      	bne.n	800ad12 <_scanf_float+0x1c6>
 800ad00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad04:	6022      	str	r2, [r4, #0]
 800ad06:	f04f 0a01 	mov.w	sl, #1
 800ad0a:	e7e3      	b.n	800acd4 <_scanf_float+0x188>
 800ad0c:	f1ba 0f02 	cmp.w	sl, #2
 800ad10:	d055      	beq.n	800adbe <_scanf_float+0x272>
 800ad12:	2d01      	cmp	r5, #1
 800ad14:	d002      	beq.n	800ad1c <_scanf_float+0x1d0>
 800ad16:	2d04      	cmp	r5, #4
 800ad18:	f47f af48 	bne.w	800abac <_scanf_float+0x60>
 800ad1c:	3501      	adds	r5, #1
 800ad1e:	b2ed      	uxtb	r5, r5
 800ad20:	e7d8      	b.n	800acd4 <_scanf_float+0x188>
 800ad22:	f1ba 0f01 	cmp.w	sl, #1
 800ad26:	f47f af41 	bne.w	800abac <_scanf_float+0x60>
 800ad2a:	f04f 0a02 	mov.w	sl, #2
 800ad2e:	e7d1      	b.n	800acd4 <_scanf_float+0x188>
 800ad30:	b97d      	cbnz	r5, 800ad52 <_scanf_float+0x206>
 800ad32:	f1b9 0f00 	cmp.w	r9, #0
 800ad36:	f47f af3c 	bne.w	800abb2 <_scanf_float+0x66>
 800ad3a:	6822      	ldr	r2, [r4, #0]
 800ad3c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ad40:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ad44:	f47f af39 	bne.w	800abba <_scanf_float+0x6e>
 800ad48:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad4c:	6022      	str	r2, [r4, #0]
 800ad4e:	2501      	movs	r5, #1
 800ad50:	e7c0      	b.n	800acd4 <_scanf_float+0x188>
 800ad52:	2d03      	cmp	r5, #3
 800ad54:	d0e2      	beq.n	800ad1c <_scanf_float+0x1d0>
 800ad56:	2d05      	cmp	r5, #5
 800ad58:	e7de      	b.n	800ad18 <_scanf_float+0x1cc>
 800ad5a:	2d02      	cmp	r5, #2
 800ad5c:	f47f af26 	bne.w	800abac <_scanf_float+0x60>
 800ad60:	2503      	movs	r5, #3
 800ad62:	e7b7      	b.n	800acd4 <_scanf_float+0x188>
 800ad64:	2d06      	cmp	r5, #6
 800ad66:	f47f af21 	bne.w	800abac <_scanf_float+0x60>
 800ad6a:	2507      	movs	r5, #7
 800ad6c:	e7b2      	b.n	800acd4 <_scanf_float+0x188>
 800ad6e:	6822      	ldr	r2, [r4, #0]
 800ad70:	0591      	lsls	r1, r2, #22
 800ad72:	f57f af1b 	bpl.w	800abac <_scanf_float+0x60>
 800ad76:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ad7a:	6022      	str	r2, [r4, #0]
 800ad7c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ad80:	e7a8      	b.n	800acd4 <_scanf_float+0x188>
 800ad82:	6822      	ldr	r2, [r4, #0]
 800ad84:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ad88:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ad8c:	d006      	beq.n	800ad9c <_scanf_float+0x250>
 800ad8e:	0550      	lsls	r0, r2, #21
 800ad90:	f57f af0c 	bpl.w	800abac <_scanf_float+0x60>
 800ad94:	f1b9 0f00 	cmp.w	r9, #0
 800ad98:	f43f af0f 	beq.w	800abba <_scanf_float+0x6e>
 800ad9c:	0591      	lsls	r1, r2, #22
 800ad9e:	bf58      	it	pl
 800ada0:	9901      	ldrpl	r1, [sp, #4]
 800ada2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ada6:	bf58      	it	pl
 800ada8:	eba9 0101 	subpl.w	r1, r9, r1
 800adac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800adb0:	bf58      	it	pl
 800adb2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800adb6:	6022      	str	r2, [r4, #0]
 800adb8:	f04f 0900 	mov.w	r9, #0
 800adbc:	e78a      	b.n	800acd4 <_scanf_float+0x188>
 800adbe:	f04f 0a03 	mov.w	sl, #3
 800adc2:	e787      	b.n	800acd4 <_scanf_float+0x188>
 800adc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800adc8:	4639      	mov	r1, r7
 800adca:	4640      	mov	r0, r8
 800adcc:	4798      	blx	r3
 800adce:	2800      	cmp	r0, #0
 800add0:	f43f aedf 	beq.w	800ab92 <_scanf_float+0x46>
 800add4:	e6ea      	b.n	800abac <_scanf_float+0x60>
 800add6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800adde:	463a      	mov	r2, r7
 800ade0:	4640      	mov	r0, r8
 800ade2:	4798      	blx	r3
 800ade4:	6923      	ldr	r3, [r4, #16]
 800ade6:	3b01      	subs	r3, #1
 800ade8:	6123      	str	r3, [r4, #16]
 800adea:	e6ec      	b.n	800abc6 <_scanf_float+0x7a>
 800adec:	1e6b      	subs	r3, r5, #1
 800adee:	2b06      	cmp	r3, #6
 800adf0:	d825      	bhi.n	800ae3e <_scanf_float+0x2f2>
 800adf2:	2d02      	cmp	r5, #2
 800adf4:	d836      	bhi.n	800ae64 <_scanf_float+0x318>
 800adf6:	455e      	cmp	r6, fp
 800adf8:	f67f aee8 	bls.w	800abcc <_scanf_float+0x80>
 800adfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae04:	463a      	mov	r2, r7
 800ae06:	4640      	mov	r0, r8
 800ae08:	4798      	blx	r3
 800ae0a:	6923      	ldr	r3, [r4, #16]
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	6123      	str	r3, [r4, #16]
 800ae10:	e7f1      	b.n	800adf6 <_scanf_float+0x2aa>
 800ae12:	9802      	ldr	r0, [sp, #8]
 800ae14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ae1c:	9002      	str	r0, [sp, #8]
 800ae1e:	463a      	mov	r2, r7
 800ae20:	4640      	mov	r0, r8
 800ae22:	4798      	blx	r3
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	3b01      	subs	r3, #1
 800ae28:	6123      	str	r3, [r4, #16]
 800ae2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae2e:	fa5f fa8a 	uxtb.w	sl, sl
 800ae32:	f1ba 0f02 	cmp.w	sl, #2
 800ae36:	d1ec      	bne.n	800ae12 <_scanf_float+0x2c6>
 800ae38:	3d03      	subs	r5, #3
 800ae3a:	b2ed      	uxtb	r5, r5
 800ae3c:	1b76      	subs	r6, r6, r5
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	05da      	lsls	r2, r3, #23
 800ae42:	d52f      	bpl.n	800aea4 <_scanf_float+0x358>
 800ae44:	055b      	lsls	r3, r3, #21
 800ae46:	d510      	bpl.n	800ae6a <_scanf_float+0x31e>
 800ae48:	455e      	cmp	r6, fp
 800ae4a:	f67f aebf 	bls.w	800abcc <_scanf_float+0x80>
 800ae4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae56:	463a      	mov	r2, r7
 800ae58:	4640      	mov	r0, r8
 800ae5a:	4798      	blx	r3
 800ae5c:	6923      	ldr	r3, [r4, #16]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	6123      	str	r3, [r4, #16]
 800ae62:	e7f1      	b.n	800ae48 <_scanf_float+0x2fc>
 800ae64:	46aa      	mov	sl, r5
 800ae66:	9602      	str	r6, [sp, #8]
 800ae68:	e7df      	b.n	800ae2a <_scanf_float+0x2de>
 800ae6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ae6e:	6923      	ldr	r3, [r4, #16]
 800ae70:	2965      	cmp	r1, #101	; 0x65
 800ae72:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae76:	f106 35ff 	add.w	r5, r6, #4294967295
 800ae7a:	6123      	str	r3, [r4, #16]
 800ae7c:	d00c      	beq.n	800ae98 <_scanf_float+0x34c>
 800ae7e:	2945      	cmp	r1, #69	; 0x45
 800ae80:	d00a      	beq.n	800ae98 <_scanf_float+0x34c>
 800ae82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae86:	463a      	mov	r2, r7
 800ae88:	4640      	mov	r0, r8
 800ae8a:	4798      	blx	r3
 800ae8c:	6923      	ldr	r3, [r4, #16]
 800ae8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ae92:	3b01      	subs	r3, #1
 800ae94:	1eb5      	subs	r5, r6, #2
 800ae96:	6123      	str	r3, [r4, #16]
 800ae98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae9c:	463a      	mov	r2, r7
 800ae9e:	4640      	mov	r0, r8
 800aea0:	4798      	blx	r3
 800aea2:	462e      	mov	r6, r5
 800aea4:	6825      	ldr	r5, [r4, #0]
 800aea6:	f015 0510 	ands.w	r5, r5, #16
 800aeaa:	d159      	bne.n	800af60 <_scanf_float+0x414>
 800aeac:	7035      	strb	r5, [r6, #0]
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aeb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeb8:	d11b      	bne.n	800aef2 <_scanf_float+0x3a6>
 800aeba:	9b01      	ldr	r3, [sp, #4]
 800aebc:	454b      	cmp	r3, r9
 800aebe:	eba3 0209 	sub.w	r2, r3, r9
 800aec2:	d123      	bne.n	800af0c <_scanf_float+0x3c0>
 800aec4:	2200      	movs	r2, #0
 800aec6:	4659      	mov	r1, fp
 800aec8:	4640      	mov	r0, r8
 800aeca:	f000 feaf 	bl	800bc2c <_strtod_r>
 800aece:	6822      	ldr	r2, [r4, #0]
 800aed0:	9b03      	ldr	r3, [sp, #12]
 800aed2:	f012 0f02 	tst.w	r2, #2
 800aed6:	ec57 6b10 	vmov	r6, r7, d0
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	d021      	beq.n	800af22 <_scanf_float+0x3d6>
 800aede:	9903      	ldr	r1, [sp, #12]
 800aee0:	1d1a      	adds	r2, r3, #4
 800aee2:	600a      	str	r2, [r1, #0]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	e9c3 6700 	strd	r6, r7, [r3]
 800aeea:	68e3      	ldr	r3, [r4, #12]
 800aeec:	3301      	adds	r3, #1
 800aeee:	60e3      	str	r3, [r4, #12]
 800aef0:	e66d      	b.n	800abce <_scanf_float+0x82>
 800aef2:	9b04      	ldr	r3, [sp, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d0e5      	beq.n	800aec4 <_scanf_float+0x378>
 800aef8:	9905      	ldr	r1, [sp, #20]
 800aefa:	230a      	movs	r3, #10
 800aefc:	462a      	mov	r2, r5
 800aefe:	3101      	adds	r1, #1
 800af00:	4640      	mov	r0, r8
 800af02:	f000 ffd3 	bl	800beac <_strtol_r>
 800af06:	9b04      	ldr	r3, [sp, #16]
 800af08:	9e05      	ldr	r6, [sp, #20]
 800af0a:	1ac2      	subs	r2, r0, r3
 800af0c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800af10:	429e      	cmp	r6, r3
 800af12:	bf28      	it	cs
 800af14:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800af18:	4912      	ldr	r1, [pc, #72]	; (800af64 <_scanf_float+0x418>)
 800af1a:	4630      	mov	r0, r6
 800af1c:	f000 f82c 	bl	800af78 <siprintf>
 800af20:	e7d0      	b.n	800aec4 <_scanf_float+0x378>
 800af22:	9903      	ldr	r1, [sp, #12]
 800af24:	f012 0f04 	tst.w	r2, #4
 800af28:	f103 0204 	add.w	r2, r3, #4
 800af2c:	600a      	str	r2, [r1, #0]
 800af2e:	d1d9      	bne.n	800aee4 <_scanf_float+0x398>
 800af30:	f8d3 8000 	ldr.w	r8, [r3]
 800af34:	ee10 2a10 	vmov	r2, s0
 800af38:	ee10 0a10 	vmov	r0, s0
 800af3c:	463b      	mov	r3, r7
 800af3e:	4639      	mov	r1, r7
 800af40:	f7f5 fe1c 	bl	8000b7c <__aeabi_dcmpun>
 800af44:	b128      	cbz	r0, 800af52 <_scanf_float+0x406>
 800af46:	4808      	ldr	r0, [pc, #32]	; (800af68 <_scanf_float+0x41c>)
 800af48:	f000 f810 	bl	800af6c <nanf>
 800af4c:	ed88 0a00 	vstr	s0, [r8]
 800af50:	e7cb      	b.n	800aeea <_scanf_float+0x39e>
 800af52:	4630      	mov	r0, r6
 800af54:	4639      	mov	r1, r7
 800af56:	f7f5 fe6f 	bl	8000c38 <__aeabi_d2f>
 800af5a:	f8c8 0000 	str.w	r0, [r8]
 800af5e:	e7c4      	b.n	800aeea <_scanf_float+0x39e>
 800af60:	2500      	movs	r5, #0
 800af62:	e634      	b.n	800abce <_scanf_float+0x82>
 800af64:	0800eee8 	.word	0x0800eee8
 800af68:	0800efef 	.word	0x0800efef

0800af6c <nanf>:
 800af6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800af74 <nanf+0x8>
 800af70:	4770      	bx	lr
 800af72:	bf00      	nop
 800af74:	7fc00000 	.word	0x7fc00000

0800af78 <siprintf>:
 800af78:	b40e      	push	{r1, r2, r3}
 800af7a:	b500      	push	{lr}
 800af7c:	b09c      	sub	sp, #112	; 0x70
 800af7e:	ab1d      	add	r3, sp, #116	; 0x74
 800af80:	9002      	str	r0, [sp, #8]
 800af82:	9006      	str	r0, [sp, #24]
 800af84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af88:	4809      	ldr	r0, [pc, #36]	; (800afb0 <siprintf+0x38>)
 800af8a:	9107      	str	r1, [sp, #28]
 800af8c:	9104      	str	r1, [sp, #16]
 800af8e:	4909      	ldr	r1, [pc, #36]	; (800afb4 <siprintf+0x3c>)
 800af90:	f853 2b04 	ldr.w	r2, [r3], #4
 800af94:	9105      	str	r1, [sp, #20]
 800af96:	6800      	ldr	r0, [r0, #0]
 800af98:	9301      	str	r3, [sp, #4]
 800af9a:	a902      	add	r1, sp, #8
 800af9c:	f002 ffde 	bl	800df5c <_svfiprintf_r>
 800afa0:	9b02      	ldr	r3, [sp, #8]
 800afa2:	2200      	movs	r2, #0
 800afa4:	701a      	strb	r2, [r3, #0]
 800afa6:	b01c      	add	sp, #112	; 0x70
 800afa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afac:	b003      	add	sp, #12
 800afae:	4770      	bx	lr
 800afb0:	2000001c 	.word	0x2000001c
 800afb4:	ffff0208 	.word	0xffff0208

0800afb8 <strstr>:
 800afb8:	780a      	ldrb	r2, [r1, #0]
 800afba:	b570      	push	{r4, r5, r6, lr}
 800afbc:	b96a      	cbnz	r2, 800afda <strstr+0x22>
 800afbe:	bd70      	pop	{r4, r5, r6, pc}
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d109      	bne.n	800afd8 <strstr+0x20>
 800afc4:	460c      	mov	r4, r1
 800afc6:	4605      	mov	r5, r0
 800afc8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0f6      	beq.n	800afbe <strstr+0x6>
 800afd0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800afd4:	429e      	cmp	r6, r3
 800afd6:	d0f7      	beq.n	800afc8 <strstr+0x10>
 800afd8:	3001      	adds	r0, #1
 800afda:	7803      	ldrb	r3, [r0, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1ef      	bne.n	800afc0 <strstr+0x8>
 800afe0:	4618      	mov	r0, r3
 800afe2:	e7ec      	b.n	800afbe <strstr+0x6>

0800afe4 <sulp>:
 800afe4:	b570      	push	{r4, r5, r6, lr}
 800afe6:	4604      	mov	r4, r0
 800afe8:	460d      	mov	r5, r1
 800afea:	ec45 4b10 	vmov	d0, r4, r5
 800afee:	4616      	mov	r6, r2
 800aff0:	f002 fd12 	bl	800da18 <__ulp>
 800aff4:	ec51 0b10 	vmov	r0, r1, d0
 800aff8:	b17e      	cbz	r6, 800b01a <sulp+0x36>
 800affa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800affe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b002:	2b00      	cmp	r3, #0
 800b004:	dd09      	ble.n	800b01a <sulp+0x36>
 800b006:	051b      	lsls	r3, r3, #20
 800b008:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b00c:	2400      	movs	r4, #0
 800b00e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b012:	4622      	mov	r2, r4
 800b014:	462b      	mov	r3, r5
 800b016:	f7f5 fb17 	bl	8000648 <__aeabi_dmul>
 800b01a:	bd70      	pop	{r4, r5, r6, pc}
 800b01c:	0000      	movs	r0, r0
	...

0800b020 <_strtod_l>:
 800b020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b024:	ed2d 8b02 	vpush	{d8}
 800b028:	b09d      	sub	sp, #116	; 0x74
 800b02a:	461f      	mov	r7, r3
 800b02c:	2300      	movs	r3, #0
 800b02e:	9318      	str	r3, [sp, #96]	; 0x60
 800b030:	4ba2      	ldr	r3, [pc, #648]	; (800b2bc <_strtod_l+0x29c>)
 800b032:	9213      	str	r2, [sp, #76]	; 0x4c
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	9305      	str	r3, [sp, #20]
 800b038:	4604      	mov	r4, r0
 800b03a:	4618      	mov	r0, r3
 800b03c:	4688      	mov	r8, r1
 800b03e:	f7f5 f8ef 	bl	8000220 <strlen>
 800b042:	f04f 0a00 	mov.w	sl, #0
 800b046:	4605      	mov	r5, r0
 800b048:	f04f 0b00 	mov.w	fp, #0
 800b04c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b050:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b052:	781a      	ldrb	r2, [r3, #0]
 800b054:	2a2b      	cmp	r2, #43	; 0x2b
 800b056:	d04e      	beq.n	800b0f6 <_strtod_l+0xd6>
 800b058:	d83b      	bhi.n	800b0d2 <_strtod_l+0xb2>
 800b05a:	2a0d      	cmp	r2, #13
 800b05c:	d834      	bhi.n	800b0c8 <_strtod_l+0xa8>
 800b05e:	2a08      	cmp	r2, #8
 800b060:	d834      	bhi.n	800b0cc <_strtod_l+0xac>
 800b062:	2a00      	cmp	r2, #0
 800b064:	d03e      	beq.n	800b0e4 <_strtod_l+0xc4>
 800b066:	2300      	movs	r3, #0
 800b068:	930a      	str	r3, [sp, #40]	; 0x28
 800b06a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b06c:	7833      	ldrb	r3, [r6, #0]
 800b06e:	2b30      	cmp	r3, #48	; 0x30
 800b070:	f040 80b0 	bne.w	800b1d4 <_strtod_l+0x1b4>
 800b074:	7873      	ldrb	r3, [r6, #1]
 800b076:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b07a:	2b58      	cmp	r3, #88	; 0x58
 800b07c:	d168      	bne.n	800b150 <_strtod_l+0x130>
 800b07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b080:	9301      	str	r3, [sp, #4]
 800b082:	ab18      	add	r3, sp, #96	; 0x60
 800b084:	9702      	str	r7, [sp, #8]
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	4a8d      	ldr	r2, [pc, #564]	; (800b2c0 <_strtod_l+0x2a0>)
 800b08a:	ab19      	add	r3, sp, #100	; 0x64
 800b08c:	a917      	add	r1, sp, #92	; 0x5c
 800b08e:	4620      	mov	r0, r4
 800b090:	f001 fe2a 	bl	800cce8 <__gethex>
 800b094:	f010 0707 	ands.w	r7, r0, #7
 800b098:	4605      	mov	r5, r0
 800b09a:	d005      	beq.n	800b0a8 <_strtod_l+0x88>
 800b09c:	2f06      	cmp	r7, #6
 800b09e:	d12c      	bne.n	800b0fa <_strtod_l+0xda>
 800b0a0:	3601      	adds	r6, #1
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	9617      	str	r6, [sp, #92]	; 0x5c
 800b0a6:	930a      	str	r3, [sp, #40]	; 0x28
 800b0a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f040 8590 	bne.w	800bbd0 <_strtod_l+0xbb0>
 800b0b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0b2:	b1eb      	cbz	r3, 800b0f0 <_strtod_l+0xd0>
 800b0b4:	4652      	mov	r2, sl
 800b0b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b0ba:	ec43 2b10 	vmov	d0, r2, r3
 800b0be:	b01d      	add	sp, #116	; 0x74
 800b0c0:	ecbd 8b02 	vpop	{d8}
 800b0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c8:	2a20      	cmp	r2, #32
 800b0ca:	d1cc      	bne.n	800b066 <_strtod_l+0x46>
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0d0:	e7be      	b.n	800b050 <_strtod_l+0x30>
 800b0d2:	2a2d      	cmp	r2, #45	; 0x2d
 800b0d4:	d1c7      	bne.n	800b066 <_strtod_l+0x46>
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	920a      	str	r2, [sp, #40]	; 0x28
 800b0da:	1c5a      	adds	r2, r3, #1
 800b0dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800b0de:	785b      	ldrb	r3, [r3, #1]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d1c2      	bne.n	800b06a <_strtod_l+0x4a>
 800b0e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b0e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f040 856e 	bne.w	800bbcc <_strtod_l+0xbac>
 800b0f0:	4652      	mov	r2, sl
 800b0f2:	465b      	mov	r3, fp
 800b0f4:	e7e1      	b.n	800b0ba <_strtod_l+0x9a>
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	e7ee      	b.n	800b0d8 <_strtod_l+0xb8>
 800b0fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b0fc:	b13a      	cbz	r2, 800b10e <_strtod_l+0xee>
 800b0fe:	2135      	movs	r1, #53	; 0x35
 800b100:	a81a      	add	r0, sp, #104	; 0x68
 800b102:	f002 fd94 	bl	800dc2e <__copybits>
 800b106:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b108:	4620      	mov	r0, r4
 800b10a:	f002 f953 	bl	800d3b4 <_Bfree>
 800b10e:	3f01      	subs	r7, #1
 800b110:	2f04      	cmp	r7, #4
 800b112:	d806      	bhi.n	800b122 <_strtod_l+0x102>
 800b114:	e8df f007 	tbb	[pc, r7]
 800b118:	1714030a 	.word	0x1714030a
 800b11c:	0a          	.byte	0x0a
 800b11d:	00          	.byte	0x00
 800b11e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b122:	0728      	lsls	r0, r5, #28
 800b124:	d5c0      	bpl.n	800b0a8 <_strtod_l+0x88>
 800b126:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b12a:	e7bd      	b.n	800b0a8 <_strtod_l+0x88>
 800b12c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b130:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b132:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b136:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b13a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b13e:	e7f0      	b.n	800b122 <_strtod_l+0x102>
 800b140:	f8df b180 	ldr.w	fp, [pc, #384]	; 800b2c4 <_strtod_l+0x2a4>
 800b144:	e7ed      	b.n	800b122 <_strtod_l+0x102>
 800b146:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b14a:	f04f 3aff 	mov.w	sl, #4294967295
 800b14e:	e7e8      	b.n	800b122 <_strtod_l+0x102>
 800b150:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	9217      	str	r2, [sp, #92]	; 0x5c
 800b156:	785b      	ldrb	r3, [r3, #1]
 800b158:	2b30      	cmp	r3, #48	; 0x30
 800b15a:	d0f9      	beq.n	800b150 <_strtod_l+0x130>
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d0a3      	beq.n	800b0a8 <_strtod_l+0x88>
 800b160:	2301      	movs	r3, #1
 800b162:	f04f 0900 	mov.w	r9, #0
 800b166:	9304      	str	r3, [sp, #16]
 800b168:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b16a:	9308      	str	r3, [sp, #32]
 800b16c:	f8cd 901c 	str.w	r9, [sp, #28]
 800b170:	464f      	mov	r7, r9
 800b172:	220a      	movs	r2, #10
 800b174:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b176:	7806      	ldrb	r6, [r0, #0]
 800b178:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b17c:	b2d9      	uxtb	r1, r3
 800b17e:	2909      	cmp	r1, #9
 800b180:	d92a      	bls.n	800b1d8 <_strtod_l+0x1b8>
 800b182:	9905      	ldr	r1, [sp, #20]
 800b184:	462a      	mov	r2, r5
 800b186:	f003 f95b 	bl	800e440 <strncmp>
 800b18a:	b398      	cbz	r0, 800b1f4 <_strtod_l+0x1d4>
 800b18c:	2000      	movs	r0, #0
 800b18e:	4632      	mov	r2, r6
 800b190:	463d      	mov	r5, r7
 800b192:	9005      	str	r0, [sp, #20]
 800b194:	4603      	mov	r3, r0
 800b196:	2a65      	cmp	r2, #101	; 0x65
 800b198:	d001      	beq.n	800b19e <_strtod_l+0x17e>
 800b19a:	2a45      	cmp	r2, #69	; 0x45
 800b19c:	d118      	bne.n	800b1d0 <_strtod_l+0x1b0>
 800b19e:	b91d      	cbnz	r5, 800b1a8 <_strtod_l+0x188>
 800b1a0:	9a04      	ldr	r2, [sp, #16]
 800b1a2:	4302      	orrs	r2, r0
 800b1a4:	d09e      	beq.n	800b0e4 <_strtod_l+0xc4>
 800b1a6:	2500      	movs	r5, #0
 800b1a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b1ac:	f108 0201 	add.w	r2, r8, #1
 800b1b0:	9217      	str	r2, [sp, #92]	; 0x5c
 800b1b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b1b6:	2a2b      	cmp	r2, #43	; 0x2b
 800b1b8:	d075      	beq.n	800b2a6 <_strtod_l+0x286>
 800b1ba:	2a2d      	cmp	r2, #45	; 0x2d
 800b1bc:	d07b      	beq.n	800b2b6 <_strtod_l+0x296>
 800b1be:	f04f 0c00 	mov.w	ip, #0
 800b1c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b1c6:	2909      	cmp	r1, #9
 800b1c8:	f240 8082 	bls.w	800b2d0 <_strtod_l+0x2b0>
 800b1cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b1d0:	2600      	movs	r6, #0
 800b1d2:	e09d      	b.n	800b310 <_strtod_l+0x2f0>
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	e7c4      	b.n	800b162 <_strtod_l+0x142>
 800b1d8:	2f08      	cmp	r7, #8
 800b1da:	bfd8      	it	le
 800b1dc:	9907      	ldrle	r1, [sp, #28]
 800b1de:	f100 0001 	add.w	r0, r0, #1
 800b1e2:	bfda      	itte	le
 800b1e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b1e8:	9307      	strle	r3, [sp, #28]
 800b1ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b1ee:	3701      	adds	r7, #1
 800b1f0:	9017      	str	r0, [sp, #92]	; 0x5c
 800b1f2:	e7bf      	b.n	800b174 <_strtod_l+0x154>
 800b1f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b1f6:	195a      	adds	r2, r3, r5
 800b1f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b1fa:	5d5a      	ldrb	r2, [r3, r5]
 800b1fc:	2f00      	cmp	r7, #0
 800b1fe:	d037      	beq.n	800b270 <_strtod_l+0x250>
 800b200:	9005      	str	r0, [sp, #20]
 800b202:	463d      	mov	r5, r7
 800b204:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b208:	2b09      	cmp	r3, #9
 800b20a:	d912      	bls.n	800b232 <_strtod_l+0x212>
 800b20c:	2301      	movs	r3, #1
 800b20e:	e7c2      	b.n	800b196 <_strtod_l+0x176>
 800b210:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b212:	1c5a      	adds	r2, r3, #1
 800b214:	9217      	str	r2, [sp, #92]	; 0x5c
 800b216:	785a      	ldrb	r2, [r3, #1]
 800b218:	3001      	adds	r0, #1
 800b21a:	2a30      	cmp	r2, #48	; 0x30
 800b21c:	d0f8      	beq.n	800b210 <_strtod_l+0x1f0>
 800b21e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b222:	2b08      	cmp	r3, #8
 800b224:	f200 84d9 	bhi.w	800bbda <_strtod_l+0xbba>
 800b228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b22a:	9005      	str	r0, [sp, #20]
 800b22c:	2000      	movs	r0, #0
 800b22e:	9308      	str	r3, [sp, #32]
 800b230:	4605      	mov	r5, r0
 800b232:	3a30      	subs	r2, #48	; 0x30
 800b234:	f100 0301 	add.w	r3, r0, #1
 800b238:	d014      	beq.n	800b264 <_strtod_l+0x244>
 800b23a:	9905      	ldr	r1, [sp, #20]
 800b23c:	4419      	add	r1, r3
 800b23e:	9105      	str	r1, [sp, #20]
 800b240:	462b      	mov	r3, r5
 800b242:	eb00 0e05 	add.w	lr, r0, r5
 800b246:	210a      	movs	r1, #10
 800b248:	4573      	cmp	r3, lr
 800b24a:	d113      	bne.n	800b274 <_strtod_l+0x254>
 800b24c:	182b      	adds	r3, r5, r0
 800b24e:	2b08      	cmp	r3, #8
 800b250:	f105 0501 	add.w	r5, r5, #1
 800b254:	4405      	add	r5, r0
 800b256:	dc1c      	bgt.n	800b292 <_strtod_l+0x272>
 800b258:	9907      	ldr	r1, [sp, #28]
 800b25a:	230a      	movs	r3, #10
 800b25c:	fb03 2301 	mla	r3, r3, r1, r2
 800b260:	9307      	str	r3, [sp, #28]
 800b262:	2300      	movs	r3, #0
 800b264:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b266:	1c51      	adds	r1, r2, #1
 800b268:	9117      	str	r1, [sp, #92]	; 0x5c
 800b26a:	7852      	ldrb	r2, [r2, #1]
 800b26c:	4618      	mov	r0, r3
 800b26e:	e7c9      	b.n	800b204 <_strtod_l+0x1e4>
 800b270:	4638      	mov	r0, r7
 800b272:	e7d2      	b.n	800b21a <_strtod_l+0x1fa>
 800b274:	2b08      	cmp	r3, #8
 800b276:	dc04      	bgt.n	800b282 <_strtod_l+0x262>
 800b278:	9e07      	ldr	r6, [sp, #28]
 800b27a:	434e      	muls	r6, r1
 800b27c:	9607      	str	r6, [sp, #28]
 800b27e:	3301      	adds	r3, #1
 800b280:	e7e2      	b.n	800b248 <_strtod_l+0x228>
 800b282:	f103 0c01 	add.w	ip, r3, #1
 800b286:	f1bc 0f10 	cmp.w	ip, #16
 800b28a:	bfd8      	it	le
 800b28c:	fb01 f909 	mulle.w	r9, r1, r9
 800b290:	e7f5      	b.n	800b27e <_strtod_l+0x25e>
 800b292:	2d10      	cmp	r5, #16
 800b294:	bfdc      	itt	le
 800b296:	230a      	movle	r3, #10
 800b298:	fb03 2909 	mlale	r9, r3, r9, r2
 800b29c:	e7e1      	b.n	800b262 <_strtod_l+0x242>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	9305      	str	r3, [sp, #20]
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	e77c      	b.n	800b1a0 <_strtod_l+0x180>
 800b2a6:	f04f 0c00 	mov.w	ip, #0
 800b2aa:	f108 0202 	add.w	r2, r8, #2
 800b2ae:	9217      	str	r2, [sp, #92]	; 0x5c
 800b2b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b2b4:	e785      	b.n	800b1c2 <_strtod_l+0x1a2>
 800b2b6:	f04f 0c01 	mov.w	ip, #1
 800b2ba:	e7f6      	b.n	800b2aa <_strtod_l+0x28a>
 800b2bc:	0800f1d0 	.word	0x0800f1d0
 800b2c0:	0800eef0 	.word	0x0800eef0
 800b2c4:	7ff00000 	.word	0x7ff00000
 800b2c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b2ca:	1c51      	adds	r1, r2, #1
 800b2cc:	9117      	str	r1, [sp, #92]	; 0x5c
 800b2ce:	7852      	ldrb	r2, [r2, #1]
 800b2d0:	2a30      	cmp	r2, #48	; 0x30
 800b2d2:	d0f9      	beq.n	800b2c8 <_strtod_l+0x2a8>
 800b2d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b2d8:	2908      	cmp	r1, #8
 800b2da:	f63f af79 	bhi.w	800b1d0 <_strtod_l+0x1b0>
 800b2de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b2e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b2e4:	9206      	str	r2, [sp, #24]
 800b2e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b2e8:	1c51      	adds	r1, r2, #1
 800b2ea:	9117      	str	r1, [sp, #92]	; 0x5c
 800b2ec:	7852      	ldrb	r2, [r2, #1]
 800b2ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b2f2:	2e09      	cmp	r6, #9
 800b2f4:	d937      	bls.n	800b366 <_strtod_l+0x346>
 800b2f6:	9e06      	ldr	r6, [sp, #24]
 800b2f8:	1b89      	subs	r1, r1, r6
 800b2fa:	2908      	cmp	r1, #8
 800b2fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b300:	dc02      	bgt.n	800b308 <_strtod_l+0x2e8>
 800b302:	4576      	cmp	r6, lr
 800b304:	bfa8      	it	ge
 800b306:	4676      	movge	r6, lr
 800b308:	f1bc 0f00 	cmp.w	ip, #0
 800b30c:	d000      	beq.n	800b310 <_strtod_l+0x2f0>
 800b30e:	4276      	negs	r6, r6
 800b310:	2d00      	cmp	r5, #0
 800b312:	d14d      	bne.n	800b3b0 <_strtod_l+0x390>
 800b314:	9904      	ldr	r1, [sp, #16]
 800b316:	4301      	orrs	r1, r0
 800b318:	f47f aec6 	bne.w	800b0a8 <_strtod_l+0x88>
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f47f aee1 	bne.w	800b0e4 <_strtod_l+0xc4>
 800b322:	2a69      	cmp	r2, #105	; 0x69
 800b324:	d027      	beq.n	800b376 <_strtod_l+0x356>
 800b326:	dc24      	bgt.n	800b372 <_strtod_l+0x352>
 800b328:	2a49      	cmp	r2, #73	; 0x49
 800b32a:	d024      	beq.n	800b376 <_strtod_l+0x356>
 800b32c:	2a4e      	cmp	r2, #78	; 0x4e
 800b32e:	f47f aed9 	bne.w	800b0e4 <_strtod_l+0xc4>
 800b332:	499f      	ldr	r1, [pc, #636]	; (800b5b0 <_strtod_l+0x590>)
 800b334:	a817      	add	r0, sp, #92	; 0x5c
 800b336:	f001 ff2f 	bl	800d198 <__match>
 800b33a:	2800      	cmp	r0, #0
 800b33c:	f43f aed2 	beq.w	800b0e4 <_strtod_l+0xc4>
 800b340:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	2b28      	cmp	r3, #40	; 0x28
 800b346:	d12d      	bne.n	800b3a4 <_strtod_l+0x384>
 800b348:	499a      	ldr	r1, [pc, #616]	; (800b5b4 <_strtod_l+0x594>)
 800b34a:	aa1a      	add	r2, sp, #104	; 0x68
 800b34c:	a817      	add	r0, sp, #92	; 0x5c
 800b34e:	f001 ff37 	bl	800d1c0 <__hexnan>
 800b352:	2805      	cmp	r0, #5
 800b354:	d126      	bne.n	800b3a4 <_strtod_l+0x384>
 800b356:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b358:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b35c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b360:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b364:	e6a0      	b.n	800b0a8 <_strtod_l+0x88>
 800b366:	210a      	movs	r1, #10
 800b368:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b36c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b370:	e7b9      	b.n	800b2e6 <_strtod_l+0x2c6>
 800b372:	2a6e      	cmp	r2, #110	; 0x6e
 800b374:	e7db      	b.n	800b32e <_strtod_l+0x30e>
 800b376:	4990      	ldr	r1, [pc, #576]	; (800b5b8 <_strtod_l+0x598>)
 800b378:	a817      	add	r0, sp, #92	; 0x5c
 800b37a:	f001 ff0d 	bl	800d198 <__match>
 800b37e:	2800      	cmp	r0, #0
 800b380:	f43f aeb0 	beq.w	800b0e4 <_strtod_l+0xc4>
 800b384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b386:	498d      	ldr	r1, [pc, #564]	; (800b5bc <_strtod_l+0x59c>)
 800b388:	3b01      	subs	r3, #1
 800b38a:	a817      	add	r0, sp, #92	; 0x5c
 800b38c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b38e:	f001 ff03 	bl	800d198 <__match>
 800b392:	b910      	cbnz	r0, 800b39a <_strtod_l+0x37a>
 800b394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b396:	3301      	adds	r3, #1
 800b398:	9317      	str	r3, [sp, #92]	; 0x5c
 800b39a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b5cc <_strtod_l+0x5ac>
 800b39e:	f04f 0a00 	mov.w	sl, #0
 800b3a2:	e681      	b.n	800b0a8 <_strtod_l+0x88>
 800b3a4:	4886      	ldr	r0, [pc, #536]	; (800b5c0 <_strtod_l+0x5a0>)
 800b3a6:	f003 f833 	bl	800e410 <nan>
 800b3aa:	ec5b ab10 	vmov	sl, fp, d0
 800b3ae:	e67b      	b.n	800b0a8 <_strtod_l+0x88>
 800b3b0:	9b05      	ldr	r3, [sp, #20]
 800b3b2:	9807      	ldr	r0, [sp, #28]
 800b3b4:	1af3      	subs	r3, r6, r3
 800b3b6:	2f00      	cmp	r7, #0
 800b3b8:	bf08      	it	eq
 800b3ba:	462f      	moveq	r7, r5
 800b3bc:	2d10      	cmp	r5, #16
 800b3be:	9306      	str	r3, [sp, #24]
 800b3c0:	46a8      	mov	r8, r5
 800b3c2:	bfa8      	it	ge
 800b3c4:	f04f 0810 	movge.w	r8, #16
 800b3c8:	f7f5 f8c4 	bl	8000554 <__aeabi_ui2d>
 800b3cc:	2d09      	cmp	r5, #9
 800b3ce:	4682      	mov	sl, r0
 800b3d0:	468b      	mov	fp, r1
 800b3d2:	dd13      	ble.n	800b3fc <_strtod_l+0x3dc>
 800b3d4:	4b7b      	ldr	r3, [pc, #492]	; (800b5c4 <_strtod_l+0x5a4>)
 800b3d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b3da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b3de:	f7f5 f933 	bl	8000648 <__aeabi_dmul>
 800b3e2:	4682      	mov	sl, r0
 800b3e4:	4648      	mov	r0, r9
 800b3e6:	468b      	mov	fp, r1
 800b3e8:	f7f5 f8b4 	bl	8000554 <__aeabi_ui2d>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	4650      	mov	r0, sl
 800b3f2:	4659      	mov	r1, fp
 800b3f4:	f7f4 ff72 	bl	80002dc <__adddf3>
 800b3f8:	4682      	mov	sl, r0
 800b3fa:	468b      	mov	fp, r1
 800b3fc:	2d0f      	cmp	r5, #15
 800b3fe:	dc38      	bgt.n	800b472 <_strtod_l+0x452>
 800b400:	9b06      	ldr	r3, [sp, #24]
 800b402:	2b00      	cmp	r3, #0
 800b404:	f43f ae50 	beq.w	800b0a8 <_strtod_l+0x88>
 800b408:	dd24      	ble.n	800b454 <_strtod_l+0x434>
 800b40a:	2b16      	cmp	r3, #22
 800b40c:	dc0b      	bgt.n	800b426 <_strtod_l+0x406>
 800b40e:	496d      	ldr	r1, [pc, #436]	; (800b5c4 <_strtod_l+0x5a4>)
 800b410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b414:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b418:	4652      	mov	r2, sl
 800b41a:	465b      	mov	r3, fp
 800b41c:	f7f5 f914 	bl	8000648 <__aeabi_dmul>
 800b420:	4682      	mov	sl, r0
 800b422:	468b      	mov	fp, r1
 800b424:	e640      	b.n	800b0a8 <_strtod_l+0x88>
 800b426:	9a06      	ldr	r2, [sp, #24]
 800b428:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b42c:	4293      	cmp	r3, r2
 800b42e:	db20      	blt.n	800b472 <_strtod_l+0x452>
 800b430:	4c64      	ldr	r4, [pc, #400]	; (800b5c4 <_strtod_l+0x5a4>)
 800b432:	f1c5 050f 	rsb	r5, r5, #15
 800b436:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b43a:	4652      	mov	r2, sl
 800b43c:	465b      	mov	r3, fp
 800b43e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b442:	f7f5 f901 	bl	8000648 <__aeabi_dmul>
 800b446:	9b06      	ldr	r3, [sp, #24]
 800b448:	1b5d      	subs	r5, r3, r5
 800b44a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b44e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b452:	e7e3      	b.n	800b41c <_strtod_l+0x3fc>
 800b454:	9b06      	ldr	r3, [sp, #24]
 800b456:	3316      	adds	r3, #22
 800b458:	db0b      	blt.n	800b472 <_strtod_l+0x452>
 800b45a:	9b05      	ldr	r3, [sp, #20]
 800b45c:	1b9e      	subs	r6, r3, r6
 800b45e:	4b59      	ldr	r3, [pc, #356]	; (800b5c4 <_strtod_l+0x5a4>)
 800b460:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b464:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b468:	4650      	mov	r0, sl
 800b46a:	4659      	mov	r1, fp
 800b46c:	f7f5 fa16 	bl	800089c <__aeabi_ddiv>
 800b470:	e7d6      	b.n	800b420 <_strtod_l+0x400>
 800b472:	9b06      	ldr	r3, [sp, #24]
 800b474:	eba5 0808 	sub.w	r8, r5, r8
 800b478:	4498      	add	r8, r3
 800b47a:	f1b8 0f00 	cmp.w	r8, #0
 800b47e:	dd74      	ble.n	800b56a <_strtod_l+0x54a>
 800b480:	f018 030f 	ands.w	r3, r8, #15
 800b484:	d00a      	beq.n	800b49c <_strtod_l+0x47c>
 800b486:	494f      	ldr	r1, [pc, #316]	; (800b5c4 <_strtod_l+0x5a4>)
 800b488:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b48c:	4652      	mov	r2, sl
 800b48e:	465b      	mov	r3, fp
 800b490:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b494:	f7f5 f8d8 	bl	8000648 <__aeabi_dmul>
 800b498:	4682      	mov	sl, r0
 800b49a:	468b      	mov	fp, r1
 800b49c:	f038 080f 	bics.w	r8, r8, #15
 800b4a0:	d04f      	beq.n	800b542 <_strtod_l+0x522>
 800b4a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b4a6:	dd22      	ble.n	800b4ee <_strtod_l+0x4ce>
 800b4a8:	2500      	movs	r5, #0
 800b4aa:	462e      	mov	r6, r5
 800b4ac:	9507      	str	r5, [sp, #28]
 800b4ae:	9505      	str	r5, [sp, #20]
 800b4b0:	2322      	movs	r3, #34	; 0x22
 800b4b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b5cc <_strtod_l+0x5ac>
 800b4b6:	6023      	str	r3, [r4, #0]
 800b4b8:	f04f 0a00 	mov.w	sl, #0
 800b4bc:	9b07      	ldr	r3, [sp, #28]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f43f adf2 	beq.w	800b0a8 <_strtod_l+0x88>
 800b4c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f001 ff74 	bl	800d3b4 <_Bfree>
 800b4cc:	9905      	ldr	r1, [sp, #20]
 800b4ce:	4620      	mov	r0, r4
 800b4d0:	f001 ff70 	bl	800d3b4 <_Bfree>
 800b4d4:	4631      	mov	r1, r6
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f001 ff6c 	bl	800d3b4 <_Bfree>
 800b4dc:	9907      	ldr	r1, [sp, #28]
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f001 ff68 	bl	800d3b4 <_Bfree>
 800b4e4:	4629      	mov	r1, r5
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f001 ff64 	bl	800d3b4 <_Bfree>
 800b4ec:	e5dc      	b.n	800b0a8 <_strtod_l+0x88>
 800b4ee:	4b36      	ldr	r3, [pc, #216]	; (800b5c8 <_strtod_l+0x5a8>)
 800b4f0:	9304      	str	r3, [sp, #16]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b4f8:	4650      	mov	r0, sl
 800b4fa:	4659      	mov	r1, fp
 800b4fc:	4699      	mov	r9, r3
 800b4fe:	f1b8 0f01 	cmp.w	r8, #1
 800b502:	dc21      	bgt.n	800b548 <_strtod_l+0x528>
 800b504:	b10b      	cbz	r3, 800b50a <_strtod_l+0x4ea>
 800b506:	4682      	mov	sl, r0
 800b508:	468b      	mov	fp, r1
 800b50a:	4b2f      	ldr	r3, [pc, #188]	; (800b5c8 <_strtod_l+0x5a8>)
 800b50c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b510:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b514:	4652      	mov	r2, sl
 800b516:	465b      	mov	r3, fp
 800b518:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b51c:	f7f5 f894 	bl	8000648 <__aeabi_dmul>
 800b520:	4b2a      	ldr	r3, [pc, #168]	; (800b5cc <_strtod_l+0x5ac>)
 800b522:	460a      	mov	r2, r1
 800b524:	400b      	ands	r3, r1
 800b526:	492a      	ldr	r1, [pc, #168]	; (800b5d0 <_strtod_l+0x5b0>)
 800b528:	428b      	cmp	r3, r1
 800b52a:	4682      	mov	sl, r0
 800b52c:	d8bc      	bhi.n	800b4a8 <_strtod_l+0x488>
 800b52e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b532:	428b      	cmp	r3, r1
 800b534:	bf86      	itte	hi
 800b536:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b5d4 <_strtod_l+0x5b4>
 800b53a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b53e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b542:	2300      	movs	r3, #0
 800b544:	9304      	str	r3, [sp, #16]
 800b546:	e084      	b.n	800b652 <_strtod_l+0x632>
 800b548:	f018 0f01 	tst.w	r8, #1
 800b54c:	d005      	beq.n	800b55a <_strtod_l+0x53a>
 800b54e:	9b04      	ldr	r3, [sp, #16]
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	f7f5 f878 	bl	8000648 <__aeabi_dmul>
 800b558:	2301      	movs	r3, #1
 800b55a:	9a04      	ldr	r2, [sp, #16]
 800b55c:	3208      	adds	r2, #8
 800b55e:	f109 0901 	add.w	r9, r9, #1
 800b562:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b566:	9204      	str	r2, [sp, #16]
 800b568:	e7c9      	b.n	800b4fe <_strtod_l+0x4de>
 800b56a:	d0ea      	beq.n	800b542 <_strtod_l+0x522>
 800b56c:	f1c8 0800 	rsb	r8, r8, #0
 800b570:	f018 020f 	ands.w	r2, r8, #15
 800b574:	d00a      	beq.n	800b58c <_strtod_l+0x56c>
 800b576:	4b13      	ldr	r3, [pc, #76]	; (800b5c4 <_strtod_l+0x5a4>)
 800b578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b57c:	4650      	mov	r0, sl
 800b57e:	4659      	mov	r1, fp
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	f7f5 f98a 	bl	800089c <__aeabi_ddiv>
 800b588:	4682      	mov	sl, r0
 800b58a:	468b      	mov	fp, r1
 800b58c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b590:	d0d7      	beq.n	800b542 <_strtod_l+0x522>
 800b592:	f1b8 0f1f 	cmp.w	r8, #31
 800b596:	dd1f      	ble.n	800b5d8 <_strtod_l+0x5b8>
 800b598:	2500      	movs	r5, #0
 800b59a:	462e      	mov	r6, r5
 800b59c:	9507      	str	r5, [sp, #28]
 800b59e:	9505      	str	r5, [sp, #20]
 800b5a0:	2322      	movs	r3, #34	; 0x22
 800b5a2:	f04f 0a00 	mov.w	sl, #0
 800b5a6:	f04f 0b00 	mov.w	fp, #0
 800b5aa:	6023      	str	r3, [r4, #0]
 800b5ac:	e786      	b.n	800b4bc <_strtod_l+0x49c>
 800b5ae:	bf00      	nop
 800b5b0:	0800eec1 	.word	0x0800eec1
 800b5b4:	0800ef04 	.word	0x0800ef04
 800b5b8:	0800eeb9 	.word	0x0800eeb9
 800b5bc:	0800f0f4 	.word	0x0800f0f4
 800b5c0:	0800efef 	.word	0x0800efef
 800b5c4:	0800f268 	.word	0x0800f268
 800b5c8:	0800f240 	.word	0x0800f240
 800b5cc:	7ff00000 	.word	0x7ff00000
 800b5d0:	7ca00000 	.word	0x7ca00000
 800b5d4:	7fefffff 	.word	0x7fefffff
 800b5d8:	f018 0310 	ands.w	r3, r8, #16
 800b5dc:	bf18      	it	ne
 800b5de:	236a      	movne	r3, #106	; 0x6a
 800b5e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b990 <_strtod_l+0x970>
 800b5e4:	9304      	str	r3, [sp, #16]
 800b5e6:	4650      	mov	r0, sl
 800b5e8:	4659      	mov	r1, fp
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	f018 0f01 	tst.w	r8, #1
 800b5f0:	d004      	beq.n	800b5fc <_strtod_l+0x5dc>
 800b5f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b5f6:	f7f5 f827 	bl	8000648 <__aeabi_dmul>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b600:	f109 0908 	add.w	r9, r9, #8
 800b604:	d1f2      	bne.n	800b5ec <_strtod_l+0x5cc>
 800b606:	b10b      	cbz	r3, 800b60c <_strtod_l+0x5ec>
 800b608:	4682      	mov	sl, r0
 800b60a:	468b      	mov	fp, r1
 800b60c:	9b04      	ldr	r3, [sp, #16]
 800b60e:	b1c3      	cbz	r3, 800b642 <_strtod_l+0x622>
 800b610:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b614:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b618:	2b00      	cmp	r3, #0
 800b61a:	4659      	mov	r1, fp
 800b61c:	dd11      	ble.n	800b642 <_strtod_l+0x622>
 800b61e:	2b1f      	cmp	r3, #31
 800b620:	f340 8124 	ble.w	800b86c <_strtod_l+0x84c>
 800b624:	2b34      	cmp	r3, #52	; 0x34
 800b626:	bfde      	ittt	le
 800b628:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b62c:	f04f 33ff 	movle.w	r3, #4294967295
 800b630:	fa03 f202 	lslle.w	r2, r3, r2
 800b634:	f04f 0a00 	mov.w	sl, #0
 800b638:	bfcc      	ite	gt
 800b63a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b63e:	ea02 0b01 	andle.w	fp, r2, r1
 800b642:	2200      	movs	r2, #0
 800b644:	2300      	movs	r3, #0
 800b646:	4650      	mov	r0, sl
 800b648:	4659      	mov	r1, fp
 800b64a:	f7f5 fa65 	bl	8000b18 <__aeabi_dcmpeq>
 800b64e:	2800      	cmp	r0, #0
 800b650:	d1a2      	bne.n	800b598 <_strtod_l+0x578>
 800b652:	9b07      	ldr	r3, [sp, #28]
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	9908      	ldr	r1, [sp, #32]
 800b658:	462b      	mov	r3, r5
 800b65a:	463a      	mov	r2, r7
 800b65c:	4620      	mov	r0, r4
 800b65e:	f001 ff11 	bl	800d484 <__s2b>
 800b662:	9007      	str	r0, [sp, #28]
 800b664:	2800      	cmp	r0, #0
 800b666:	f43f af1f 	beq.w	800b4a8 <_strtod_l+0x488>
 800b66a:	9b05      	ldr	r3, [sp, #20]
 800b66c:	1b9e      	subs	r6, r3, r6
 800b66e:	9b06      	ldr	r3, [sp, #24]
 800b670:	2b00      	cmp	r3, #0
 800b672:	bfb4      	ite	lt
 800b674:	4633      	movlt	r3, r6
 800b676:	2300      	movge	r3, #0
 800b678:	930c      	str	r3, [sp, #48]	; 0x30
 800b67a:	9b06      	ldr	r3, [sp, #24]
 800b67c:	2500      	movs	r5, #0
 800b67e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b682:	9312      	str	r3, [sp, #72]	; 0x48
 800b684:	462e      	mov	r6, r5
 800b686:	9b07      	ldr	r3, [sp, #28]
 800b688:	4620      	mov	r0, r4
 800b68a:	6859      	ldr	r1, [r3, #4]
 800b68c:	f001 fe52 	bl	800d334 <_Balloc>
 800b690:	9005      	str	r0, [sp, #20]
 800b692:	2800      	cmp	r0, #0
 800b694:	f43f af0c 	beq.w	800b4b0 <_strtod_l+0x490>
 800b698:	9b07      	ldr	r3, [sp, #28]
 800b69a:	691a      	ldr	r2, [r3, #16]
 800b69c:	3202      	adds	r2, #2
 800b69e:	f103 010c 	add.w	r1, r3, #12
 800b6a2:	0092      	lsls	r2, r2, #2
 800b6a4:	300c      	adds	r0, #12
 800b6a6:	f7fe fdd1 	bl	800a24c <memcpy>
 800b6aa:	ec4b ab10 	vmov	d0, sl, fp
 800b6ae:	aa1a      	add	r2, sp, #104	; 0x68
 800b6b0:	a919      	add	r1, sp, #100	; 0x64
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f002 fa2c 	bl	800db10 <__d2b>
 800b6b8:	ec4b ab18 	vmov	d8, sl, fp
 800b6bc:	9018      	str	r0, [sp, #96]	; 0x60
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	f43f aef6 	beq.w	800b4b0 <_strtod_l+0x490>
 800b6c4:	2101      	movs	r1, #1
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	f001 ff76 	bl	800d5b8 <__i2b>
 800b6cc:	4606      	mov	r6, r0
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	f43f aeee 	beq.w	800b4b0 <_strtod_l+0x490>
 800b6d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6d6:	9904      	ldr	r1, [sp, #16]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	bfab      	itete	ge
 800b6dc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b6de:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b6e0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b6e2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b6e6:	bfac      	ite	ge
 800b6e8:	eb03 0902 	addge.w	r9, r3, r2
 800b6ec:	1ad7      	sublt	r7, r2, r3
 800b6ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b6f0:	eba3 0801 	sub.w	r8, r3, r1
 800b6f4:	4490      	add	r8, r2
 800b6f6:	4ba1      	ldr	r3, [pc, #644]	; (800b97c <_strtod_l+0x95c>)
 800b6f8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6fc:	4598      	cmp	r8, r3
 800b6fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b702:	f280 80c7 	bge.w	800b894 <_strtod_l+0x874>
 800b706:	eba3 0308 	sub.w	r3, r3, r8
 800b70a:	2b1f      	cmp	r3, #31
 800b70c:	eba2 0203 	sub.w	r2, r2, r3
 800b710:	f04f 0101 	mov.w	r1, #1
 800b714:	f300 80b1 	bgt.w	800b87a <_strtod_l+0x85a>
 800b718:	fa01 f303 	lsl.w	r3, r1, r3
 800b71c:	930d      	str	r3, [sp, #52]	; 0x34
 800b71e:	2300      	movs	r3, #0
 800b720:	9308      	str	r3, [sp, #32]
 800b722:	eb09 0802 	add.w	r8, r9, r2
 800b726:	9b04      	ldr	r3, [sp, #16]
 800b728:	45c1      	cmp	r9, r8
 800b72a:	4417      	add	r7, r2
 800b72c:	441f      	add	r7, r3
 800b72e:	464b      	mov	r3, r9
 800b730:	bfa8      	it	ge
 800b732:	4643      	movge	r3, r8
 800b734:	42bb      	cmp	r3, r7
 800b736:	bfa8      	it	ge
 800b738:	463b      	movge	r3, r7
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	bfc2      	ittt	gt
 800b73e:	eba8 0803 	subgt.w	r8, r8, r3
 800b742:	1aff      	subgt	r7, r7, r3
 800b744:	eba9 0903 	subgt.w	r9, r9, r3
 800b748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	dd17      	ble.n	800b77e <_strtod_l+0x75e>
 800b74e:	4631      	mov	r1, r6
 800b750:	461a      	mov	r2, r3
 800b752:	4620      	mov	r0, r4
 800b754:	f001 fff0 	bl	800d738 <__pow5mult>
 800b758:	4606      	mov	r6, r0
 800b75a:	2800      	cmp	r0, #0
 800b75c:	f43f aea8 	beq.w	800b4b0 <_strtod_l+0x490>
 800b760:	4601      	mov	r1, r0
 800b762:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b764:	4620      	mov	r0, r4
 800b766:	f001 ff3d 	bl	800d5e4 <__multiply>
 800b76a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b76c:	2800      	cmp	r0, #0
 800b76e:	f43f ae9f 	beq.w	800b4b0 <_strtod_l+0x490>
 800b772:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b774:	4620      	mov	r0, r4
 800b776:	f001 fe1d 	bl	800d3b4 <_Bfree>
 800b77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b77c:	9318      	str	r3, [sp, #96]	; 0x60
 800b77e:	f1b8 0f00 	cmp.w	r8, #0
 800b782:	f300 808c 	bgt.w	800b89e <_strtod_l+0x87e>
 800b786:	9b06      	ldr	r3, [sp, #24]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	dd08      	ble.n	800b79e <_strtod_l+0x77e>
 800b78c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b78e:	9905      	ldr	r1, [sp, #20]
 800b790:	4620      	mov	r0, r4
 800b792:	f001 ffd1 	bl	800d738 <__pow5mult>
 800b796:	9005      	str	r0, [sp, #20]
 800b798:	2800      	cmp	r0, #0
 800b79a:	f43f ae89 	beq.w	800b4b0 <_strtod_l+0x490>
 800b79e:	2f00      	cmp	r7, #0
 800b7a0:	dd08      	ble.n	800b7b4 <_strtod_l+0x794>
 800b7a2:	9905      	ldr	r1, [sp, #20]
 800b7a4:	463a      	mov	r2, r7
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f002 f820 	bl	800d7ec <__lshift>
 800b7ac:	9005      	str	r0, [sp, #20]
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	f43f ae7e 	beq.w	800b4b0 <_strtod_l+0x490>
 800b7b4:	f1b9 0f00 	cmp.w	r9, #0
 800b7b8:	dd08      	ble.n	800b7cc <_strtod_l+0x7ac>
 800b7ba:	4631      	mov	r1, r6
 800b7bc:	464a      	mov	r2, r9
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f002 f814 	bl	800d7ec <__lshift>
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	f43f ae72 	beq.w	800b4b0 <_strtod_l+0x490>
 800b7cc:	9a05      	ldr	r2, [sp, #20]
 800b7ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	f002 f897 	bl	800d904 <__mdiff>
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	f43f ae69 	beq.w	800b4b0 <_strtod_l+0x490>
 800b7de:	68c3      	ldr	r3, [r0, #12]
 800b7e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	60c3      	str	r3, [r0, #12]
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	f002 f870 	bl	800d8cc <__mcmp>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	da60      	bge.n	800b8b2 <_strtod_l+0x892>
 800b7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7f2:	ea53 030a 	orrs.w	r3, r3, sl
 800b7f6:	f040 8082 	bne.w	800b8fe <_strtod_l+0x8de>
 800b7fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d17d      	bne.n	800b8fe <_strtod_l+0x8de>
 800b802:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b806:	0d1b      	lsrs	r3, r3, #20
 800b808:	051b      	lsls	r3, r3, #20
 800b80a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b80e:	d976      	bls.n	800b8fe <_strtod_l+0x8de>
 800b810:	696b      	ldr	r3, [r5, #20]
 800b812:	b913      	cbnz	r3, 800b81a <_strtod_l+0x7fa>
 800b814:	692b      	ldr	r3, [r5, #16]
 800b816:	2b01      	cmp	r3, #1
 800b818:	dd71      	ble.n	800b8fe <_strtod_l+0x8de>
 800b81a:	4629      	mov	r1, r5
 800b81c:	2201      	movs	r2, #1
 800b81e:	4620      	mov	r0, r4
 800b820:	f001 ffe4 	bl	800d7ec <__lshift>
 800b824:	4631      	mov	r1, r6
 800b826:	4605      	mov	r5, r0
 800b828:	f002 f850 	bl	800d8cc <__mcmp>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	dd66      	ble.n	800b8fe <_strtod_l+0x8de>
 800b830:	9904      	ldr	r1, [sp, #16]
 800b832:	4a53      	ldr	r2, [pc, #332]	; (800b980 <_strtod_l+0x960>)
 800b834:	465b      	mov	r3, fp
 800b836:	2900      	cmp	r1, #0
 800b838:	f000 8081 	beq.w	800b93e <_strtod_l+0x91e>
 800b83c:	ea02 010b 	and.w	r1, r2, fp
 800b840:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b844:	dc7b      	bgt.n	800b93e <_strtod_l+0x91e>
 800b846:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b84a:	f77f aea9 	ble.w	800b5a0 <_strtod_l+0x580>
 800b84e:	4b4d      	ldr	r3, [pc, #308]	; (800b984 <_strtod_l+0x964>)
 800b850:	4650      	mov	r0, sl
 800b852:	4659      	mov	r1, fp
 800b854:	2200      	movs	r2, #0
 800b856:	f7f4 fef7 	bl	8000648 <__aeabi_dmul>
 800b85a:	460b      	mov	r3, r1
 800b85c:	4303      	orrs	r3, r0
 800b85e:	bf08      	it	eq
 800b860:	2322      	moveq	r3, #34	; 0x22
 800b862:	4682      	mov	sl, r0
 800b864:	468b      	mov	fp, r1
 800b866:	bf08      	it	eq
 800b868:	6023      	streq	r3, [r4, #0]
 800b86a:	e62b      	b.n	800b4c4 <_strtod_l+0x4a4>
 800b86c:	f04f 32ff 	mov.w	r2, #4294967295
 800b870:	fa02 f303 	lsl.w	r3, r2, r3
 800b874:	ea03 0a0a 	and.w	sl, r3, sl
 800b878:	e6e3      	b.n	800b642 <_strtod_l+0x622>
 800b87a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b87e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b882:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b886:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b88a:	fa01 f308 	lsl.w	r3, r1, r8
 800b88e:	9308      	str	r3, [sp, #32]
 800b890:	910d      	str	r1, [sp, #52]	; 0x34
 800b892:	e746      	b.n	800b722 <_strtod_l+0x702>
 800b894:	2300      	movs	r3, #0
 800b896:	9308      	str	r3, [sp, #32]
 800b898:	2301      	movs	r3, #1
 800b89a:	930d      	str	r3, [sp, #52]	; 0x34
 800b89c:	e741      	b.n	800b722 <_strtod_l+0x702>
 800b89e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b8a0:	4642      	mov	r2, r8
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f001 ffa2 	bl	800d7ec <__lshift>
 800b8a8:	9018      	str	r0, [sp, #96]	; 0x60
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	f47f af6b 	bne.w	800b786 <_strtod_l+0x766>
 800b8b0:	e5fe      	b.n	800b4b0 <_strtod_l+0x490>
 800b8b2:	465f      	mov	r7, fp
 800b8b4:	d16e      	bne.n	800b994 <_strtod_l+0x974>
 800b8b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b8b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8bc:	b342      	cbz	r2, 800b910 <_strtod_l+0x8f0>
 800b8be:	4a32      	ldr	r2, [pc, #200]	; (800b988 <_strtod_l+0x968>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d128      	bne.n	800b916 <_strtod_l+0x8f6>
 800b8c4:	9b04      	ldr	r3, [sp, #16]
 800b8c6:	4651      	mov	r1, sl
 800b8c8:	b1eb      	cbz	r3, 800b906 <_strtod_l+0x8e6>
 800b8ca:	4b2d      	ldr	r3, [pc, #180]	; (800b980 <_strtod_l+0x960>)
 800b8cc:	403b      	ands	r3, r7
 800b8ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d6:	d819      	bhi.n	800b90c <_strtod_l+0x8ec>
 800b8d8:	0d1b      	lsrs	r3, r3, #20
 800b8da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b8de:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e2:	4299      	cmp	r1, r3
 800b8e4:	d117      	bne.n	800b916 <_strtod_l+0x8f6>
 800b8e6:	4b29      	ldr	r3, [pc, #164]	; (800b98c <_strtod_l+0x96c>)
 800b8e8:	429f      	cmp	r7, r3
 800b8ea:	d102      	bne.n	800b8f2 <_strtod_l+0x8d2>
 800b8ec:	3101      	adds	r1, #1
 800b8ee:	f43f addf 	beq.w	800b4b0 <_strtod_l+0x490>
 800b8f2:	4b23      	ldr	r3, [pc, #140]	; (800b980 <_strtod_l+0x960>)
 800b8f4:	403b      	ands	r3, r7
 800b8f6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b8fa:	f04f 0a00 	mov.w	sl, #0
 800b8fe:	9b04      	ldr	r3, [sp, #16]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1a4      	bne.n	800b84e <_strtod_l+0x82e>
 800b904:	e5de      	b.n	800b4c4 <_strtod_l+0x4a4>
 800b906:	f04f 33ff 	mov.w	r3, #4294967295
 800b90a:	e7ea      	b.n	800b8e2 <_strtod_l+0x8c2>
 800b90c:	4613      	mov	r3, r2
 800b90e:	e7e8      	b.n	800b8e2 <_strtod_l+0x8c2>
 800b910:	ea53 030a 	orrs.w	r3, r3, sl
 800b914:	d08c      	beq.n	800b830 <_strtod_l+0x810>
 800b916:	9b08      	ldr	r3, [sp, #32]
 800b918:	b1db      	cbz	r3, 800b952 <_strtod_l+0x932>
 800b91a:	423b      	tst	r3, r7
 800b91c:	d0ef      	beq.n	800b8fe <_strtod_l+0x8de>
 800b91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b920:	9a04      	ldr	r2, [sp, #16]
 800b922:	4650      	mov	r0, sl
 800b924:	4659      	mov	r1, fp
 800b926:	b1c3      	cbz	r3, 800b95a <_strtod_l+0x93a>
 800b928:	f7ff fb5c 	bl	800afe4 <sulp>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	ec51 0b18 	vmov	r0, r1, d8
 800b934:	f7f4 fcd2 	bl	80002dc <__adddf3>
 800b938:	4682      	mov	sl, r0
 800b93a:	468b      	mov	fp, r1
 800b93c:	e7df      	b.n	800b8fe <_strtod_l+0x8de>
 800b93e:	4013      	ands	r3, r2
 800b940:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b944:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b948:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b94c:	f04f 3aff 	mov.w	sl, #4294967295
 800b950:	e7d5      	b.n	800b8fe <_strtod_l+0x8de>
 800b952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b954:	ea13 0f0a 	tst.w	r3, sl
 800b958:	e7e0      	b.n	800b91c <_strtod_l+0x8fc>
 800b95a:	f7ff fb43 	bl	800afe4 <sulp>
 800b95e:	4602      	mov	r2, r0
 800b960:	460b      	mov	r3, r1
 800b962:	ec51 0b18 	vmov	r0, r1, d8
 800b966:	f7f4 fcb7 	bl	80002d8 <__aeabi_dsub>
 800b96a:	2200      	movs	r2, #0
 800b96c:	2300      	movs	r3, #0
 800b96e:	4682      	mov	sl, r0
 800b970:	468b      	mov	fp, r1
 800b972:	f7f5 f8d1 	bl	8000b18 <__aeabi_dcmpeq>
 800b976:	2800      	cmp	r0, #0
 800b978:	d0c1      	beq.n	800b8fe <_strtod_l+0x8de>
 800b97a:	e611      	b.n	800b5a0 <_strtod_l+0x580>
 800b97c:	fffffc02 	.word	0xfffffc02
 800b980:	7ff00000 	.word	0x7ff00000
 800b984:	39500000 	.word	0x39500000
 800b988:	000fffff 	.word	0x000fffff
 800b98c:	7fefffff 	.word	0x7fefffff
 800b990:	0800ef18 	.word	0x0800ef18
 800b994:	4631      	mov	r1, r6
 800b996:	4628      	mov	r0, r5
 800b998:	f002 f916 	bl	800dbc8 <__ratio>
 800b99c:	ec59 8b10 	vmov	r8, r9, d0
 800b9a0:	ee10 0a10 	vmov	r0, s0
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	f7f5 f8c8 	bl	8000b40 <__aeabi_dcmple>
 800b9b0:	2800      	cmp	r0, #0
 800b9b2:	d07a      	beq.n	800baaa <_strtod_l+0xa8a>
 800b9b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d04a      	beq.n	800ba50 <_strtod_l+0xa30>
 800b9ba:	4b95      	ldr	r3, [pc, #596]	; (800bc10 <_strtod_l+0xbf0>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b9c2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800bc10 <_strtod_l+0xbf0>
 800b9c6:	f04f 0800 	mov.w	r8, #0
 800b9ca:	4b92      	ldr	r3, [pc, #584]	; (800bc14 <_strtod_l+0xbf4>)
 800b9cc:	403b      	ands	r3, r7
 800b9ce:	930d      	str	r3, [sp, #52]	; 0x34
 800b9d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9d2:	4b91      	ldr	r3, [pc, #580]	; (800bc18 <_strtod_l+0xbf8>)
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	f040 80b0 	bne.w	800bb3a <_strtod_l+0xb1a>
 800b9da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9de:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b9e2:	ec4b ab10 	vmov	d0, sl, fp
 800b9e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b9ea:	f002 f815 	bl	800da18 <__ulp>
 800b9ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b9f2:	ec53 2b10 	vmov	r2, r3, d0
 800b9f6:	f7f4 fe27 	bl	8000648 <__aeabi_dmul>
 800b9fa:	4652      	mov	r2, sl
 800b9fc:	465b      	mov	r3, fp
 800b9fe:	f7f4 fc6d 	bl	80002dc <__adddf3>
 800ba02:	460b      	mov	r3, r1
 800ba04:	4983      	ldr	r1, [pc, #524]	; (800bc14 <_strtod_l+0xbf4>)
 800ba06:	4a85      	ldr	r2, [pc, #532]	; (800bc1c <_strtod_l+0xbfc>)
 800ba08:	4019      	ands	r1, r3
 800ba0a:	4291      	cmp	r1, r2
 800ba0c:	4682      	mov	sl, r0
 800ba0e:	d960      	bls.n	800bad2 <_strtod_l+0xab2>
 800ba10:	ee18 3a90 	vmov	r3, s17
 800ba14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d104      	bne.n	800ba26 <_strtod_l+0xa06>
 800ba1c:	ee18 3a10 	vmov	r3, s16
 800ba20:	3301      	adds	r3, #1
 800ba22:	f43f ad45 	beq.w	800b4b0 <_strtod_l+0x490>
 800ba26:	f8df b200 	ldr.w	fp, [pc, #512]	; 800bc28 <_strtod_l+0xc08>
 800ba2a:	f04f 3aff 	mov.w	sl, #4294967295
 800ba2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba30:	4620      	mov	r0, r4
 800ba32:	f001 fcbf 	bl	800d3b4 <_Bfree>
 800ba36:	9905      	ldr	r1, [sp, #20]
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f001 fcbb 	bl	800d3b4 <_Bfree>
 800ba3e:	4631      	mov	r1, r6
 800ba40:	4620      	mov	r0, r4
 800ba42:	f001 fcb7 	bl	800d3b4 <_Bfree>
 800ba46:	4629      	mov	r1, r5
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f001 fcb3 	bl	800d3b4 <_Bfree>
 800ba4e:	e61a      	b.n	800b686 <_strtod_l+0x666>
 800ba50:	f1ba 0f00 	cmp.w	sl, #0
 800ba54:	d11b      	bne.n	800ba8e <_strtod_l+0xa6e>
 800ba56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba5a:	b9f3      	cbnz	r3, 800ba9a <_strtod_l+0xa7a>
 800ba5c:	4b6c      	ldr	r3, [pc, #432]	; (800bc10 <_strtod_l+0xbf0>)
 800ba5e:	2200      	movs	r2, #0
 800ba60:	4640      	mov	r0, r8
 800ba62:	4649      	mov	r1, r9
 800ba64:	f7f5 f862 	bl	8000b2c <__aeabi_dcmplt>
 800ba68:	b9d0      	cbnz	r0, 800baa0 <_strtod_l+0xa80>
 800ba6a:	4640      	mov	r0, r8
 800ba6c:	4649      	mov	r1, r9
 800ba6e:	4b6c      	ldr	r3, [pc, #432]	; (800bc20 <_strtod_l+0xc00>)
 800ba70:	2200      	movs	r2, #0
 800ba72:	f7f4 fde9 	bl	8000648 <__aeabi_dmul>
 800ba76:	4680      	mov	r8, r0
 800ba78:	4689      	mov	r9, r1
 800ba7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ba7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ba82:	9315      	str	r3, [sp, #84]	; 0x54
 800ba84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ba88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ba8c:	e79d      	b.n	800b9ca <_strtod_l+0x9aa>
 800ba8e:	f1ba 0f01 	cmp.w	sl, #1
 800ba92:	d102      	bne.n	800ba9a <_strtod_l+0xa7a>
 800ba94:	2f00      	cmp	r7, #0
 800ba96:	f43f ad83 	beq.w	800b5a0 <_strtod_l+0x580>
 800ba9a:	4b62      	ldr	r3, [pc, #392]	; (800bc24 <_strtod_l+0xc04>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	e78e      	b.n	800b9be <_strtod_l+0x99e>
 800baa0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800bc20 <_strtod_l+0xc00>
 800baa4:	f04f 0800 	mov.w	r8, #0
 800baa8:	e7e7      	b.n	800ba7a <_strtod_l+0xa5a>
 800baaa:	4b5d      	ldr	r3, [pc, #372]	; (800bc20 <_strtod_l+0xc00>)
 800baac:	4640      	mov	r0, r8
 800baae:	4649      	mov	r1, r9
 800bab0:	2200      	movs	r2, #0
 800bab2:	f7f4 fdc9 	bl	8000648 <__aeabi_dmul>
 800bab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bab8:	4680      	mov	r8, r0
 800baba:	4689      	mov	r9, r1
 800babc:	b933      	cbnz	r3, 800bacc <_strtod_l+0xaac>
 800babe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bac2:	900e      	str	r0, [sp, #56]	; 0x38
 800bac4:	930f      	str	r3, [sp, #60]	; 0x3c
 800bac6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800baca:	e7dd      	b.n	800ba88 <_strtod_l+0xa68>
 800bacc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800bad0:	e7f9      	b.n	800bac6 <_strtod_l+0xaa6>
 800bad2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800bad6:	9b04      	ldr	r3, [sp, #16]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1a8      	bne.n	800ba2e <_strtod_l+0xa0e>
 800badc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bae0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bae2:	0d1b      	lsrs	r3, r3, #20
 800bae4:	051b      	lsls	r3, r3, #20
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d1a1      	bne.n	800ba2e <_strtod_l+0xa0e>
 800baea:	4640      	mov	r0, r8
 800baec:	4649      	mov	r1, r9
 800baee:	f7f5 f90b 	bl	8000d08 <__aeabi_d2lz>
 800baf2:	f7f4 fd7b 	bl	80005ec <__aeabi_l2d>
 800baf6:	4602      	mov	r2, r0
 800baf8:	460b      	mov	r3, r1
 800bafa:	4640      	mov	r0, r8
 800bafc:	4649      	mov	r1, r9
 800bafe:	f7f4 fbeb 	bl	80002d8 <__aeabi_dsub>
 800bb02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb08:	ea43 030a 	orr.w	r3, r3, sl
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	4680      	mov	r8, r0
 800bb10:	4689      	mov	r9, r1
 800bb12:	d055      	beq.n	800bbc0 <_strtod_l+0xba0>
 800bb14:	a336      	add	r3, pc, #216	; (adr r3, 800bbf0 <_strtod_l+0xbd0>)
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	f7f5 f807 	bl	8000b2c <__aeabi_dcmplt>
 800bb1e:	2800      	cmp	r0, #0
 800bb20:	f47f acd0 	bne.w	800b4c4 <_strtod_l+0x4a4>
 800bb24:	a334      	add	r3, pc, #208	; (adr r3, 800bbf8 <_strtod_l+0xbd8>)
 800bb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2a:	4640      	mov	r0, r8
 800bb2c:	4649      	mov	r1, r9
 800bb2e:	f7f5 f81b 	bl	8000b68 <__aeabi_dcmpgt>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	f43f af7b 	beq.w	800ba2e <_strtod_l+0xa0e>
 800bb38:	e4c4      	b.n	800b4c4 <_strtod_l+0x4a4>
 800bb3a:	9b04      	ldr	r3, [sp, #16]
 800bb3c:	b333      	cbz	r3, 800bb8c <_strtod_l+0xb6c>
 800bb3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bb44:	d822      	bhi.n	800bb8c <_strtod_l+0xb6c>
 800bb46:	a32e      	add	r3, pc, #184	; (adr r3, 800bc00 <_strtod_l+0xbe0>)
 800bb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4c:	4640      	mov	r0, r8
 800bb4e:	4649      	mov	r1, r9
 800bb50:	f7f4 fff6 	bl	8000b40 <__aeabi_dcmple>
 800bb54:	b1a0      	cbz	r0, 800bb80 <_strtod_l+0xb60>
 800bb56:	4649      	mov	r1, r9
 800bb58:	4640      	mov	r0, r8
 800bb5a:	f7f5 f84d 	bl	8000bf8 <__aeabi_d2uiz>
 800bb5e:	2801      	cmp	r0, #1
 800bb60:	bf38      	it	cc
 800bb62:	2001      	movcc	r0, #1
 800bb64:	f7f4 fcf6 	bl	8000554 <__aeabi_ui2d>
 800bb68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	4689      	mov	r9, r1
 800bb6e:	bb23      	cbnz	r3, 800bbba <_strtod_l+0xb9a>
 800bb70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb74:	9010      	str	r0, [sp, #64]	; 0x40
 800bb76:	9311      	str	r3, [sp, #68]	; 0x44
 800bb78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bb7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bb80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bb88:	1a9b      	subs	r3, r3, r2
 800bb8a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb90:	eeb0 0a48 	vmov.f32	s0, s16
 800bb94:	eef0 0a68 	vmov.f32	s1, s17
 800bb98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb9c:	f001 ff3c 	bl	800da18 <__ulp>
 800bba0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bba4:	ec53 2b10 	vmov	r2, r3, d0
 800bba8:	f7f4 fd4e 	bl	8000648 <__aeabi_dmul>
 800bbac:	ec53 2b18 	vmov	r2, r3, d8
 800bbb0:	f7f4 fb94 	bl	80002dc <__adddf3>
 800bbb4:	4682      	mov	sl, r0
 800bbb6:	468b      	mov	fp, r1
 800bbb8:	e78d      	b.n	800bad6 <_strtod_l+0xab6>
 800bbba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800bbbe:	e7db      	b.n	800bb78 <_strtod_l+0xb58>
 800bbc0:	a311      	add	r3, pc, #68	; (adr r3, 800bc08 <_strtod_l+0xbe8>)
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	f7f4 ffb1 	bl	8000b2c <__aeabi_dcmplt>
 800bbca:	e7b2      	b.n	800bb32 <_strtod_l+0xb12>
 800bbcc:	2300      	movs	r3, #0
 800bbce:	930a      	str	r3, [sp, #40]	; 0x28
 800bbd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bbd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	f7ff ba6b 	b.w	800b0b0 <_strtod_l+0x90>
 800bbda:	2a65      	cmp	r2, #101	; 0x65
 800bbdc:	f43f ab5f 	beq.w	800b29e <_strtod_l+0x27e>
 800bbe0:	2a45      	cmp	r2, #69	; 0x45
 800bbe2:	f43f ab5c 	beq.w	800b29e <_strtod_l+0x27e>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	f7ff bb94 	b.w	800b314 <_strtod_l+0x2f4>
 800bbec:	f3af 8000 	nop.w
 800bbf0:	94a03595 	.word	0x94a03595
 800bbf4:	3fdfffff 	.word	0x3fdfffff
 800bbf8:	35afe535 	.word	0x35afe535
 800bbfc:	3fe00000 	.word	0x3fe00000
 800bc00:	ffc00000 	.word	0xffc00000
 800bc04:	41dfffff 	.word	0x41dfffff
 800bc08:	94a03595 	.word	0x94a03595
 800bc0c:	3fcfffff 	.word	0x3fcfffff
 800bc10:	3ff00000 	.word	0x3ff00000
 800bc14:	7ff00000 	.word	0x7ff00000
 800bc18:	7fe00000 	.word	0x7fe00000
 800bc1c:	7c9fffff 	.word	0x7c9fffff
 800bc20:	3fe00000 	.word	0x3fe00000
 800bc24:	bff00000 	.word	0xbff00000
 800bc28:	7fefffff 	.word	0x7fefffff

0800bc2c <_strtod_r>:
 800bc2c:	4b01      	ldr	r3, [pc, #4]	; (800bc34 <_strtod_r+0x8>)
 800bc2e:	f7ff b9f7 	b.w	800b020 <_strtod_l>
 800bc32:	bf00      	nop
 800bc34:	20000084 	.word	0x20000084

0800bc38 <strtof>:
 800bc38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800bcec <strtof+0xb4>
 800bc40:	4b26      	ldr	r3, [pc, #152]	; (800bcdc <strtof+0xa4>)
 800bc42:	460a      	mov	r2, r1
 800bc44:	ed2d 8b02 	vpush	{d8}
 800bc48:	4601      	mov	r1, r0
 800bc4a:	f8d8 0000 	ldr.w	r0, [r8]
 800bc4e:	f7ff f9e7 	bl	800b020 <_strtod_l>
 800bc52:	ec55 4b10 	vmov	r4, r5, d0
 800bc56:	ee10 2a10 	vmov	r2, s0
 800bc5a:	ee10 0a10 	vmov	r0, s0
 800bc5e:	462b      	mov	r3, r5
 800bc60:	4629      	mov	r1, r5
 800bc62:	f7f4 ff8b 	bl	8000b7c <__aeabi_dcmpun>
 800bc66:	b190      	cbz	r0, 800bc8e <strtof+0x56>
 800bc68:	2d00      	cmp	r5, #0
 800bc6a:	481d      	ldr	r0, [pc, #116]	; (800bce0 <strtof+0xa8>)
 800bc6c:	da09      	bge.n	800bc82 <strtof+0x4a>
 800bc6e:	f7ff f97d 	bl	800af6c <nanf>
 800bc72:	eeb1 8a40 	vneg.f32	s16, s0
 800bc76:	eeb0 0a48 	vmov.f32	s0, s16
 800bc7a:	ecbd 8b02 	vpop	{d8}
 800bc7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc82:	ecbd 8b02 	vpop	{d8}
 800bc86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc8a:	f7ff b96f 	b.w	800af6c <nanf>
 800bc8e:	4620      	mov	r0, r4
 800bc90:	4629      	mov	r1, r5
 800bc92:	f7f4 ffd1 	bl	8000c38 <__aeabi_d2f>
 800bc96:	ee08 0a10 	vmov	s16, r0
 800bc9a:	eddf 7a12 	vldr	s15, [pc, #72]	; 800bce4 <strtof+0xac>
 800bc9e:	eeb0 7ac8 	vabs.f32	s14, s16
 800bca2:	eeb4 7a67 	vcmp.f32	s14, s15
 800bca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcaa:	dde4      	ble.n	800bc76 <strtof+0x3e>
 800bcac:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800bcb0:	4b0d      	ldr	r3, [pc, #52]	; (800bce8 <strtof+0xb0>)
 800bcb2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	4639      	mov	r1, r7
 800bcba:	f7f4 ff5f 	bl	8000b7c <__aeabi_dcmpun>
 800bcbe:	b940      	cbnz	r0, 800bcd2 <strtof+0x9a>
 800bcc0:	4b09      	ldr	r3, [pc, #36]	; (800bce8 <strtof+0xb0>)
 800bcc2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	4639      	mov	r1, r7
 800bcca:	f7f4 ff39 	bl	8000b40 <__aeabi_dcmple>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d0d1      	beq.n	800bc76 <strtof+0x3e>
 800bcd2:	f8d8 3000 	ldr.w	r3, [r8]
 800bcd6:	2222      	movs	r2, #34	; 0x22
 800bcd8:	601a      	str	r2, [r3, #0]
 800bcda:	e7cc      	b.n	800bc76 <strtof+0x3e>
 800bcdc:	20000084 	.word	0x20000084
 800bce0:	0800efef 	.word	0x0800efef
 800bce4:	7f7fffff 	.word	0x7f7fffff
 800bce8:	7fefffff 	.word	0x7fefffff
 800bcec:	2000001c 	.word	0x2000001c

0800bcf0 <strtok>:
 800bcf0:	4b16      	ldr	r3, [pc, #88]	; (800bd4c <strtok+0x5c>)
 800bcf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcf4:	681e      	ldr	r6, [r3, #0]
 800bcf6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800bcf8:	4605      	mov	r5, r0
 800bcfa:	b9fc      	cbnz	r4, 800bd3c <strtok+0x4c>
 800bcfc:	2050      	movs	r0, #80	; 0x50
 800bcfe:	9101      	str	r1, [sp, #4]
 800bd00:	f001 fafe 	bl	800d300 <malloc>
 800bd04:	9901      	ldr	r1, [sp, #4]
 800bd06:	65b0      	str	r0, [r6, #88]	; 0x58
 800bd08:	4602      	mov	r2, r0
 800bd0a:	b920      	cbnz	r0, 800bd16 <strtok+0x26>
 800bd0c:	4b10      	ldr	r3, [pc, #64]	; (800bd50 <strtok+0x60>)
 800bd0e:	4811      	ldr	r0, [pc, #68]	; (800bd54 <strtok+0x64>)
 800bd10:	2157      	movs	r1, #87	; 0x57
 800bd12:	f000 f8d7 	bl	800bec4 <__assert_func>
 800bd16:	e9c0 4400 	strd	r4, r4, [r0]
 800bd1a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800bd1e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800bd22:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800bd26:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800bd2a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800bd2e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800bd32:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800bd36:	6184      	str	r4, [r0, #24]
 800bd38:	7704      	strb	r4, [r0, #28]
 800bd3a:	6244      	str	r4, [r0, #36]	; 0x24
 800bd3c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800bd3e:	2301      	movs	r3, #1
 800bd40:	4628      	mov	r0, r5
 800bd42:	b002      	add	sp, #8
 800bd44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bd48:	f000 b806 	b.w	800bd58 <__strtok_r>
 800bd4c:	2000001c 	.word	0x2000001c
 800bd50:	0800ef40 	.word	0x0800ef40
 800bd54:	0800ef57 	.word	0x0800ef57

0800bd58 <__strtok_r>:
 800bd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd5a:	b908      	cbnz	r0, 800bd60 <__strtok_r+0x8>
 800bd5c:	6810      	ldr	r0, [r2, #0]
 800bd5e:	b188      	cbz	r0, 800bd84 <__strtok_r+0x2c>
 800bd60:	4604      	mov	r4, r0
 800bd62:	4620      	mov	r0, r4
 800bd64:	f814 5b01 	ldrb.w	r5, [r4], #1
 800bd68:	460f      	mov	r7, r1
 800bd6a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800bd6e:	b91e      	cbnz	r6, 800bd78 <__strtok_r+0x20>
 800bd70:	b965      	cbnz	r5, 800bd8c <__strtok_r+0x34>
 800bd72:	6015      	str	r5, [r2, #0]
 800bd74:	4628      	mov	r0, r5
 800bd76:	e005      	b.n	800bd84 <__strtok_r+0x2c>
 800bd78:	42b5      	cmp	r5, r6
 800bd7a:	d1f6      	bne.n	800bd6a <__strtok_r+0x12>
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d1f0      	bne.n	800bd62 <__strtok_r+0xa>
 800bd80:	6014      	str	r4, [r2, #0]
 800bd82:	7003      	strb	r3, [r0, #0]
 800bd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd86:	461c      	mov	r4, r3
 800bd88:	e00c      	b.n	800bda4 <__strtok_r+0x4c>
 800bd8a:	b915      	cbnz	r5, 800bd92 <__strtok_r+0x3a>
 800bd8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd90:	460e      	mov	r6, r1
 800bd92:	f816 5b01 	ldrb.w	r5, [r6], #1
 800bd96:	42ab      	cmp	r3, r5
 800bd98:	d1f7      	bne.n	800bd8a <__strtok_r+0x32>
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d0f3      	beq.n	800bd86 <__strtok_r+0x2e>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800bda4:	6014      	str	r4, [r2, #0]
 800bda6:	e7ed      	b.n	800bd84 <__strtok_r+0x2c>

0800bda8 <_strtol_l.constprop.0>:
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdae:	d001      	beq.n	800bdb4 <_strtol_l.constprop.0+0xc>
 800bdb0:	2b24      	cmp	r3, #36	; 0x24
 800bdb2:	d906      	bls.n	800bdc2 <_strtol_l.constprop.0+0x1a>
 800bdb4:	f7fe fa20 	bl	800a1f8 <__errno>
 800bdb8:	2316      	movs	r3, #22
 800bdba:	6003      	str	r3, [r0, #0]
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdc2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bea8 <_strtol_l.constprop.0+0x100>
 800bdc6:	460d      	mov	r5, r1
 800bdc8:	462e      	mov	r6, r5
 800bdca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bdce:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bdd2:	f017 0708 	ands.w	r7, r7, #8
 800bdd6:	d1f7      	bne.n	800bdc8 <_strtol_l.constprop.0+0x20>
 800bdd8:	2c2d      	cmp	r4, #45	; 0x2d
 800bdda:	d132      	bne.n	800be42 <_strtol_l.constprop.0+0x9a>
 800bddc:	782c      	ldrb	r4, [r5, #0]
 800bdde:	2701      	movs	r7, #1
 800bde0:	1cb5      	adds	r5, r6, #2
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d05b      	beq.n	800be9e <_strtol_l.constprop.0+0xf6>
 800bde6:	2b10      	cmp	r3, #16
 800bde8:	d109      	bne.n	800bdfe <_strtol_l.constprop.0+0x56>
 800bdea:	2c30      	cmp	r4, #48	; 0x30
 800bdec:	d107      	bne.n	800bdfe <_strtol_l.constprop.0+0x56>
 800bdee:	782c      	ldrb	r4, [r5, #0]
 800bdf0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bdf4:	2c58      	cmp	r4, #88	; 0x58
 800bdf6:	d14d      	bne.n	800be94 <_strtol_l.constprop.0+0xec>
 800bdf8:	786c      	ldrb	r4, [r5, #1]
 800bdfa:	2310      	movs	r3, #16
 800bdfc:	3502      	adds	r5, #2
 800bdfe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800be02:	f108 38ff 	add.w	r8, r8, #4294967295
 800be06:	f04f 0c00 	mov.w	ip, #0
 800be0a:	fbb8 f9f3 	udiv	r9, r8, r3
 800be0e:	4666      	mov	r6, ip
 800be10:	fb03 8a19 	mls	sl, r3, r9, r8
 800be14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800be18:	f1be 0f09 	cmp.w	lr, #9
 800be1c:	d816      	bhi.n	800be4c <_strtol_l.constprop.0+0xa4>
 800be1e:	4674      	mov	r4, lr
 800be20:	42a3      	cmp	r3, r4
 800be22:	dd24      	ble.n	800be6e <_strtol_l.constprop.0+0xc6>
 800be24:	f1bc 0f00 	cmp.w	ip, #0
 800be28:	db1e      	blt.n	800be68 <_strtol_l.constprop.0+0xc0>
 800be2a:	45b1      	cmp	r9, r6
 800be2c:	d31c      	bcc.n	800be68 <_strtol_l.constprop.0+0xc0>
 800be2e:	d101      	bne.n	800be34 <_strtol_l.constprop.0+0x8c>
 800be30:	45a2      	cmp	sl, r4
 800be32:	db19      	blt.n	800be68 <_strtol_l.constprop.0+0xc0>
 800be34:	fb06 4603 	mla	r6, r6, r3, r4
 800be38:	f04f 0c01 	mov.w	ip, #1
 800be3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be40:	e7e8      	b.n	800be14 <_strtol_l.constprop.0+0x6c>
 800be42:	2c2b      	cmp	r4, #43	; 0x2b
 800be44:	bf04      	itt	eq
 800be46:	782c      	ldrbeq	r4, [r5, #0]
 800be48:	1cb5      	addeq	r5, r6, #2
 800be4a:	e7ca      	b.n	800bde2 <_strtol_l.constprop.0+0x3a>
 800be4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800be50:	f1be 0f19 	cmp.w	lr, #25
 800be54:	d801      	bhi.n	800be5a <_strtol_l.constprop.0+0xb2>
 800be56:	3c37      	subs	r4, #55	; 0x37
 800be58:	e7e2      	b.n	800be20 <_strtol_l.constprop.0+0x78>
 800be5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800be5e:	f1be 0f19 	cmp.w	lr, #25
 800be62:	d804      	bhi.n	800be6e <_strtol_l.constprop.0+0xc6>
 800be64:	3c57      	subs	r4, #87	; 0x57
 800be66:	e7db      	b.n	800be20 <_strtol_l.constprop.0+0x78>
 800be68:	f04f 3cff 	mov.w	ip, #4294967295
 800be6c:	e7e6      	b.n	800be3c <_strtol_l.constprop.0+0x94>
 800be6e:	f1bc 0f00 	cmp.w	ip, #0
 800be72:	da05      	bge.n	800be80 <_strtol_l.constprop.0+0xd8>
 800be74:	2322      	movs	r3, #34	; 0x22
 800be76:	6003      	str	r3, [r0, #0]
 800be78:	4646      	mov	r6, r8
 800be7a:	b942      	cbnz	r2, 800be8e <_strtol_l.constprop.0+0xe6>
 800be7c:	4630      	mov	r0, r6
 800be7e:	e79e      	b.n	800bdbe <_strtol_l.constprop.0+0x16>
 800be80:	b107      	cbz	r7, 800be84 <_strtol_l.constprop.0+0xdc>
 800be82:	4276      	negs	r6, r6
 800be84:	2a00      	cmp	r2, #0
 800be86:	d0f9      	beq.n	800be7c <_strtol_l.constprop.0+0xd4>
 800be88:	f1bc 0f00 	cmp.w	ip, #0
 800be8c:	d000      	beq.n	800be90 <_strtol_l.constprop.0+0xe8>
 800be8e:	1e69      	subs	r1, r5, #1
 800be90:	6011      	str	r1, [r2, #0]
 800be92:	e7f3      	b.n	800be7c <_strtol_l.constprop.0+0xd4>
 800be94:	2430      	movs	r4, #48	; 0x30
 800be96:	2b00      	cmp	r3, #0
 800be98:	d1b1      	bne.n	800bdfe <_strtol_l.constprop.0+0x56>
 800be9a:	2308      	movs	r3, #8
 800be9c:	e7af      	b.n	800bdfe <_strtol_l.constprop.0+0x56>
 800be9e:	2c30      	cmp	r4, #48	; 0x30
 800bea0:	d0a5      	beq.n	800bdee <_strtol_l.constprop.0+0x46>
 800bea2:	230a      	movs	r3, #10
 800bea4:	e7ab      	b.n	800bdfe <_strtol_l.constprop.0+0x56>
 800bea6:	bf00      	nop
 800bea8:	0800eff1 	.word	0x0800eff1

0800beac <_strtol_r>:
 800beac:	f7ff bf7c 	b.w	800bda8 <_strtol_l.constprop.0>

0800beb0 <strtol>:
 800beb0:	4613      	mov	r3, r2
 800beb2:	460a      	mov	r2, r1
 800beb4:	4601      	mov	r1, r0
 800beb6:	4802      	ldr	r0, [pc, #8]	; (800bec0 <strtol+0x10>)
 800beb8:	6800      	ldr	r0, [r0, #0]
 800beba:	f7ff bf75 	b.w	800bda8 <_strtol_l.constprop.0>
 800bebe:	bf00      	nop
 800bec0:	2000001c 	.word	0x2000001c

0800bec4 <__assert_func>:
 800bec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bec6:	4614      	mov	r4, r2
 800bec8:	461a      	mov	r2, r3
 800beca:	4b09      	ldr	r3, [pc, #36]	; (800bef0 <__assert_func+0x2c>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4605      	mov	r5, r0
 800bed0:	68d8      	ldr	r0, [r3, #12]
 800bed2:	b14c      	cbz	r4, 800bee8 <__assert_func+0x24>
 800bed4:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <__assert_func+0x30>)
 800bed6:	9100      	str	r1, [sp, #0]
 800bed8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bedc:	4906      	ldr	r1, [pc, #24]	; (800bef8 <__assert_func+0x34>)
 800bede:	462b      	mov	r3, r5
 800bee0:	f000 fe88 	bl	800cbf4 <fiprintf>
 800bee4:	f002 fb8e 	bl	800e604 <abort>
 800bee8:	4b04      	ldr	r3, [pc, #16]	; (800befc <__assert_func+0x38>)
 800beea:	461c      	mov	r4, r3
 800beec:	e7f3      	b.n	800bed6 <__assert_func+0x12>
 800beee:	bf00      	nop
 800bef0:	2000001c 	.word	0x2000001c
 800bef4:	0800efb4 	.word	0x0800efb4
 800bef8:	0800efc1 	.word	0x0800efc1
 800befc:	0800efef 	.word	0x0800efef

0800bf00 <quorem>:
 800bf00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf04:	6903      	ldr	r3, [r0, #16]
 800bf06:	690c      	ldr	r4, [r1, #16]
 800bf08:	42a3      	cmp	r3, r4
 800bf0a:	4607      	mov	r7, r0
 800bf0c:	f2c0 8081 	blt.w	800c012 <quorem+0x112>
 800bf10:	3c01      	subs	r4, #1
 800bf12:	f101 0814 	add.w	r8, r1, #20
 800bf16:	f100 0514 	add.w	r5, r0, #20
 800bf1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf1e:	9301      	str	r3, [sp, #4]
 800bf20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf34:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf38:	d331      	bcc.n	800bf9e <quorem+0x9e>
 800bf3a:	f04f 0e00 	mov.w	lr, #0
 800bf3e:	4640      	mov	r0, r8
 800bf40:	46ac      	mov	ip, r5
 800bf42:	46f2      	mov	sl, lr
 800bf44:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf48:	b293      	uxth	r3, r2
 800bf4a:	fb06 e303 	mla	r3, r6, r3, lr
 800bf4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	ebaa 0303 	sub.w	r3, sl, r3
 800bf58:	f8dc a000 	ldr.w	sl, [ip]
 800bf5c:	0c12      	lsrs	r2, r2, #16
 800bf5e:	fa13 f38a 	uxtah	r3, r3, sl
 800bf62:	fb06 e202 	mla	r2, r6, r2, lr
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	9b00      	ldr	r3, [sp, #0]
 800bf6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf6e:	b292      	uxth	r2, r2
 800bf70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bf74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bf78:	f8bd 3000 	ldrh.w	r3, [sp]
 800bf7c:	4581      	cmp	r9, r0
 800bf7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bf82:	f84c 3b04 	str.w	r3, [ip], #4
 800bf86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bf8a:	d2db      	bcs.n	800bf44 <quorem+0x44>
 800bf8c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bf90:	b92b      	cbnz	r3, 800bf9e <quorem+0x9e>
 800bf92:	9b01      	ldr	r3, [sp, #4]
 800bf94:	3b04      	subs	r3, #4
 800bf96:	429d      	cmp	r5, r3
 800bf98:	461a      	mov	r2, r3
 800bf9a:	d32e      	bcc.n	800bffa <quorem+0xfa>
 800bf9c:	613c      	str	r4, [r7, #16]
 800bf9e:	4638      	mov	r0, r7
 800bfa0:	f001 fc94 	bl	800d8cc <__mcmp>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	db24      	blt.n	800bff2 <quorem+0xf2>
 800bfa8:	3601      	adds	r6, #1
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f04f 0c00 	mov.w	ip, #0
 800bfb0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bfb4:	f8d0 e000 	ldr.w	lr, [r0]
 800bfb8:	b293      	uxth	r3, r2
 800bfba:	ebac 0303 	sub.w	r3, ip, r3
 800bfbe:	0c12      	lsrs	r2, r2, #16
 800bfc0:	fa13 f38e 	uxtah	r3, r3, lr
 800bfc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bfc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfd2:	45c1      	cmp	r9, r8
 800bfd4:	f840 3b04 	str.w	r3, [r0], #4
 800bfd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bfdc:	d2e8      	bcs.n	800bfb0 <quorem+0xb0>
 800bfde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfe2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfe6:	b922      	cbnz	r2, 800bff2 <quorem+0xf2>
 800bfe8:	3b04      	subs	r3, #4
 800bfea:	429d      	cmp	r5, r3
 800bfec:	461a      	mov	r2, r3
 800bfee:	d30a      	bcc.n	800c006 <quorem+0x106>
 800bff0:	613c      	str	r4, [r7, #16]
 800bff2:	4630      	mov	r0, r6
 800bff4:	b003      	add	sp, #12
 800bff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bffa:	6812      	ldr	r2, [r2, #0]
 800bffc:	3b04      	subs	r3, #4
 800bffe:	2a00      	cmp	r2, #0
 800c000:	d1cc      	bne.n	800bf9c <quorem+0x9c>
 800c002:	3c01      	subs	r4, #1
 800c004:	e7c7      	b.n	800bf96 <quorem+0x96>
 800c006:	6812      	ldr	r2, [r2, #0]
 800c008:	3b04      	subs	r3, #4
 800c00a:	2a00      	cmp	r2, #0
 800c00c:	d1f0      	bne.n	800bff0 <quorem+0xf0>
 800c00e:	3c01      	subs	r4, #1
 800c010:	e7eb      	b.n	800bfea <quorem+0xea>
 800c012:	2000      	movs	r0, #0
 800c014:	e7ee      	b.n	800bff4 <quorem+0xf4>
	...

0800c018 <_dtoa_r>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	ed2d 8b04 	vpush	{d8-d9}
 800c020:	ec57 6b10 	vmov	r6, r7, d0
 800c024:	b093      	sub	sp, #76	; 0x4c
 800c026:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c028:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c02c:	9106      	str	r1, [sp, #24]
 800c02e:	ee10 aa10 	vmov	sl, s0
 800c032:	4604      	mov	r4, r0
 800c034:	9209      	str	r2, [sp, #36]	; 0x24
 800c036:	930c      	str	r3, [sp, #48]	; 0x30
 800c038:	46bb      	mov	fp, r7
 800c03a:	b975      	cbnz	r5, 800c05a <_dtoa_r+0x42>
 800c03c:	2010      	movs	r0, #16
 800c03e:	f001 f95f 	bl	800d300 <malloc>
 800c042:	4602      	mov	r2, r0
 800c044:	6260      	str	r0, [r4, #36]	; 0x24
 800c046:	b920      	cbnz	r0, 800c052 <_dtoa_r+0x3a>
 800c048:	4ba7      	ldr	r3, [pc, #668]	; (800c2e8 <_dtoa_r+0x2d0>)
 800c04a:	21ea      	movs	r1, #234	; 0xea
 800c04c:	48a7      	ldr	r0, [pc, #668]	; (800c2ec <_dtoa_r+0x2d4>)
 800c04e:	f7ff ff39 	bl	800bec4 <__assert_func>
 800c052:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c056:	6005      	str	r5, [r0, #0]
 800c058:	60c5      	str	r5, [r0, #12]
 800c05a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c05c:	6819      	ldr	r1, [r3, #0]
 800c05e:	b151      	cbz	r1, 800c076 <_dtoa_r+0x5e>
 800c060:	685a      	ldr	r2, [r3, #4]
 800c062:	604a      	str	r2, [r1, #4]
 800c064:	2301      	movs	r3, #1
 800c066:	4093      	lsls	r3, r2
 800c068:	608b      	str	r3, [r1, #8]
 800c06a:	4620      	mov	r0, r4
 800c06c:	f001 f9a2 	bl	800d3b4 <_Bfree>
 800c070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c072:	2200      	movs	r2, #0
 800c074:	601a      	str	r2, [r3, #0]
 800c076:	1e3b      	subs	r3, r7, #0
 800c078:	bfaa      	itet	ge
 800c07a:	2300      	movge	r3, #0
 800c07c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c080:	f8c8 3000 	strge.w	r3, [r8]
 800c084:	4b9a      	ldr	r3, [pc, #616]	; (800c2f0 <_dtoa_r+0x2d8>)
 800c086:	bfbc      	itt	lt
 800c088:	2201      	movlt	r2, #1
 800c08a:	f8c8 2000 	strlt.w	r2, [r8]
 800c08e:	ea33 030b 	bics.w	r3, r3, fp
 800c092:	d11b      	bne.n	800c0cc <_dtoa_r+0xb4>
 800c094:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c096:	f242 730f 	movw	r3, #9999	; 0x270f
 800c09a:	6013      	str	r3, [r2, #0]
 800c09c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0a0:	4333      	orrs	r3, r6
 800c0a2:	f000 8592 	beq.w	800cbca <_dtoa_r+0xbb2>
 800c0a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0a8:	b963      	cbnz	r3, 800c0c4 <_dtoa_r+0xac>
 800c0aa:	4b92      	ldr	r3, [pc, #584]	; (800c2f4 <_dtoa_r+0x2dc>)
 800c0ac:	e022      	b.n	800c0f4 <_dtoa_r+0xdc>
 800c0ae:	4b92      	ldr	r3, [pc, #584]	; (800c2f8 <_dtoa_r+0x2e0>)
 800c0b0:	9301      	str	r3, [sp, #4]
 800c0b2:	3308      	adds	r3, #8
 800c0b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0b6:	6013      	str	r3, [r2, #0]
 800c0b8:	9801      	ldr	r0, [sp, #4]
 800c0ba:	b013      	add	sp, #76	; 0x4c
 800c0bc:	ecbd 8b04 	vpop	{d8-d9}
 800c0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0c4:	4b8b      	ldr	r3, [pc, #556]	; (800c2f4 <_dtoa_r+0x2dc>)
 800c0c6:	9301      	str	r3, [sp, #4]
 800c0c8:	3303      	adds	r3, #3
 800c0ca:	e7f3      	b.n	800c0b4 <_dtoa_r+0x9c>
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	4650      	mov	r0, sl
 800c0d2:	4659      	mov	r1, fp
 800c0d4:	f7f4 fd20 	bl	8000b18 <__aeabi_dcmpeq>
 800c0d8:	ec4b ab19 	vmov	d9, sl, fp
 800c0dc:	4680      	mov	r8, r0
 800c0de:	b158      	cbz	r0, 800c0f8 <_dtoa_r+0xe0>
 800c0e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	6013      	str	r3, [r2, #0]
 800c0e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	f000 856b 	beq.w	800cbc4 <_dtoa_r+0xbac>
 800c0ee:	4883      	ldr	r0, [pc, #524]	; (800c2fc <_dtoa_r+0x2e4>)
 800c0f0:	6018      	str	r0, [r3, #0]
 800c0f2:	1e43      	subs	r3, r0, #1
 800c0f4:	9301      	str	r3, [sp, #4]
 800c0f6:	e7df      	b.n	800c0b8 <_dtoa_r+0xa0>
 800c0f8:	ec4b ab10 	vmov	d0, sl, fp
 800c0fc:	aa10      	add	r2, sp, #64	; 0x40
 800c0fe:	a911      	add	r1, sp, #68	; 0x44
 800c100:	4620      	mov	r0, r4
 800c102:	f001 fd05 	bl	800db10 <__d2b>
 800c106:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c10a:	ee08 0a10 	vmov	s16, r0
 800c10e:	2d00      	cmp	r5, #0
 800c110:	f000 8084 	beq.w	800c21c <_dtoa_r+0x204>
 800c114:	ee19 3a90 	vmov	r3, s19
 800c118:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c11c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c120:	4656      	mov	r6, sl
 800c122:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c126:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c12a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c12e:	4b74      	ldr	r3, [pc, #464]	; (800c300 <_dtoa_r+0x2e8>)
 800c130:	2200      	movs	r2, #0
 800c132:	4630      	mov	r0, r6
 800c134:	4639      	mov	r1, r7
 800c136:	f7f4 f8cf 	bl	80002d8 <__aeabi_dsub>
 800c13a:	a365      	add	r3, pc, #404	; (adr r3, 800c2d0 <_dtoa_r+0x2b8>)
 800c13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c140:	f7f4 fa82 	bl	8000648 <__aeabi_dmul>
 800c144:	a364      	add	r3, pc, #400	; (adr r3, 800c2d8 <_dtoa_r+0x2c0>)
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	f7f4 f8c7 	bl	80002dc <__adddf3>
 800c14e:	4606      	mov	r6, r0
 800c150:	4628      	mov	r0, r5
 800c152:	460f      	mov	r7, r1
 800c154:	f7f4 fa0e 	bl	8000574 <__aeabi_i2d>
 800c158:	a361      	add	r3, pc, #388	; (adr r3, 800c2e0 <_dtoa_r+0x2c8>)
 800c15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15e:	f7f4 fa73 	bl	8000648 <__aeabi_dmul>
 800c162:	4602      	mov	r2, r0
 800c164:	460b      	mov	r3, r1
 800c166:	4630      	mov	r0, r6
 800c168:	4639      	mov	r1, r7
 800c16a:	f7f4 f8b7 	bl	80002dc <__adddf3>
 800c16e:	4606      	mov	r6, r0
 800c170:	460f      	mov	r7, r1
 800c172:	f7f4 fd19 	bl	8000ba8 <__aeabi_d2iz>
 800c176:	2200      	movs	r2, #0
 800c178:	9000      	str	r0, [sp, #0]
 800c17a:	2300      	movs	r3, #0
 800c17c:	4630      	mov	r0, r6
 800c17e:	4639      	mov	r1, r7
 800c180:	f7f4 fcd4 	bl	8000b2c <__aeabi_dcmplt>
 800c184:	b150      	cbz	r0, 800c19c <_dtoa_r+0x184>
 800c186:	9800      	ldr	r0, [sp, #0]
 800c188:	f7f4 f9f4 	bl	8000574 <__aeabi_i2d>
 800c18c:	4632      	mov	r2, r6
 800c18e:	463b      	mov	r3, r7
 800c190:	f7f4 fcc2 	bl	8000b18 <__aeabi_dcmpeq>
 800c194:	b910      	cbnz	r0, 800c19c <_dtoa_r+0x184>
 800c196:	9b00      	ldr	r3, [sp, #0]
 800c198:	3b01      	subs	r3, #1
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	9b00      	ldr	r3, [sp, #0]
 800c19e:	2b16      	cmp	r3, #22
 800c1a0:	d85a      	bhi.n	800c258 <_dtoa_r+0x240>
 800c1a2:	9a00      	ldr	r2, [sp, #0]
 800c1a4:	4b57      	ldr	r3, [pc, #348]	; (800c304 <_dtoa_r+0x2ec>)
 800c1a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ae:	ec51 0b19 	vmov	r0, r1, d9
 800c1b2:	f7f4 fcbb 	bl	8000b2c <__aeabi_dcmplt>
 800c1b6:	2800      	cmp	r0, #0
 800c1b8:	d050      	beq.n	800c25c <_dtoa_r+0x244>
 800c1ba:	9b00      	ldr	r3, [sp, #0]
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	9300      	str	r3, [sp, #0]
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1c6:	1b5d      	subs	r5, r3, r5
 800c1c8:	1e6b      	subs	r3, r5, #1
 800c1ca:	9305      	str	r3, [sp, #20]
 800c1cc:	bf45      	ittet	mi
 800c1ce:	f1c5 0301 	rsbmi	r3, r5, #1
 800c1d2:	9304      	strmi	r3, [sp, #16]
 800c1d4:	2300      	movpl	r3, #0
 800c1d6:	2300      	movmi	r3, #0
 800c1d8:	bf4c      	ite	mi
 800c1da:	9305      	strmi	r3, [sp, #20]
 800c1dc:	9304      	strpl	r3, [sp, #16]
 800c1de:	9b00      	ldr	r3, [sp, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	db3d      	blt.n	800c260 <_dtoa_r+0x248>
 800c1e4:	9b05      	ldr	r3, [sp, #20]
 800c1e6:	9a00      	ldr	r2, [sp, #0]
 800c1e8:	920a      	str	r2, [sp, #40]	; 0x28
 800c1ea:	4413      	add	r3, r2
 800c1ec:	9305      	str	r3, [sp, #20]
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	9307      	str	r3, [sp, #28]
 800c1f2:	9b06      	ldr	r3, [sp, #24]
 800c1f4:	2b09      	cmp	r3, #9
 800c1f6:	f200 8089 	bhi.w	800c30c <_dtoa_r+0x2f4>
 800c1fa:	2b05      	cmp	r3, #5
 800c1fc:	bfc4      	itt	gt
 800c1fe:	3b04      	subgt	r3, #4
 800c200:	9306      	strgt	r3, [sp, #24]
 800c202:	9b06      	ldr	r3, [sp, #24]
 800c204:	f1a3 0302 	sub.w	r3, r3, #2
 800c208:	bfcc      	ite	gt
 800c20a:	2500      	movgt	r5, #0
 800c20c:	2501      	movle	r5, #1
 800c20e:	2b03      	cmp	r3, #3
 800c210:	f200 8087 	bhi.w	800c322 <_dtoa_r+0x30a>
 800c214:	e8df f003 	tbb	[pc, r3]
 800c218:	59383a2d 	.word	0x59383a2d
 800c21c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c220:	441d      	add	r5, r3
 800c222:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c226:	2b20      	cmp	r3, #32
 800c228:	bfc1      	itttt	gt
 800c22a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c22e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c232:	fa0b f303 	lslgt.w	r3, fp, r3
 800c236:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c23a:	bfda      	itte	le
 800c23c:	f1c3 0320 	rsble	r3, r3, #32
 800c240:	fa06 f003 	lslle.w	r0, r6, r3
 800c244:	4318      	orrgt	r0, r3
 800c246:	f7f4 f985 	bl	8000554 <__aeabi_ui2d>
 800c24a:	2301      	movs	r3, #1
 800c24c:	4606      	mov	r6, r0
 800c24e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c252:	3d01      	subs	r5, #1
 800c254:	930e      	str	r3, [sp, #56]	; 0x38
 800c256:	e76a      	b.n	800c12e <_dtoa_r+0x116>
 800c258:	2301      	movs	r3, #1
 800c25a:	e7b2      	b.n	800c1c2 <_dtoa_r+0x1aa>
 800c25c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c25e:	e7b1      	b.n	800c1c4 <_dtoa_r+0x1ac>
 800c260:	9b04      	ldr	r3, [sp, #16]
 800c262:	9a00      	ldr	r2, [sp, #0]
 800c264:	1a9b      	subs	r3, r3, r2
 800c266:	9304      	str	r3, [sp, #16]
 800c268:	4253      	negs	r3, r2
 800c26a:	9307      	str	r3, [sp, #28]
 800c26c:	2300      	movs	r3, #0
 800c26e:	930a      	str	r3, [sp, #40]	; 0x28
 800c270:	e7bf      	b.n	800c1f2 <_dtoa_r+0x1da>
 800c272:	2300      	movs	r3, #0
 800c274:	9308      	str	r3, [sp, #32]
 800c276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c278:	2b00      	cmp	r3, #0
 800c27a:	dc55      	bgt.n	800c328 <_dtoa_r+0x310>
 800c27c:	2301      	movs	r3, #1
 800c27e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c282:	461a      	mov	r2, r3
 800c284:	9209      	str	r2, [sp, #36]	; 0x24
 800c286:	e00c      	b.n	800c2a2 <_dtoa_r+0x28a>
 800c288:	2301      	movs	r3, #1
 800c28a:	e7f3      	b.n	800c274 <_dtoa_r+0x25c>
 800c28c:	2300      	movs	r3, #0
 800c28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c290:	9308      	str	r3, [sp, #32]
 800c292:	9b00      	ldr	r3, [sp, #0]
 800c294:	4413      	add	r3, r2
 800c296:	9302      	str	r3, [sp, #8]
 800c298:	3301      	adds	r3, #1
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	9303      	str	r3, [sp, #12]
 800c29e:	bfb8      	it	lt
 800c2a0:	2301      	movlt	r3, #1
 800c2a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	6042      	str	r2, [r0, #4]
 800c2a8:	2204      	movs	r2, #4
 800c2aa:	f102 0614 	add.w	r6, r2, #20
 800c2ae:	429e      	cmp	r6, r3
 800c2b0:	6841      	ldr	r1, [r0, #4]
 800c2b2:	d93d      	bls.n	800c330 <_dtoa_r+0x318>
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	f001 f83d 	bl	800d334 <_Balloc>
 800c2ba:	9001      	str	r0, [sp, #4]
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d13b      	bne.n	800c338 <_dtoa_r+0x320>
 800c2c0:	4b11      	ldr	r3, [pc, #68]	; (800c308 <_dtoa_r+0x2f0>)
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c2c8:	e6c0      	b.n	800c04c <_dtoa_r+0x34>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	e7df      	b.n	800c28e <_dtoa_r+0x276>
 800c2ce:	bf00      	nop
 800c2d0:	636f4361 	.word	0x636f4361
 800c2d4:	3fd287a7 	.word	0x3fd287a7
 800c2d8:	8b60c8b3 	.word	0x8b60c8b3
 800c2dc:	3fc68a28 	.word	0x3fc68a28
 800c2e0:	509f79fb 	.word	0x509f79fb
 800c2e4:	3fd34413 	.word	0x3fd34413
 800c2e8:	0800ef40 	.word	0x0800ef40
 800c2ec:	0800f0fe 	.word	0x0800f0fe
 800c2f0:	7ff00000 	.word	0x7ff00000
 800c2f4:	0800f0fa 	.word	0x0800f0fa
 800c2f8:	0800f0f1 	.word	0x0800f0f1
 800c2fc:	0800eec5 	.word	0x0800eec5
 800c300:	3ff80000 	.word	0x3ff80000
 800c304:	0800f268 	.word	0x0800f268
 800c308:	0800f159 	.word	0x0800f159
 800c30c:	2501      	movs	r5, #1
 800c30e:	2300      	movs	r3, #0
 800c310:	9306      	str	r3, [sp, #24]
 800c312:	9508      	str	r5, [sp, #32]
 800c314:	f04f 33ff 	mov.w	r3, #4294967295
 800c318:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c31c:	2200      	movs	r2, #0
 800c31e:	2312      	movs	r3, #18
 800c320:	e7b0      	b.n	800c284 <_dtoa_r+0x26c>
 800c322:	2301      	movs	r3, #1
 800c324:	9308      	str	r3, [sp, #32]
 800c326:	e7f5      	b.n	800c314 <_dtoa_r+0x2fc>
 800c328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c32a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c32e:	e7b8      	b.n	800c2a2 <_dtoa_r+0x28a>
 800c330:	3101      	adds	r1, #1
 800c332:	6041      	str	r1, [r0, #4]
 800c334:	0052      	lsls	r2, r2, #1
 800c336:	e7b8      	b.n	800c2aa <_dtoa_r+0x292>
 800c338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c33a:	9a01      	ldr	r2, [sp, #4]
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	9b03      	ldr	r3, [sp, #12]
 800c340:	2b0e      	cmp	r3, #14
 800c342:	f200 809d 	bhi.w	800c480 <_dtoa_r+0x468>
 800c346:	2d00      	cmp	r5, #0
 800c348:	f000 809a 	beq.w	800c480 <_dtoa_r+0x468>
 800c34c:	9b00      	ldr	r3, [sp, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	dd32      	ble.n	800c3b8 <_dtoa_r+0x3a0>
 800c352:	4ab7      	ldr	r2, [pc, #732]	; (800c630 <_dtoa_r+0x618>)
 800c354:	f003 030f 	and.w	r3, r3, #15
 800c358:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c35c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c360:	9b00      	ldr	r3, [sp, #0]
 800c362:	05d8      	lsls	r0, r3, #23
 800c364:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c368:	d516      	bpl.n	800c398 <_dtoa_r+0x380>
 800c36a:	4bb2      	ldr	r3, [pc, #712]	; (800c634 <_dtoa_r+0x61c>)
 800c36c:	ec51 0b19 	vmov	r0, r1, d9
 800c370:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c374:	f7f4 fa92 	bl	800089c <__aeabi_ddiv>
 800c378:	f007 070f 	and.w	r7, r7, #15
 800c37c:	4682      	mov	sl, r0
 800c37e:	468b      	mov	fp, r1
 800c380:	2503      	movs	r5, #3
 800c382:	4eac      	ldr	r6, [pc, #688]	; (800c634 <_dtoa_r+0x61c>)
 800c384:	b957      	cbnz	r7, 800c39c <_dtoa_r+0x384>
 800c386:	4642      	mov	r2, r8
 800c388:	464b      	mov	r3, r9
 800c38a:	4650      	mov	r0, sl
 800c38c:	4659      	mov	r1, fp
 800c38e:	f7f4 fa85 	bl	800089c <__aeabi_ddiv>
 800c392:	4682      	mov	sl, r0
 800c394:	468b      	mov	fp, r1
 800c396:	e028      	b.n	800c3ea <_dtoa_r+0x3d2>
 800c398:	2502      	movs	r5, #2
 800c39a:	e7f2      	b.n	800c382 <_dtoa_r+0x36a>
 800c39c:	07f9      	lsls	r1, r7, #31
 800c39e:	d508      	bpl.n	800c3b2 <_dtoa_r+0x39a>
 800c3a0:	4640      	mov	r0, r8
 800c3a2:	4649      	mov	r1, r9
 800c3a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c3a8:	f7f4 f94e 	bl	8000648 <__aeabi_dmul>
 800c3ac:	3501      	adds	r5, #1
 800c3ae:	4680      	mov	r8, r0
 800c3b0:	4689      	mov	r9, r1
 800c3b2:	107f      	asrs	r7, r7, #1
 800c3b4:	3608      	adds	r6, #8
 800c3b6:	e7e5      	b.n	800c384 <_dtoa_r+0x36c>
 800c3b8:	f000 809b 	beq.w	800c4f2 <_dtoa_r+0x4da>
 800c3bc:	9b00      	ldr	r3, [sp, #0]
 800c3be:	4f9d      	ldr	r7, [pc, #628]	; (800c634 <_dtoa_r+0x61c>)
 800c3c0:	425e      	negs	r6, r3
 800c3c2:	4b9b      	ldr	r3, [pc, #620]	; (800c630 <_dtoa_r+0x618>)
 800c3c4:	f006 020f 	and.w	r2, r6, #15
 800c3c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	ec51 0b19 	vmov	r0, r1, d9
 800c3d4:	f7f4 f938 	bl	8000648 <__aeabi_dmul>
 800c3d8:	1136      	asrs	r6, r6, #4
 800c3da:	4682      	mov	sl, r0
 800c3dc:	468b      	mov	fp, r1
 800c3de:	2300      	movs	r3, #0
 800c3e0:	2502      	movs	r5, #2
 800c3e2:	2e00      	cmp	r6, #0
 800c3e4:	d17a      	bne.n	800c4dc <_dtoa_r+0x4c4>
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d1d3      	bne.n	800c392 <_dtoa_r+0x37a>
 800c3ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	f000 8082 	beq.w	800c4f6 <_dtoa_r+0x4de>
 800c3f2:	4b91      	ldr	r3, [pc, #580]	; (800c638 <_dtoa_r+0x620>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	4650      	mov	r0, sl
 800c3f8:	4659      	mov	r1, fp
 800c3fa:	f7f4 fb97 	bl	8000b2c <__aeabi_dcmplt>
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d079      	beq.n	800c4f6 <_dtoa_r+0x4de>
 800c402:	9b03      	ldr	r3, [sp, #12]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d076      	beq.n	800c4f6 <_dtoa_r+0x4de>
 800c408:	9b02      	ldr	r3, [sp, #8]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	dd36      	ble.n	800c47c <_dtoa_r+0x464>
 800c40e:	9b00      	ldr	r3, [sp, #0]
 800c410:	4650      	mov	r0, sl
 800c412:	4659      	mov	r1, fp
 800c414:	1e5f      	subs	r7, r3, #1
 800c416:	2200      	movs	r2, #0
 800c418:	4b88      	ldr	r3, [pc, #544]	; (800c63c <_dtoa_r+0x624>)
 800c41a:	f7f4 f915 	bl	8000648 <__aeabi_dmul>
 800c41e:	9e02      	ldr	r6, [sp, #8]
 800c420:	4682      	mov	sl, r0
 800c422:	468b      	mov	fp, r1
 800c424:	3501      	adds	r5, #1
 800c426:	4628      	mov	r0, r5
 800c428:	f7f4 f8a4 	bl	8000574 <__aeabi_i2d>
 800c42c:	4652      	mov	r2, sl
 800c42e:	465b      	mov	r3, fp
 800c430:	f7f4 f90a 	bl	8000648 <__aeabi_dmul>
 800c434:	4b82      	ldr	r3, [pc, #520]	; (800c640 <_dtoa_r+0x628>)
 800c436:	2200      	movs	r2, #0
 800c438:	f7f3 ff50 	bl	80002dc <__adddf3>
 800c43c:	46d0      	mov	r8, sl
 800c43e:	46d9      	mov	r9, fp
 800c440:	4682      	mov	sl, r0
 800c442:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c446:	2e00      	cmp	r6, #0
 800c448:	d158      	bne.n	800c4fc <_dtoa_r+0x4e4>
 800c44a:	4b7e      	ldr	r3, [pc, #504]	; (800c644 <_dtoa_r+0x62c>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	4640      	mov	r0, r8
 800c450:	4649      	mov	r1, r9
 800c452:	f7f3 ff41 	bl	80002d8 <__aeabi_dsub>
 800c456:	4652      	mov	r2, sl
 800c458:	465b      	mov	r3, fp
 800c45a:	4680      	mov	r8, r0
 800c45c:	4689      	mov	r9, r1
 800c45e:	f7f4 fb83 	bl	8000b68 <__aeabi_dcmpgt>
 800c462:	2800      	cmp	r0, #0
 800c464:	f040 8295 	bne.w	800c992 <_dtoa_r+0x97a>
 800c468:	4652      	mov	r2, sl
 800c46a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c46e:	4640      	mov	r0, r8
 800c470:	4649      	mov	r1, r9
 800c472:	f7f4 fb5b 	bl	8000b2c <__aeabi_dcmplt>
 800c476:	2800      	cmp	r0, #0
 800c478:	f040 8289 	bne.w	800c98e <_dtoa_r+0x976>
 800c47c:	ec5b ab19 	vmov	sl, fp, d9
 800c480:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c482:	2b00      	cmp	r3, #0
 800c484:	f2c0 8148 	blt.w	800c718 <_dtoa_r+0x700>
 800c488:	9a00      	ldr	r2, [sp, #0]
 800c48a:	2a0e      	cmp	r2, #14
 800c48c:	f300 8144 	bgt.w	800c718 <_dtoa_r+0x700>
 800c490:	4b67      	ldr	r3, [pc, #412]	; (800c630 <_dtoa_r+0x618>)
 800c492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c496:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c49a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f280 80d5 	bge.w	800c64c <_dtoa_r+0x634>
 800c4a2:	9b03      	ldr	r3, [sp, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f300 80d1 	bgt.w	800c64c <_dtoa_r+0x634>
 800c4aa:	f040 826f 	bne.w	800c98c <_dtoa_r+0x974>
 800c4ae:	4b65      	ldr	r3, [pc, #404]	; (800c644 <_dtoa_r+0x62c>)
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	4640      	mov	r0, r8
 800c4b4:	4649      	mov	r1, r9
 800c4b6:	f7f4 f8c7 	bl	8000648 <__aeabi_dmul>
 800c4ba:	4652      	mov	r2, sl
 800c4bc:	465b      	mov	r3, fp
 800c4be:	f7f4 fb49 	bl	8000b54 <__aeabi_dcmpge>
 800c4c2:	9e03      	ldr	r6, [sp, #12]
 800c4c4:	4637      	mov	r7, r6
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	f040 8245 	bne.w	800c956 <_dtoa_r+0x93e>
 800c4cc:	9d01      	ldr	r5, [sp, #4]
 800c4ce:	2331      	movs	r3, #49	; 0x31
 800c4d0:	f805 3b01 	strb.w	r3, [r5], #1
 800c4d4:	9b00      	ldr	r3, [sp, #0]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	9300      	str	r3, [sp, #0]
 800c4da:	e240      	b.n	800c95e <_dtoa_r+0x946>
 800c4dc:	07f2      	lsls	r2, r6, #31
 800c4de:	d505      	bpl.n	800c4ec <_dtoa_r+0x4d4>
 800c4e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4e4:	f7f4 f8b0 	bl	8000648 <__aeabi_dmul>
 800c4e8:	3501      	adds	r5, #1
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	1076      	asrs	r6, r6, #1
 800c4ee:	3708      	adds	r7, #8
 800c4f0:	e777      	b.n	800c3e2 <_dtoa_r+0x3ca>
 800c4f2:	2502      	movs	r5, #2
 800c4f4:	e779      	b.n	800c3ea <_dtoa_r+0x3d2>
 800c4f6:	9f00      	ldr	r7, [sp, #0]
 800c4f8:	9e03      	ldr	r6, [sp, #12]
 800c4fa:	e794      	b.n	800c426 <_dtoa_r+0x40e>
 800c4fc:	9901      	ldr	r1, [sp, #4]
 800c4fe:	4b4c      	ldr	r3, [pc, #304]	; (800c630 <_dtoa_r+0x618>)
 800c500:	4431      	add	r1, r6
 800c502:	910d      	str	r1, [sp, #52]	; 0x34
 800c504:	9908      	ldr	r1, [sp, #32]
 800c506:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c50a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c50e:	2900      	cmp	r1, #0
 800c510:	d043      	beq.n	800c59a <_dtoa_r+0x582>
 800c512:	494d      	ldr	r1, [pc, #308]	; (800c648 <_dtoa_r+0x630>)
 800c514:	2000      	movs	r0, #0
 800c516:	f7f4 f9c1 	bl	800089c <__aeabi_ddiv>
 800c51a:	4652      	mov	r2, sl
 800c51c:	465b      	mov	r3, fp
 800c51e:	f7f3 fedb 	bl	80002d8 <__aeabi_dsub>
 800c522:	9d01      	ldr	r5, [sp, #4]
 800c524:	4682      	mov	sl, r0
 800c526:	468b      	mov	fp, r1
 800c528:	4649      	mov	r1, r9
 800c52a:	4640      	mov	r0, r8
 800c52c:	f7f4 fb3c 	bl	8000ba8 <__aeabi_d2iz>
 800c530:	4606      	mov	r6, r0
 800c532:	f7f4 f81f 	bl	8000574 <__aeabi_i2d>
 800c536:	4602      	mov	r2, r0
 800c538:	460b      	mov	r3, r1
 800c53a:	4640      	mov	r0, r8
 800c53c:	4649      	mov	r1, r9
 800c53e:	f7f3 fecb 	bl	80002d8 <__aeabi_dsub>
 800c542:	3630      	adds	r6, #48	; 0x30
 800c544:	f805 6b01 	strb.w	r6, [r5], #1
 800c548:	4652      	mov	r2, sl
 800c54a:	465b      	mov	r3, fp
 800c54c:	4680      	mov	r8, r0
 800c54e:	4689      	mov	r9, r1
 800c550:	f7f4 faec 	bl	8000b2c <__aeabi_dcmplt>
 800c554:	2800      	cmp	r0, #0
 800c556:	d163      	bne.n	800c620 <_dtoa_r+0x608>
 800c558:	4642      	mov	r2, r8
 800c55a:	464b      	mov	r3, r9
 800c55c:	4936      	ldr	r1, [pc, #216]	; (800c638 <_dtoa_r+0x620>)
 800c55e:	2000      	movs	r0, #0
 800c560:	f7f3 feba 	bl	80002d8 <__aeabi_dsub>
 800c564:	4652      	mov	r2, sl
 800c566:	465b      	mov	r3, fp
 800c568:	f7f4 fae0 	bl	8000b2c <__aeabi_dcmplt>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	f040 80b5 	bne.w	800c6dc <_dtoa_r+0x6c4>
 800c572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c574:	429d      	cmp	r5, r3
 800c576:	d081      	beq.n	800c47c <_dtoa_r+0x464>
 800c578:	4b30      	ldr	r3, [pc, #192]	; (800c63c <_dtoa_r+0x624>)
 800c57a:	2200      	movs	r2, #0
 800c57c:	4650      	mov	r0, sl
 800c57e:	4659      	mov	r1, fp
 800c580:	f7f4 f862 	bl	8000648 <__aeabi_dmul>
 800c584:	4b2d      	ldr	r3, [pc, #180]	; (800c63c <_dtoa_r+0x624>)
 800c586:	4682      	mov	sl, r0
 800c588:	468b      	mov	fp, r1
 800c58a:	4640      	mov	r0, r8
 800c58c:	4649      	mov	r1, r9
 800c58e:	2200      	movs	r2, #0
 800c590:	f7f4 f85a 	bl	8000648 <__aeabi_dmul>
 800c594:	4680      	mov	r8, r0
 800c596:	4689      	mov	r9, r1
 800c598:	e7c6      	b.n	800c528 <_dtoa_r+0x510>
 800c59a:	4650      	mov	r0, sl
 800c59c:	4659      	mov	r1, fp
 800c59e:	f7f4 f853 	bl	8000648 <__aeabi_dmul>
 800c5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5a4:	9d01      	ldr	r5, [sp, #4]
 800c5a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c5a8:	4682      	mov	sl, r0
 800c5aa:	468b      	mov	fp, r1
 800c5ac:	4649      	mov	r1, r9
 800c5ae:	4640      	mov	r0, r8
 800c5b0:	f7f4 fafa 	bl	8000ba8 <__aeabi_d2iz>
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	f7f3 ffdd 	bl	8000574 <__aeabi_i2d>
 800c5ba:	3630      	adds	r6, #48	; 0x30
 800c5bc:	4602      	mov	r2, r0
 800c5be:	460b      	mov	r3, r1
 800c5c0:	4640      	mov	r0, r8
 800c5c2:	4649      	mov	r1, r9
 800c5c4:	f7f3 fe88 	bl	80002d8 <__aeabi_dsub>
 800c5c8:	f805 6b01 	strb.w	r6, [r5], #1
 800c5cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5ce:	429d      	cmp	r5, r3
 800c5d0:	4680      	mov	r8, r0
 800c5d2:	4689      	mov	r9, r1
 800c5d4:	f04f 0200 	mov.w	r2, #0
 800c5d8:	d124      	bne.n	800c624 <_dtoa_r+0x60c>
 800c5da:	4b1b      	ldr	r3, [pc, #108]	; (800c648 <_dtoa_r+0x630>)
 800c5dc:	4650      	mov	r0, sl
 800c5de:	4659      	mov	r1, fp
 800c5e0:	f7f3 fe7c 	bl	80002dc <__adddf3>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	4649      	mov	r1, r9
 800c5ec:	f7f4 fabc 	bl	8000b68 <__aeabi_dcmpgt>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	d173      	bne.n	800c6dc <_dtoa_r+0x6c4>
 800c5f4:	4652      	mov	r2, sl
 800c5f6:	465b      	mov	r3, fp
 800c5f8:	4913      	ldr	r1, [pc, #76]	; (800c648 <_dtoa_r+0x630>)
 800c5fa:	2000      	movs	r0, #0
 800c5fc:	f7f3 fe6c 	bl	80002d8 <__aeabi_dsub>
 800c600:	4602      	mov	r2, r0
 800c602:	460b      	mov	r3, r1
 800c604:	4640      	mov	r0, r8
 800c606:	4649      	mov	r1, r9
 800c608:	f7f4 fa90 	bl	8000b2c <__aeabi_dcmplt>
 800c60c:	2800      	cmp	r0, #0
 800c60e:	f43f af35 	beq.w	800c47c <_dtoa_r+0x464>
 800c612:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c614:	1e6b      	subs	r3, r5, #1
 800c616:	930f      	str	r3, [sp, #60]	; 0x3c
 800c618:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c61c:	2b30      	cmp	r3, #48	; 0x30
 800c61e:	d0f8      	beq.n	800c612 <_dtoa_r+0x5fa>
 800c620:	9700      	str	r7, [sp, #0]
 800c622:	e049      	b.n	800c6b8 <_dtoa_r+0x6a0>
 800c624:	4b05      	ldr	r3, [pc, #20]	; (800c63c <_dtoa_r+0x624>)
 800c626:	f7f4 f80f 	bl	8000648 <__aeabi_dmul>
 800c62a:	4680      	mov	r8, r0
 800c62c:	4689      	mov	r9, r1
 800c62e:	e7bd      	b.n	800c5ac <_dtoa_r+0x594>
 800c630:	0800f268 	.word	0x0800f268
 800c634:	0800f240 	.word	0x0800f240
 800c638:	3ff00000 	.word	0x3ff00000
 800c63c:	40240000 	.word	0x40240000
 800c640:	401c0000 	.word	0x401c0000
 800c644:	40140000 	.word	0x40140000
 800c648:	3fe00000 	.word	0x3fe00000
 800c64c:	9d01      	ldr	r5, [sp, #4]
 800c64e:	4656      	mov	r6, sl
 800c650:	465f      	mov	r7, fp
 800c652:	4642      	mov	r2, r8
 800c654:	464b      	mov	r3, r9
 800c656:	4630      	mov	r0, r6
 800c658:	4639      	mov	r1, r7
 800c65a:	f7f4 f91f 	bl	800089c <__aeabi_ddiv>
 800c65e:	f7f4 faa3 	bl	8000ba8 <__aeabi_d2iz>
 800c662:	4682      	mov	sl, r0
 800c664:	f7f3 ff86 	bl	8000574 <__aeabi_i2d>
 800c668:	4642      	mov	r2, r8
 800c66a:	464b      	mov	r3, r9
 800c66c:	f7f3 ffec 	bl	8000648 <__aeabi_dmul>
 800c670:	4602      	mov	r2, r0
 800c672:	460b      	mov	r3, r1
 800c674:	4630      	mov	r0, r6
 800c676:	4639      	mov	r1, r7
 800c678:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c67c:	f7f3 fe2c 	bl	80002d8 <__aeabi_dsub>
 800c680:	f805 6b01 	strb.w	r6, [r5], #1
 800c684:	9e01      	ldr	r6, [sp, #4]
 800c686:	9f03      	ldr	r7, [sp, #12]
 800c688:	1bae      	subs	r6, r5, r6
 800c68a:	42b7      	cmp	r7, r6
 800c68c:	4602      	mov	r2, r0
 800c68e:	460b      	mov	r3, r1
 800c690:	d135      	bne.n	800c6fe <_dtoa_r+0x6e6>
 800c692:	f7f3 fe23 	bl	80002dc <__adddf3>
 800c696:	4642      	mov	r2, r8
 800c698:	464b      	mov	r3, r9
 800c69a:	4606      	mov	r6, r0
 800c69c:	460f      	mov	r7, r1
 800c69e:	f7f4 fa63 	bl	8000b68 <__aeabi_dcmpgt>
 800c6a2:	b9d0      	cbnz	r0, 800c6da <_dtoa_r+0x6c2>
 800c6a4:	4642      	mov	r2, r8
 800c6a6:	464b      	mov	r3, r9
 800c6a8:	4630      	mov	r0, r6
 800c6aa:	4639      	mov	r1, r7
 800c6ac:	f7f4 fa34 	bl	8000b18 <__aeabi_dcmpeq>
 800c6b0:	b110      	cbz	r0, 800c6b8 <_dtoa_r+0x6a0>
 800c6b2:	f01a 0f01 	tst.w	sl, #1
 800c6b6:	d110      	bne.n	800c6da <_dtoa_r+0x6c2>
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	ee18 1a10 	vmov	r1, s16
 800c6be:	f000 fe79 	bl	800d3b4 <_Bfree>
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	9800      	ldr	r0, [sp, #0]
 800c6c6:	702b      	strb	r3, [r5, #0]
 800c6c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6ca:	3001      	adds	r0, #1
 800c6cc:	6018      	str	r0, [r3, #0]
 800c6ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f43f acf1 	beq.w	800c0b8 <_dtoa_r+0xa0>
 800c6d6:	601d      	str	r5, [r3, #0]
 800c6d8:	e4ee      	b.n	800c0b8 <_dtoa_r+0xa0>
 800c6da:	9f00      	ldr	r7, [sp, #0]
 800c6dc:	462b      	mov	r3, r5
 800c6de:	461d      	mov	r5, r3
 800c6e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6e4:	2a39      	cmp	r2, #57	; 0x39
 800c6e6:	d106      	bne.n	800c6f6 <_dtoa_r+0x6de>
 800c6e8:	9a01      	ldr	r2, [sp, #4]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d1f7      	bne.n	800c6de <_dtoa_r+0x6c6>
 800c6ee:	9901      	ldr	r1, [sp, #4]
 800c6f0:	2230      	movs	r2, #48	; 0x30
 800c6f2:	3701      	adds	r7, #1
 800c6f4:	700a      	strb	r2, [r1, #0]
 800c6f6:	781a      	ldrb	r2, [r3, #0]
 800c6f8:	3201      	adds	r2, #1
 800c6fa:	701a      	strb	r2, [r3, #0]
 800c6fc:	e790      	b.n	800c620 <_dtoa_r+0x608>
 800c6fe:	4ba6      	ldr	r3, [pc, #664]	; (800c998 <_dtoa_r+0x980>)
 800c700:	2200      	movs	r2, #0
 800c702:	f7f3 ffa1 	bl	8000648 <__aeabi_dmul>
 800c706:	2200      	movs	r2, #0
 800c708:	2300      	movs	r3, #0
 800c70a:	4606      	mov	r6, r0
 800c70c:	460f      	mov	r7, r1
 800c70e:	f7f4 fa03 	bl	8000b18 <__aeabi_dcmpeq>
 800c712:	2800      	cmp	r0, #0
 800c714:	d09d      	beq.n	800c652 <_dtoa_r+0x63a>
 800c716:	e7cf      	b.n	800c6b8 <_dtoa_r+0x6a0>
 800c718:	9a08      	ldr	r2, [sp, #32]
 800c71a:	2a00      	cmp	r2, #0
 800c71c:	f000 80d7 	beq.w	800c8ce <_dtoa_r+0x8b6>
 800c720:	9a06      	ldr	r2, [sp, #24]
 800c722:	2a01      	cmp	r2, #1
 800c724:	f300 80ba 	bgt.w	800c89c <_dtoa_r+0x884>
 800c728:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c72a:	2a00      	cmp	r2, #0
 800c72c:	f000 80b2 	beq.w	800c894 <_dtoa_r+0x87c>
 800c730:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c734:	9e07      	ldr	r6, [sp, #28]
 800c736:	9d04      	ldr	r5, [sp, #16]
 800c738:	9a04      	ldr	r2, [sp, #16]
 800c73a:	441a      	add	r2, r3
 800c73c:	9204      	str	r2, [sp, #16]
 800c73e:	9a05      	ldr	r2, [sp, #20]
 800c740:	2101      	movs	r1, #1
 800c742:	441a      	add	r2, r3
 800c744:	4620      	mov	r0, r4
 800c746:	9205      	str	r2, [sp, #20]
 800c748:	f000 ff36 	bl	800d5b8 <__i2b>
 800c74c:	4607      	mov	r7, r0
 800c74e:	2d00      	cmp	r5, #0
 800c750:	dd0c      	ble.n	800c76c <_dtoa_r+0x754>
 800c752:	9b05      	ldr	r3, [sp, #20]
 800c754:	2b00      	cmp	r3, #0
 800c756:	dd09      	ble.n	800c76c <_dtoa_r+0x754>
 800c758:	42ab      	cmp	r3, r5
 800c75a:	9a04      	ldr	r2, [sp, #16]
 800c75c:	bfa8      	it	ge
 800c75e:	462b      	movge	r3, r5
 800c760:	1ad2      	subs	r2, r2, r3
 800c762:	9204      	str	r2, [sp, #16]
 800c764:	9a05      	ldr	r2, [sp, #20]
 800c766:	1aed      	subs	r5, r5, r3
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	9305      	str	r3, [sp, #20]
 800c76c:	9b07      	ldr	r3, [sp, #28]
 800c76e:	b31b      	cbz	r3, 800c7b8 <_dtoa_r+0x7a0>
 800c770:	9b08      	ldr	r3, [sp, #32]
 800c772:	2b00      	cmp	r3, #0
 800c774:	f000 80af 	beq.w	800c8d6 <_dtoa_r+0x8be>
 800c778:	2e00      	cmp	r6, #0
 800c77a:	dd13      	ble.n	800c7a4 <_dtoa_r+0x78c>
 800c77c:	4639      	mov	r1, r7
 800c77e:	4632      	mov	r2, r6
 800c780:	4620      	mov	r0, r4
 800c782:	f000 ffd9 	bl	800d738 <__pow5mult>
 800c786:	ee18 2a10 	vmov	r2, s16
 800c78a:	4601      	mov	r1, r0
 800c78c:	4607      	mov	r7, r0
 800c78e:	4620      	mov	r0, r4
 800c790:	f000 ff28 	bl	800d5e4 <__multiply>
 800c794:	ee18 1a10 	vmov	r1, s16
 800c798:	4680      	mov	r8, r0
 800c79a:	4620      	mov	r0, r4
 800c79c:	f000 fe0a 	bl	800d3b4 <_Bfree>
 800c7a0:	ee08 8a10 	vmov	s16, r8
 800c7a4:	9b07      	ldr	r3, [sp, #28]
 800c7a6:	1b9a      	subs	r2, r3, r6
 800c7a8:	d006      	beq.n	800c7b8 <_dtoa_r+0x7a0>
 800c7aa:	ee18 1a10 	vmov	r1, s16
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f000 ffc2 	bl	800d738 <__pow5mult>
 800c7b4:	ee08 0a10 	vmov	s16, r0
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	f000 fefc 	bl	800d5b8 <__i2b>
 800c7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	4606      	mov	r6, r0
 800c7c6:	f340 8088 	ble.w	800c8da <_dtoa_r+0x8c2>
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	4601      	mov	r1, r0
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f000 ffb2 	bl	800d738 <__pow5mult>
 800c7d4:	9b06      	ldr	r3, [sp, #24]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	4606      	mov	r6, r0
 800c7da:	f340 8081 	ble.w	800c8e0 <_dtoa_r+0x8c8>
 800c7de:	f04f 0800 	mov.w	r8, #0
 800c7e2:	6933      	ldr	r3, [r6, #16]
 800c7e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c7e8:	6918      	ldr	r0, [r3, #16]
 800c7ea:	f000 fe95 	bl	800d518 <__hi0bits>
 800c7ee:	f1c0 0020 	rsb	r0, r0, #32
 800c7f2:	9b05      	ldr	r3, [sp, #20]
 800c7f4:	4418      	add	r0, r3
 800c7f6:	f010 001f 	ands.w	r0, r0, #31
 800c7fa:	f000 8092 	beq.w	800c922 <_dtoa_r+0x90a>
 800c7fe:	f1c0 0320 	rsb	r3, r0, #32
 800c802:	2b04      	cmp	r3, #4
 800c804:	f340 808a 	ble.w	800c91c <_dtoa_r+0x904>
 800c808:	f1c0 001c 	rsb	r0, r0, #28
 800c80c:	9b04      	ldr	r3, [sp, #16]
 800c80e:	4403      	add	r3, r0
 800c810:	9304      	str	r3, [sp, #16]
 800c812:	9b05      	ldr	r3, [sp, #20]
 800c814:	4403      	add	r3, r0
 800c816:	4405      	add	r5, r0
 800c818:	9305      	str	r3, [sp, #20]
 800c81a:	9b04      	ldr	r3, [sp, #16]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	dd07      	ble.n	800c830 <_dtoa_r+0x818>
 800c820:	ee18 1a10 	vmov	r1, s16
 800c824:	461a      	mov	r2, r3
 800c826:	4620      	mov	r0, r4
 800c828:	f000 ffe0 	bl	800d7ec <__lshift>
 800c82c:	ee08 0a10 	vmov	s16, r0
 800c830:	9b05      	ldr	r3, [sp, #20]
 800c832:	2b00      	cmp	r3, #0
 800c834:	dd05      	ble.n	800c842 <_dtoa_r+0x82a>
 800c836:	4631      	mov	r1, r6
 800c838:	461a      	mov	r2, r3
 800c83a:	4620      	mov	r0, r4
 800c83c:	f000 ffd6 	bl	800d7ec <__lshift>
 800c840:	4606      	mov	r6, r0
 800c842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c844:	2b00      	cmp	r3, #0
 800c846:	d06e      	beq.n	800c926 <_dtoa_r+0x90e>
 800c848:	ee18 0a10 	vmov	r0, s16
 800c84c:	4631      	mov	r1, r6
 800c84e:	f001 f83d 	bl	800d8cc <__mcmp>
 800c852:	2800      	cmp	r0, #0
 800c854:	da67      	bge.n	800c926 <_dtoa_r+0x90e>
 800c856:	9b00      	ldr	r3, [sp, #0]
 800c858:	3b01      	subs	r3, #1
 800c85a:	ee18 1a10 	vmov	r1, s16
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	220a      	movs	r2, #10
 800c862:	2300      	movs	r3, #0
 800c864:	4620      	mov	r0, r4
 800c866:	f000 fdc7 	bl	800d3f8 <__multadd>
 800c86a:	9b08      	ldr	r3, [sp, #32]
 800c86c:	ee08 0a10 	vmov	s16, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	f000 81b1 	beq.w	800cbd8 <_dtoa_r+0xbc0>
 800c876:	2300      	movs	r3, #0
 800c878:	4639      	mov	r1, r7
 800c87a:	220a      	movs	r2, #10
 800c87c:	4620      	mov	r0, r4
 800c87e:	f000 fdbb 	bl	800d3f8 <__multadd>
 800c882:	9b02      	ldr	r3, [sp, #8]
 800c884:	2b00      	cmp	r3, #0
 800c886:	4607      	mov	r7, r0
 800c888:	f300 808e 	bgt.w	800c9a8 <_dtoa_r+0x990>
 800c88c:	9b06      	ldr	r3, [sp, #24]
 800c88e:	2b02      	cmp	r3, #2
 800c890:	dc51      	bgt.n	800c936 <_dtoa_r+0x91e>
 800c892:	e089      	b.n	800c9a8 <_dtoa_r+0x990>
 800c894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c896:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c89a:	e74b      	b.n	800c734 <_dtoa_r+0x71c>
 800c89c:	9b03      	ldr	r3, [sp, #12]
 800c89e:	1e5e      	subs	r6, r3, #1
 800c8a0:	9b07      	ldr	r3, [sp, #28]
 800c8a2:	42b3      	cmp	r3, r6
 800c8a4:	bfbf      	itttt	lt
 800c8a6:	9b07      	ldrlt	r3, [sp, #28]
 800c8a8:	9607      	strlt	r6, [sp, #28]
 800c8aa:	1af2      	sublt	r2, r6, r3
 800c8ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c8ae:	bfb6      	itet	lt
 800c8b0:	189b      	addlt	r3, r3, r2
 800c8b2:	1b9e      	subge	r6, r3, r6
 800c8b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c8b6:	9b03      	ldr	r3, [sp, #12]
 800c8b8:	bfb8      	it	lt
 800c8ba:	2600      	movlt	r6, #0
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	bfb7      	itett	lt
 800c8c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c8c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c8c8:	1a9d      	sublt	r5, r3, r2
 800c8ca:	2300      	movlt	r3, #0
 800c8cc:	e734      	b.n	800c738 <_dtoa_r+0x720>
 800c8ce:	9e07      	ldr	r6, [sp, #28]
 800c8d0:	9d04      	ldr	r5, [sp, #16]
 800c8d2:	9f08      	ldr	r7, [sp, #32]
 800c8d4:	e73b      	b.n	800c74e <_dtoa_r+0x736>
 800c8d6:	9a07      	ldr	r2, [sp, #28]
 800c8d8:	e767      	b.n	800c7aa <_dtoa_r+0x792>
 800c8da:	9b06      	ldr	r3, [sp, #24]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	dc18      	bgt.n	800c912 <_dtoa_r+0x8fa>
 800c8e0:	f1ba 0f00 	cmp.w	sl, #0
 800c8e4:	d115      	bne.n	800c912 <_dtoa_r+0x8fa>
 800c8e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c8ea:	b993      	cbnz	r3, 800c912 <_dtoa_r+0x8fa>
 800c8ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c8f0:	0d1b      	lsrs	r3, r3, #20
 800c8f2:	051b      	lsls	r3, r3, #20
 800c8f4:	b183      	cbz	r3, 800c918 <_dtoa_r+0x900>
 800c8f6:	9b04      	ldr	r3, [sp, #16]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	9304      	str	r3, [sp, #16]
 800c8fc:	9b05      	ldr	r3, [sp, #20]
 800c8fe:	3301      	adds	r3, #1
 800c900:	9305      	str	r3, [sp, #20]
 800c902:	f04f 0801 	mov.w	r8, #1
 800c906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f47f af6a 	bne.w	800c7e2 <_dtoa_r+0x7ca>
 800c90e:	2001      	movs	r0, #1
 800c910:	e76f      	b.n	800c7f2 <_dtoa_r+0x7da>
 800c912:	f04f 0800 	mov.w	r8, #0
 800c916:	e7f6      	b.n	800c906 <_dtoa_r+0x8ee>
 800c918:	4698      	mov	r8, r3
 800c91a:	e7f4      	b.n	800c906 <_dtoa_r+0x8ee>
 800c91c:	f43f af7d 	beq.w	800c81a <_dtoa_r+0x802>
 800c920:	4618      	mov	r0, r3
 800c922:	301c      	adds	r0, #28
 800c924:	e772      	b.n	800c80c <_dtoa_r+0x7f4>
 800c926:	9b03      	ldr	r3, [sp, #12]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	dc37      	bgt.n	800c99c <_dtoa_r+0x984>
 800c92c:	9b06      	ldr	r3, [sp, #24]
 800c92e:	2b02      	cmp	r3, #2
 800c930:	dd34      	ble.n	800c99c <_dtoa_r+0x984>
 800c932:	9b03      	ldr	r3, [sp, #12]
 800c934:	9302      	str	r3, [sp, #8]
 800c936:	9b02      	ldr	r3, [sp, #8]
 800c938:	b96b      	cbnz	r3, 800c956 <_dtoa_r+0x93e>
 800c93a:	4631      	mov	r1, r6
 800c93c:	2205      	movs	r2, #5
 800c93e:	4620      	mov	r0, r4
 800c940:	f000 fd5a 	bl	800d3f8 <__multadd>
 800c944:	4601      	mov	r1, r0
 800c946:	4606      	mov	r6, r0
 800c948:	ee18 0a10 	vmov	r0, s16
 800c94c:	f000 ffbe 	bl	800d8cc <__mcmp>
 800c950:	2800      	cmp	r0, #0
 800c952:	f73f adbb 	bgt.w	800c4cc <_dtoa_r+0x4b4>
 800c956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c958:	9d01      	ldr	r5, [sp, #4]
 800c95a:	43db      	mvns	r3, r3
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	f04f 0800 	mov.w	r8, #0
 800c962:	4631      	mov	r1, r6
 800c964:	4620      	mov	r0, r4
 800c966:	f000 fd25 	bl	800d3b4 <_Bfree>
 800c96a:	2f00      	cmp	r7, #0
 800c96c:	f43f aea4 	beq.w	800c6b8 <_dtoa_r+0x6a0>
 800c970:	f1b8 0f00 	cmp.w	r8, #0
 800c974:	d005      	beq.n	800c982 <_dtoa_r+0x96a>
 800c976:	45b8      	cmp	r8, r7
 800c978:	d003      	beq.n	800c982 <_dtoa_r+0x96a>
 800c97a:	4641      	mov	r1, r8
 800c97c:	4620      	mov	r0, r4
 800c97e:	f000 fd19 	bl	800d3b4 <_Bfree>
 800c982:	4639      	mov	r1, r7
 800c984:	4620      	mov	r0, r4
 800c986:	f000 fd15 	bl	800d3b4 <_Bfree>
 800c98a:	e695      	b.n	800c6b8 <_dtoa_r+0x6a0>
 800c98c:	2600      	movs	r6, #0
 800c98e:	4637      	mov	r7, r6
 800c990:	e7e1      	b.n	800c956 <_dtoa_r+0x93e>
 800c992:	9700      	str	r7, [sp, #0]
 800c994:	4637      	mov	r7, r6
 800c996:	e599      	b.n	800c4cc <_dtoa_r+0x4b4>
 800c998:	40240000 	.word	0x40240000
 800c99c:	9b08      	ldr	r3, [sp, #32]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f000 80ca 	beq.w	800cb38 <_dtoa_r+0xb20>
 800c9a4:	9b03      	ldr	r3, [sp, #12]
 800c9a6:	9302      	str	r3, [sp, #8]
 800c9a8:	2d00      	cmp	r5, #0
 800c9aa:	dd05      	ble.n	800c9b8 <_dtoa_r+0x9a0>
 800c9ac:	4639      	mov	r1, r7
 800c9ae:	462a      	mov	r2, r5
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f000 ff1b 	bl	800d7ec <__lshift>
 800c9b6:	4607      	mov	r7, r0
 800c9b8:	f1b8 0f00 	cmp.w	r8, #0
 800c9bc:	d05b      	beq.n	800ca76 <_dtoa_r+0xa5e>
 800c9be:	6879      	ldr	r1, [r7, #4]
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f000 fcb7 	bl	800d334 <_Balloc>
 800c9c6:	4605      	mov	r5, r0
 800c9c8:	b928      	cbnz	r0, 800c9d6 <_dtoa_r+0x9be>
 800c9ca:	4b87      	ldr	r3, [pc, #540]	; (800cbe8 <_dtoa_r+0xbd0>)
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c9d2:	f7ff bb3b 	b.w	800c04c <_dtoa_r+0x34>
 800c9d6:	693a      	ldr	r2, [r7, #16]
 800c9d8:	3202      	adds	r2, #2
 800c9da:	0092      	lsls	r2, r2, #2
 800c9dc:	f107 010c 	add.w	r1, r7, #12
 800c9e0:	300c      	adds	r0, #12
 800c9e2:	f7fd fc33 	bl	800a24c <memcpy>
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	f000 fefe 	bl	800d7ec <__lshift>
 800c9f0:	9b01      	ldr	r3, [sp, #4]
 800c9f2:	f103 0901 	add.w	r9, r3, #1
 800c9f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	9305      	str	r3, [sp, #20]
 800c9fe:	f00a 0301 	and.w	r3, sl, #1
 800ca02:	46b8      	mov	r8, r7
 800ca04:	9304      	str	r3, [sp, #16]
 800ca06:	4607      	mov	r7, r0
 800ca08:	4631      	mov	r1, r6
 800ca0a:	ee18 0a10 	vmov	r0, s16
 800ca0e:	f7ff fa77 	bl	800bf00 <quorem>
 800ca12:	4641      	mov	r1, r8
 800ca14:	9002      	str	r0, [sp, #8]
 800ca16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ca1a:	ee18 0a10 	vmov	r0, s16
 800ca1e:	f000 ff55 	bl	800d8cc <__mcmp>
 800ca22:	463a      	mov	r2, r7
 800ca24:	9003      	str	r0, [sp, #12]
 800ca26:	4631      	mov	r1, r6
 800ca28:	4620      	mov	r0, r4
 800ca2a:	f000 ff6b 	bl	800d904 <__mdiff>
 800ca2e:	68c2      	ldr	r2, [r0, #12]
 800ca30:	f109 3bff 	add.w	fp, r9, #4294967295
 800ca34:	4605      	mov	r5, r0
 800ca36:	bb02      	cbnz	r2, 800ca7a <_dtoa_r+0xa62>
 800ca38:	4601      	mov	r1, r0
 800ca3a:	ee18 0a10 	vmov	r0, s16
 800ca3e:	f000 ff45 	bl	800d8cc <__mcmp>
 800ca42:	4602      	mov	r2, r0
 800ca44:	4629      	mov	r1, r5
 800ca46:	4620      	mov	r0, r4
 800ca48:	9207      	str	r2, [sp, #28]
 800ca4a:	f000 fcb3 	bl	800d3b4 <_Bfree>
 800ca4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ca52:	ea43 0102 	orr.w	r1, r3, r2
 800ca56:	9b04      	ldr	r3, [sp, #16]
 800ca58:	430b      	orrs	r3, r1
 800ca5a:	464d      	mov	r5, r9
 800ca5c:	d10f      	bne.n	800ca7e <_dtoa_r+0xa66>
 800ca5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ca62:	d02a      	beq.n	800caba <_dtoa_r+0xaa2>
 800ca64:	9b03      	ldr	r3, [sp, #12]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	dd02      	ble.n	800ca70 <_dtoa_r+0xa58>
 800ca6a:	9b02      	ldr	r3, [sp, #8]
 800ca6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ca70:	f88b a000 	strb.w	sl, [fp]
 800ca74:	e775      	b.n	800c962 <_dtoa_r+0x94a>
 800ca76:	4638      	mov	r0, r7
 800ca78:	e7ba      	b.n	800c9f0 <_dtoa_r+0x9d8>
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	e7e2      	b.n	800ca44 <_dtoa_r+0xa2c>
 800ca7e:	9b03      	ldr	r3, [sp, #12]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	db04      	blt.n	800ca8e <_dtoa_r+0xa76>
 800ca84:	9906      	ldr	r1, [sp, #24]
 800ca86:	430b      	orrs	r3, r1
 800ca88:	9904      	ldr	r1, [sp, #16]
 800ca8a:	430b      	orrs	r3, r1
 800ca8c:	d122      	bne.n	800cad4 <_dtoa_r+0xabc>
 800ca8e:	2a00      	cmp	r2, #0
 800ca90:	ddee      	ble.n	800ca70 <_dtoa_r+0xa58>
 800ca92:	ee18 1a10 	vmov	r1, s16
 800ca96:	2201      	movs	r2, #1
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f000 fea7 	bl	800d7ec <__lshift>
 800ca9e:	4631      	mov	r1, r6
 800caa0:	ee08 0a10 	vmov	s16, r0
 800caa4:	f000 ff12 	bl	800d8cc <__mcmp>
 800caa8:	2800      	cmp	r0, #0
 800caaa:	dc03      	bgt.n	800cab4 <_dtoa_r+0xa9c>
 800caac:	d1e0      	bne.n	800ca70 <_dtoa_r+0xa58>
 800caae:	f01a 0f01 	tst.w	sl, #1
 800cab2:	d0dd      	beq.n	800ca70 <_dtoa_r+0xa58>
 800cab4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cab8:	d1d7      	bne.n	800ca6a <_dtoa_r+0xa52>
 800caba:	2339      	movs	r3, #57	; 0x39
 800cabc:	f88b 3000 	strb.w	r3, [fp]
 800cac0:	462b      	mov	r3, r5
 800cac2:	461d      	mov	r5, r3
 800cac4:	3b01      	subs	r3, #1
 800cac6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800caca:	2a39      	cmp	r2, #57	; 0x39
 800cacc:	d071      	beq.n	800cbb2 <_dtoa_r+0xb9a>
 800cace:	3201      	adds	r2, #1
 800cad0:	701a      	strb	r2, [r3, #0]
 800cad2:	e746      	b.n	800c962 <_dtoa_r+0x94a>
 800cad4:	2a00      	cmp	r2, #0
 800cad6:	dd07      	ble.n	800cae8 <_dtoa_r+0xad0>
 800cad8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cadc:	d0ed      	beq.n	800caba <_dtoa_r+0xaa2>
 800cade:	f10a 0301 	add.w	r3, sl, #1
 800cae2:	f88b 3000 	strb.w	r3, [fp]
 800cae6:	e73c      	b.n	800c962 <_dtoa_r+0x94a>
 800cae8:	9b05      	ldr	r3, [sp, #20]
 800caea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800caee:	4599      	cmp	r9, r3
 800caf0:	d047      	beq.n	800cb82 <_dtoa_r+0xb6a>
 800caf2:	ee18 1a10 	vmov	r1, s16
 800caf6:	2300      	movs	r3, #0
 800caf8:	220a      	movs	r2, #10
 800cafa:	4620      	mov	r0, r4
 800cafc:	f000 fc7c 	bl	800d3f8 <__multadd>
 800cb00:	45b8      	cmp	r8, r7
 800cb02:	ee08 0a10 	vmov	s16, r0
 800cb06:	f04f 0300 	mov.w	r3, #0
 800cb0a:	f04f 020a 	mov.w	r2, #10
 800cb0e:	4641      	mov	r1, r8
 800cb10:	4620      	mov	r0, r4
 800cb12:	d106      	bne.n	800cb22 <_dtoa_r+0xb0a>
 800cb14:	f000 fc70 	bl	800d3f8 <__multadd>
 800cb18:	4680      	mov	r8, r0
 800cb1a:	4607      	mov	r7, r0
 800cb1c:	f109 0901 	add.w	r9, r9, #1
 800cb20:	e772      	b.n	800ca08 <_dtoa_r+0x9f0>
 800cb22:	f000 fc69 	bl	800d3f8 <__multadd>
 800cb26:	4639      	mov	r1, r7
 800cb28:	4680      	mov	r8, r0
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	220a      	movs	r2, #10
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f000 fc62 	bl	800d3f8 <__multadd>
 800cb34:	4607      	mov	r7, r0
 800cb36:	e7f1      	b.n	800cb1c <_dtoa_r+0xb04>
 800cb38:	9b03      	ldr	r3, [sp, #12]
 800cb3a:	9302      	str	r3, [sp, #8]
 800cb3c:	9d01      	ldr	r5, [sp, #4]
 800cb3e:	ee18 0a10 	vmov	r0, s16
 800cb42:	4631      	mov	r1, r6
 800cb44:	f7ff f9dc 	bl	800bf00 <quorem>
 800cb48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cb4c:	9b01      	ldr	r3, [sp, #4]
 800cb4e:	f805 ab01 	strb.w	sl, [r5], #1
 800cb52:	1aea      	subs	r2, r5, r3
 800cb54:	9b02      	ldr	r3, [sp, #8]
 800cb56:	4293      	cmp	r3, r2
 800cb58:	dd09      	ble.n	800cb6e <_dtoa_r+0xb56>
 800cb5a:	ee18 1a10 	vmov	r1, s16
 800cb5e:	2300      	movs	r3, #0
 800cb60:	220a      	movs	r2, #10
 800cb62:	4620      	mov	r0, r4
 800cb64:	f000 fc48 	bl	800d3f8 <__multadd>
 800cb68:	ee08 0a10 	vmov	s16, r0
 800cb6c:	e7e7      	b.n	800cb3e <_dtoa_r+0xb26>
 800cb6e:	9b02      	ldr	r3, [sp, #8]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	bfc8      	it	gt
 800cb74:	461d      	movgt	r5, r3
 800cb76:	9b01      	ldr	r3, [sp, #4]
 800cb78:	bfd8      	it	le
 800cb7a:	2501      	movle	r5, #1
 800cb7c:	441d      	add	r5, r3
 800cb7e:	f04f 0800 	mov.w	r8, #0
 800cb82:	ee18 1a10 	vmov	r1, s16
 800cb86:	2201      	movs	r2, #1
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f000 fe2f 	bl	800d7ec <__lshift>
 800cb8e:	4631      	mov	r1, r6
 800cb90:	ee08 0a10 	vmov	s16, r0
 800cb94:	f000 fe9a 	bl	800d8cc <__mcmp>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	dc91      	bgt.n	800cac0 <_dtoa_r+0xaa8>
 800cb9c:	d102      	bne.n	800cba4 <_dtoa_r+0xb8c>
 800cb9e:	f01a 0f01 	tst.w	sl, #1
 800cba2:	d18d      	bne.n	800cac0 <_dtoa_r+0xaa8>
 800cba4:	462b      	mov	r3, r5
 800cba6:	461d      	mov	r5, r3
 800cba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbac:	2a30      	cmp	r2, #48	; 0x30
 800cbae:	d0fa      	beq.n	800cba6 <_dtoa_r+0xb8e>
 800cbb0:	e6d7      	b.n	800c962 <_dtoa_r+0x94a>
 800cbb2:	9a01      	ldr	r2, [sp, #4]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d184      	bne.n	800cac2 <_dtoa_r+0xaaa>
 800cbb8:	9b00      	ldr	r3, [sp, #0]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	9300      	str	r3, [sp, #0]
 800cbbe:	2331      	movs	r3, #49	; 0x31
 800cbc0:	7013      	strb	r3, [r2, #0]
 800cbc2:	e6ce      	b.n	800c962 <_dtoa_r+0x94a>
 800cbc4:	4b09      	ldr	r3, [pc, #36]	; (800cbec <_dtoa_r+0xbd4>)
 800cbc6:	f7ff ba95 	b.w	800c0f4 <_dtoa_r+0xdc>
 800cbca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	f47f aa6e 	bne.w	800c0ae <_dtoa_r+0x96>
 800cbd2:	4b07      	ldr	r3, [pc, #28]	; (800cbf0 <_dtoa_r+0xbd8>)
 800cbd4:	f7ff ba8e 	b.w	800c0f4 <_dtoa_r+0xdc>
 800cbd8:	9b02      	ldr	r3, [sp, #8]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	dcae      	bgt.n	800cb3c <_dtoa_r+0xb24>
 800cbde:	9b06      	ldr	r3, [sp, #24]
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	f73f aea8 	bgt.w	800c936 <_dtoa_r+0x91e>
 800cbe6:	e7a9      	b.n	800cb3c <_dtoa_r+0xb24>
 800cbe8:	0800f159 	.word	0x0800f159
 800cbec:	0800eec4 	.word	0x0800eec4
 800cbf0:	0800f0f1 	.word	0x0800f0f1

0800cbf4 <fiprintf>:
 800cbf4:	b40e      	push	{r1, r2, r3}
 800cbf6:	b503      	push	{r0, r1, lr}
 800cbf8:	4601      	mov	r1, r0
 800cbfa:	ab03      	add	r3, sp, #12
 800cbfc:	4805      	ldr	r0, [pc, #20]	; (800cc14 <fiprintf+0x20>)
 800cbfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc02:	6800      	ldr	r0, [r0, #0]
 800cc04:	9301      	str	r3, [sp, #4]
 800cc06:	f001 fad3 	bl	800e1b0 <_vfiprintf_r>
 800cc0a:	b002      	add	sp, #8
 800cc0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc10:	b003      	add	sp, #12
 800cc12:	4770      	bx	lr
 800cc14:	2000001c 	.word	0x2000001c

0800cc18 <rshift>:
 800cc18:	6903      	ldr	r3, [r0, #16]
 800cc1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cc1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc22:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cc26:	f100 0414 	add.w	r4, r0, #20
 800cc2a:	dd45      	ble.n	800ccb8 <rshift+0xa0>
 800cc2c:	f011 011f 	ands.w	r1, r1, #31
 800cc30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cc34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cc38:	d10c      	bne.n	800cc54 <rshift+0x3c>
 800cc3a:	f100 0710 	add.w	r7, r0, #16
 800cc3e:	4629      	mov	r1, r5
 800cc40:	42b1      	cmp	r1, r6
 800cc42:	d334      	bcc.n	800ccae <rshift+0x96>
 800cc44:	1a9b      	subs	r3, r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	1eea      	subs	r2, r5, #3
 800cc4a:	4296      	cmp	r6, r2
 800cc4c:	bf38      	it	cc
 800cc4e:	2300      	movcc	r3, #0
 800cc50:	4423      	add	r3, r4
 800cc52:	e015      	b.n	800cc80 <rshift+0x68>
 800cc54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cc58:	f1c1 0820 	rsb	r8, r1, #32
 800cc5c:	40cf      	lsrs	r7, r1
 800cc5e:	f105 0e04 	add.w	lr, r5, #4
 800cc62:	46a1      	mov	r9, r4
 800cc64:	4576      	cmp	r6, lr
 800cc66:	46f4      	mov	ip, lr
 800cc68:	d815      	bhi.n	800cc96 <rshift+0x7e>
 800cc6a:	1a9a      	subs	r2, r3, r2
 800cc6c:	0092      	lsls	r2, r2, #2
 800cc6e:	3a04      	subs	r2, #4
 800cc70:	3501      	adds	r5, #1
 800cc72:	42ae      	cmp	r6, r5
 800cc74:	bf38      	it	cc
 800cc76:	2200      	movcc	r2, #0
 800cc78:	18a3      	adds	r3, r4, r2
 800cc7a:	50a7      	str	r7, [r4, r2]
 800cc7c:	b107      	cbz	r7, 800cc80 <rshift+0x68>
 800cc7e:	3304      	adds	r3, #4
 800cc80:	1b1a      	subs	r2, r3, r4
 800cc82:	42a3      	cmp	r3, r4
 800cc84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cc88:	bf08      	it	eq
 800cc8a:	2300      	moveq	r3, #0
 800cc8c:	6102      	str	r2, [r0, #16]
 800cc8e:	bf08      	it	eq
 800cc90:	6143      	streq	r3, [r0, #20]
 800cc92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc96:	f8dc c000 	ldr.w	ip, [ip]
 800cc9a:	fa0c fc08 	lsl.w	ip, ip, r8
 800cc9e:	ea4c 0707 	orr.w	r7, ip, r7
 800cca2:	f849 7b04 	str.w	r7, [r9], #4
 800cca6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ccaa:	40cf      	lsrs	r7, r1
 800ccac:	e7da      	b.n	800cc64 <rshift+0x4c>
 800ccae:	f851 cb04 	ldr.w	ip, [r1], #4
 800ccb2:	f847 cf04 	str.w	ip, [r7, #4]!
 800ccb6:	e7c3      	b.n	800cc40 <rshift+0x28>
 800ccb8:	4623      	mov	r3, r4
 800ccba:	e7e1      	b.n	800cc80 <rshift+0x68>

0800ccbc <__hexdig_fun>:
 800ccbc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ccc0:	2b09      	cmp	r3, #9
 800ccc2:	d802      	bhi.n	800ccca <__hexdig_fun+0xe>
 800ccc4:	3820      	subs	r0, #32
 800ccc6:	b2c0      	uxtb	r0, r0
 800ccc8:	4770      	bx	lr
 800ccca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ccce:	2b05      	cmp	r3, #5
 800ccd0:	d801      	bhi.n	800ccd6 <__hexdig_fun+0x1a>
 800ccd2:	3847      	subs	r0, #71	; 0x47
 800ccd4:	e7f7      	b.n	800ccc6 <__hexdig_fun+0xa>
 800ccd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ccda:	2b05      	cmp	r3, #5
 800ccdc:	d801      	bhi.n	800cce2 <__hexdig_fun+0x26>
 800ccde:	3827      	subs	r0, #39	; 0x27
 800cce0:	e7f1      	b.n	800ccc6 <__hexdig_fun+0xa>
 800cce2:	2000      	movs	r0, #0
 800cce4:	4770      	bx	lr
	...

0800cce8 <__gethex>:
 800cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccec:	ed2d 8b02 	vpush	{d8}
 800ccf0:	b089      	sub	sp, #36	; 0x24
 800ccf2:	ee08 0a10 	vmov	s16, r0
 800ccf6:	9304      	str	r3, [sp, #16]
 800ccf8:	4bb4      	ldr	r3, [pc, #720]	; (800cfcc <__gethex+0x2e4>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	468b      	mov	fp, r1
 800cd02:	4690      	mov	r8, r2
 800cd04:	f7f3 fa8c 	bl	8000220 <strlen>
 800cd08:	9b01      	ldr	r3, [sp, #4]
 800cd0a:	f8db 2000 	ldr.w	r2, [fp]
 800cd0e:	4403      	add	r3, r0
 800cd10:	4682      	mov	sl, r0
 800cd12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cd16:	9305      	str	r3, [sp, #20]
 800cd18:	1c93      	adds	r3, r2, #2
 800cd1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cd1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cd22:	32fe      	adds	r2, #254	; 0xfe
 800cd24:	18d1      	adds	r1, r2, r3
 800cd26:	461f      	mov	r7, r3
 800cd28:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd2c:	9100      	str	r1, [sp, #0]
 800cd2e:	2830      	cmp	r0, #48	; 0x30
 800cd30:	d0f8      	beq.n	800cd24 <__gethex+0x3c>
 800cd32:	f7ff ffc3 	bl	800ccbc <__hexdig_fun>
 800cd36:	4604      	mov	r4, r0
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d13a      	bne.n	800cdb2 <__gethex+0xca>
 800cd3c:	9901      	ldr	r1, [sp, #4]
 800cd3e:	4652      	mov	r2, sl
 800cd40:	4638      	mov	r0, r7
 800cd42:	f001 fb7d 	bl	800e440 <strncmp>
 800cd46:	4605      	mov	r5, r0
 800cd48:	2800      	cmp	r0, #0
 800cd4a:	d168      	bne.n	800ce1e <__gethex+0x136>
 800cd4c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cd50:	eb07 060a 	add.w	r6, r7, sl
 800cd54:	f7ff ffb2 	bl	800ccbc <__hexdig_fun>
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	d062      	beq.n	800ce22 <__gethex+0x13a>
 800cd5c:	4633      	mov	r3, r6
 800cd5e:	7818      	ldrb	r0, [r3, #0]
 800cd60:	2830      	cmp	r0, #48	; 0x30
 800cd62:	461f      	mov	r7, r3
 800cd64:	f103 0301 	add.w	r3, r3, #1
 800cd68:	d0f9      	beq.n	800cd5e <__gethex+0x76>
 800cd6a:	f7ff ffa7 	bl	800ccbc <__hexdig_fun>
 800cd6e:	2301      	movs	r3, #1
 800cd70:	fab0 f480 	clz	r4, r0
 800cd74:	0964      	lsrs	r4, r4, #5
 800cd76:	4635      	mov	r5, r6
 800cd78:	9300      	str	r3, [sp, #0]
 800cd7a:	463a      	mov	r2, r7
 800cd7c:	4616      	mov	r6, r2
 800cd7e:	3201      	adds	r2, #1
 800cd80:	7830      	ldrb	r0, [r6, #0]
 800cd82:	f7ff ff9b 	bl	800ccbc <__hexdig_fun>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d1f8      	bne.n	800cd7c <__gethex+0x94>
 800cd8a:	9901      	ldr	r1, [sp, #4]
 800cd8c:	4652      	mov	r2, sl
 800cd8e:	4630      	mov	r0, r6
 800cd90:	f001 fb56 	bl	800e440 <strncmp>
 800cd94:	b980      	cbnz	r0, 800cdb8 <__gethex+0xd0>
 800cd96:	b94d      	cbnz	r5, 800cdac <__gethex+0xc4>
 800cd98:	eb06 050a 	add.w	r5, r6, sl
 800cd9c:	462a      	mov	r2, r5
 800cd9e:	4616      	mov	r6, r2
 800cda0:	3201      	adds	r2, #1
 800cda2:	7830      	ldrb	r0, [r6, #0]
 800cda4:	f7ff ff8a 	bl	800ccbc <__hexdig_fun>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	d1f8      	bne.n	800cd9e <__gethex+0xb6>
 800cdac:	1bad      	subs	r5, r5, r6
 800cdae:	00ad      	lsls	r5, r5, #2
 800cdb0:	e004      	b.n	800cdbc <__gethex+0xd4>
 800cdb2:	2400      	movs	r4, #0
 800cdb4:	4625      	mov	r5, r4
 800cdb6:	e7e0      	b.n	800cd7a <__gethex+0x92>
 800cdb8:	2d00      	cmp	r5, #0
 800cdba:	d1f7      	bne.n	800cdac <__gethex+0xc4>
 800cdbc:	7833      	ldrb	r3, [r6, #0]
 800cdbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cdc2:	2b50      	cmp	r3, #80	; 0x50
 800cdc4:	d13b      	bne.n	800ce3e <__gethex+0x156>
 800cdc6:	7873      	ldrb	r3, [r6, #1]
 800cdc8:	2b2b      	cmp	r3, #43	; 0x2b
 800cdca:	d02c      	beq.n	800ce26 <__gethex+0x13e>
 800cdcc:	2b2d      	cmp	r3, #45	; 0x2d
 800cdce:	d02e      	beq.n	800ce2e <__gethex+0x146>
 800cdd0:	1c71      	adds	r1, r6, #1
 800cdd2:	f04f 0900 	mov.w	r9, #0
 800cdd6:	7808      	ldrb	r0, [r1, #0]
 800cdd8:	f7ff ff70 	bl	800ccbc <__hexdig_fun>
 800cddc:	1e43      	subs	r3, r0, #1
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	2b18      	cmp	r3, #24
 800cde2:	d82c      	bhi.n	800ce3e <__gethex+0x156>
 800cde4:	f1a0 0210 	sub.w	r2, r0, #16
 800cde8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cdec:	f7ff ff66 	bl	800ccbc <__hexdig_fun>
 800cdf0:	1e43      	subs	r3, r0, #1
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b18      	cmp	r3, #24
 800cdf6:	d91d      	bls.n	800ce34 <__gethex+0x14c>
 800cdf8:	f1b9 0f00 	cmp.w	r9, #0
 800cdfc:	d000      	beq.n	800ce00 <__gethex+0x118>
 800cdfe:	4252      	negs	r2, r2
 800ce00:	4415      	add	r5, r2
 800ce02:	f8cb 1000 	str.w	r1, [fp]
 800ce06:	b1e4      	cbz	r4, 800ce42 <__gethex+0x15a>
 800ce08:	9b00      	ldr	r3, [sp, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	bf14      	ite	ne
 800ce0e:	2700      	movne	r7, #0
 800ce10:	2706      	moveq	r7, #6
 800ce12:	4638      	mov	r0, r7
 800ce14:	b009      	add	sp, #36	; 0x24
 800ce16:	ecbd 8b02 	vpop	{d8}
 800ce1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce1e:	463e      	mov	r6, r7
 800ce20:	4625      	mov	r5, r4
 800ce22:	2401      	movs	r4, #1
 800ce24:	e7ca      	b.n	800cdbc <__gethex+0xd4>
 800ce26:	f04f 0900 	mov.w	r9, #0
 800ce2a:	1cb1      	adds	r1, r6, #2
 800ce2c:	e7d3      	b.n	800cdd6 <__gethex+0xee>
 800ce2e:	f04f 0901 	mov.w	r9, #1
 800ce32:	e7fa      	b.n	800ce2a <__gethex+0x142>
 800ce34:	230a      	movs	r3, #10
 800ce36:	fb03 0202 	mla	r2, r3, r2, r0
 800ce3a:	3a10      	subs	r2, #16
 800ce3c:	e7d4      	b.n	800cde8 <__gethex+0x100>
 800ce3e:	4631      	mov	r1, r6
 800ce40:	e7df      	b.n	800ce02 <__gethex+0x11a>
 800ce42:	1bf3      	subs	r3, r6, r7
 800ce44:	3b01      	subs	r3, #1
 800ce46:	4621      	mov	r1, r4
 800ce48:	2b07      	cmp	r3, #7
 800ce4a:	dc0b      	bgt.n	800ce64 <__gethex+0x17c>
 800ce4c:	ee18 0a10 	vmov	r0, s16
 800ce50:	f000 fa70 	bl	800d334 <_Balloc>
 800ce54:	4604      	mov	r4, r0
 800ce56:	b940      	cbnz	r0, 800ce6a <__gethex+0x182>
 800ce58:	4b5d      	ldr	r3, [pc, #372]	; (800cfd0 <__gethex+0x2e8>)
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	21de      	movs	r1, #222	; 0xde
 800ce5e:	485d      	ldr	r0, [pc, #372]	; (800cfd4 <__gethex+0x2ec>)
 800ce60:	f7ff f830 	bl	800bec4 <__assert_func>
 800ce64:	3101      	adds	r1, #1
 800ce66:	105b      	asrs	r3, r3, #1
 800ce68:	e7ee      	b.n	800ce48 <__gethex+0x160>
 800ce6a:	f100 0914 	add.w	r9, r0, #20
 800ce6e:	f04f 0b00 	mov.w	fp, #0
 800ce72:	f1ca 0301 	rsb	r3, sl, #1
 800ce76:	f8cd 9008 	str.w	r9, [sp, #8]
 800ce7a:	f8cd b000 	str.w	fp, [sp]
 800ce7e:	9306      	str	r3, [sp, #24]
 800ce80:	42b7      	cmp	r7, r6
 800ce82:	d340      	bcc.n	800cf06 <__gethex+0x21e>
 800ce84:	9802      	ldr	r0, [sp, #8]
 800ce86:	9b00      	ldr	r3, [sp, #0]
 800ce88:	f840 3b04 	str.w	r3, [r0], #4
 800ce8c:	eba0 0009 	sub.w	r0, r0, r9
 800ce90:	1080      	asrs	r0, r0, #2
 800ce92:	0146      	lsls	r6, r0, #5
 800ce94:	6120      	str	r0, [r4, #16]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f000 fb3e 	bl	800d518 <__hi0bits>
 800ce9c:	1a30      	subs	r0, r6, r0
 800ce9e:	f8d8 6000 	ldr.w	r6, [r8]
 800cea2:	42b0      	cmp	r0, r6
 800cea4:	dd63      	ble.n	800cf6e <__gethex+0x286>
 800cea6:	1b87      	subs	r7, r0, r6
 800cea8:	4639      	mov	r1, r7
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f000 fee2 	bl	800dc74 <__any_on>
 800ceb0:	4682      	mov	sl, r0
 800ceb2:	b1a8      	cbz	r0, 800cee0 <__gethex+0x1f8>
 800ceb4:	1e7b      	subs	r3, r7, #1
 800ceb6:	1159      	asrs	r1, r3, #5
 800ceb8:	f003 021f 	and.w	r2, r3, #31
 800cebc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cec0:	f04f 0a01 	mov.w	sl, #1
 800cec4:	fa0a f202 	lsl.w	r2, sl, r2
 800cec8:	420a      	tst	r2, r1
 800ceca:	d009      	beq.n	800cee0 <__gethex+0x1f8>
 800cecc:	4553      	cmp	r3, sl
 800cece:	dd05      	ble.n	800cedc <__gethex+0x1f4>
 800ced0:	1eb9      	subs	r1, r7, #2
 800ced2:	4620      	mov	r0, r4
 800ced4:	f000 fece 	bl	800dc74 <__any_on>
 800ced8:	2800      	cmp	r0, #0
 800ceda:	d145      	bne.n	800cf68 <__gethex+0x280>
 800cedc:	f04f 0a02 	mov.w	sl, #2
 800cee0:	4639      	mov	r1, r7
 800cee2:	4620      	mov	r0, r4
 800cee4:	f7ff fe98 	bl	800cc18 <rshift>
 800cee8:	443d      	add	r5, r7
 800ceea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ceee:	42ab      	cmp	r3, r5
 800cef0:	da4c      	bge.n	800cf8c <__gethex+0x2a4>
 800cef2:	ee18 0a10 	vmov	r0, s16
 800cef6:	4621      	mov	r1, r4
 800cef8:	f000 fa5c 	bl	800d3b4 <_Bfree>
 800cefc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cefe:	2300      	movs	r3, #0
 800cf00:	6013      	str	r3, [r2, #0]
 800cf02:	27a3      	movs	r7, #163	; 0xa3
 800cf04:	e785      	b.n	800ce12 <__gethex+0x12a>
 800cf06:	1e73      	subs	r3, r6, #1
 800cf08:	9a05      	ldr	r2, [sp, #20]
 800cf0a:	9303      	str	r3, [sp, #12]
 800cf0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d019      	beq.n	800cf48 <__gethex+0x260>
 800cf14:	f1bb 0f20 	cmp.w	fp, #32
 800cf18:	d107      	bne.n	800cf2a <__gethex+0x242>
 800cf1a:	9b02      	ldr	r3, [sp, #8]
 800cf1c:	9a00      	ldr	r2, [sp, #0]
 800cf1e:	f843 2b04 	str.w	r2, [r3], #4
 800cf22:	9302      	str	r3, [sp, #8]
 800cf24:	2300      	movs	r3, #0
 800cf26:	9300      	str	r3, [sp, #0]
 800cf28:	469b      	mov	fp, r3
 800cf2a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cf2e:	f7ff fec5 	bl	800ccbc <__hexdig_fun>
 800cf32:	9b00      	ldr	r3, [sp, #0]
 800cf34:	f000 000f 	and.w	r0, r0, #15
 800cf38:	fa00 f00b 	lsl.w	r0, r0, fp
 800cf3c:	4303      	orrs	r3, r0
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	f10b 0b04 	add.w	fp, fp, #4
 800cf44:	9b03      	ldr	r3, [sp, #12]
 800cf46:	e00d      	b.n	800cf64 <__gethex+0x27c>
 800cf48:	9b03      	ldr	r3, [sp, #12]
 800cf4a:	9a06      	ldr	r2, [sp, #24]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	42bb      	cmp	r3, r7
 800cf50:	d3e0      	bcc.n	800cf14 <__gethex+0x22c>
 800cf52:	4618      	mov	r0, r3
 800cf54:	9901      	ldr	r1, [sp, #4]
 800cf56:	9307      	str	r3, [sp, #28]
 800cf58:	4652      	mov	r2, sl
 800cf5a:	f001 fa71 	bl	800e440 <strncmp>
 800cf5e:	9b07      	ldr	r3, [sp, #28]
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d1d7      	bne.n	800cf14 <__gethex+0x22c>
 800cf64:	461e      	mov	r6, r3
 800cf66:	e78b      	b.n	800ce80 <__gethex+0x198>
 800cf68:	f04f 0a03 	mov.w	sl, #3
 800cf6c:	e7b8      	b.n	800cee0 <__gethex+0x1f8>
 800cf6e:	da0a      	bge.n	800cf86 <__gethex+0x29e>
 800cf70:	1a37      	subs	r7, r6, r0
 800cf72:	4621      	mov	r1, r4
 800cf74:	ee18 0a10 	vmov	r0, s16
 800cf78:	463a      	mov	r2, r7
 800cf7a:	f000 fc37 	bl	800d7ec <__lshift>
 800cf7e:	1bed      	subs	r5, r5, r7
 800cf80:	4604      	mov	r4, r0
 800cf82:	f100 0914 	add.w	r9, r0, #20
 800cf86:	f04f 0a00 	mov.w	sl, #0
 800cf8a:	e7ae      	b.n	800ceea <__gethex+0x202>
 800cf8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cf90:	42a8      	cmp	r0, r5
 800cf92:	dd72      	ble.n	800d07a <__gethex+0x392>
 800cf94:	1b45      	subs	r5, r0, r5
 800cf96:	42ae      	cmp	r6, r5
 800cf98:	dc36      	bgt.n	800d008 <__gethex+0x320>
 800cf9a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cf9e:	2b02      	cmp	r3, #2
 800cfa0:	d02a      	beq.n	800cff8 <__gethex+0x310>
 800cfa2:	2b03      	cmp	r3, #3
 800cfa4:	d02c      	beq.n	800d000 <__gethex+0x318>
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d11c      	bne.n	800cfe4 <__gethex+0x2fc>
 800cfaa:	42ae      	cmp	r6, r5
 800cfac:	d11a      	bne.n	800cfe4 <__gethex+0x2fc>
 800cfae:	2e01      	cmp	r6, #1
 800cfb0:	d112      	bne.n	800cfd8 <__gethex+0x2f0>
 800cfb2:	9a04      	ldr	r2, [sp, #16]
 800cfb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cfb8:	6013      	str	r3, [r2, #0]
 800cfba:	2301      	movs	r3, #1
 800cfbc:	6123      	str	r3, [r4, #16]
 800cfbe:	f8c9 3000 	str.w	r3, [r9]
 800cfc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cfc4:	2762      	movs	r7, #98	; 0x62
 800cfc6:	601c      	str	r4, [r3, #0]
 800cfc8:	e723      	b.n	800ce12 <__gethex+0x12a>
 800cfca:	bf00      	nop
 800cfcc:	0800f1d0 	.word	0x0800f1d0
 800cfd0:	0800f159 	.word	0x0800f159
 800cfd4:	0800f16a 	.word	0x0800f16a
 800cfd8:	1e71      	subs	r1, r6, #1
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f000 fe4a 	bl	800dc74 <__any_on>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d1e6      	bne.n	800cfb2 <__gethex+0x2ca>
 800cfe4:	ee18 0a10 	vmov	r0, s16
 800cfe8:	4621      	mov	r1, r4
 800cfea:	f000 f9e3 	bl	800d3b4 <_Bfree>
 800cfee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cff0:	2300      	movs	r3, #0
 800cff2:	6013      	str	r3, [r2, #0]
 800cff4:	2750      	movs	r7, #80	; 0x50
 800cff6:	e70c      	b.n	800ce12 <__gethex+0x12a>
 800cff8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d1f2      	bne.n	800cfe4 <__gethex+0x2fc>
 800cffe:	e7d8      	b.n	800cfb2 <__gethex+0x2ca>
 800d000:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1d5      	bne.n	800cfb2 <__gethex+0x2ca>
 800d006:	e7ed      	b.n	800cfe4 <__gethex+0x2fc>
 800d008:	1e6f      	subs	r7, r5, #1
 800d00a:	f1ba 0f00 	cmp.w	sl, #0
 800d00e:	d131      	bne.n	800d074 <__gethex+0x38c>
 800d010:	b127      	cbz	r7, 800d01c <__gethex+0x334>
 800d012:	4639      	mov	r1, r7
 800d014:	4620      	mov	r0, r4
 800d016:	f000 fe2d 	bl	800dc74 <__any_on>
 800d01a:	4682      	mov	sl, r0
 800d01c:	117b      	asrs	r3, r7, #5
 800d01e:	2101      	movs	r1, #1
 800d020:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d024:	f007 071f 	and.w	r7, r7, #31
 800d028:	fa01 f707 	lsl.w	r7, r1, r7
 800d02c:	421f      	tst	r7, r3
 800d02e:	4629      	mov	r1, r5
 800d030:	4620      	mov	r0, r4
 800d032:	bf18      	it	ne
 800d034:	f04a 0a02 	orrne.w	sl, sl, #2
 800d038:	1b76      	subs	r6, r6, r5
 800d03a:	f7ff fded 	bl	800cc18 <rshift>
 800d03e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d042:	2702      	movs	r7, #2
 800d044:	f1ba 0f00 	cmp.w	sl, #0
 800d048:	d048      	beq.n	800d0dc <__gethex+0x3f4>
 800d04a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d04e:	2b02      	cmp	r3, #2
 800d050:	d015      	beq.n	800d07e <__gethex+0x396>
 800d052:	2b03      	cmp	r3, #3
 800d054:	d017      	beq.n	800d086 <__gethex+0x39e>
 800d056:	2b01      	cmp	r3, #1
 800d058:	d109      	bne.n	800d06e <__gethex+0x386>
 800d05a:	f01a 0f02 	tst.w	sl, #2
 800d05e:	d006      	beq.n	800d06e <__gethex+0x386>
 800d060:	f8d9 0000 	ldr.w	r0, [r9]
 800d064:	ea4a 0a00 	orr.w	sl, sl, r0
 800d068:	f01a 0f01 	tst.w	sl, #1
 800d06c:	d10e      	bne.n	800d08c <__gethex+0x3a4>
 800d06e:	f047 0710 	orr.w	r7, r7, #16
 800d072:	e033      	b.n	800d0dc <__gethex+0x3f4>
 800d074:	f04f 0a01 	mov.w	sl, #1
 800d078:	e7d0      	b.n	800d01c <__gethex+0x334>
 800d07a:	2701      	movs	r7, #1
 800d07c:	e7e2      	b.n	800d044 <__gethex+0x35c>
 800d07e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d080:	f1c3 0301 	rsb	r3, r3, #1
 800d084:	9315      	str	r3, [sp, #84]	; 0x54
 800d086:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d0f0      	beq.n	800d06e <__gethex+0x386>
 800d08c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d090:	f104 0314 	add.w	r3, r4, #20
 800d094:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d098:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d09c:	f04f 0c00 	mov.w	ip, #0
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d0aa:	d01c      	beq.n	800d0e6 <__gethex+0x3fe>
 800d0ac:	3201      	adds	r2, #1
 800d0ae:	6002      	str	r2, [r0, #0]
 800d0b0:	2f02      	cmp	r7, #2
 800d0b2:	f104 0314 	add.w	r3, r4, #20
 800d0b6:	d13f      	bne.n	800d138 <__gethex+0x450>
 800d0b8:	f8d8 2000 	ldr.w	r2, [r8]
 800d0bc:	3a01      	subs	r2, #1
 800d0be:	42b2      	cmp	r2, r6
 800d0c0:	d10a      	bne.n	800d0d8 <__gethex+0x3f0>
 800d0c2:	1171      	asrs	r1, r6, #5
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d0ca:	f006 061f 	and.w	r6, r6, #31
 800d0ce:	fa02 f606 	lsl.w	r6, r2, r6
 800d0d2:	421e      	tst	r6, r3
 800d0d4:	bf18      	it	ne
 800d0d6:	4617      	movne	r7, r2
 800d0d8:	f047 0720 	orr.w	r7, r7, #32
 800d0dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0de:	601c      	str	r4, [r3, #0]
 800d0e0:	9b04      	ldr	r3, [sp, #16]
 800d0e2:	601d      	str	r5, [r3, #0]
 800d0e4:	e695      	b.n	800ce12 <__gethex+0x12a>
 800d0e6:	4299      	cmp	r1, r3
 800d0e8:	f843 cc04 	str.w	ip, [r3, #-4]
 800d0ec:	d8d8      	bhi.n	800d0a0 <__gethex+0x3b8>
 800d0ee:	68a3      	ldr	r3, [r4, #8]
 800d0f0:	459b      	cmp	fp, r3
 800d0f2:	db19      	blt.n	800d128 <__gethex+0x440>
 800d0f4:	6861      	ldr	r1, [r4, #4]
 800d0f6:	ee18 0a10 	vmov	r0, s16
 800d0fa:	3101      	adds	r1, #1
 800d0fc:	f000 f91a 	bl	800d334 <_Balloc>
 800d100:	4681      	mov	r9, r0
 800d102:	b918      	cbnz	r0, 800d10c <__gethex+0x424>
 800d104:	4b1a      	ldr	r3, [pc, #104]	; (800d170 <__gethex+0x488>)
 800d106:	4602      	mov	r2, r0
 800d108:	2184      	movs	r1, #132	; 0x84
 800d10a:	e6a8      	b.n	800ce5e <__gethex+0x176>
 800d10c:	6922      	ldr	r2, [r4, #16]
 800d10e:	3202      	adds	r2, #2
 800d110:	f104 010c 	add.w	r1, r4, #12
 800d114:	0092      	lsls	r2, r2, #2
 800d116:	300c      	adds	r0, #12
 800d118:	f7fd f898 	bl	800a24c <memcpy>
 800d11c:	4621      	mov	r1, r4
 800d11e:	ee18 0a10 	vmov	r0, s16
 800d122:	f000 f947 	bl	800d3b4 <_Bfree>
 800d126:	464c      	mov	r4, r9
 800d128:	6923      	ldr	r3, [r4, #16]
 800d12a:	1c5a      	adds	r2, r3, #1
 800d12c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d130:	6122      	str	r2, [r4, #16]
 800d132:	2201      	movs	r2, #1
 800d134:	615a      	str	r2, [r3, #20]
 800d136:	e7bb      	b.n	800d0b0 <__gethex+0x3c8>
 800d138:	6922      	ldr	r2, [r4, #16]
 800d13a:	455a      	cmp	r2, fp
 800d13c:	dd0b      	ble.n	800d156 <__gethex+0x46e>
 800d13e:	2101      	movs	r1, #1
 800d140:	4620      	mov	r0, r4
 800d142:	f7ff fd69 	bl	800cc18 <rshift>
 800d146:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d14a:	3501      	adds	r5, #1
 800d14c:	42ab      	cmp	r3, r5
 800d14e:	f6ff aed0 	blt.w	800cef2 <__gethex+0x20a>
 800d152:	2701      	movs	r7, #1
 800d154:	e7c0      	b.n	800d0d8 <__gethex+0x3f0>
 800d156:	f016 061f 	ands.w	r6, r6, #31
 800d15a:	d0fa      	beq.n	800d152 <__gethex+0x46a>
 800d15c:	4453      	add	r3, sl
 800d15e:	f1c6 0620 	rsb	r6, r6, #32
 800d162:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d166:	f000 f9d7 	bl	800d518 <__hi0bits>
 800d16a:	42b0      	cmp	r0, r6
 800d16c:	dbe7      	blt.n	800d13e <__gethex+0x456>
 800d16e:	e7f0      	b.n	800d152 <__gethex+0x46a>
 800d170:	0800f159 	.word	0x0800f159

0800d174 <L_shift>:
 800d174:	f1c2 0208 	rsb	r2, r2, #8
 800d178:	0092      	lsls	r2, r2, #2
 800d17a:	b570      	push	{r4, r5, r6, lr}
 800d17c:	f1c2 0620 	rsb	r6, r2, #32
 800d180:	6843      	ldr	r3, [r0, #4]
 800d182:	6804      	ldr	r4, [r0, #0]
 800d184:	fa03 f506 	lsl.w	r5, r3, r6
 800d188:	432c      	orrs	r4, r5
 800d18a:	40d3      	lsrs	r3, r2
 800d18c:	6004      	str	r4, [r0, #0]
 800d18e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d192:	4288      	cmp	r0, r1
 800d194:	d3f4      	bcc.n	800d180 <L_shift+0xc>
 800d196:	bd70      	pop	{r4, r5, r6, pc}

0800d198 <__match>:
 800d198:	b530      	push	{r4, r5, lr}
 800d19a:	6803      	ldr	r3, [r0, #0]
 800d19c:	3301      	adds	r3, #1
 800d19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1a2:	b914      	cbnz	r4, 800d1aa <__match+0x12>
 800d1a4:	6003      	str	r3, [r0, #0]
 800d1a6:	2001      	movs	r0, #1
 800d1a8:	bd30      	pop	{r4, r5, pc}
 800d1aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d1b2:	2d19      	cmp	r5, #25
 800d1b4:	bf98      	it	ls
 800d1b6:	3220      	addls	r2, #32
 800d1b8:	42a2      	cmp	r2, r4
 800d1ba:	d0f0      	beq.n	800d19e <__match+0x6>
 800d1bc:	2000      	movs	r0, #0
 800d1be:	e7f3      	b.n	800d1a8 <__match+0x10>

0800d1c0 <__hexnan>:
 800d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	680b      	ldr	r3, [r1, #0]
 800d1c6:	115e      	asrs	r6, r3, #5
 800d1c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d1cc:	f013 031f 	ands.w	r3, r3, #31
 800d1d0:	b087      	sub	sp, #28
 800d1d2:	bf18      	it	ne
 800d1d4:	3604      	addne	r6, #4
 800d1d6:	2500      	movs	r5, #0
 800d1d8:	1f37      	subs	r7, r6, #4
 800d1da:	4690      	mov	r8, r2
 800d1dc:	6802      	ldr	r2, [r0, #0]
 800d1de:	9301      	str	r3, [sp, #4]
 800d1e0:	4682      	mov	sl, r0
 800d1e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d1e6:	46b9      	mov	r9, r7
 800d1e8:	463c      	mov	r4, r7
 800d1ea:	9502      	str	r5, [sp, #8]
 800d1ec:	46ab      	mov	fp, r5
 800d1ee:	7851      	ldrb	r1, [r2, #1]
 800d1f0:	1c53      	adds	r3, r2, #1
 800d1f2:	9303      	str	r3, [sp, #12]
 800d1f4:	b341      	cbz	r1, 800d248 <__hexnan+0x88>
 800d1f6:	4608      	mov	r0, r1
 800d1f8:	9205      	str	r2, [sp, #20]
 800d1fa:	9104      	str	r1, [sp, #16]
 800d1fc:	f7ff fd5e 	bl	800ccbc <__hexdig_fun>
 800d200:	2800      	cmp	r0, #0
 800d202:	d14f      	bne.n	800d2a4 <__hexnan+0xe4>
 800d204:	9904      	ldr	r1, [sp, #16]
 800d206:	9a05      	ldr	r2, [sp, #20]
 800d208:	2920      	cmp	r1, #32
 800d20a:	d818      	bhi.n	800d23e <__hexnan+0x7e>
 800d20c:	9b02      	ldr	r3, [sp, #8]
 800d20e:	459b      	cmp	fp, r3
 800d210:	dd13      	ble.n	800d23a <__hexnan+0x7a>
 800d212:	454c      	cmp	r4, r9
 800d214:	d206      	bcs.n	800d224 <__hexnan+0x64>
 800d216:	2d07      	cmp	r5, #7
 800d218:	dc04      	bgt.n	800d224 <__hexnan+0x64>
 800d21a:	462a      	mov	r2, r5
 800d21c:	4649      	mov	r1, r9
 800d21e:	4620      	mov	r0, r4
 800d220:	f7ff ffa8 	bl	800d174 <L_shift>
 800d224:	4544      	cmp	r4, r8
 800d226:	d950      	bls.n	800d2ca <__hexnan+0x10a>
 800d228:	2300      	movs	r3, #0
 800d22a:	f1a4 0904 	sub.w	r9, r4, #4
 800d22e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d232:	f8cd b008 	str.w	fp, [sp, #8]
 800d236:	464c      	mov	r4, r9
 800d238:	461d      	mov	r5, r3
 800d23a:	9a03      	ldr	r2, [sp, #12]
 800d23c:	e7d7      	b.n	800d1ee <__hexnan+0x2e>
 800d23e:	2929      	cmp	r1, #41	; 0x29
 800d240:	d156      	bne.n	800d2f0 <__hexnan+0x130>
 800d242:	3202      	adds	r2, #2
 800d244:	f8ca 2000 	str.w	r2, [sl]
 800d248:	f1bb 0f00 	cmp.w	fp, #0
 800d24c:	d050      	beq.n	800d2f0 <__hexnan+0x130>
 800d24e:	454c      	cmp	r4, r9
 800d250:	d206      	bcs.n	800d260 <__hexnan+0xa0>
 800d252:	2d07      	cmp	r5, #7
 800d254:	dc04      	bgt.n	800d260 <__hexnan+0xa0>
 800d256:	462a      	mov	r2, r5
 800d258:	4649      	mov	r1, r9
 800d25a:	4620      	mov	r0, r4
 800d25c:	f7ff ff8a 	bl	800d174 <L_shift>
 800d260:	4544      	cmp	r4, r8
 800d262:	d934      	bls.n	800d2ce <__hexnan+0x10e>
 800d264:	f1a8 0204 	sub.w	r2, r8, #4
 800d268:	4623      	mov	r3, r4
 800d26a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d26e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d272:	429f      	cmp	r7, r3
 800d274:	d2f9      	bcs.n	800d26a <__hexnan+0xaa>
 800d276:	1b3b      	subs	r3, r7, r4
 800d278:	f023 0303 	bic.w	r3, r3, #3
 800d27c:	3304      	adds	r3, #4
 800d27e:	3401      	adds	r4, #1
 800d280:	3e03      	subs	r6, #3
 800d282:	42b4      	cmp	r4, r6
 800d284:	bf88      	it	hi
 800d286:	2304      	movhi	r3, #4
 800d288:	4443      	add	r3, r8
 800d28a:	2200      	movs	r2, #0
 800d28c:	f843 2b04 	str.w	r2, [r3], #4
 800d290:	429f      	cmp	r7, r3
 800d292:	d2fb      	bcs.n	800d28c <__hexnan+0xcc>
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	b91b      	cbnz	r3, 800d2a0 <__hexnan+0xe0>
 800d298:	4547      	cmp	r7, r8
 800d29a:	d127      	bne.n	800d2ec <__hexnan+0x12c>
 800d29c:	2301      	movs	r3, #1
 800d29e:	603b      	str	r3, [r7, #0]
 800d2a0:	2005      	movs	r0, #5
 800d2a2:	e026      	b.n	800d2f2 <__hexnan+0x132>
 800d2a4:	3501      	adds	r5, #1
 800d2a6:	2d08      	cmp	r5, #8
 800d2a8:	f10b 0b01 	add.w	fp, fp, #1
 800d2ac:	dd06      	ble.n	800d2bc <__hexnan+0xfc>
 800d2ae:	4544      	cmp	r4, r8
 800d2b0:	d9c3      	bls.n	800d23a <__hexnan+0x7a>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	f844 3c04 	str.w	r3, [r4, #-4]
 800d2b8:	2501      	movs	r5, #1
 800d2ba:	3c04      	subs	r4, #4
 800d2bc:	6822      	ldr	r2, [r4, #0]
 800d2be:	f000 000f 	and.w	r0, r0, #15
 800d2c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d2c6:	6022      	str	r2, [r4, #0]
 800d2c8:	e7b7      	b.n	800d23a <__hexnan+0x7a>
 800d2ca:	2508      	movs	r5, #8
 800d2cc:	e7b5      	b.n	800d23a <__hexnan+0x7a>
 800d2ce:	9b01      	ldr	r3, [sp, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d0df      	beq.n	800d294 <__hexnan+0xd4>
 800d2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d8:	f1c3 0320 	rsb	r3, r3, #32
 800d2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800d2e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d2e4:	401a      	ands	r2, r3
 800d2e6:	f846 2c04 	str.w	r2, [r6, #-4]
 800d2ea:	e7d3      	b.n	800d294 <__hexnan+0xd4>
 800d2ec:	3f04      	subs	r7, #4
 800d2ee:	e7d1      	b.n	800d294 <__hexnan+0xd4>
 800d2f0:	2004      	movs	r0, #4
 800d2f2:	b007      	add	sp, #28
 800d2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d2f8 <_localeconv_r>:
 800d2f8:	4800      	ldr	r0, [pc, #0]	; (800d2fc <_localeconv_r+0x4>)
 800d2fa:	4770      	bx	lr
 800d2fc:	20000174 	.word	0x20000174

0800d300 <malloc>:
 800d300:	4b02      	ldr	r3, [pc, #8]	; (800d30c <malloc+0xc>)
 800d302:	4601      	mov	r1, r0
 800d304:	6818      	ldr	r0, [r3, #0]
 800d306:	f000 bd59 	b.w	800ddbc <_malloc_r>
 800d30a:	bf00      	nop
 800d30c:	2000001c 	.word	0x2000001c

0800d310 <__ascii_mbtowc>:
 800d310:	b082      	sub	sp, #8
 800d312:	b901      	cbnz	r1, 800d316 <__ascii_mbtowc+0x6>
 800d314:	a901      	add	r1, sp, #4
 800d316:	b142      	cbz	r2, 800d32a <__ascii_mbtowc+0x1a>
 800d318:	b14b      	cbz	r3, 800d32e <__ascii_mbtowc+0x1e>
 800d31a:	7813      	ldrb	r3, [r2, #0]
 800d31c:	600b      	str	r3, [r1, #0]
 800d31e:	7812      	ldrb	r2, [r2, #0]
 800d320:	1e10      	subs	r0, r2, #0
 800d322:	bf18      	it	ne
 800d324:	2001      	movne	r0, #1
 800d326:	b002      	add	sp, #8
 800d328:	4770      	bx	lr
 800d32a:	4610      	mov	r0, r2
 800d32c:	e7fb      	b.n	800d326 <__ascii_mbtowc+0x16>
 800d32e:	f06f 0001 	mvn.w	r0, #1
 800d332:	e7f8      	b.n	800d326 <__ascii_mbtowc+0x16>

0800d334 <_Balloc>:
 800d334:	b570      	push	{r4, r5, r6, lr}
 800d336:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d338:	4604      	mov	r4, r0
 800d33a:	460d      	mov	r5, r1
 800d33c:	b976      	cbnz	r6, 800d35c <_Balloc+0x28>
 800d33e:	2010      	movs	r0, #16
 800d340:	f7ff ffde 	bl	800d300 <malloc>
 800d344:	4602      	mov	r2, r0
 800d346:	6260      	str	r0, [r4, #36]	; 0x24
 800d348:	b920      	cbnz	r0, 800d354 <_Balloc+0x20>
 800d34a:	4b18      	ldr	r3, [pc, #96]	; (800d3ac <_Balloc+0x78>)
 800d34c:	4818      	ldr	r0, [pc, #96]	; (800d3b0 <_Balloc+0x7c>)
 800d34e:	2166      	movs	r1, #102	; 0x66
 800d350:	f7fe fdb8 	bl	800bec4 <__assert_func>
 800d354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d358:	6006      	str	r6, [r0, #0]
 800d35a:	60c6      	str	r6, [r0, #12]
 800d35c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d35e:	68f3      	ldr	r3, [r6, #12]
 800d360:	b183      	cbz	r3, 800d384 <_Balloc+0x50>
 800d362:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d36a:	b9b8      	cbnz	r0, 800d39c <_Balloc+0x68>
 800d36c:	2101      	movs	r1, #1
 800d36e:	fa01 f605 	lsl.w	r6, r1, r5
 800d372:	1d72      	adds	r2, r6, #5
 800d374:	0092      	lsls	r2, r2, #2
 800d376:	4620      	mov	r0, r4
 800d378:	f000 fc9d 	bl	800dcb6 <_calloc_r>
 800d37c:	b160      	cbz	r0, 800d398 <_Balloc+0x64>
 800d37e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d382:	e00e      	b.n	800d3a2 <_Balloc+0x6e>
 800d384:	2221      	movs	r2, #33	; 0x21
 800d386:	2104      	movs	r1, #4
 800d388:	4620      	mov	r0, r4
 800d38a:	f000 fc94 	bl	800dcb6 <_calloc_r>
 800d38e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d390:	60f0      	str	r0, [r6, #12]
 800d392:	68db      	ldr	r3, [r3, #12]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1e4      	bne.n	800d362 <_Balloc+0x2e>
 800d398:	2000      	movs	r0, #0
 800d39a:	bd70      	pop	{r4, r5, r6, pc}
 800d39c:	6802      	ldr	r2, [r0, #0]
 800d39e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3a8:	e7f7      	b.n	800d39a <_Balloc+0x66>
 800d3aa:	bf00      	nop
 800d3ac:	0800ef40 	.word	0x0800ef40
 800d3b0:	0800f1e4 	.word	0x0800f1e4

0800d3b4 <_Bfree>:
 800d3b4:	b570      	push	{r4, r5, r6, lr}
 800d3b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d3b8:	4605      	mov	r5, r0
 800d3ba:	460c      	mov	r4, r1
 800d3bc:	b976      	cbnz	r6, 800d3dc <_Bfree+0x28>
 800d3be:	2010      	movs	r0, #16
 800d3c0:	f7ff ff9e 	bl	800d300 <malloc>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	6268      	str	r0, [r5, #36]	; 0x24
 800d3c8:	b920      	cbnz	r0, 800d3d4 <_Bfree+0x20>
 800d3ca:	4b09      	ldr	r3, [pc, #36]	; (800d3f0 <_Bfree+0x3c>)
 800d3cc:	4809      	ldr	r0, [pc, #36]	; (800d3f4 <_Bfree+0x40>)
 800d3ce:	218a      	movs	r1, #138	; 0x8a
 800d3d0:	f7fe fd78 	bl	800bec4 <__assert_func>
 800d3d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3d8:	6006      	str	r6, [r0, #0]
 800d3da:	60c6      	str	r6, [r0, #12]
 800d3dc:	b13c      	cbz	r4, 800d3ee <_Bfree+0x3a>
 800d3de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d3e0:	6862      	ldr	r2, [r4, #4]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3e8:	6021      	str	r1, [r4, #0]
 800d3ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3ee:	bd70      	pop	{r4, r5, r6, pc}
 800d3f0:	0800ef40 	.word	0x0800ef40
 800d3f4:	0800f1e4 	.word	0x0800f1e4

0800d3f8 <__multadd>:
 800d3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3fc:	690d      	ldr	r5, [r1, #16]
 800d3fe:	4607      	mov	r7, r0
 800d400:	460c      	mov	r4, r1
 800d402:	461e      	mov	r6, r3
 800d404:	f101 0c14 	add.w	ip, r1, #20
 800d408:	2000      	movs	r0, #0
 800d40a:	f8dc 3000 	ldr.w	r3, [ip]
 800d40e:	b299      	uxth	r1, r3
 800d410:	fb02 6101 	mla	r1, r2, r1, r6
 800d414:	0c1e      	lsrs	r6, r3, #16
 800d416:	0c0b      	lsrs	r3, r1, #16
 800d418:	fb02 3306 	mla	r3, r2, r6, r3
 800d41c:	b289      	uxth	r1, r1
 800d41e:	3001      	adds	r0, #1
 800d420:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d424:	4285      	cmp	r5, r0
 800d426:	f84c 1b04 	str.w	r1, [ip], #4
 800d42a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d42e:	dcec      	bgt.n	800d40a <__multadd+0x12>
 800d430:	b30e      	cbz	r6, 800d476 <__multadd+0x7e>
 800d432:	68a3      	ldr	r3, [r4, #8]
 800d434:	42ab      	cmp	r3, r5
 800d436:	dc19      	bgt.n	800d46c <__multadd+0x74>
 800d438:	6861      	ldr	r1, [r4, #4]
 800d43a:	4638      	mov	r0, r7
 800d43c:	3101      	adds	r1, #1
 800d43e:	f7ff ff79 	bl	800d334 <_Balloc>
 800d442:	4680      	mov	r8, r0
 800d444:	b928      	cbnz	r0, 800d452 <__multadd+0x5a>
 800d446:	4602      	mov	r2, r0
 800d448:	4b0c      	ldr	r3, [pc, #48]	; (800d47c <__multadd+0x84>)
 800d44a:	480d      	ldr	r0, [pc, #52]	; (800d480 <__multadd+0x88>)
 800d44c:	21b5      	movs	r1, #181	; 0xb5
 800d44e:	f7fe fd39 	bl	800bec4 <__assert_func>
 800d452:	6922      	ldr	r2, [r4, #16]
 800d454:	3202      	adds	r2, #2
 800d456:	f104 010c 	add.w	r1, r4, #12
 800d45a:	0092      	lsls	r2, r2, #2
 800d45c:	300c      	adds	r0, #12
 800d45e:	f7fc fef5 	bl	800a24c <memcpy>
 800d462:	4621      	mov	r1, r4
 800d464:	4638      	mov	r0, r7
 800d466:	f7ff ffa5 	bl	800d3b4 <_Bfree>
 800d46a:	4644      	mov	r4, r8
 800d46c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d470:	3501      	adds	r5, #1
 800d472:	615e      	str	r6, [r3, #20]
 800d474:	6125      	str	r5, [r4, #16]
 800d476:	4620      	mov	r0, r4
 800d478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d47c:	0800f159 	.word	0x0800f159
 800d480:	0800f1e4 	.word	0x0800f1e4

0800d484 <__s2b>:
 800d484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d488:	460c      	mov	r4, r1
 800d48a:	4615      	mov	r5, r2
 800d48c:	461f      	mov	r7, r3
 800d48e:	2209      	movs	r2, #9
 800d490:	3308      	adds	r3, #8
 800d492:	4606      	mov	r6, r0
 800d494:	fb93 f3f2 	sdiv	r3, r3, r2
 800d498:	2100      	movs	r1, #0
 800d49a:	2201      	movs	r2, #1
 800d49c:	429a      	cmp	r2, r3
 800d49e:	db09      	blt.n	800d4b4 <__s2b+0x30>
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	f7ff ff47 	bl	800d334 <_Balloc>
 800d4a6:	b940      	cbnz	r0, 800d4ba <__s2b+0x36>
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	4b19      	ldr	r3, [pc, #100]	; (800d510 <__s2b+0x8c>)
 800d4ac:	4819      	ldr	r0, [pc, #100]	; (800d514 <__s2b+0x90>)
 800d4ae:	21ce      	movs	r1, #206	; 0xce
 800d4b0:	f7fe fd08 	bl	800bec4 <__assert_func>
 800d4b4:	0052      	lsls	r2, r2, #1
 800d4b6:	3101      	adds	r1, #1
 800d4b8:	e7f0      	b.n	800d49c <__s2b+0x18>
 800d4ba:	9b08      	ldr	r3, [sp, #32]
 800d4bc:	6143      	str	r3, [r0, #20]
 800d4be:	2d09      	cmp	r5, #9
 800d4c0:	f04f 0301 	mov.w	r3, #1
 800d4c4:	6103      	str	r3, [r0, #16]
 800d4c6:	dd16      	ble.n	800d4f6 <__s2b+0x72>
 800d4c8:	f104 0909 	add.w	r9, r4, #9
 800d4cc:	46c8      	mov	r8, r9
 800d4ce:	442c      	add	r4, r5
 800d4d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d4d4:	4601      	mov	r1, r0
 800d4d6:	3b30      	subs	r3, #48	; 0x30
 800d4d8:	220a      	movs	r2, #10
 800d4da:	4630      	mov	r0, r6
 800d4dc:	f7ff ff8c 	bl	800d3f8 <__multadd>
 800d4e0:	45a0      	cmp	r8, r4
 800d4e2:	d1f5      	bne.n	800d4d0 <__s2b+0x4c>
 800d4e4:	f1a5 0408 	sub.w	r4, r5, #8
 800d4e8:	444c      	add	r4, r9
 800d4ea:	1b2d      	subs	r5, r5, r4
 800d4ec:	1963      	adds	r3, r4, r5
 800d4ee:	42bb      	cmp	r3, r7
 800d4f0:	db04      	blt.n	800d4fc <__s2b+0x78>
 800d4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4f6:	340a      	adds	r4, #10
 800d4f8:	2509      	movs	r5, #9
 800d4fa:	e7f6      	b.n	800d4ea <__s2b+0x66>
 800d4fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d500:	4601      	mov	r1, r0
 800d502:	3b30      	subs	r3, #48	; 0x30
 800d504:	220a      	movs	r2, #10
 800d506:	4630      	mov	r0, r6
 800d508:	f7ff ff76 	bl	800d3f8 <__multadd>
 800d50c:	e7ee      	b.n	800d4ec <__s2b+0x68>
 800d50e:	bf00      	nop
 800d510:	0800f159 	.word	0x0800f159
 800d514:	0800f1e4 	.word	0x0800f1e4

0800d518 <__hi0bits>:
 800d518:	0c03      	lsrs	r3, r0, #16
 800d51a:	041b      	lsls	r3, r3, #16
 800d51c:	b9d3      	cbnz	r3, 800d554 <__hi0bits+0x3c>
 800d51e:	0400      	lsls	r0, r0, #16
 800d520:	2310      	movs	r3, #16
 800d522:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d526:	bf04      	itt	eq
 800d528:	0200      	lsleq	r0, r0, #8
 800d52a:	3308      	addeq	r3, #8
 800d52c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d530:	bf04      	itt	eq
 800d532:	0100      	lsleq	r0, r0, #4
 800d534:	3304      	addeq	r3, #4
 800d536:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d53a:	bf04      	itt	eq
 800d53c:	0080      	lsleq	r0, r0, #2
 800d53e:	3302      	addeq	r3, #2
 800d540:	2800      	cmp	r0, #0
 800d542:	db05      	blt.n	800d550 <__hi0bits+0x38>
 800d544:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d548:	f103 0301 	add.w	r3, r3, #1
 800d54c:	bf08      	it	eq
 800d54e:	2320      	moveq	r3, #32
 800d550:	4618      	mov	r0, r3
 800d552:	4770      	bx	lr
 800d554:	2300      	movs	r3, #0
 800d556:	e7e4      	b.n	800d522 <__hi0bits+0xa>

0800d558 <__lo0bits>:
 800d558:	6803      	ldr	r3, [r0, #0]
 800d55a:	f013 0207 	ands.w	r2, r3, #7
 800d55e:	4601      	mov	r1, r0
 800d560:	d00b      	beq.n	800d57a <__lo0bits+0x22>
 800d562:	07da      	lsls	r2, r3, #31
 800d564:	d423      	bmi.n	800d5ae <__lo0bits+0x56>
 800d566:	0798      	lsls	r0, r3, #30
 800d568:	bf49      	itett	mi
 800d56a:	085b      	lsrmi	r3, r3, #1
 800d56c:	089b      	lsrpl	r3, r3, #2
 800d56e:	2001      	movmi	r0, #1
 800d570:	600b      	strmi	r3, [r1, #0]
 800d572:	bf5c      	itt	pl
 800d574:	600b      	strpl	r3, [r1, #0]
 800d576:	2002      	movpl	r0, #2
 800d578:	4770      	bx	lr
 800d57a:	b298      	uxth	r0, r3
 800d57c:	b9a8      	cbnz	r0, 800d5aa <__lo0bits+0x52>
 800d57e:	0c1b      	lsrs	r3, r3, #16
 800d580:	2010      	movs	r0, #16
 800d582:	b2da      	uxtb	r2, r3
 800d584:	b90a      	cbnz	r2, 800d58a <__lo0bits+0x32>
 800d586:	3008      	adds	r0, #8
 800d588:	0a1b      	lsrs	r3, r3, #8
 800d58a:	071a      	lsls	r2, r3, #28
 800d58c:	bf04      	itt	eq
 800d58e:	091b      	lsreq	r3, r3, #4
 800d590:	3004      	addeq	r0, #4
 800d592:	079a      	lsls	r2, r3, #30
 800d594:	bf04      	itt	eq
 800d596:	089b      	lsreq	r3, r3, #2
 800d598:	3002      	addeq	r0, #2
 800d59a:	07da      	lsls	r2, r3, #31
 800d59c:	d403      	bmi.n	800d5a6 <__lo0bits+0x4e>
 800d59e:	085b      	lsrs	r3, r3, #1
 800d5a0:	f100 0001 	add.w	r0, r0, #1
 800d5a4:	d005      	beq.n	800d5b2 <__lo0bits+0x5a>
 800d5a6:	600b      	str	r3, [r1, #0]
 800d5a8:	4770      	bx	lr
 800d5aa:	4610      	mov	r0, r2
 800d5ac:	e7e9      	b.n	800d582 <__lo0bits+0x2a>
 800d5ae:	2000      	movs	r0, #0
 800d5b0:	4770      	bx	lr
 800d5b2:	2020      	movs	r0, #32
 800d5b4:	4770      	bx	lr
	...

0800d5b8 <__i2b>:
 800d5b8:	b510      	push	{r4, lr}
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	2101      	movs	r1, #1
 800d5be:	f7ff feb9 	bl	800d334 <_Balloc>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	b928      	cbnz	r0, 800d5d2 <__i2b+0x1a>
 800d5c6:	4b05      	ldr	r3, [pc, #20]	; (800d5dc <__i2b+0x24>)
 800d5c8:	4805      	ldr	r0, [pc, #20]	; (800d5e0 <__i2b+0x28>)
 800d5ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d5ce:	f7fe fc79 	bl	800bec4 <__assert_func>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	6144      	str	r4, [r0, #20]
 800d5d6:	6103      	str	r3, [r0, #16]
 800d5d8:	bd10      	pop	{r4, pc}
 800d5da:	bf00      	nop
 800d5dc:	0800f159 	.word	0x0800f159
 800d5e0:	0800f1e4 	.word	0x0800f1e4

0800d5e4 <__multiply>:
 800d5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e8:	4691      	mov	r9, r2
 800d5ea:	690a      	ldr	r2, [r1, #16]
 800d5ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	bfb8      	it	lt
 800d5f4:	460b      	movlt	r3, r1
 800d5f6:	460c      	mov	r4, r1
 800d5f8:	bfbc      	itt	lt
 800d5fa:	464c      	movlt	r4, r9
 800d5fc:	4699      	movlt	r9, r3
 800d5fe:	6927      	ldr	r7, [r4, #16]
 800d600:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d604:	68a3      	ldr	r3, [r4, #8]
 800d606:	6861      	ldr	r1, [r4, #4]
 800d608:	eb07 060a 	add.w	r6, r7, sl
 800d60c:	42b3      	cmp	r3, r6
 800d60e:	b085      	sub	sp, #20
 800d610:	bfb8      	it	lt
 800d612:	3101      	addlt	r1, #1
 800d614:	f7ff fe8e 	bl	800d334 <_Balloc>
 800d618:	b930      	cbnz	r0, 800d628 <__multiply+0x44>
 800d61a:	4602      	mov	r2, r0
 800d61c:	4b44      	ldr	r3, [pc, #272]	; (800d730 <__multiply+0x14c>)
 800d61e:	4845      	ldr	r0, [pc, #276]	; (800d734 <__multiply+0x150>)
 800d620:	f240 115d 	movw	r1, #349	; 0x15d
 800d624:	f7fe fc4e 	bl	800bec4 <__assert_func>
 800d628:	f100 0514 	add.w	r5, r0, #20
 800d62c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d630:	462b      	mov	r3, r5
 800d632:	2200      	movs	r2, #0
 800d634:	4543      	cmp	r3, r8
 800d636:	d321      	bcc.n	800d67c <__multiply+0x98>
 800d638:	f104 0314 	add.w	r3, r4, #20
 800d63c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d640:	f109 0314 	add.w	r3, r9, #20
 800d644:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d648:	9202      	str	r2, [sp, #8]
 800d64a:	1b3a      	subs	r2, r7, r4
 800d64c:	3a15      	subs	r2, #21
 800d64e:	f022 0203 	bic.w	r2, r2, #3
 800d652:	3204      	adds	r2, #4
 800d654:	f104 0115 	add.w	r1, r4, #21
 800d658:	428f      	cmp	r7, r1
 800d65a:	bf38      	it	cc
 800d65c:	2204      	movcc	r2, #4
 800d65e:	9201      	str	r2, [sp, #4]
 800d660:	9a02      	ldr	r2, [sp, #8]
 800d662:	9303      	str	r3, [sp, #12]
 800d664:	429a      	cmp	r2, r3
 800d666:	d80c      	bhi.n	800d682 <__multiply+0x9e>
 800d668:	2e00      	cmp	r6, #0
 800d66a:	dd03      	ble.n	800d674 <__multiply+0x90>
 800d66c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d670:	2b00      	cmp	r3, #0
 800d672:	d05a      	beq.n	800d72a <__multiply+0x146>
 800d674:	6106      	str	r6, [r0, #16]
 800d676:	b005      	add	sp, #20
 800d678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67c:	f843 2b04 	str.w	r2, [r3], #4
 800d680:	e7d8      	b.n	800d634 <__multiply+0x50>
 800d682:	f8b3 a000 	ldrh.w	sl, [r3]
 800d686:	f1ba 0f00 	cmp.w	sl, #0
 800d68a:	d024      	beq.n	800d6d6 <__multiply+0xf2>
 800d68c:	f104 0e14 	add.w	lr, r4, #20
 800d690:	46a9      	mov	r9, r5
 800d692:	f04f 0c00 	mov.w	ip, #0
 800d696:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d69a:	f8d9 1000 	ldr.w	r1, [r9]
 800d69e:	fa1f fb82 	uxth.w	fp, r2
 800d6a2:	b289      	uxth	r1, r1
 800d6a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800d6a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d6ac:	f8d9 2000 	ldr.w	r2, [r9]
 800d6b0:	4461      	add	r1, ip
 800d6b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800d6ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d6be:	b289      	uxth	r1, r1
 800d6c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d6c4:	4577      	cmp	r7, lr
 800d6c6:	f849 1b04 	str.w	r1, [r9], #4
 800d6ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6ce:	d8e2      	bhi.n	800d696 <__multiply+0xb2>
 800d6d0:	9a01      	ldr	r2, [sp, #4]
 800d6d2:	f845 c002 	str.w	ip, [r5, r2]
 800d6d6:	9a03      	ldr	r2, [sp, #12]
 800d6d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d6dc:	3304      	adds	r3, #4
 800d6de:	f1b9 0f00 	cmp.w	r9, #0
 800d6e2:	d020      	beq.n	800d726 <__multiply+0x142>
 800d6e4:	6829      	ldr	r1, [r5, #0]
 800d6e6:	f104 0c14 	add.w	ip, r4, #20
 800d6ea:	46ae      	mov	lr, r5
 800d6ec:	f04f 0a00 	mov.w	sl, #0
 800d6f0:	f8bc b000 	ldrh.w	fp, [ip]
 800d6f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d6f8:	fb09 220b 	mla	r2, r9, fp, r2
 800d6fc:	4492      	add	sl, r2
 800d6fe:	b289      	uxth	r1, r1
 800d700:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d704:	f84e 1b04 	str.w	r1, [lr], #4
 800d708:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d70c:	f8be 1000 	ldrh.w	r1, [lr]
 800d710:	0c12      	lsrs	r2, r2, #16
 800d712:	fb09 1102 	mla	r1, r9, r2, r1
 800d716:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d71a:	4567      	cmp	r7, ip
 800d71c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d720:	d8e6      	bhi.n	800d6f0 <__multiply+0x10c>
 800d722:	9a01      	ldr	r2, [sp, #4]
 800d724:	50a9      	str	r1, [r5, r2]
 800d726:	3504      	adds	r5, #4
 800d728:	e79a      	b.n	800d660 <__multiply+0x7c>
 800d72a:	3e01      	subs	r6, #1
 800d72c:	e79c      	b.n	800d668 <__multiply+0x84>
 800d72e:	bf00      	nop
 800d730:	0800f159 	.word	0x0800f159
 800d734:	0800f1e4 	.word	0x0800f1e4

0800d738 <__pow5mult>:
 800d738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d73c:	4615      	mov	r5, r2
 800d73e:	f012 0203 	ands.w	r2, r2, #3
 800d742:	4606      	mov	r6, r0
 800d744:	460f      	mov	r7, r1
 800d746:	d007      	beq.n	800d758 <__pow5mult+0x20>
 800d748:	4c25      	ldr	r4, [pc, #148]	; (800d7e0 <__pow5mult+0xa8>)
 800d74a:	3a01      	subs	r2, #1
 800d74c:	2300      	movs	r3, #0
 800d74e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d752:	f7ff fe51 	bl	800d3f8 <__multadd>
 800d756:	4607      	mov	r7, r0
 800d758:	10ad      	asrs	r5, r5, #2
 800d75a:	d03d      	beq.n	800d7d8 <__pow5mult+0xa0>
 800d75c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d75e:	b97c      	cbnz	r4, 800d780 <__pow5mult+0x48>
 800d760:	2010      	movs	r0, #16
 800d762:	f7ff fdcd 	bl	800d300 <malloc>
 800d766:	4602      	mov	r2, r0
 800d768:	6270      	str	r0, [r6, #36]	; 0x24
 800d76a:	b928      	cbnz	r0, 800d778 <__pow5mult+0x40>
 800d76c:	4b1d      	ldr	r3, [pc, #116]	; (800d7e4 <__pow5mult+0xac>)
 800d76e:	481e      	ldr	r0, [pc, #120]	; (800d7e8 <__pow5mult+0xb0>)
 800d770:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d774:	f7fe fba6 	bl	800bec4 <__assert_func>
 800d778:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d77c:	6004      	str	r4, [r0, #0]
 800d77e:	60c4      	str	r4, [r0, #12]
 800d780:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d784:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d788:	b94c      	cbnz	r4, 800d79e <__pow5mult+0x66>
 800d78a:	f240 2171 	movw	r1, #625	; 0x271
 800d78e:	4630      	mov	r0, r6
 800d790:	f7ff ff12 	bl	800d5b8 <__i2b>
 800d794:	2300      	movs	r3, #0
 800d796:	f8c8 0008 	str.w	r0, [r8, #8]
 800d79a:	4604      	mov	r4, r0
 800d79c:	6003      	str	r3, [r0, #0]
 800d79e:	f04f 0900 	mov.w	r9, #0
 800d7a2:	07eb      	lsls	r3, r5, #31
 800d7a4:	d50a      	bpl.n	800d7bc <__pow5mult+0x84>
 800d7a6:	4639      	mov	r1, r7
 800d7a8:	4622      	mov	r2, r4
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	f7ff ff1a 	bl	800d5e4 <__multiply>
 800d7b0:	4639      	mov	r1, r7
 800d7b2:	4680      	mov	r8, r0
 800d7b4:	4630      	mov	r0, r6
 800d7b6:	f7ff fdfd 	bl	800d3b4 <_Bfree>
 800d7ba:	4647      	mov	r7, r8
 800d7bc:	106d      	asrs	r5, r5, #1
 800d7be:	d00b      	beq.n	800d7d8 <__pow5mult+0xa0>
 800d7c0:	6820      	ldr	r0, [r4, #0]
 800d7c2:	b938      	cbnz	r0, 800d7d4 <__pow5mult+0x9c>
 800d7c4:	4622      	mov	r2, r4
 800d7c6:	4621      	mov	r1, r4
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	f7ff ff0b 	bl	800d5e4 <__multiply>
 800d7ce:	6020      	str	r0, [r4, #0]
 800d7d0:	f8c0 9000 	str.w	r9, [r0]
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	e7e4      	b.n	800d7a2 <__pow5mult+0x6a>
 800d7d8:	4638      	mov	r0, r7
 800d7da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7de:	bf00      	nop
 800d7e0:	0800f330 	.word	0x0800f330
 800d7e4:	0800ef40 	.word	0x0800ef40
 800d7e8:	0800f1e4 	.word	0x0800f1e4

0800d7ec <__lshift>:
 800d7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7f0:	460c      	mov	r4, r1
 800d7f2:	6849      	ldr	r1, [r1, #4]
 800d7f4:	6923      	ldr	r3, [r4, #16]
 800d7f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7fa:	68a3      	ldr	r3, [r4, #8]
 800d7fc:	4607      	mov	r7, r0
 800d7fe:	4691      	mov	r9, r2
 800d800:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d804:	f108 0601 	add.w	r6, r8, #1
 800d808:	42b3      	cmp	r3, r6
 800d80a:	db0b      	blt.n	800d824 <__lshift+0x38>
 800d80c:	4638      	mov	r0, r7
 800d80e:	f7ff fd91 	bl	800d334 <_Balloc>
 800d812:	4605      	mov	r5, r0
 800d814:	b948      	cbnz	r0, 800d82a <__lshift+0x3e>
 800d816:	4602      	mov	r2, r0
 800d818:	4b2a      	ldr	r3, [pc, #168]	; (800d8c4 <__lshift+0xd8>)
 800d81a:	482b      	ldr	r0, [pc, #172]	; (800d8c8 <__lshift+0xdc>)
 800d81c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d820:	f7fe fb50 	bl	800bec4 <__assert_func>
 800d824:	3101      	adds	r1, #1
 800d826:	005b      	lsls	r3, r3, #1
 800d828:	e7ee      	b.n	800d808 <__lshift+0x1c>
 800d82a:	2300      	movs	r3, #0
 800d82c:	f100 0114 	add.w	r1, r0, #20
 800d830:	f100 0210 	add.w	r2, r0, #16
 800d834:	4618      	mov	r0, r3
 800d836:	4553      	cmp	r3, sl
 800d838:	db37      	blt.n	800d8aa <__lshift+0xbe>
 800d83a:	6920      	ldr	r0, [r4, #16]
 800d83c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d840:	f104 0314 	add.w	r3, r4, #20
 800d844:	f019 091f 	ands.w	r9, r9, #31
 800d848:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d84c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d850:	d02f      	beq.n	800d8b2 <__lshift+0xc6>
 800d852:	f1c9 0e20 	rsb	lr, r9, #32
 800d856:	468a      	mov	sl, r1
 800d858:	f04f 0c00 	mov.w	ip, #0
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	fa02 f209 	lsl.w	r2, r2, r9
 800d862:	ea42 020c 	orr.w	r2, r2, ip
 800d866:	f84a 2b04 	str.w	r2, [sl], #4
 800d86a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d86e:	4298      	cmp	r0, r3
 800d870:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d874:	d8f2      	bhi.n	800d85c <__lshift+0x70>
 800d876:	1b03      	subs	r3, r0, r4
 800d878:	3b15      	subs	r3, #21
 800d87a:	f023 0303 	bic.w	r3, r3, #3
 800d87e:	3304      	adds	r3, #4
 800d880:	f104 0215 	add.w	r2, r4, #21
 800d884:	4290      	cmp	r0, r2
 800d886:	bf38      	it	cc
 800d888:	2304      	movcc	r3, #4
 800d88a:	f841 c003 	str.w	ip, [r1, r3]
 800d88e:	f1bc 0f00 	cmp.w	ip, #0
 800d892:	d001      	beq.n	800d898 <__lshift+0xac>
 800d894:	f108 0602 	add.w	r6, r8, #2
 800d898:	3e01      	subs	r6, #1
 800d89a:	4638      	mov	r0, r7
 800d89c:	612e      	str	r6, [r5, #16]
 800d89e:	4621      	mov	r1, r4
 800d8a0:	f7ff fd88 	bl	800d3b4 <_Bfree>
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	e7c1      	b.n	800d836 <__lshift+0x4a>
 800d8b2:	3904      	subs	r1, #4
 800d8b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8bc:	4298      	cmp	r0, r3
 800d8be:	d8f9      	bhi.n	800d8b4 <__lshift+0xc8>
 800d8c0:	e7ea      	b.n	800d898 <__lshift+0xac>
 800d8c2:	bf00      	nop
 800d8c4:	0800f159 	.word	0x0800f159
 800d8c8:	0800f1e4 	.word	0x0800f1e4

0800d8cc <__mcmp>:
 800d8cc:	b530      	push	{r4, r5, lr}
 800d8ce:	6902      	ldr	r2, [r0, #16]
 800d8d0:	690c      	ldr	r4, [r1, #16]
 800d8d2:	1b12      	subs	r2, r2, r4
 800d8d4:	d10e      	bne.n	800d8f4 <__mcmp+0x28>
 800d8d6:	f100 0314 	add.w	r3, r0, #20
 800d8da:	3114      	adds	r1, #20
 800d8dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d8e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d8e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d8e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d8ec:	42a5      	cmp	r5, r4
 800d8ee:	d003      	beq.n	800d8f8 <__mcmp+0x2c>
 800d8f0:	d305      	bcc.n	800d8fe <__mcmp+0x32>
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	4610      	mov	r0, r2
 800d8f6:	bd30      	pop	{r4, r5, pc}
 800d8f8:	4283      	cmp	r3, r0
 800d8fa:	d3f3      	bcc.n	800d8e4 <__mcmp+0x18>
 800d8fc:	e7fa      	b.n	800d8f4 <__mcmp+0x28>
 800d8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d902:	e7f7      	b.n	800d8f4 <__mcmp+0x28>

0800d904 <__mdiff>:
 800d904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d908:	460c      	mov	r4, r1
 800d90a:	4606      	mov	r6, r0
 800d90c:	4611      	mov	r1, r2
 800d90e:	4620      	mov	r0, r4
 800d910:	4690      	mov	r8, r2
 800d912:	f7ff ffdb 	bl	800d8cc <__mcmp>
 800d916:	1e05      	subs	r5, r0, #0
 800d918:	d110      	bne.n	800d93c <__mdiff+0x38>
 800d91a:	4629      	mov	r1, r5
 800d91c:	4630      	mov	r0, r6
 800d91e:	f7ff fd09 	bl	800d334 <_Balloc>
 800d922:	b930      	cbnz	r0, 800d932 <__mdiff+0x2e>
 800d924:	4b3a      	ldr	r3, [pc, #232]	; (800da10 <__mdiff+0x10c>)
 800d926:	4602      	mov	r2, r0
 800d928:	f240 2132 	movw	r1, #562	; 0x232
 800d92c:	4839      	ldr	r0, [pc, #228]	; (800da14 <__mdiff+0x110>)
 800d92e:	f7fe fac9 	bl	800bec4 <__assert_func>
 800d932:	2301      	movs	r3, #1
 800d934:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d93c:	bfa4      	itt	ge
 800d93e:	4643      	movge	r3, r8
 800d940:	46a0      	movge	r8, r4
 800d942:	4630      	mov	r0, r6
 800d944:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d948:	bfa6      	itte	ge
 800d94a:	461c      	movge	r4, r3
 800d94c:	2500      	movge	r5, #0
 800d94e:	2501      	movlt	r5, #1
 800d950:	f7ff fcf0 	bl	800d334 <_Balloc>
 800d954:	b920      	cbnz	r0, 800d960 <__mdiff+0x5c>
 800d956:	4b2e      	ldr	r3, [pc, #184]	; (800da10 <__mdiff+0x10c>)
 800d958:	4602      	mov	r2, r0
 800d95a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d95e:	e7e5      	b.n	800d92c <__mdiff+0x28>
 800d960:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d964:	6926      	ldr	r6, [r4, #16]
 800d966:	60c5      	str	r5, [r0, #12]
 800d968:	f104 0914 	add.w	r9, r4, #20
 800d96c:	f108 0514 	add.w	r5, r8, #20
 800d970:	f100 0e14 	add.w	lr, r0, #20
 800d974:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d978:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d97c:	f108 0210 	add.w	r2, r8, #16
 800d980:	46f2      	mov	sl, lr
 800d982:	2100      	movs	r1, #0
 800d984:	f859 3b04 	ldr.w	r3, [r9], #4
 800d988:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d98c:	fa1f f883 	uxth.w	r8, r3
 800d990:	fa11 f18b 	uxtah	r1, r1, fp
 800d994:	0c1b      	lsrs	r3, r3, #16
 800d996:	eba1 0808 	sub.w	r8, r1, r8
 800d99a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d99e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d9a2:	fa1f f888 	uxth.w	r8, r8
 800d9a6:	1419      	asrs	r1, r3, #16
 800d9a8:	454e      	cmp	r6, r9
 800d9aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d9ae:	f84a 3b04 	str.w	r3, [sl], #4
 800d9b2:	d8e7      	bhi.n	800d984 <__mdiff+0x80>
 800d9b4:	1b33      	subs	r3, r6, r4
 800d9b6:	3b15      	subs	r3, #21
 800d9b8:	f023 0303 	bic.w	r3, r3, #3
 800d9bc:	3304      	adds	r3, #4
 800d9be:	3415      	adds	r4, #21
 800d9c0:	42a6      	cmp	r6, r4
 800d9c2:	bf38      	it	cc
 800d9c4:	2304      	movcc	r3, #4
 800d9c6:	441d      	add	r5, r3
 800d9c8:	4473      	add	r3, lr
 800d9ca:	469e      	mov	lr, r3
 800d9cc:	462e      	mov	r6, r5
 800d9ce:	4566      	cmp	r6, ip
 800d9d0:	d30e      	bcc.n	800d9f0 <__mdiff+0xec>
 800d9d2:	f10c 0203 	add.w	r2, ip, #3
 800d9d6:	1b52      	subs	r2, r2, r5
 800d9d8:	f022 0203 	bic.w	r2, r2, #3
 800d9dc:	3d03      	subs	r5, #3
 800d9de:	45ac      	cmp	ip, r5
 800d9e0:	bf38      	it	cc
 800d9e2:	2200      	movcc	r2, #0
 800d9e4:	441a      	add	r2, r3
 800d9e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d9ea:	b17b      	cbz	r3, 800da0c <__mdiff+0x108>
 800d9ec:	6107      	str	r7, [r0, #16]
 800d9ee:	e7a3      	b.n	800d938 <__mdiff+0x34>
 800d9f0:	f856 8b04 	ldr.w	r8, [r6], #4
 800d9f4:	fa11 f288 	uxtah	r2, r1, r8
 800d9f8:	1414      	asrs	r4, r2, #16
 800d9fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d9fe:	b292      	uxth	r2, r2
 800da00:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800da04:	f84e 2b04 	str.w	r2, [lr], #4
 800da08:	1421      	asrs	r1, r4, #16
 800da0a:	e7e0      	b.n	800d9ce <__mdiff+0xca>
 800da0c:	3f01      	subs	r7, #1
 800da0e:	e7ea      	b.n	800d9e6 <__mdiff+0xe2>
 800da10:	0800f159 	.word	0x0800f159
 800da14:	0800f1e4 	.word	0x0800f1e4

0800da18 <__ulp>:
 800da18:	b082      	sub	sp, #8
 800da1a:	ed8d 0b00 	vstr	d0, [sp]
 800da1e:	9b01      	ldr	r3, [sp, #4]
 800da20:	4912      	ldr	r1, [pc, #72]	; (800da6c <__ulp+0x54>)
 800da22:	4019      	ands	r1, r3
 800da24:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800da28:	2900      	cmp	r1, #0
 800da2a:	dd05      	ble.n	800da38 <__ulp+0x20>
 800da2c:	2200      	movs	r2, #0
 800da2e:	460b      	mov	r3, r1
 800da30:	ec43 2b10 	vmov	d0, r2, r3
 800da34:	b002      	add	sp, #8
 800da36:	4770      	bx	lr
 800da38:	4249      	negs	r1, r1
 800da3a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800da3e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800da42:	f04f 0200 	mov.w	r2, #0
 800da46:	f04f 0300 	mov.w	r3, #0
 800da4a:	da04      	bge.n	800da56 <__ulp+0x3e>
 800da4c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800da50:	fa41 f300 	asr.w	r3, r1, r0
 800da54:	e7ec      	b.n	800da30 <__ulp+0x18>
 800da56:	f1a0 0114 	sub.w	r1, r0, #20
 800da5a:	291e      	cmp	r1, #30
 800da5c:	bfda      	itte	le
 800da5e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800da62:	fa20 f101 	lsrle.w	r1, r0, r1
 800da66:	2101      	movgt	r1, #1
 800da68:	460a      	mov	r2, r1
 800da6a:	e7e1      	b.n	800da30 <__ulp+0x18>
 800da6c:	7ff00000 	.word	0x7ff00000

0800da70 <__b2d>:
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	6905      	ldr	r5, [r0, #16]
 800da74:	f100 0714 	add.w	r7, r0, #20
 800da78:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800da7c:	1f2e      	subs	r6, r5, #4
 800da7e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800da82:	4620      	mov	r0, r4
 800da84:	f7ff fd48 	bl	800d518 <__hi0bits>
 800da88:	f1c0 0320 	rsb	r3, r0, #32
 800da8c:	280a      	cmp	r0, #10
 800da8e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800db0c <__b2d+0x9c>
 800da92:	600b      	str	r3, [r1, #0]
 800da94:	dc14      	bgt.n	800dac0 <__b2d+0x50>
 800da96:	f1c0 0e0b 	rsb	lr, r0, #11
 800da9a:	fa24 f10e 	lsr.w	r1, r4, lr
 800da9e:	42b7      	cmp	r7, r6
 800daa0:	ea41 030c 	orr.w	r3, r1, ip
 800daa4:	bf34      	ite	cc
 800daa6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800daaa:	2100      	movcs	r1, #0
 800daac:	3015      	adds	r0, #21
 800daae:	fa04 f000 	lsl.w	r0, r4, r0
 800dab2:	fa21 f10e 	lsr.w	r1, r1, lr
 800dab6:	ea40 0201 	orr.w	r2, r0, r1
 800daba:	ec43 2b10 	vmov	d0, r2, r3
 800dabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dac0:	42b7      	cmp	r7, r6
 800dac2:	bf3a      	itte	cc
 800dac4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dac8:	f1a5 0608 	subcc.w	r6, r5, #8
 800dacc:	2100      	movcs	r1, #0
 800dace:	380b      	subs	r0, #11
 800dad0:	d017      	beq.n	800db02 <__b2d+0x92>
 800dad2:	f1c0 0c20 	rsb	ip, r0, #32
 800dad6:	fa04 f500 	lsl.w	r5, r4, r0
 800dada:	42be      	cmp	r6, r7
 800dadc:	fa21 f40c 	lsr.w	r4, r1, ip
 800dae0:	ea45 0504 	orr.w	r5, r5, r4
 800dae4:	bf8c      	ite	hi
 800dae6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800daea:	2400      	movls	r4, #0
 800daec:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800daf0:	fa01 f000 	lsl.w	r0, r1, r0
 800daf4:	fa24 f40c 	lsr.w	r4, r4, ip
 800daf8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dafc:	ea40 0204 	orr.w	r2, r0, r4
 800db00:	e7db      	b.n	800daba <__b2d+0x4a>
 800db02:	ea44 030c 	orr.w	r3, r4, ip
 800db06:	460a      	mov	r2, r1
 800db08:	e7d7      	b.n	800daba <__b2d+0x4a>
 800db0a:	bf00      	nop
 800db0c:	3ff00000 	.word	0x3ff00000

0800db10 <__d2b>:
 800db10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db14:	4689      	mov	r9, r1
 800db16:	2101      	movs	r1, #1
 800db18:	ec57 6b10 	vmov	r6, r7, d0
 800db1c:	4690      	mov	r8, r2
 800db1e:	f7ff fc09 	bl	800d334 <_Balloc>
 800db22:	4604      	mov	r4, r0
 800db24:	b930      	cbnz	r0, 800db34 <__d2b+0x24>
 800db26:	4602      	mov	r2, r0
 800db28:	4b25      	ldr	r3, [pc, #148]	; (800dbc0 <__d2b+0xb0>)
 800db2a:	4826      	ldr	r0, [pc, #152]	; (800dbc4 <__d2b+0xb4>)
 800db2c:	f240 310a 	movw	r1, #778	; 0x30a
 800db30:	f7fe f9c8 	bl	800bec4 <__assert_func>
 800db34:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800db38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db3c:	bb35      	cbnz	r5, 800db8c <__d2b+0x7c>
 800db3e:	2e00      	cmp	r6, #0
 800db40:	9301      	str	r3, [sp, #4]
 800db42:	d028      	beq.n	800db96 <__d2b+0x86>
 800db44:	4668      	mov	r0, sp
 800db46:	9600      	str	r6, [sp, #0]
 800db48:	f7ff fd06 	bl	800d558 <__lo0bits>
 800db4c:	9900      	ldr	r1, [sp, #0]
 800db4e:	b300      	cbz	r0, 800db92 <__d2b+0x82>
 800db50:	9a01      	ldr	r2, [sp, #4]
 800db52:	f1c0 0320 	rsb	r3, r0, #32
 800db56:	fa02 f303 	lsl.w	r3, r2, r3
 800db5a:	430b      	orrs	r3, r1
 800db5c:	40c2      	lsrs	r2, r0
 800db5e:	6163      	str	r3, [r4, #20]
 800db60:	9201      	str	r2, [sp, #4]
 800db62:	9b01      	ldr	r3, [sp, #4]
 800db64:	61a3      	str	r3, [r4, #24]
 800db66:	2b00      	cmp	r3, #0
 800db68:	bf14      	ite	ne
 800db6a:	2202      	movne	r2, #2
 800db6c:	2201      	moveq	r2, #1
 800db6e:	6122      	str	r2, [r4, #16]
 800db70:	b1d5      	cbz	r5, 800dba8 <__d2b+0x98>
 800db72:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db76:	4405      	add	r5, r0
 800db78:	f8c9 5000 	str.w	r5, [r9]
 800db7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db80:	f8c8 0000 	str.w	r0, [r8]
 800db84:	4620      	mov	r0, r4
 800db86:	b003      	add	sp, #12
 800db88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db90:	e7d5      	b.n	800db3e <__d2b+0x2e>
 800db92:	6161      	str	r1, [r4, #20]
 800db94:	e7e5      	b.n	800db62 <__d2b+0x52>
 800db96:	a801      	add	r0, sp, #4
 800db98:	f7ff fcde 	bl	800d558 <__lo0bits>
 800db9c:	9b01      	ldr	r3, [sp, #4]
 800db9e:	6163      	str	r3, [r4, #20]
 800dba0:	2201      	movs	r2, #1
 800dba2:	6122      	str	r2, [r4, #16]
 800dba4:	3020      	adds	r0, #32
 800dba6:	e7e3      	b.n	800db70 <__d2b+0x60>
 800dba8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dbac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dbb0:	f8c9 0000 	str.w	r0, [r9]
 800dbb4:	6918      	ldr	r0, [r3, #16]
 800dbb6:	f7ff fcaf 	bl	800d518 <__hi0bits>
 800dbba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbbe:	e7df      	b.n	800db80 <__d2b+0x70>
 800dbc0:	0800f159 	.word	0x0800f159
 800dbc4:	0800f1e4 	.word	0x0800f1e4

0800dbc8 <__ratio>:
 800dbc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbcc:	4688      	mov	r8, r1
 800dbce:	4669      	mov	r1, sp
 800dbd0:	4681      	mov	r9, r0
 800dbd2:	f7ff ff4d 	bl	800da70 <__b2d>
 800dbd6:	a901      	add	r1, sp, #4
 800dbd8:	4640      	mov	r0, r8
 800dbda:	ec55 4b10 	vmov	r4, r5, d0
 800dbde:	f7ff ff47 	bl	800da70 <__b2d>
 800dbe2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dbe6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dbea:	eba3 0c02 	sub.w	ip, r3, r2
 800dbee:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dbf2:	1a9b      	subs	r3, r3, r2
 800dbf4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dbf8:	ec51 0b10 	vmov	r0, r1, d0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	bfd6      	itet	le
 800dc00:	460a      	movle	r2, r1
 800dc02:	462a      	movgt	r2, r5
 800dc04:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dc08:	468b      	mov	fp, r1
 800dc0a:	462f      	mov	r7, r5
 800dc0c:	bfd4      	ite	le
 800dc0e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dc12:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dc16:	4620      	mov	r0, r4
 800dc18:	ee10 2a10 	vmov	r2, s0
 800dc1c:	465b      	mov	r3, fp
 800dc1e:	4639      	mov	r1, r7
 800dc20:	f7f2 fe3c 	bl	800089c <__aeabi_ddiv>
 800dc24:	ec41 0b10 	vmov	d0, r0, r1
 800dc28:	b003      	add	sp, #12
 800dc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc2e <__copybits>:
 800dc2e:	3901      	subs	r1, #1
 800dc30:	b570      	push	{r4, r5, r6, lr}
 800dc32:	1149      	asrs	r1, r1, #5
 800dc34:	6914      	ldr	r4, [r2, #16]
 800dc36:	3101      	adds	r1, #1
 800dc38:	f102 0314 	add.w	r3, r2, #20
 800dc3c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc44:	1f05      	subs	r5, r0, #4
 800dc46:	42a3      	cmp	r3, r4
 800dc48:	d30c      	bcc.n	800dc64 <__copybits+0x36>
 800dc4a:	1aa3      	subs	r3, r4, r2
 800dc4c:	3b11      	subs	r3, #17
 800dc4e:	f023 0303 	bic.w	r3, r3, #3
 800dc52:	3211      	adds	r2, #17
 800dc54:	42a2      	cmp	r2, r4
 800dc56:	bf88      	it	hi
 800dc58:	2300      	movhi	r3, #0
 800dc5a:	4418      	add	r0, r3
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	4288      	cmp	r0, r1
 800dc60:	d305      	bcc.n	800dc6e <__copybits+0x40>
 800dc62:	bd70      	pop	{r4, r5, r6, pc}
 800dc64:	f853 6b04 	ldr.w	r6, [r3], #4
 800dc68:	f845 6f04 	str.w	r6, [r5, #4]!
 800dc6c:	e7eb      	b.n	800dc46 <__copybits+0x18>
 800dc6e:	f840 3b04 	str.w	r3, [r0], #4
 800dc72:	e7f4      	b.n	800dc5e <__copybits+0x30>

0800dc74 <__any_on>:
 800dc74:	f100 0214 	add.w	r2, r0, #20
 800dc78:	6900      	ldr	r0, [r0, #16]
 800dc7a:	114b      	asrs	r3, r1, #5
 800dc7c:	4298      	cmp	r0, r3
 800dc7e:	b510      	push	{r4, lr}
 800dc80:	db11      	blt.n	800dca6 <__any_on+0x32>
 800dc82:	dd0a      	ble.n	800dc9a <__any_on+0x26>
 800dc84:	f011 011f 	ands.w	r1, r1, #31
 800dc88:	d007      	beq.n	800dc9a <__any_on+0x26>
 800dc8a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dc8e:	fa24 f001 	lsr.w	r0, r4, r1
 800dc92:	fa00 f101 	lsl.w	r1, r0, r1
 800dc96:	428c      	cmp	r4, r1
 800dc98:	d10b      	bne.n	800dcb2 <__any_on+0x3e>
 800dc9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc9e:	4293      	cmp	r3, r2
 800dca0:	d803      	bhi.n	800dcaa <__any_on+0x36>
 800dca2:	2000      	movs	r0, #0
 800dca4:	bd10      	pop	{r4, pc}
 800dca6:	4603      	mov	r3, r0
 800dca8:	e7f7      	b.n	800dc9a <__any_on+0x26>
 800dcaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dcae:	2900      	cmp	r1, #0
 800dcb0:	d0f5      	beq.n	800dc9e <__any_on+0x2a>
 800dcb2:	2001      	movs	r0, #1
 800dcb4:	e7f6      	b.n	800dca4 <__any_on+0x30>

0800dcb6 <_calloc_r>:
 800dcb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcb8:	fba1 2402 	umull	r2, r4, r1, r2
 800dcbc:	b94c      	cbnz	r4, 800dcd2 <_calloc_r+0x1c>
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	9201      	str	r2, [sp, #4]
 800dcc2:	f000 f87b 	bl	800ddbc <_malloc_r>
 800dcc6:	9a01      	ldr	r2, [sp, #4]
 800dcc8:	4605      	mov	r5, r0
 800dcca:	b930      	cbnz	r0, 800dcda <_calloc_r+0x24>
 800dccc:	4628      	mov	r0, r5
 800dcce:	b003      	add	sp, #12
 800dcd0:	bd30      	pop	{r4, r5, pc}
 800dcd2:	220c      	movs	r2, #12
 800dcd4:	6002      	str	r2, [r0, #0]
 800dcd6:	2500      	movs	r5, #0
 800dcd8:	e7f8      	b.n	800dccc <_calloc_r+0x16>
 800dcda:	4621      	mov	r1, r4
 800dcdc:	f7fc fac4 	bl	800a268 <memset>
 800dce0:	e7f4      	b.n	800dccc <_calloc_r+0x16>
	...

0800dce4 <_free_r>:
 800dce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dce6:	2900      	cmp	r1, #0
 800dce8:	d044      	beq.n	800dd74 <_free_r+0x90>
 800dcea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dcee:	9001      	str	r0, [sp, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	f1a1 0404 	sub.w	r4, r1, #4
 800dcf6:	bfb8      	it	lt
 800dcf8:	18e4      	addlt	r4, r4, r3
 800dcfa:	f000 fec5 	bl	800ea88 <__malloc_lock>
 800dcfe:	4a1e      	ldr	r2, [pc, #120]	; (800dd78 <_free_r+0x94>)
 800dd00:	9801      	ldr	r0, [sp, #4]
 800dd02:	6813      	ldr	r3, [r2, #0]
 800dd04:	b933      	cbnz	r3, 800dd14 <_free_r+0x30>
 800dd06:	6063      	str	r3, [r4, #4]
 800dd08:	6014      	str	r4, [r2, #0]
 800dd0a:	b003      	add	sp, #12
 800dd0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd10:	f000 bec0 	b.w	800ea94 <__malloc_unlock>
 800dd14:	42a3      	cmp	r3, r4
 800dd16:	d908      	bls.n	800dd2a <_free_r+0x46>
 800dd18:	6825      	ldr	r5, [r4, #0]
 800dd1a:	1961      	adds	r1, r4, r5
 800dd1c:	428b      	cmp	r3, r1
 800dd1e:	bf01      	itttt	eq
 800dd20:	6819      	ldreq	r1, [r3, #0]
 800dd22:	685b      	ldreq	r3, [r3, #4]
 800dd24:	1949      	addeq	r1, r1, r5
 800dd26:	6021      	streq	r1, [r4, #0]
 800dd28:	e7ed      	b.n	800dd06 <_free_r+0x22>
 800dd2a:	461a      	mov	r2, r3
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	b10b      	cbz	r3, 800dd34 <_free_r+0x50>
 800dd30:	42a3      	cmp	r3, r4
 800dd32:	d9fa      	bls.n	800dd2a <_free_r+0x46>
 800dd34:	6811      	ldr	r1, [r2, #0]
 800dd36:	1855      	adds	r5, r2, r1
 800dd38:	42a5      	cmp	r5, r4
 800dd3a:	d10b      	bne.n	800dd54 <_free_r+0x70>
 800dd3c:	6824      	ldr	r4, [r4, #0]
 800dd3e:	4421      	add	r1, r4
 800dd40:	1854      	adds	r4, r2, r1
 800dd42:	42a3      	cmp	r3, r4
 800dd44:	6011      	str	r1, [r2, #0]
 800dd46:	d1e0      	bne.n	800dd0a <_free_r+0x26>
 800dd48:	681c      	ldr	r4, [r3, #0]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	6053      	str	r3, [r2, #4]
 800dd4e:	4421      	add	r1, r4
 800dd50:	6011      	str	r1, [r2, #0]
 800dd52:	e7da      	b.n	800dd0a <_free_r+0x26>
 800dd54:	d902      	bls.n	800dd5c <_free_r+0x78>
 800dd56:	230c      	movs	r3, #12
 800dd58:	6003      	str	r3, [r0, #0]
 800dd5a:	e7d6      	b.n	800dd0a <_free_r+0x26>
 800dd5c:	6825      	ldr	r5, [r4, #0]
 800dd5e:	1961      	adds	r1, r4, r5
 800dd60:	428b      	cmp	r3, r1
 800dd62:	bf04      	itt	eq
 800dd64:	6819      	ldreq	r1, [r3, #0]
 800dd66:	685b      	ldreq	r3, [r3, #4]
 800dd68:	6063      	str	r3, [r4, #4]
 800dd6a:	bf04      	itt	eq
 800dd6c:	1949      	addeq	r1, r1, r5
 800dd6e:	6021      	streq	r1, [r4, #0]
 800dd70:	6054      	str	r4, [r2, #4]
 800dd72:	e7ca      	b.n	800dd0a <_free_r+0x26>
 800dd74:	b003      	add	sp, #12
 800dd76:	bd30      	pop	{r4, r5, pc}
 800dd78:	200005e0 	.word	0x200005e0

0800dd7c <sbrk_aligned>:
 800dd7c:	b570      	push	{r4, r5, r6, lr}
 800dd7e:	4e0e      	ldr	r6, [pc, #56]	; (800ddb8 <sbrk_aligned+0x3c>)
 800dd80:	460c      	mov	r4, r1
 800dd82:	6831      	ldr	r1, [r6, #0]
 800dd84:	4605      	mov	r5, r0
 800dd86:	b911      	cbnz	r1, 800dd8e <sbrk_aligned+0x12>
 800dd88:	f000 fb4a 	bl	800e420 <_sbrk_r>
 800dd8c:	6030      	str	r0, [r6, #0]
 800dd8e:	4621      	mov	r1, r4
 800dd90:	4628      	mov	r0, r5
 800dd92:	f000 fb45 	bl	800e420 <_sbrk_r>
 800dd96:	1c43      	adds	r3, r0, #1
 800dd98:	d00a      	beq.n	800ddb0 <sbrk_aligned+0x34>
 800dd9a:	1cc4      	adds	r4, r0, #3
 800dd9c:	f024 0403 	bic.w	r4, r4, #3
 800dda0:	42a0      	cmp	r0, r4
 800dda2:	d007      	beq.n	800ddb4 <sbrk_aligned+0x38>
 800dda4:	1a21      	subs	r1, r4, r0
 800dda6:	4628      	mov	r0, r5
 800dda8:	f000 fb3a 	bl	800e420 <_sbrk_r>
 800ddac:	3001      	adds	r0, #1
 800ddae:	d101      	bne.n	800ddb4 <sbrk_aligned+0x38>
 800ddb0:	f04f 34ff 	mov.w	r4, #4294967295
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	bd70      	pop	{r4, r5, r6, pc}
 800ddb8:	200005e4 	.word	0x200005e4

0800ddbc <_malloc_r>:
 800ddbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc0:	1ccd      	adds	r5, r1, #3
 800ddc2:	f025 0503 	bic.w	r5, r5, #3
 800ddc6:	3508      	adds	r5, #8
 800ddc8:	2d0c      	cmp	r5, #12
 800ddca:	bf38      	it	cc
 800ddcc:	250c      	movcc	r5, #12
 800ddce:	2d00      	cmp	r5, #0
 800ddd0:	4607      	mov	r7, r0
 800ddd2:	db01      	blt.n	800ddd8 <_malloc_r+0x1c>
 800ddd4:	42a9      	cmp	r1, r5
 800ddd6:	d905      	bls.n	800dde4 <_malloc_r+0x28>
 800ddd8:	230c      	movs	r3, #12
 800ddda:	603b      	str	r3, [r7, #0]
 800dddc:	2600      	movs	r6, #0
 800ddde:	4630      	mov	r0, r6
 800dde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde4:	4e2e      	ldr	r6, [pc, #184]	; (800dea0 <_malloc_r+0xe4>)
 800dde6:	f000 fe4f 	bl	800ea88 <__malloc_lock>
 800ddea:	6833      	ldr	r3, [r6, #0]
 800ddec:	461c      	mov	r4, r3
 800ddee:	bb34      	cbnz	r4, 800de3e <_malloc_r+0x82>
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	4638      	mov	r0, r7
 800ddf4:	f7ff ffc2 	bl	800dd7c <sbrk_aligned>
 800ddf8:	1c43      	adds	r3, r0, #1
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	d14d      	bne.n	800de9a <_malloc_r+0xde>
 800ddfe:	6834      	ldr	r4, [r6, #0]
 800de00:	4626      	mov	r6, r4
 800de02:	2e00      	cmp	r6, #0
 800de04:	d140      	bne.n	800de88 <_malloc_r+0xcc>
 800de06:	6823      	ldr	r3, [r4, #0]
 800de08:	4631      	mov	r1, r6
 800de0a:	4638      	mov	r0, r7
 800de0c:	eb04 0803 	add.w	r8, r4, r3
 800de10:	f000 fb06 	bl	800e420 <_sbrk_r>
 800de14:	4580      	cmp	r8, r0
 800de16:	d13a      	bne.n	800de8e <_malloc_r+0xd2>
 800de18:	6821      	ldr	r1, [r4, #0]
 800de1a:	3503      	adds	r5, #3
 800de1c:	1a6d      	subs	r5, r5, r1
 800de1e:	f025 0503 	bic.w	r5, r5, #3
 800de22:	3508      	adds	r5, #8
 800de24:	2d0c      	cmp	r5, #12
 800de26:	bf38      	it	cc
 800de28:	250c      	movcc	r5, #12
 800de2a:	4629      	mov	r1, r5
 800de2c:	4638      	mov	r0, r7
 800de2e:	f7ff ffa5 	bl	800dd7c <sbrk_aligned>
 800de32:	3001      	adds	r0, #1
 800de34:	d02b      	beq.n	800de8e <_malloc_r+0xd2>
 800de36:	6823      	ldr	r3, [r4, #0]
 800de38:	442b      	add	r3, r5
 800de3a:	6023      	str	r3, [r4, #0]
 800de3c:	e00e      	b.n	800de5c <_malloc_r+0xa0>
 800de3e:	6822      	ldr	r2, [r4, #0]
 800de40:	1b52      	subs	r2, r2, r5
 800de42:	d41e      	bmi.n	800de82 <_malloc_r+0xc6>
 800de44:	2a0b      	cmp	r2, #11
 800de46:	d916      	bls.n	800de76 <_malloc_r+0xba>
 800de48:	1961      	adds	r1, r4, r5
 800de4a:	42a3      	cmp	r3, r4
 800de4c:	6025      	str	r5, [r4, #0]
 800de4e:	bf18      	it	ne
 800de50:	6059      	strne	r1, [r3, #4]
 800de52:	6863      	ldr	r3, [r4, #4]
 800de54:	bf08      	it	eq
 800de56:	6031      	streq	r1, [r6, #0]
 800de58:	5162      	str	r2, [r4, r5]
 800de5a:	604b      	str	r3, [r1, #4]
 800de5c:	4638      	mov	r0, r7
 800de5e:	f104 060b 	add.w	r6, r4, #11
 800de62:	f000 fe17 	bl	800ea94 <__malloc_unlock>
 800de66:	f026 0607 	bic.w	r6, r6, #7
 800de6a:	1d23      	adds	r3, r4, #4
 800de6c:	1af2      	subs	r2, r6, r3
 800de6e:	d0b6      	beq.n	800ddde <_malloc_r+0x22>
 800de70:	1b9b      	subs	r3, r3, r6
 800de72:	50a3      	str	r3, [r4, r2]
 800de74:	e7b3      	b.n	800ddde <_malloc_r+0x22>
 800de76:	6862      	ldr	r2, [r4, #4]
 800de78:	42a3      	cmp	r3, r4
 800de7a:	bf0c      	ite	eq
 800de7c:	6032      	streq	r2, [r6, #0]
 800de7e:	605a      	strne	r2, [r3, #4]
 800de80:	e7ec      	b.n	800de5c <_malloc_r+0xa0>
 800de82:	4623      	mov	r3, r4
 800de84:	6864      	ldr	r4, [r4, #4]
 800de86:	e7b2      	b.n	800ddee <_malloc_r+0x32>
 800de88:	4634      	mov	r4, r6
 800de8a:	6876      	ldr	r6, [r6, #4]
 800de8c:	e7b9      	b.n	800de02 <_malloc_r+0x46>
 800de8e:	230c      	movs	r3, #12
 800de90:	603b      	str	r3, [r7, #0]
 800de92:	4638      	mov	r0, r7
 800de94:	f000 fdfe 	bl	800ea94 <__malloc_unlock>
 800de98:	e7a1      	b.n	800ddde <_malloc_r+0x22>
 800de9a:	6025      	str	r5, [r4, #0]
 800de9c:	e7de      	b.n	800de5c <_malloc_r+0xa0>
 800de9e:	bf00      	nop
 800dea0:	200005e0 	.word	0x200005e0

0800dea4 <__ssputs_r>:
 800dea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dea8:	688e      	ldr	r6, [r1, #8]
 800deaa:	429e      	cmp	r6, r3
 800deac:	4682      	mov	sl, r0
 800deae:	460c      	mov	r4, r1
 800deb0:	4690      	mov	r8, r2
 800deb2:	461f      	mov	r7, r3
 800deb4:	d838      	bhi.n	800df28 <__ssputs_r+0x84>
 800deb6:	898a      	ldrh	r2, [r1, #12]
 800deb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800debc:	d032      	beq.n	800df24 <__ssputs_r+0x80>
 800debe:	6825      	ldr	r5, [r4, #0]
 800dec0:	6909      	ldr	r1, [r1, #16]
 800dec2:	eba5 0901 	sub.w	r9, r5, r1
 800dec6:	6965      	ldr	r5, [r4, #20]
 800dec8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800decc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ded0:	3301      	adds	r3, #1
 800ded2:	444b      	add	r3, r9
 800ded4:	106d      	asrs	r5, r5, #1
 800ded6:	429d      	cmp	r5, r3
 800ded8:	bf38      	it	cc
 800deda:	461d      	movcc	r5, r3
 800dedc:	0553      	lsls	r3, r2, #21
 800dede:	d531      	bpl.n	800df44 <__ssputs_r+0xa0>
 800dee0:	4629      	mov	r1, r5
 800dee2:	f7ff ff6b 	bl	800ddbc <_malloc_r>
 800dee6:	4606      	mov	r6, r0
 800dee8:	b950      	cbnz	r0, 800df00 <__ssputs_r+0x5c>
 800deea:	230c      	movs	r3, #12
 800deec:	f8ca 3000 	str.w	r3, [sl]
 800def0:	89a3      	ldrh	r3, [r4, #12]
 800def2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800def6:	81a3      	strh	r3, [r4, #12]
 800def8:	f04f 30ff 	mov.w	r0, #4294967295
 800defc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df00:	6921      	ldr	r1, [r4, #16]
 800df02:	464a      	mov	r2, r9
 800df04:	f7fc f9a2 	bl	800a24c <memcpy>
 800df08:	89a3      	ldrh	r3, [r4, #12]
 800df0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df12:	81a3      	strh	r3, [r4, #12]
 800df14:	6126      	str	r6, [r4, #16]
 800df16:	6165      	str	r5, [r4, #20]
 800df18:	444e      	add	r6, r9
 800df1a:	eba5 0509 	sub.w	r5, r5, r9
 800df1e:	6026      	str	r6, [r4, #0]
 800df20:	60a5      	str	r5, [r4, #8]
 800df22:	463e      	mov	r6, r7
 800df24:	42be      	cmp	r6, r7
 800df26:	d900      	bls.n	800df2a <__ssputs_r+0x86>
 800df28:	463e      	mov	r6, r7
 800df2a:	6820      	ldr	r0, [r4, #0]
 800df2c:	4632      	mov	r2, r6
 800df2e:	4641      	mov	r1, r8
 800df30:	f000 fd90 	bl	800ea54 <memmove>
 800df34:	68a3      	ldr	r3, [r4, #8]
 800df36:	1b9b      	subs	r3, r3, r6
 800df38:	60a3      	str	r3, [r4, #8]
 800df3a:	6823      	ldr	r3, [r4, #0]
 800df3c:	4433      	add	r3, r6
 800df3e:	6023      	str	r3, [r4, #0]
 800df40:	2000      	movs	r0, #0
 800df42:	e7db      	b.n	800defc <__ssputs_r+0x58>
 800df44:	462a      	mov	r2, r5
 800df46:	f000 fdab 	bl	800eaa0 <_realloc_r>
 800df4a:	4606      	mov	r6, r0
 800df4c:	2800      	cmp	r0, #0
 800df4e:	d1e1      	bne.n	800df14 <__ssputs_r+0x70>
 800df50:	6921      	ldr	r1, [r4, #16]
 800df52:	4650      	mov	r0, sl
 800df54:	f7ff fec6 	bl	800dce4 <_free_r>
 800df58:	e7c7      	b.n	800deea <__ssputs_r+0x46>
	...

0800df5c <_svfiprintf_r>:
 800df5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df60:	4698      	mov	r8, r3
 800df62:	898b      	ldrh	r3, [r1, #12]
 800df64:	061b      	lsls	r3, r3, #24
 800df66:	b09d      	sub	sp, #116	; 0x74
 800df68:	4607      	mov	r7, r0
 800df6a:	460d      	mov	r5, r1
 800df6c:	4614      	mov	r4, r2
 800df6e:	d50e      	bpl.n	800df8e <_svfiprintf_r+0x32>
 800df70:	690b      	ldr	r3, [r1, #16]
 800df72:	b963      	cbnz	r3, 800df8e <_svfiprintf_r+0x32>
 800df74:	2140      	movs	r1, #64	; 0x40
 800df76:	f7ff ff21 	bl	800ddbc <_malloc_r>
 800df7a:	6028      	str	r0, [r5, #0]
 800df7c:	6128      	str	r0, [r5, #16]
 800df7e:	b920      	cbnz	r0, 800df8a <_svfiprintf_r+0x2e>
 800df80:	230c      	movs	r3, #12
 800df82:	603b      	str	r3, [r7, #0]
 800df84:	f04f 30ff 	mov.w	r0, #4294967295
 800df88:	e0d1      	b.n	800e12e <_svfiprintf_r+0x1d2>
 800df8a:	2340      	movs	r3, #64	; 0x40
 800df8c:	616b      	str	r3, [r5, #20]
 800df8e:	2300      	movs	r3, #0
 800df90:	9309      	str	r3, [sp, #36]	; 0x24
 800df92:	2320      	movs	r3, #32
 800df94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df98:	f8cd 800c 	str.w	r8, [sp, #12]
 800df9c:	2330      	movs	r3, #48	; 0x30
 800df9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e148 <_svfiprintf_r+0x1ec>
 800dfa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfa6:	f04f 0901 	mov.w	r9, #1
 800dfaa:	4623      	mov	r3, r4
 800dfac:	469a      	mov	sl, r3
 800dfae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfb2:	b10a      	cbz	r2, 800dfb8 <_svfiprintf_r+0x5c>
 800dfb4:	2a25      	cmp	r2, #37	; 0x25
 800dfb6:	d1f9      	bne.n	800dfac <_svfiprintf_r+0x50>
 800dfb8:	ebba 0b04 	subs.w	fp, sl, r4
 800dfbc:	d00b      	beq.n	800dfd6 <_svfiprintf_r+0x7a>
 800dfbe:	465b      	mov	r3, fp
 800dfc0:	4622      	mov	r2, r4
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	4638      	mov	r0, r7
 800dfc6:	f7ff ff6d 	bl	800dea4 <__ssputs_r>
 800dfca:	3001      	adds	r0, #1
 800dfcc:	f000 80aa 	beq.w	800e124 <_svfiprintf_r+0x1c8>
 800dfd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfd2:	445a      	add	r2, fp
 800dfd4:	9209      	str	r2, [sp, #36]	; 0x24
 800dfd6:	f89a 3000 	ldrb.w	r3, [sl]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	f000 80a2 	beq.w	800e124 <_svfiprintf_r+0x1c8>
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	f04f 32ff 	mov.w	r2, #4294967295
 800dfe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfea:	f10a 0a01 	add.w	sl, sl, #1
 800dfee:	9304      	str	r3, [sp, #16]
 800dff0:	9307      	str	r3, [sp, #28]
 800dff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dff6:	931a      	str	r3, [sp, #104]	; 0x68
 800dff8:	4654      	mov	r4, sl
 800dffa:	2205      	movs	r2, #5
 800dffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e000:	4851      	ldr	r0, [pc, #324]	; (800e148 <_svfiprintf_r+0x1ec>)
 800e002:	f7f2 f915 	bl	8000230 <memchr>
 800e006:	9a04      	ldr	r2, [sp, #16]
 800e008:	b9d8      	cbnz	r0, 800e042 <_svfiprintf_r+0xe6>
 800e00a:	06d0      	lsls	r0, r2, #27
 800e00c:	bf44      	itt	mi
 800e00e:	2320      	movmi	r3, #32
 800e010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e014:	0711      	lsls	r1, r2, #28
 800e016:	bf44      	itt	mi
 800e018:	232b      	movmi	r3, #43	; 0x2b
 800e01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e01e:	f89a 3000 	ldrb.w	r3, [sl]
 800e022:	2b2a      	cmp	r3, #42	; 0x2a
 800e024:	d015      	beq.n	800e052 <_svfiprintf_r+0xf6>
 800e026:	9a07      	ldr	r2, [sp, #28]
 800e028:	4654      	mov	r4, sl
 800e02a:	2000      	movs	r0, #0
 800e02c:	f04f 0c0a 	mov.w	ip, #10
 800e030:	4621      	mov	r1, r4
 800e032:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e036:	3b30      	subs	r3, #48	; 0x30
 800e038:	2b09      	cmp	r3, #9
 800e03a:	d94e      	bls.n	800e0da <_svfiprintf_r+0x17e>
 800e03c:	b1b0      	cbz	r0, 800e06c <_svfiprintf_r+0x110>
 800e03e:	9207      	str	r2, [sp, #28]
 800e040:	e014      	b.n	800e06c <_svfiprintf_r+0x110>
 800e042:	eba0 0308 	sub.w	r3, r0, r8
 800e046:	fa09 f303 	lsl.w	r3, r9, r3
 800e04a:	4313      	orrs	r3, r2
 800e04c:	9304      	str	r3, [sp, #16]
 800e04e:	46a2      	mov	sl, r4
 800e050:	e7d2      	b.n	800dff8 <_svfiprintf_r+0x9c>
 800e052:	9b03      	ldr	r3, [sp, #12]
 800e054:	1d19      	adds	r1, r3, #4
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	9103      	str	r1, [sp, #12]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	bfbb      	ittet	lt
 800e05e:	425b      	neglt	r3, r3
 800e060:	f042 0202 	orrlt.w	r2, r2, #2
 800e064:	9307      	strge	r3, [sp, #28]
 800e066:	9307      	strlt	r3, [sp, #28]
 800e068:	bfb8      	it	lt
 800e06a:	9204      	strlt	r2, [sp, #16]
 800e06c:	7823      	ldrb	r3, [r4, #0]
 800e06e:	2b2e      	cmp	r3, #46	; 0x2e
 800e070:	d10c      	bne.n	800e08c <_svfiprintf_r+0x130>
 800e072:	7863      	ldrb	r3, [r4, #1]
 800e074:	2b2a      	cmp	r3, #42	; 0x2a
 800e076:	d135      	bne.n	800e0e4 <_svfiprintf_r+0x188>
 800e078:	9b03      	ldr	r3, [sp, #12]
 800e07a:	1d1a      	adds	r2, r3, #4
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	9203      	str	r2, [sp, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	bfb8      	it	lt
 800e084:	f04f 33ff 	movlt.w	r3, #4294967295
 800e088:	3402      	adds	r4, #2
 800e08a:	9305      	str	r3, [sp, #20]
 800e08c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e158 <_svfiprintf_r+0x1fc>
 800e090:	7821      	ldrb	r1, [r4, #0]
 800e092:	2203      	movs	r2, #3
 800e094:	4650      	mov	r0, sl
 800e096:	f7f2 f8cb 	bl	8000230 <memchr>
 800e09a:	b140      	cbz	r0, 800e0ae <_svfiprintf_r+0x152>
 800e09c:	2340      	movs	r3, #64	; 0x40
 800e09e:	eba0 000a 	sub.w	r0, r0, sl
 800e0a2:	fa03 f000 	lsl.w	r0, r3, r0
 800e0a6:	9b04      	ldr	r3, [sp, #16]
 800e0a8:	4303      	orrs	r3, r0
 800e0aa:	3401      	adds	r4, #1
 800e0ac:	9304      	str	r3, [sp, #16]
 800e0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0b2:	4826      	ldr	r0, [pc, #152]	; (800e14c <_svfiprintf_r+0x1f0>)
 800e0b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0b8:	2206      	movs	r2, #6
 800e0ba:	f7f2 f8b9 	bl	8000230 <memchr>
 800e0be:	2800      	cmp	r0, #0
 800e0c0:	d038      	beq.n	800e134 <_svfiprintf_r+0x1d8>
 800e0c2:	4b23      	ldr	r3, [pc, #140]	; (800e150 <_svfiprintf_r+0x1f4>)
 800e0c4:	bb1b      	cbnz	r3, 800e10e <_svfiprintf_r+0x1b2>
 800e0c6:	9b03      	ldr	r3, [sp, #12]
 800e0c8:	3307      	adds	r3, #7
 800e0ca:	f023 0307 	bic.w	r3, r3, #7
 800e0ce:	3308      	adds	r3, #8
 800e0d0:	9303      	str	r3, [sp, #12]
 800e0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0d4:	4433      	add	r3, r6
 800e0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0d8:	e767      	b.n	800dfaa <_svfiprintf_r+0x4e>
 800e0da:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0de:	460c      	mov	r4, r1
 800e0e0:	2001      	movs	r0, #1
 800e0e2:	e7a5      	b.n	800e030 <_svfiprintf_r+0xd4>
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	3401      	adds	r4, #1
 800e0e8:	9305      	str	r3, [sp, #20]
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	f04f 0c0a 	mov.w	ip, #10
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0f6:	3a30      	subs	r2, #48	; 0x30
 800e0f8:	2a09      	cmp	r2, #9
 800e0fa:	d903      	bls.n	800e104 <_svfiprintf_r+0x1a8>
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d0c5      	beq.n	800e08c <_svfiprintf_r+0x130>
 800e100:	9105      	str	r1, [sp, #20]
 800e102:	e7c3      	b.n	800e08c <_svfiprintf_r+0x130>
 800e104:	fb0c 2101 	mla	r1, ip, r1, r2
 800e108:	4604      	mov	r4, r0
 800e10a:	2301      	movs	r3, #1
 800e10c:	e7f0      	b.n	800e0f0 <_svfiprintf_r+0x194>
 800e10e:	ab03      	add	r3, sp, #12
 800e110:	9300      	str	r3, [sp, #0]
 800e112:	462a      	mov	r2, r5
 800e114:	4b0f      	ldr	r3, [pc, #60]	; (800e154 <_svfiprintf_r+0x1f8>)
 800e116:	a904      	add	r1, sp, #16
 800e118:	4638      	mov	r0, r7
 800e11a:	f7fc f94d 	bl	800a3b8 <_printf_float>
 800e11e:	1c42      	adds	r2, r0, #1
 800e120:	4606      	mov	r6, r0
 800e122:	d1d6      	bne.n	800e0d2 <_svfiprintf_r+0x176>
 800e124:	89ab      	ldrh	r3, [r5, #12]
 800e126:	065b      	lsls	r3, r3, #25
 800e128:	f53f af2c 	bmi.w	800df84 <_svfiprintf_r+0x28>
 800e12c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e12e:	b01d      	add	sp, #116	; 0x74
 800e130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e134:	ab03      	add	r3, sp, #12
 800e136:	9300      	str	r3, [sp, #0]
 800e138:	462a      	mov	r2, r5
 800e13a:	4b06      	ldr	r3, [pc, #24]	; (800e154 <_svfiprintf_r+0x1f8>)
 800e13c:	a904      	add	r1, sp, #16
 800e13e:	4638      	mov	r0, r7
 800e140:	f7fc fbde 	bl	800a900 <_printf_i>
 800e144:	e7eb      	b.n	800e11e <_svfiprintf_r+0x1c2>
 800e146:	bf00      	nop
 800e148:	0800f33c 	.word	0x0800f33c
 800e14c:	0800f346 	.word	0x0800f346
 800e150:	0800a3b9 	.word	0x0800a3b9
 800e154:	0800dea5 	.word	0x0800dea5
 800e158:	0800f342 	.word	0x0800f342

0800e15c <__sfputc_r>:
 800e15c:	6893      	ldr	r3, [r2, #8]
 800e15e:	3b01      	subs	r3, #1
 800e160:	2b00      	cmp	r3, #0
 800e162:	b410      	push	{r4}
 800e164:	6093      	str	r3, [r2, #8]
 800e166:	da08      	bge.n	800e17a <__sfputc_r+0x1e>
 800e168:	6994      	ldr	r4, [r2, #24]
 800e16a:	42a3      	cmp	r3, r4
 800e16c:	db01      	blt.n	800e172 <__sfputc_r+0x16>
 800e16e:	290a      	cmp	r1, #10
 800e170:	d103      	bne.n	800e17a <__sfputc_r+0x1e>
 800e172:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e176:	f000 b977 	b.w	800e468 <__swbuf_r>
 800e17a:	6813      	ldr	r3, [r2, #0]
 800e17c:	1c58      	adds	r0, r3, #1
 800e17e:	6010      	str	r0, [r2, #0]
 800e180:	7019      	strb	r1, [r3, #0]
 800e182:	4608      	mov	r0, r1
 800e184:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e188:	4770      	bx	lr

0800e18a <__sfputs_r>:
 800e18a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18c:	4606      	mov	r6, r0
 800e18e:	460f      	mov	r7, r1
 800e190:	4614      	mov	r4, r2
 800e192:	18d5      	adds	r5, r2, r3
 800e194:	42ac      	cmp	r4, r5
 800e196:	d101      	bne.n	800e19c <__sfputs_r+0x12>
 800e198:	2000      	movs	r0, #0
 800e19a:	e007      	b.n	800e1ac <__sfputs_r+0x22>
 800e19c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1a0:	463a      	mov	r2, r7
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	f7ff ffda 	bl	800e15c <__sfputc_r>
 800e1a8:	1c43      	adds	r3, r0, #1
 800e1aa:	d1f3      	bne.n	800e194 <__sfputs_r+0xa>
 800e1ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e1b0 <_vfiprintf_r>:
 800e1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b4:	460d      	mov	r5, r1
 800e1b6:	b09d      	sub	sp, #116	; 0x74
 800e1b8:	4614      	mov	r4, r2
 800e1ba:	4698      	mov	r8, r3
 800e1bc:	4606      	mov	r6, r0
 800e1be:	b118      	cbz	r0, 800e1c8 <_vfiprintf_r+0x18>
 800e1c0:	6983      	ldr	r3, [r0, #24]
 800e1c2:	b90b      	cbnz	r3, 800e1c8 <_vfiprintf_r+0x18>
 800e1c4:	f000 fb40 	bl	800e848 <__sinit>
 800e1c8:	4b89      	ldr	r3, [pc, #548]	; (800e3f0 <_vfiprintf_r+0x240>)
 800e1ca:	429d      	cmp	r5, r3
 800e1cc:	d11b      	bne.n	800e206 <_vfiprintf_r+0x56>
 800e1ce:	6875      	ldr	r5, [r6, #4]
 800e1d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1d2:	07d9      	lsls	r1, r3, #31
 800e1d4:	d405      	bmi.n	800e1e2 <_vfiprintf_r+0x32>
 800e1d6:	89ab      	ldrh	r3, [r5, #12]
 800e1d8:	059a      	lsls	r2, r3, #22
 800e1da:	d402      	bmi.n	800e1e2 <_vfiprintf_r+0x32>
 800e1dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1de:	f000 fbd1 	bl	800e984 <__retarget_lock_acquire_recursive>
 800e1e2:	89ab      	ldrh	r3, [r5, #12]
 800e1e4:	071b      	lsls	r3, r3, #28
 800e1e6:	d501      	bpl.n	800e1ec <_vfiprintf_r+0x3c>
 800e1e8:	692b      	ldr	r3, [r5, #16]
 800e1ea:	b9eb      	cbnz	r3, 800e228 <_vfiprintf_r+0x78>
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	4630      	mov	r0, r6
 800e1f0:	f000 f99a 	bl	800e528 <__swsetup_r>
 800e1f4:	b1c0      	cbz	r0, 800e228 <_vfiprintf_r+0x78>
 800e1f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1f8:	07dc      	lsls	r4, r3, #31
 800e1fa:	d50e      	bpl.n	800e21a <_vfiprintf_r+0x6a>
 800e1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e200:	b01d      	add	sp, #116	; 0x74
 800e202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e206:	4b7b      	ldr	r3, [pc, #492]	; (800e3f4 <_vfiprintf_r+0x244>)
 800e208:	429d      	cmp	r5, r3
 800e20a:	d101      	bne.n	800e210 <_vfiprintf_r+0x60>
 800e20c:	68b5      	ldr	r5, [r6, #8]
 800e20e:	e7df      	b.n	800e1d0 <_vfiprintf_r+0x20>
 800e210:	4b79      	ldr	r3, [pc, #484]	; (800e3f8 <_vfiprintf_r+0x248>)
 800e212:	429d      	cmp	r5, r3
 800e214:	bf08      	it	eq
 800e216:	68f5      	ldreq	r5, [r6, #12]
 800e218:	e7da      	b.n	800e1d0 <_vfiprintf_r+0x20>
 800e21a:	89ab      	ldrh	r3, [r5, #12]
 800e21c:	0598      	lsls	r0, r3, #22
 800e21e:	d4ed      	bmi.n	800e1fc <_vfiprintf_r+0x4c>
 800e220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e222:	f000 fbb0 	bl	800e986 <__retarget_lock_release_recursive>
 800e226:	e7e9      	b.n	800e1fc <_vfiprintf_r+0x4c>
 800e228:	2300      	movs	r3, #0
 800e22a:	9309      	str	r3, [sp, #36]	; 0x24
 800e22c:	2320      	movs	r3, #32
 800e22e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e232:	f8cd 800c 	str.w	r8, [sp, #12]
 800e236:	2330      	movs	r3, #48	; 0x30
 800e238:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e3fc <_vfiprintf_r+0x24c>
 800e23c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e240:	f04f 0901 	mov.w	r9, #1
 800e244:	4623      	mov	r3, r4
 800e246:	469a      	mov	sl, r3
 800e248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e24c:	b10a      	cbz	r2, 800e252 <_vfiprintf_r+0xa2>
 800e24e:	2a25      	cmp	r2, #37	; 0x25
 800e250:	d1f9      	bne.n	800e246 <_vfiprintf_r+0x96>
 800e252:	ebba 0b04 	subs.w	fp, sl, r4
 800e256:	d00b      	beq.n	800e270 <_vfiprintf_r+0xc0>
 800e258:	465b      	mov	r3, fp
 800e25a:	4622      	mov	r2, r4
 800e25c:	4629      	mov	r1, r5
 800e25e:	4630      	mov	r0, r6
 800e260:	f7ff ff93 	bl	800e18a <__sfputs_r>
 800e264:	3001      	adds	r0, #1
 800e266:	f000 80aa 	beq.w	800e3be <_vfiprintf_r+0x20e>
 800e26a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e26c:	445a      	add	r2, fp
 800e26e:	9209      	str	r2, [sp, #36]	; 0x24
 800e270:	f89a 3000 	ldrb.w	r3, [sl]
 800e274:	2b00      	cmp	r3, #0
 800e276:	f000 80a2 	beq.w	800e3be <_vfiprintf_r+0x20e>
 800e27a:	2300      	movs	r3, #0
 800e27c:	f04f 32ff 	mov.w	r2, #4294967295
 800e280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e284:	f10a 0a01 	add.w	sl, sl, #1
 800e288:	9304      	str	r3, [sp, #16]
 800e28a:	9307      	str	r3, [sp, #28]
 800e28c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e290:	931a      	str	r3, [sp, #104]	; 0x68
 800e292:	4654      	mov	r4, sl
 800e294:	2205      	movs	r2, #5
 800e296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e29a:	4858      	ldr	r0, [pc, #352]	; (800e3fc <_vfiprintf_r+0x24c>)
 800e29c:	f7f1 ffc8 	bl	8000230 <memchr>
 800e2a0:	9a04      	ldr	r2, [sp, #16]
 800e2a2:	b9d8      	cbnz	r0, 800e2dc <_vfiprintf_r+0x12c>
 800e2a4:	06d1      	lsls	r1, r2, #27
 800e2a6:	bf44      	itt	mi
 800e2a8:	2320      	movmi	r3, #32
 800e2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2ae:	0713      	lsls	r3, r2, #28
 800e2b0:	bf44      	itt	mi
 800e2b2:	232b      	movmi	r3, #43	; 0x2b
 800e2b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2b8:	f89a 3000 	ldrb.w	r3, [sl]
 800e2bc:	2b2a      	cmp	r3, #42	; 0x2a
 800e2be:	d015      	beq.n	800e2ec <_vfiprintf_r+0x13c>
 800e2c0:	9a07      	ldr	r2, [sp, #28]
 800e2c2:	4654      	mov	r4, sl
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	f04f 0c0a 	mov.w	ip, #10
 800e2ca:	4621      	mov	r1, r4
 800e2cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2d0:	3b30      	subs	r3, #48	; 0x30
 800e2d2:	2b09      	cmp	r3, #9
 800e2d4:	d94e      	bls.n	800e374 <_vfiprintf_r+0x1c4>
 800e2d6:	b1b0      	cbz	r0, 800e306 <_vfiprintf_r+0x156>
 800e2d8:	9207      	str	r2, [sp, #28]
 800e2da:	e014      	b.n	800e306 <_vfiprintf_r+0x156>
 800e2dc:	eba0 0308 	sub.w	r3, r0, r8
 800e2e0:	fa09 f303 	lsl.w	r3, r9, r3
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	9304      	str	r3, [sp, #16]
 800e2e8:	46a2      	mov	sl, r4
 800e2ea:	e7d2      	b.n	800e292 <_vfiprintf_r+0xe2>
 800e2ec:	9b03      	ldr	r3, [sp, #12]
 800e2ee:	1d19      	adds	r1, r3, #4
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	9103      	str	r1, [sp, #12]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	bfbb      	ittet	lt
 800e2f8:	425b      	neglt	r3, r3
 800e2fa:	f042 0202 	orrlt.w	r2, r2, #2
 800e2fe:	9307      	strge	r3, [sp, #28]
 800e300:	9307      	strlt	r3, [sp, #28]
 800e302:	bfb8      	it	lt
 800e304:	9204      	strlt	r2, [sp, #16]
 800e306:	7823      	ldrb	r3, [r4, #0]
 800e308:	2b2e      	cmp	r3, #46	; 0x2e
 800e30a:	d10c      	bne.n	800e326 <_vfiprintf_r+0x176>
 800e30c:	7863      	ldrb	r3, [r4, #1]
 800e30e:	2b2a      	cmp	r3, #42	; 0x2a
 800e310:	d135      	bne.n	800e37e <_vfiprintf_r+0x1ce>
 800e312:	9b03      	ldr	r3, [sp, #12]
 800e314:	1d1a      	adds	r2, r3, #4
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	9203      	str	r2, [sp, #12]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	bfb8      	it	lt
 800e31e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e322:	3402      	adds	r4, #2
 800e324:	9305      	str	r3, [sp, #20]
 800e326:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e40c <_vfiprintf_r+0x25c>
 800e32a:	7821      	ldrb	r1, [r4, #0]
 800e32c:	2203      	movs	r2, #3
 800e32e:	4650      	mov	r0, sl
 800e330:	f7f1 ff7e 	bl	8000230 <memchr>
 800e334:	b140      	cbz	r0, 800e348 <_vfiprintf_r+0x198>
 800e336:	2340      	movs	r3, #64	; 0x40
 800e338:	eba0 000a 	sub.w	r0, r0, sl
 800e33c:	fa03 f000 	lsl.w	r0, r3, r0
 800e340:	9b04      	ldr	r3, [sp, #16]
 800e342:	4303      	orrs	r3, r0
 800e344:	3401      	adds	r4, #1
 800e346:	9304      	str	r3, [sp, #16]
 800e348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e34c:	482c      	ldr	r0, [pc, #176]	; (800e400 <_vfiprintf_r+0x250>)
 800e34e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e352:	2206      	movs	r2, #6
 800e354:	f7f1 ff6c 	bl	8000230 <memchr>
 800e358:	2800      	cmp	r0, #0
 800e35a:	d03f      	beq.n	800e3dc <_vfiprintf_r+0x22c>
 800e35c:	4b29      	ldr	r3, [pc, #164]	; (800e404 <_vfiprintf_r+0x254>)
 800e35e:	bb1b      	cbnz	r3, 800e3a8 <_vfiprintf_r+0x1f8>
 800e360:	9b03      	ldr	r3, [sp, #12]
 800e362:	3307      	adds	r3, #7
 800e364:	f023 0307 	bic.w	r3, r3, #7
 800e368:	3308      	adds	r3, #8
 800e36a:	9303      	str	r3, [sp, #12]
 800e36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e36e:	443b      	add	r3, r7
 800e370:	9309      	str	r3, [sp, #36]	; 0x24
 800e372:	e767      	b.n	800e244 <_vfiprintf_r+0x94>
 800e374:	fb0c 3202 	mla	r2, ip, r2, r3
 800e378:	460c      	mov	r4, r1
 800e37a:	2001      	movs	r0, #1
 800e37c:	e7a5      	b.n	800e2ca <_vfiprintf_r+0x11a>
 800e37e:	2300      	movs	r3, #0
 800e380:	3401      	adds	r4, #1
 800e382:	9305      	str	r3, [sp, #20]
 800e384:	4619      	mov	r1, r3
 800e386:	f04f 0c0a 	mov.w	ip, #10
 800e38a:	4620      	mov	r0, r4
 800e38c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e390:	3a30      	subs	r2, #48	; 0x30
 800e392:	2a09      	cmp	r2, #9
 800e394:	d903      	bls.n	800e39e <_vfiprintf_r+0x1ee>
 800e396:	2b00      	cmp	r3, #0
 800e398:	d0c5      	beq.n	800e326 <_vfiprintf_r+0x176>
 800e39a:	9105      	str	r1, [sp, #20]
 800e39c:	e7c3      	b.n	800e326 <_vfiprintf_r+0x176>
 800e39e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3a2:	4604      	mov	r4, r0
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	e7f0      	b.n	800e38a <_vfiprintf_r+0x1da>
 800e3a8:	ab03      	add	r3, sp, #12
 800e3aa:	9300      	str	r3, [sp, #0]
 800e3ac:	462a      	mov	r2, r5
 800e3ae:	4b16      	ldr	r3, [pc, #88]	; (800e408 <_vfiprintf_r+0x258>)
 800e3b0:	a904      	add	r1, sp, #16
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7fc f800 	bl	800a3b8 <_printf_float>
 800e3b8:	4607      	mov	r7, r0
 800e3ba:	1c78      	adds	r0, r7, #1
 800e3bc:	d1d6      	bne.n	800e36c <_vfiprintf_r+0x1bc>
 800e3be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3c0:	07d9      	lsls	r1, r3, #31
 800e3c2:	d405      	bmi.n	800e3d0 <_vfiprintf_r+0x220>
 800e3c4:	89ab      	ldrh	r3, [r5, #12]
 800e3c6:	059a      	lsls	r2, r3, #22
 800e3c8:	d402      	bmi.n	800e3d0 <_vfiprintf_r+0x220>
 800e3ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3cc:	f000 fadb 	bl	800e986 <__retarget_lock_release_recursive>
 800e3d0:	89ab      	ldrh	r3, [r5, #12]
 800e3d2:	065b      	lsls	r3, r3, #25
 800e3d4:	f53f af12 	bmi.w	800e1fc <_vfiprintf_r+0x4c>
 800e3d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3da:	e711      	b.n	800e200 <_vfiprintf_r+0x50>
 800e3dc:	ab03      	add	r3, sp, #12
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	462a      	mov	r2, r5
 800e3e2:	4b09      	ldr	r3, [pc, #36]	; (800e408 <_vfiprintf_r+0x258>)
 800e3e4:	a904      	add	r1, sp, #16
 800e3e6:	4630      	mov	r0, r6
 800e3e8:	f7fc fa8a 	bl	800a900 <_printf_i>
 800e3ec:	e7e4      	b.n	800e3b8 <_vfiprintf_r+0x208>
 800e3ee:	bf00      	nop
 800e3f0:	0800f370 	.word	0x0800f370
 800e3f4:	0800f390 	.word	0x0800f390
 800e3f8:	0800f350 	.word	0x0800f350
 800e3fc:	0800f33c 	.word	0x0800f33c
 800e400:	0800f346 	.word	0x0800f346
 800e404:	0800a3b9 	.word	0x0800a3b9
 800e408:	0800e18b 	.word	0x0800e18b
 800e40c:	0800f342 	.word	0x0800f342

0800e410 <nan>:
 800e410:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e418 <nan+0x8>
 800e414:	4770      	bx	lr
 800e416:	bf00      	nop
 800e418:	00000000 	.word	0x00000000
 800e41c:	7ff80000 	.word	0x7ff80000

0800e420 <_sbrk_r>:
 800e420:	b538      	push	{r3, r4, r5, lr}
 800e422:	4d06      	ldr	r5, [pc, #24]	; (800e43c <_sbrk_r+0x1c>)
 800e424:	2300      	movs	r3, #0
 800e426:	4604      	mov	r4, r0
 800e428:	4608      	mov	r0, r1
 800e42a:	602b      	str	r3, [r5, #0]
 800e42c:	f7f3 fe5e 	bl	80020ec <_sbrk>
 800e430:	1c43      	adds	r3, r0, #1
 800e432:	d102      	bne.n	800e43a <_sbrk_r+0x1a>
 800e434:	682b      	ldr	r3, [r5, #0]
 800e436:	b103      	cbz	r3, 800e43a <_sbrk_r+0x1a>
 800e438:	6023      	str	r3, [r4, #0]
 800e43a:	bd38      	pop	{r3, r4, r5, pc}
 800e43c:	200005ec 	.word	0x200005ec

0800e440 <strncmp>:
 800e440:	b510      	push	{r4, lr}
 800e442:	b17a      	cbz	r2, 800e464 <strncmp+0x24>
 800e444:	4603      	mov	r3, r0
 800e446:	3901      	subs	r1, #1
 800e448:	1884      	adds	r4, r0, r2
 800e44a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e44e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e452:	4290      	cmp	r0, r2
 800e454:	d101      	bne.n	800e45a <strncmp+0x1a>
 800e456:	42a3      	cmp	r3, r4
 800e458:	d101      	bne.n	800e45e <strncmp+0x1e>
 800e45a:	1a80      	subs	r0, r0, r2
 800e45c:	bd10      	pop	{r4, pc}
 800e45e:	2800      	cmp	r0, #0
 800e460:	d1f3      	bne.n	800e44a <strncmp+0xa>
 800e462:	e7fa      	b.n	800e45a <strncmp+0x1a>
 800e464:	4610      	mov	r0, r2
 800e466:	e7f9      	b.n	800e45c <strncmp+0x1c>

0800e468 <__swbuf_r>:
 800e468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e46a:	460e      	mov	r6, r1
 800e46c:	4614      	mov	r4, r2
 800e46e:	4605      	mov	r5, r0
 800e470:	b118      	cbz	r0, 800e47a <__swbuf_r+0x12>
 800e472:	6983      	ldr	r3, [r0, #24]
 800e474:	b90b      	cbnz	r3, 800e47a <__swbuf_r+0x12>
 800e476:	f000 f9e7 	bl	800e848 <__sinit>
 800e47a:	4b21      	ldr	r3, [pc, #132]	; (800e500 <__swbuf_r+0x98>)
 800e47c:	429c      	cmp	r4, r3
 800e47e:	d12b      	bne.n	800e4d8 <__swbuf_r+0x70>
 800e480:	686c      	ldr	r4, [r5, #4]
 800e482:	69a3      	ldr	r3, [r4, #24]
 800e484:	60a3      	str	r3, [r4, #8]
 800e486:	89a3      	ldrh	r3, [r4, #12]
 800e488:	071a      	lsls	r2, r3, #28
 800e48a:	d52f      	bpl.n	800e4ec <__swbuf_r+0x84>
 800e48c:	6923      	ldr	r3, [r4, #16]
 800e48e:	b36b      	cbz	r3, 800e4ec <__swbuf_r+0x84>
 800e490:	6923      	ldr	r3, [r4, #16]
 800e492:	6820      	ldr	r0, [r4, #0]
 800e494:	1ac0      	subs	r0, r0, r3
 800e496:	6963      	ldr	r3, [r4, #20]
 800e498:	b2f6      	uxtb	r6, r6
 800e49a:	4283      	cmp	r3, r0
 800e49c:	4637      	mov	r7, r6
 800e49e:	dc04      	bgt.n	800e4aa <__swbuf_r+0x42>
 800e4a0:	4621      	mov	r1, r4
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	f000 f93c 	bl	800e720 <_fflush_r>
 800e4a8:	bb30      	cbnz	r0, 800e4f8 <__swbuf_r+0x90>
 800e4aa:	68a3      	ldr	r3, [r4, #8]
 800e4ac:	3b01      	subs	r3, #1
 800e4ae:	60a3      	str	r3, [r4, #8]
 800e4b0:	6823      	ldr	r3, [r4, #0]
 800e4b2:	1c5a      	adds	r2, r3, #1
 800e4b4:	6022      	str	r2, [r4, #0]
 800e4b6:	701e      	strb	r6, [r3, #0]
 800e4b8:	6963      	ldr	r3, [r4, #20]
 800e4ba:	3001      	adds	r0, #1
 800e4bc:	4283      	cmp	r3, r0
 800e4be:	d004      	beq.n	800e4ca <__swbuf_r+0x62>
 800e4c0:	89a3      	ldrh	r3, [r4, #12]
 800e4c2:	07db      	lsls	r3, r3, #31
 800e4c4:	d506      	bpl.n	800e4d4 <__swbuf_r+0x6c>
 800e4c6:	2e0a      	cmp	r6, #10
 800e4c8:	d104      	bne.n	800e4d4 <__swbuf_r+0x6c>
 800e4ca:	4621      	mov	r1, r4
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	f000 f927 	bl	800e720 <_fflush_r>
 800e4d2:	b988      	cbnz	r0, 800e4f8 <__swbuf_r+0x90>
 800e4d4:	4638      	mov	r0, r7
 800e4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4d8:	4b0a      	ldr	r3, [pc, #40]	; (800e504 <__swbuf_r+0x9c>)
 800e4da:	429c      	cmp	r4, r3
 800e4dc:	d101      	bne.n	800e4e2 <__swbuf_r+0x7a>
 800e4de:	68ac      	ldr	r4, [r5, #8]
 800e4e0:	e7cf      	b.n	800e482 <__swbuf_r+0x1a>
 800e4e2:	4b09      	ldr	r3, [pc, #36]	; (800e508 <__swbuf_r+0xa0>)
 800e4e4:	429c      	cmp	r4, r3
 800e4e6:	bf08      	it	eq
 800e4e8:	68ec      	ldreq	r4, [r5, #12]
 800e4ea:	e7ca      	b.n	800e482 <__swbuf_r+0x1a>
 800e4ec:	4621      	mov	r1, r4
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	f000 f81a 	bl	800e528 <__swsetup_r>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	d0cb      	beq.n	800e490 <__swbuf_r+0x28>
 800e4f8:	f04f 37ff 	mov.w	r7, #4294967295
 800e4fc:	e7ea      	b.n	800e4d4 <__swbuf_r+0x6c>
 800e4fe:	bf00      	nop
 800e500:	0800f370 	.word	0x0800f370
 800e504:	0800f390 	.word	0x0800f390
 800e508:	0800f350 	.word	0x0800f350

0800e50c <__ascii_wctomb>:
 800e50c:	b149      	cbz	r1, 800e522 <__ascii_wctomb+0x16>
 800e50e:	2aff      	cmp	r2, #255	; 0xff
 800e510:	bf85      	ittet	hi
 800e512:	238a      	movhi	r3, #138	; 0x8a
 800e514:	6003      	strhi	r3, [r0, #0]
 800e516:	700a      	strbls	r2, [r1, #0]
 800e518:	f04f 30ff 	movhi.w	r0, #4294967295
 800e51c:	bf98      	it	ls
 800e51e:	2001      	movls	r0, #1
 800e520:	4770      	bx	lr
 800e522:	4608      	mov	r0, r1
 800e524:	4770      	bx	lr
	...

0800e528 <__swsetup_r>:
 800e528:	4b32      	ldr	r3, [pc, #200]	; (800e5f4 <__swsetup_r+0xcc>)
 800e52a:	b570      	push	{r4, r5, r6, lr}
 800e52c:	681d      	ldr	r5, [r3, #0]
 800e52e:	4606      	mov	r6, r0
 800e530:	460c      	mov	r4, r1
 800e532:	b125      	cbz	r5, 800e53e <__swsetup_r+0x16>
 800e534:	69ab      	ldr	r3, [r5, #24]
 800e536:	b913      	cbnz	r3, 800e53e <__swsetup_r+0x16>
 800e538:	4628      	mov	r0, r5
 800e53a:	f000 f985 	bl	800e848 <__sinit>
 800e53e:	4b2e      	ldr	r3, [pc, #184]	; (800e5f8 <__swsetup_r+0xd0>)
 800e540:	429c      	cmp	r4, r3
 800e542:	d10f      	bne.n	800e564 <__swsetup_r+0x3c>
 800e544:	686c      	ldr	r4, [r5, #4]
 800e546:	89a3      	ldrh	r3, [r4, #12]
 800e548:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e54c:	0719      	lsls	r1, r3, #28
 800e54e:	d42c      	bmi.n	800e5aa <__swsetup_r+0x82>
 800e550:	06dd      	lsls	r5, r3, #27
 800e552:	d411      	bmi.n	800e578 <__swsetup_r+0x50>
 800e554:	2309      	movs	r3, #9
 800e556:	6033      	str	r3, [r6, #0]
 800e558:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e55c:	81a3      	strh	r3, [r4, #12]
 800e55e:	f04f 30ff 	mov.w	r0, #4294967295
 800e562:	e03e      	b.n	800e5e2 <__swsetup_r+0xba>
 800e564:	4b25      	ldr	r3, [pc, #148]	; (800e5fc <__swsetup_r+0xd4>)
 800e566:	429c      	cmp	r4, r3
 800e568:	d101      	bne.n	800e56e <__swsetup_r+0x46>
 800e56a:	68ac      	ldr	r4, [r5, #8]
 800e56c:	e7eb      	b.n	800e546 <__swsetup_r+0x1e>
 800e56e:	4b24      	ldr	r3, [pc, #144]	; (800e600 <__swsetup_r+0xd8>)
 800e570:	429c      	cmp	r4, r3
 800e572:	bf08      	it	eq
 800e574:	68ec      	ldreq	r4, [r5, #12]
 800e576:	e7e6      	b.n	800e546 <__swsetup_r+0x1e>
 800e578:	0758      	lsls	r0, r3, #29
 800e57a:	d512      	bpl.n	800e5a2 <__swsetup_r+0x7a>
 800e57c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e57e:	b141      	cbz	r1, 800e592 <__swsetup_r+0x6a>
 800e580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e584:	4299      	cmp	r1, r3
 800e586:	d002      	beq.n	800e58e <__swsetup_r+0x66>
 800e588:	4630      	mov	r0, r6
 800e58a:	f7ff fbab 	bl	800dce4 <_free_r>
 800e58e:	2300      	movs	r3, #0
 800e590:	6363      	str	r3, [r4, #52]	; 0x34
 800e592:	89a3      	ldrh	r3, [r4, #12]
 800e594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e598:	81a3      	strh	r3, [r4, #12]
 800e59a:	2300      	movs	r3, #0
 800e59c:	6063      	str	r3, [r4, #4]
 800e59e:	6923      	ldr	r3, [r4, #16]
 800e5a0:	6023      	str	r3, [r4, #0]
 800e5a2:	89a3      	ldrh	r3, [r4, #12]
 800e5a4:	f043 0308 	orr.w	r3, r3, #8
 800e5a8:	81a3      	strh	r3, [r4, #12]
 800e5aa:	6923      	ldr	r3, [r4, #16]
 800e5ac:	b94b      	cbnz	r3, 800e5c2 <__swsetup_r+0x9a>
 800e5ae:	89a3      	ldrh	r3, [r4, #12]
 800e5b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e5b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5b8:	d003      	beq.n	800e5c2 <__swsetup_r+0x9a>
 800e5ba:	4621      	mov	r1, r4
 800e5bc:	4630      	mov	r0, r6
 800e5be:	f000 fa09 	bl	800e9d4 <__smakebuf_r>
 800e5c2:	89a0      	ldrh	r0, [r4, #12]
 800e5c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e5c8:	f010 0301 	ands.w	r3, r0, #1
 800e5cc:	d00a      	beq.n	800e5e4 <__swsetup_r+0xbc>
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	60a3      	str	r3, [r4, #8]
 800e5d2:	6963      	ldr	r3, [r4, #20]
 800e5d4:	425b      	negs	r3, r3
 800e5d6:	61a3      	str	r3, [r4, #24]
 800e5d8:	6923      	ldr	r3, [r4, #16]
 800e5da:	b943      	cbnz	r3, 800e5ee <__swsetup_r+0xc6>
 800e5dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e5e0:	d1ba      	bne.n	800e558 <__swsetup_r+0x30>
 800e5e2:	bd70      	pop	{r4, r5, r6, pc}
 800e5e4:	0781      	lsls	r1, r0, #30
 800e5e6:	bf58      	it	pl
 800e5e8:	6963      	ldrpl	r3, [r4, #20]
 800e5ea:	60a3      	str	r3, [r4, #8]
 800e5ec:	e7f4      	b.n	800e5d8 <__swsetup_r+0xb0>
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	e7f7      	b.n	800e5e2 <__swsetup_r+0xba>
 800e5f2:	bf00      	nop
 800e5f4:	2000001c 	.word	0x2000001c
 800e5f8:	0800f370 	.word	0x0800f370
 800e5fc:	0800f390 	.word	0x0800f390
 800e600:	0800f350 	.word	0x0800f350

0800e604 <abort>:
 800e604:	b508      	push	{r3, lr}
 800e606:	2006      	movs	r0, #6
 800e608:	f000 faa2 	bl	800eb50 <raise>
 800e60c:	2001      	movs	r0, #1
 800e60e:	f7f3 fcf5 	bl	8001ffc <_exit>
	...

0800e614 <__sflush_r>:
 800e614:	898a      	ldrh	r2, [r1, #12]
 800e616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e61a:	4605      	mov	r5, r0
 800e61c:	0710      	lsls	r0, r2, #28
 800e61e:	460c      	mov	r4, r1
 800e620:	d458      	bmi.n	800e6d4 <__sflush_r+0xc0>
 800e622:	684b      	ldr	r3, [r1, #4]
 800e624:	2b00      	cmp	r3, #0
 800e626:	dc05      	bgt.n	800e634 <__sflush_r+0x20>
 800e628:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	dc02      	bgt.n	800e634 <__sflush_r+0x20>
 800e62e:	2000      	movs	r0, #0
 800e630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e634:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e636:	2e00      	cmp	r6, #0
 800e638:	d0f9      	beq.n	800e62e <__sflush_r+0x1a>
 800e63a:	2300      	movs	r3, #0
 800e63c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e640:	682f      	ldr	r7, [r5, #0]
 800e642:	602b      	str	r3, [r5, #0]
 800e644:	d032      	beq.n	800e6ac <__sflush_r+0x98>
 800e646:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e648:	89a3      	ldrh	r3, [r4, #12]
 800e64a:	075a      	lsls	r2, r3, #29
 800e64c:	d505      	bpl.n	800e65a <__sflush_r+0x46>
 800e64e:	6863      	ldr	r3, [r4, #4]
 800e650:	1ac0      	subs	r0, r0, r3
 800e652:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e654:	b10b      	cbz	r3, 800e65a <__sflush_r+0x46>
 800e656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e658:	1ac0      	subs	r0, r0, r3
 800e65a:	2300      	movs	r3, #0
 800e65c:	4602      	mov	r2, r0
 800e65e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e660:	6a21      	ldr	r1, [r4, #32]
 800e662:	4628      	mov	r0, r5
 800e664:	47b0      	blx	r6
 800e666:	1c43      	adds	r3, r0, #1
 800e668:	89a3      	ldrh	r3, [r4, #12]
 800e66a:	d106      	bne.n	800e67a <__sflush_r+0x66>
 800e66c:	6829      	ldr	r1, [r5, #0]
 800e66e:	291d      	cmp	r1, #29
 800e670:	d82c      	bhi.n	800e6cc <__sflush_r+0xb8>
 800e672:	4a2a      	ldr	r2, [pc, #168]	; (800e71c <__sflush_r+0x108>)
 800e674:	40ca      	lsrs	r2, r1
 800e676:	07d6      	lsls	r6, r2, #31
 800e678:	d528      	bpl.n	800e6cc <__sflush_r+0xb8>
 800e67a:	2200      	movs	r2, #0
 800e67c:	6062      	str	r2, [r4, #4]
 800e67e:	04d9      	lsls	r1, r3, #19
 800e680:	6922      	ldr	r2, [r4, #16]
 800e682:	6022      	str	r2, [r4, #0]
 800e684:	d504      	bpl.n	800e690 <__sflush_r+0x7c>
 800e686:	1c42      	adds	r2, r0, #1
 800e688:	d101      	bne.n	800e68e <__sflush_r+0x7a>
 800e68a:	682b      	ldr	r3, [r5, #0]
 800e68c:	b903      	cbnz	r3, 800e690 <__sflush_r+0x7c>
 800e68e:	6560      	str	r0, [r4, #84]	; 0x54
 800e690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e692:	602f      	str	r7, [r5, #0]
 800e694:	2900      	cmp	r1, #0
 800e696:	d0ca      	beq.n	800e62e <__sflush_r+0x1a>
 800e698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e69c:	4299      	cmp	r1, r3
 800e69e:	d002      	beq.n	800e6a6 <__sflush_r+0x92>
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	f7ff fb1f 	bl	800dce4 <_free_r>
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	6360      	str	r0, [r4, #52]	; 0x34
 800e6aa:	e7c1      	b.n	800e630 <__sflush_r+0x1c>
 800e6ac:	6a21      	ldr	r1, [r4, #32]
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	47b0      	blx	r6
 800e6b4:	1c41      	adds	r1, r0, #1
 800e6b6:	d1c7      	bne.n	800e648 <__sflush_r+0x34>
 800e6b8:	682b      	ldr	r3, [r5, #0]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d0c4      	beq.n	800e648 <__sflush_r+0x34>
 800e6be:	2b1d      	cmp	r3, #29
 800e6c0:	d001      	beq.n	800e6c6 <__sflush_r+0xb2>
 800e6c2:	2b16      	cmp	r3, #22
 800e6c4:	d101      	bne.n	800e6ca <__sflush_r+0xb6>
 800e6c6:	602f      	str	r7, [r5, #0]
 800e6c8:	e7b1      	b.n	800e62e <__sflush_r+0x1a>
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6d0:	81a3      	strh	r3, [r4, #12]
 800e6d2:	e7ad      	b.n	800e630 <__sflush_r+0x1c>
 800e6d4:	690f      	ldr	r7, [r1, #16]
 800e6d6:	2f00      	cmp	r7, #0
 800e6d8:	d0a9      	beq.n	800e62e <__sflush_r+0x1a>
 800e6da:	0793      	lsls	r3, r2, #30
 800e6dc:	680e      	ldr	r6, [r1, #0]
 800e6de:	bf08      	it	eq
 800e6e0:	694b      	ldreq	r3, [r1, #20]
 800e6e2:	600f      	str	r7, [r1, #0]
 800e6e4:	bf18      	it	ne
 800e6e6:	2300      	movne	r3, #0
 800e6e8:	eba6 0807 	sub.w	r8, r6, r7
 800e6ec:	608b      	str	r3, [r1, #8]
 800e6ee:	f1b8 0f00 	cmp.w	r8, #0
 800e6f2:	dd9c      	ble.n	800e62e <__sflush_r+0x1a>
 800e6f4:	6a21      	ldr	r1, [r4, #32]
 800e6f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e6f8:	4643      	mov	r3, r8
 800e6fa:	463a      	mov	r2, r7
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	47b0      	blx	r6
 800e700:	2800      	cmp	r0, #0
 800e702:	dc06      	bgt.n	800e712 <__sflush_r+0xfe>
 800e704:	89a3      	ldrh	r3, [r4, #12]
 800e706:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e70a:	81a3      	strh	r3, [r4, #12]
 800e70c:	f04f 30ff 	mov.w	r0, #4294967295
 800e710:	e78e      	b.n	800e630 <__sflush_r+0x1c>
 800e712:	4407      	add	r7, r0
 800e714:	eba8 0800 	sub.w	r8, r8, r0
 800e718:	e7e9      	b.n	800e6ee <__sflush_r+0xda>
 800e71a:	bf00      	nop
 800e71c:	20400001 	.word	0x20400001

0800e720 <_fflush_r>:
 800e720:	b538      	push	{r3, r4, r5, lr}
 800e722:	690b      	ldr	r3, [r1, #16]
 800e724:	4605      	mov	r5, r0
 800e726:	460c      	mov	r4, r1
 800e728:	b913      	cbnz	r3, 800e730 <_fflush_r+0x10>
 800e72a:	2500      	movs	r5, #0
 800e72c:	4628      	mov	r0, r5
 800e72e:	bd38      	pop	{r3, r4, r5, pc}
 800e730:	b118      	cbz	r0, 800e73a <_fflush_r+0x1a>
 800e732:	6983      	ldr	r3, [r0, #24]
 800e734:	b90b      	cbnz	r3, 800e73a <_fflush_r+0x1a>
 800e736:	f000 f887 	bl	800e848 <__sinit>
 800e73a:	4b14      	ldr	r3, [pc, #80]	; (800e78c <_fflush_r+0x6c>)
 800e73c:	429c      	cmp	r4, r3
 800e73e:	d11b      	bne.n	800e778 <_fflush_r+0x58>
 800e740:	686c      	ldr	r4, [r5, #4]
 800e742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d0ef      	beq.n	800e72a <_fflush_r+0xa>
 800e74a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e74c:	07d0      	lsls	r0, r2, #31
 800e74e:	d404      	bmi.n	800e75a <_fflush_r+0x3a>
 800e750:	0599      	lsls	r1, r3, #22
 800e752:	d402      	bmi.n	800e75a <_fflush_r+0x3a>
 800e754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e756:	f000 f915 	bl	800e984 <__retarget_lock_acquire_recursive>
 800e75a:	4628      	mov	r0, r5
 800e75c:	4621      	mov	r1, r4
 800e75e:	f7ff ff59 	bl	800e614 <__sflush_r>
 800e762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e764:	07da      	lsls	r2, r3, #31
 800e766:	4605      	mov	r5, r0
 800e768:	d4e0      	bmi.n	800e72c <_fflush_r+0xc>
 800e76a:	89a3      	ldrh	r3, [r4, #12]
 800e76c:	059b      	lsls	r3, r3, #22
 800e76e:	d4dd      	bmi.n	800e72c <_fflush_r+0xc>
 800e770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e772:	f000 f908 	bl	800e986 <__retarget_lock_release_recursive>
 800e776:	e7d9      	b.n	800e72c <_fflush_r+0xc>
 800e778:	4b05      	ldr	r3, [pc, #20]	; (800e790 <_fflush_r+0x70>)
 800e77a:	429c      	cmp	r4, r3
 800e77c:	d101      	bne.n	800e782 <_fflush_r+0x62>
 800e77e:	68ac      	ldr	r4, [r5, #8]
 800e780:	e7df      	b.n	800e742 <_fflush_r+0x22>
 800e782:	4b04      	ldr	r3, [pc, #16]	; (800e794 <_fflush_r+0x74>)
 800e784:	429c      	cmp	r4, r3
 800e786:	bf08      	it	eq
 800e788:	68ec      	ldreq	r4, [r5, #12]
 800e78a:	e7da      	b.n	800e742 <_fflush_r+0x22>
 800e78c:	0800f370 	.word	0x0800f370
 800e790:	0800f390 	.word	0x0800f390
 800e794:	0800f350 	.word	0x0800f350

0800e798 <std>:
 800e798:	2300      	movs	r3, #0
 800e79a:	b510      	push	{r4, lr}
 800e79c:	4604      	mov	r4, r0
 800e79e:	e9c0 3300 	strd	r3, r3, [r0]
 800e7a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e7a6:	6083      	str	r3, [r0, #8]
 800e7a8:	8181      	strh	r1, [r0, #12]
 800e7aa:	6643      	str	r3, [r0, #100]	; 0x64
 800e7ac:	81c2      	strh	r2, [r0, #14]
 800e7ae:	6183      	str	r3, [r0, #24]
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	2208      	movs	r2, #8
 800e7b4:	305c      	adds	r0, #92	; 0x5c
 800e7b6:	f7fb fd57 	bl	800a268 <memset>
 800e7ba:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <std+0x38>)
 800e7bc:	6263      	str	r3, [r4, #36]	; 0x24
 800e7be:	4b05      	ldr	r3, [pc, #20]	; (800e7d4 <std+0x3c>)
 800e7c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e7c2:	4b05      	ldr	r3, [pc, #20]	; (800e7d8 <std+0x40>)
 800e7c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e7c6:	4b05      	ldr	r3, [pc, #20]	; (800e7dc <std+0x44>)
 800e7c8:	6224      	str	r4, [r4, #32]
 800e7ca:	6323      	str	r3, [r4, #48]	; 0x30
 800e7cc:	bd10      	pop	{r4, pc}
 800e7ce:	bf00      	nop
 800e7d0:	0800eb89 	.word	0x0800eb89
 800e7d4:	0800ebab 	.word	0x0800ebab
 800e7d8:	0800ebe3 	.word	0x0800ebe3
 800e7dc:	0800ec07 	.word	0x0800ec07

0800e7e0 <_cleanup_r>:
 800e7e0:	4901      	ldr	r1, [pc, #4]	; (800e7e8 <_cleanup_r+0x8>)
 800e7e2:	f000 b8af 	b.w	800e944 <_fwalk_reent>
 800e7e6:	bf00      	nop
 800e7e8:	0800e721 	.word	0x0800e721

0800e7ec <__sfmoreglue>:
 800e7ec:	b570      	push	{r4, r5, r6, lr}
 800e7ee:	2268      	movs	r2, #104	; 0x68
 800e7f0:	1e4d      	subs	r5, r1, #1
 800e7f2:	4355      	muls	r5, r2
 800e7f4:	460e      	mov	r6, r1
 800e7f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e7fa:	f7ff fadf 	bl	800ddbc <_malloc_r>
 800e7fe:	4604      	mov	r4, r0
 800e800:	b140      	cbz	r0, 800e814 <__sfmoreglue+0x28>
 800e802:	2100      	movs	r1, #0
 800e804:	e9c0 1600 	strd	r1, r6, [r0]
 800e808:	300c      	adds	r0, #12
 800e80a:	60a0      	str	r0, [r4, #8]
 800e80c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e810:	f7fb fd2a 	bl	800a268 <memset>
 800e814:	4620      	mov	r0, r4
 800e816:	bd70      	pop	{r4, r5, r6, pc}

0800e818 <__sfp_lock_acquire>:
 800e818:	4801      	ldr	r0, [pc, #4]	; (800e820 <__sfp_lock_acquire+0x8>)
 800e81a:	f000 b8b3 	b.w	800e984 <__retarget_lock_acquire_recursive>
 800e81e:	bf00      	nop
 800e820:	200005e9 	.word	0x200005e9

0800e824 <__sfp_lock_release>:
 800e824:	4801      	ldr	r0, [pc, #4]	; (800e82c <__sfp_lock_release+0x8>)
 800e826:	f000 b8ae 	b.w	800e986 <__retarget_lock_release_recursive>
 800e82a:	bf00      	nop
 800e82c:	200005e9 	.word	0x200005e9

0800e830 <__sinit_lock_acquire>:
 800e830:	4801      	ldr	r0, [pc, #4]	; (800e838 <__sinit_lock_acquire+0x8>)
 800e832:	f000 b8a7 	b.w	800e984 <__retarget_lock_acquire_recursive>
 800e836:	bf00      	nop
 800e838:	200005ea 	.word	0x200005ea

0800e83c <__sinit_lock_release>:
 800e83c:	4801      	ldr	r0, [pc, #4]	; (800e844 <__sinit_lock_release+0x8>)
 800e83e:	f000 b8a2 	b.w	800e986 <__retarget_lock_release_recursive>
 800e842:	bf00      	nop
 800e844:	200005ea 	.word	0x200005ea

0800e848 <__sinit>:
 800e848:	b510      	push	{r4, lr}
 800e84a:	4604      	mov	r4, r0
 800e84c:	f7ff fff0 	bl	800e830 <__sinit_lock_acquire>
 800e850:	69a3      	ldr	r3, [r4, #24]
 800e852:	b11b      	cbz	r3, 800e85c <__sinit+0x14>
 800e854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e858:	f7ff bff0 	b.w	800e83c <__sinit_lock_release>
 800e85c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e860:	6523      	str	r3, [r4, #80]	; 0x50
 800e862:	4b13      	ldr	r3, [pc, #76]	; (800e8b0 <__sinit+0x68>)
 800e864:	4a13      	ldr	r2, [pc, #76]	; (800e8b4 <__sinit+0x6c>)
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	62a2      	str	r2, [r4, #40]	; 0x28
 800e86a:	42a3      	cmp	r3, r4
 800e86c:	bf04      	itt	eq
 800e86e:	2301      	moveq	r3, #1
 800e870:	61a3      	streq	r3, [r4, #24]
 800e872:	4620      	mov	r0, r4
 800e874:	f000 f820 	bl	800e8b8 <__sfp>
 800e878:	6060      	str	r0, [r4, #4]
 800e87a:	4620      	mov	r0, r4
 800e87c:	f000 f81c 	bl	800e8b8 <__sfp>
 800e880:	60a0      	str	r0, [r4, #8]
 800e882:	4620      	mov	r0, r4
 800e884:	f000 f818 	bl	800e8b8 <__sfp>
 800e888:	2200      	movs	r2, #0
 800e88a:	60e0      	str	r0, [r4, #12]
 800e88c:	2104      	movs	r1, #4
 800e88e:	6860      	ldr	r0, [r4, #4]
 800e890:	f7ff ff82 	bl	800e798 <std>
 800e894:	68a0      	ldr	r0, [r4, #8]
 800e896:	2201      	movs	r2, #1
 800e898:	2109      	movs	r1, #9
 800e89a:	f7ff ff7d 	bl	800e798 <std>
 800e89e:	68e0      	ldr	r0, [r4, #12]
 800e8a0:	2202      	movs	r2, #2
 800e8a2:	2112      	movs	r1, #18
 800e8a4:	f7ff ff78 	bl	800e798 <std>
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	61a3      	str	r3, [r4, #24]
 800e8ac:	e7d2      	b.n	800e854 <__sinit+0xc>
 800e8ae:	bf00      	nop
 800e8b0:	0800eeb0 	.word	0x0800eeb0
 800e8b4:	0800e7e1 	.word	0x0800e7e1

0800e8b8 <__sfp>:
 800e8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ba:	4607      	mov	r7, r0
 800e8bc:	f7ff ffac 	bl	800e818 <__sfp_lock_acquire>
 800e8c0:	4b1e      	ldr	r3, [pc, #120]	; (800e93c <__sfp+0x84>)
 800e8c2:	681e      	ldr	r6, [r3, #0]
 800e8c4:	69b3      	ldr	r3, [r6, #24]
 800e8c6:	b913      	cbnz	r3, 800e8ce <__sfp+0x16>
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f7ff ffbd 	bl	800e848 <__sinit>
 800e8ce:	3648      	adds	r6, #72	; 0x48
 800e8d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e8d4:	3b01      	subs	r3, #1
 800e8d6:	d503      	bpl.n	800e8e0 <__sfp+0x28>
 800e8d8:	6833      	ldr	r3, [r6, #0]
 800e8da:	b30b      	cbz	r3, 800e920 <__sfp+0x68>
 800e8dc:	6836      	ldr	r6, [r6, #0]
 800e8de:	e7f7      	b.n	800e8d0 <__sfp+0x18>
 800e8e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e8e4:	b9d5      	cbnz	r5, 800e91c <__sfp+0x64>
 800e8e6:	4b16      	ldr	r3, [pc, #88]	; (800e940 <__sfp+0x88>)
 800e8e8:	60e3      	str	r3, [r4, #12]
 800e8ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e8ee:	6665      	str	r5, [r4, #100]	; 0x64
 800e8f0:	f000 f847 	bl	800e982 <__retarget_lock_init_recursive>
 800e8f4:	f7ff ff96 	bl	800e824 <__sfp_lock_release>
 800e8f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e8fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e900:	6025      	str	r5, [r4, #0]
 800e902:	61a5      	str	r5, [r4, #24]
 800e904:	2208      	movs	r2, #8
 800e906:	4629      	mov	r1, r5
 800e908:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e90c:	f7fb fcac 	bl	800a268 <memset>
 800e910:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e914:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e918:	4620      	mov	r0, r4
 800e91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e91c:	3468      	adds	r4, #104	; 0x68
 800e91e:	e7d9      	b.n	800e8d4 <__sfp+0x1c>
 800e920:	2104      	movs	r1, #4
 800e922:	4638      	mov	r0, r7
 800e924:	f7ff ff62 	bl	800e7ec <__sfmoreglue>
 800e928:	4604      	mov	r4, r0
 800e92a:	6030      	str	r0, [r6, #0]
 800e92c:	2800      	cmp	r0, #0
 800e92e:	d1d5      	bne.n	800e8dc <__sfp+0x24>
 800e930:	f7ff ff78 	bl	800e824 <__sfp_lock_release>
 800e934:	230c      	movs	r3, #12
 800e936:	603b      	str	r3, [r7, #0]
 800e938:	e7ee      	b.n	800e918 <__sfp+0x60>
 800e93a:	bf00      	nop
 800e93c:	0800eeb0 	.word	0x0800eeb0
 800e940:	ffff0001 	.word	0xffff0001

0800e944 <_fwalk_reent>:
 800e944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e948:	4606      	mov	r6, r0
 800e94a:	4688      	mov	r8, r1
 800e94c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e950:	2700      	movs	r7, #0
 800e952:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e956:	f1b9 0901 	subs.w	r9, r9, #1
 800e95a:	d505      	bpl.n	800e968 <_fwalk_reent+0x24>
 800e95c:	6824      	ldr	r4, [r4, #0]
 800e95e:	2c00      	cmp	r4, #0
 800e960:	d1f7      	bne.n	800e952 <_fwalk_reent+0xe>
 800e962:	4638      	mov	r0, r7
 800e964:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e968:	89ab      	ldrh	r3, [r5, #12]
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d907      	bls.n	800e97e <_fwalk_reent+0x3a>
 800e96e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e972:	3301      	adds	r3, #1
 800e974:	d003      	beq.n	800e97e <_fwalk_reent+0x3a>
 800e976:	4629      	mov	r1, r5
 800e978:	4630      	mov	r0, r6
 800e97a:	47c0      	blx	r8
 800e97c:	4307      	orrs	r7, r0
 800e97e:	3568      	adds	r5, #104	; 0x68
 800e980:	e7e9      	b.n	800e956 <_fwalk_reent+0x12>

0800e982 <__retarget_lock_init_recursive>:
 800e982:	4770      	bx	lr

0800e984 <__retarget_lock_acquire_recursive>:
 800e984:	4770      	bx	lr

0800e986 <__retarget_lock_release_recursive>:
 800e986:	4770      	bx	lr

0800e988 <__swhatbuf_r>:
 800e988:	b570      	push	{r4, r5, r6, lr}
 800e98a:	460e      	mov	r6, r1
 800e98c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e990:	2900      	cmp	r1, #0
 800e992:	b096      	sub	sp, #88	; 0x58
 800e994:	4614      	mov	r4, r2
 800e996:	461d      	mov	r5, r3
 800e998:	da08      	bge.n	800e9ac <__swhatbuf_r+0x24>
 800e99a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e99e:	2200      	movs	r2, #0
 800e9a0:	602a      	str	r2, [r5, #0]
 800e9a2:	061a      	lsls	r2, r3, #24
 800e9a4:	d410      	bmi.n	800e9c8 <__swhatbuf_r+0x40>
 800e9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9aa:	e00e      	b.n	800e9ca <__swhatbuf_r+0x42>
 800e9ac:	466a      	mov	r2, sp
 800e9ae:	f000 f951 	bl	800ec54 <_fstat_r>
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	dbf1      	blt.n	800e99a <__swhatbuf_r+0x12>
 800e9b6:	9a01      	ldr	r2, [sp, #4]
 800e9b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e9bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e9c0:	425a      	negs	r2, r3
 800e9c2:	415a      	adcs	r2, r3
 800e9c4:	602a      	str	r2, [r5, #0]
 800e9c6:	e7ee      	b.n	800e9a6 <__swhatbuf_r+0x1e>
 800e9c8:	2340      	movs	r3, #64	; 0x40
 800e9ca:	2000      	movs	r0, #0
 800e9cc:	6023      	str	r3, [r4, #0]
 800e9ce:	b016      	add	sp, #88	; 0x58
 800e9d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e9d4 <__smakebuf_r>:
 800e9d4:	898b      	ldrh	r3, [r1, #12]
 800e9d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e9d8:	079d      	lsls	r5, r3, #30
 800e9da:	4606      	mov	r6, r0
 800e9dc:	460c      	mov	r4, r1
 800e9de:	d507      	bpl.n	800e9f0 <__smakebuf_r+0x1c>
 800e9e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	6123      	str	r3, [r4, #16]
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	6163      	str	r3, [r4, #20]
 800e9ec:	b002      	add	sp, #8
 800e9ee:	bd70      	pop	{r4, r5, r6, pc}
 800e9f0:	ab01      	add	r3, sp, #4
 800e9f2:	466a      	mov	r2, sp
 800e9f4:	f7ff ffc8 	bl	800e988 <__swhatbuf_r>
 800e9f8:	9900      	ldr	r1, [sp, #0]
 800e9fa:	4605      	mov	r5, r0
 800e9fc:	4630      	mov	r0, r6
 800e9fe:	f7ff f9dd 	bl	800ddbc <_malloc_r>
 800ea02:	b948      	cbnz	r0, 800ea18 <__smakebuf_r+0x44>
 800ea04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea08:	059a      	lsls	r2, r3, #22
 800ea0a:	d4ef      	bmi.n	800e9ec <__smakebuf_r+0x18>
 800ea0c:	f023 0303 	bic.w	r3, r3, #3
 800ea10:	f043 0302 	orr.w	r3, r3, #2
 800ea14:	81a3      	strh	r3, [r4, #12]
 800ea16:	e7e3      	b.n	800e9e0 <__smakebuf_r+0xc>
 800ea18:	4b0d      	ldr	r3, [pc, #52]	; (800ea50 <__smakebuf_r+0x7c>)
 800ea1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800ea1c:	89a3      	ldrh	r3, [r4, #12]
 800ea1e:	6020      	str	r0, [r4, #0]
 800ea20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea24:	81a3      	strh	r3, [r4, #12]
 800ea26:	9b00      	ldr	r3, [sp, #0]
 800ea28:	6163      	str	r3, [r4, #20]
 800ea2a:	9b01      	ldr	r3, [sp, #4]
 800ea2c:	6120      	str	r0, [r4, #16]
 800ea2e:	b15b      	cbz	r3, 800ea48 <__smakebuf_r+0x74>
 800ea30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea34:	4630      	mov	r0, r6
 800ea36:	f000 f91f 	bl	800ec78 <_isatty_r>
 800ea3a:	b128      	cbz	r0, 800ea48 <__smakebuf_r+0x74>
 800ea3c:	89a3      	ldrh	r3, [r4, #12]
 800ea3e:	f023 0303 	bic.w	r3, r3, #3
 800ea42:	f043 0301 	orr.w	r3, r3, #1
 800ea46:	81a3      	strh	r3, [r4, #12]
 800ea48:	89a0      	ldrh	r0, [r4, #12]
 800ea4a:	4305      	orrs	r5, r0
 800ea4c:	81a5      	strh	r5, [r4, #12]
 800ea4e:	e7cd      	b.n	800e9ec <__smakebuf_r+0x18>
 800ea50:	0800e7e1 	.word	0x0800e7e1

0800ea54 <memmove>:
 800ea54:	4288      	cmp	r0, r1
 800ea56:	b510      	push	{r4, lr}
 800ea58:	eb01 0402 	add.w	r4, r1, r2
 800ea5c:	d902      	bls.n	800ea64 <memmove+0x10>
 800ea5e:	4284      	cmp	r4, r0
 800ea60:	4623      	mov	r3, r4
 800ea62:	d807      	bhi.n	800ea74 <memmove+0x20>
 800ea64:	1e43      	subs	r3, r0, #1
 800ea66:	42a1      	cmp	r1, r4
 800ea68:	d008      	beq.n	800ea7c <memmove+0x28>
 800ea6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea72:	e7f8      	b.n	800ea66 <memmove+0x12>
 800ea74:	4402      	add	r2, r0
 800ea76:	4601      	mov	r1, r0
 800ea78:	428a      	cmp	r2, r1
 800ea7a:	d100      	bne.n	800ea7e <memmove+0x2a>
 800ea7c:	bd10      	pop	{r4, pc}
 800ea7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea86:	e7f7      	b.n	800ea78 <memmove+0x24>

0800ea88 <__malloc_lock>:
 800ea88:	4801      	ldr	r0, [pc, #4]	; (800ea90 <__malloc_lock+0x8>)
 800ea8a:	f7ff bf7b 	b.w	800e984 <__retarget_lock_acquire_recursive>
 800ea8e:	bf00      	nop
 800ea90:	200005e8 	.word	0x200005e8

0800ea94 <__malloc_unlock>:
 800ea94:	4801      	ldr	r0, [pc, #4]	; (800ea9c <__malloc_unlock+0x8>)
 800ea96:	f7ff bf76 	b.w	800e986 <__retarget_lock_release_recursive>
 800ea9a:	bf00      	nop
 800ea9c:	200005e8 	.word	0x200005e8

0800eaa0 <_realloc_r>:
 800eaa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaa4:	4680      	mov	r8, r0
 800eaa6:	4614      	mov	r4, r2
 800eaa8:	460e      	mov	r6, r1
 800eaaa:	b921      	cbnz	r1, 800eab6 <_realloc_r+0x16>
 800eaac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eab0:	4611      	mov	r1, r2
 800eab2:	f7ff b983 	b.w	800ddbc <_malloc_r>
 800eab6:	b92a      	cbnz	r2, 800eac4 <_realloc_r+0x24>
 800eab8:	f7ff f914 	bl	800dce4 <_free_r>
 800eabc:	4625      	mov	r5, r4
 800eabe:	4628      	mov	r0, r5
 800eac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac4:	f000 f8fa 	bl	800ecbc <_malloc_usable_size_r>
 800eac8:	4284      	cmp	r4, r0
 800eaca:	4607      	mov	r7, r0
 800eacc:	d802      	bhi.n	800ead4 <_realloc_r+0x34>
 800eace:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ead2:	d812      	bhi.n	800eafa <_realloc_r+0x5a>
 800ead4:	4621      	mov	r1, r4
 800ead6:	4640      	mov	r0, r8
 800ead8:	f7ff f970 	bl	800ddbc <_malloc_r>
 800eadc:	4605      	mov	r5, r0
 800eade:	2800      	cmp	r0, #0
 800eae0:	d0ed      	beq.n	800eabe <_realloc_r+0x1e>
 800eae2:	42bc      	cmp	r4, r7
 800eae4:	4622      	mov	r2, r4
 800eae6:	4631      	mov	r1, r6
 800eae8:	bf28      	it	cs
 800eaea:	463a      	movcs	r2, r7
 800eaec:	f7fb fbae 	bl	800a24c <memcpy>
 800eaf0:	4631      	mov	r1, r6
 800eaf2:	4640      	mov	r0, r8
 800eaf4:	f7ff f8f6 	bl	800dce4 <_free_r>
 800eaf8:	e7e1      	b.n	800eabe <_realloc_r+0x1e>
 800eafa:	4635      	mov	r5, r6
 800eafc:	e7df      	b.n	800eabe <_realloc_r+0x1e>

0800eafe <_raise_r>:
 800eafe:	291f      	cmp	r1, #31
 800eb00:	b538      	push	{r3, r4, r5, lr}
 800eb02:	4604      	mov	r4, r0
 800eb04:	460d      	mov	r5, r1
 800eb06:	d904      	bls.n	800eb12 <_raise_r+0x14>
 800eb08:	2316      	movs	r3, #22
 800eb0a:	6003      	str	r3, [r0, #0]
 800eb0c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb10:	bd38      	pop	{r3, r4, r5, pc}
 800eb12:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb14:	b112      	cbz	r2, 800eb1c <_raise_r+0x1e>
 800eb16:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb1a:	b94b      	cbnz	r3, 800eb30 <_raise_r+0x32>
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f000 f831 	bl	800eb84 <_getpid_r>
 800eb22:	462a      	mov	r2, r5
 800eb24:	4601      	mov	r1, r0
 800eb26:	4620      	mov	r0, r4
 800eb28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb2c:	f000 b818 	b.w	800eb60 <_kill_r>
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d00a      	beq.n	800eb4a <_raise_r+0x4c>
 800eb34:	1c59      	adds	r1, r3, #1
 800eb36:	d103      	bne.n	800eb40 <_raise_r+0x42>
 800eb38:	2316      	movs	r3, #22
 800eb3a:	6003      	str	r3, [r0, #0]
 800eb3c:	2001      	movs	r0, #1
 800eb3e:	e7e7      	b.n	800eb10 <_raise_r+0x12>
 800eb40:	2400      	movs	r4, #0
 800eb42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eb46:	4628      	mov	r0, r5
 800eb48:	4798      	blx	r3
 800eb4a:	2000      	movs	r0, #0
 800eb4c:	e7e0      	b.n	800eb10 <_raise_r+0x12>
	...

0800eb50 <raise>:
 800eb50:	4b02      	ldr	r3, [pc, #8]	; (800eb5c <raise+0xc>)
 800eb52:	4601      	mov	r1, r0
 800eb54:	6818      	ldr	r0, [r3, #0]
 800eb56:	f7ff bfd2 	b.w	800eafe <_raise_r>
 800eb5a:	bf00      	nop
 800eb5c:	2000001c 	.word	0x2000001c

0800eb60 <_kill_r>:
 800eb60:	b538      	push	{r3, r4, r5, lr}
 800eb62:	4d07      	ldr	r5, [pc, #28]	; (800eb80 <_kill_r+0x20>)
 800eb64:	2300      	movs	r3, #0
 800eb66:	4604      	mov	r4, r0
 800eb68:	4608      	mov	r0, r1
 800eb6a:	4611      	mov	r1, r2
 800eb6c:	602b      	str	r3, [r5, #0]
 800eb6e:	f7f3 fa35 	bl	8001fdc <_kill>
 800eb72:	1c43      	adds	r3, r0, #1
 800eb74:	d102      	bne.n	800eb7c <_kill_r+0x1c>
 800eb76:	682b      	ldr	r3, [r5, #0]
 800eb78:	b103      	cbz	r3, 800eb7c <_kill_r+0x1c>
 800eb7a:	6023      	str	r3, [r4, #0]
 800eb7c:	bd38      	pop	{r3, r4, r5, pc}
 800eb7e:	bf00      	nop
 800eb80:	200005ec 	.word	0x200005ec

0800eb84 <_getpid_r>:
 800eb84:	f7f3 ba22 	b.w	8001fcc <_getpid>

0800eb88 <__sread>:
 800eb88:	b510      	push	{r4, lr}
 800eb8a:	460c      	mov	r4, r1
 800eb8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb90:	f000 f89c 	bl	800eccc <_read_r>
 800eb94:	2800      	cmp	r0, #0
 800eb96:	bfab      	itete	ge
 800eb98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb9a:	89a3      	ldrhlt	r3, [r4, #12]
 800eb9c:	181b      	addge	r3, r3, r0
 800eb9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eba2:	bfac      	ite	ge
 800eba4:	6563      	strge	r3, [r4, #84]	; 0x54
 800eba6:	81a3      	strhlt	r3, [r4, #12]
 800eba8:	bd10      	pop	{r4, pc}

0800ebaa <__swrite>:
 800ebaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebae:	461f      	mov	r7, r3
 800ebb0:	898b      	ldrh	r3, [r1, #12]
 800ebb2:	05db      	lsls	r3, r3, #23
 800ebb4:	4605      	mov	r5, r0
 800ebb6:	460c      	mov	r4, r1
 800ebb8:	4616      	mov	r6, r2
 800ebba:	d505      	bpl.n	800ebc8 <__swrite+0x1e>
 800ebbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f000 f868 	bl	800ec98 <_lseek_r>
 800ebc8:	89a3      	ldrh	r3, [r4, #12]
 800ebca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebd2:	81a3      	strh	r3, [r4, #12]
 800ebd4:	4632      	mov	r2, r6
 800ebd6:	463b      	mov	r3, r7
 800ebd8:	4628      	mov	r0, r5
 800ebda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebde:	f000 b817 	b.w	800ec10 <_write_r>

0800ebe2 <__sseek>:
 800ebe2:	b510      	push	{r4, lr}
 800ebe4:	460c      	mov	r4, r1
 800ebe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebea:	f000 f855 	bl	800ec98 <_lseek_r>
 800ebee:	1c43      	adds	r3, r0, #1
 800ebf0:	89a3      	ldrh	r3, [r4, #12]
 800ebf2:	bf15      	itete	ne
 800ebf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebfe:	81a3      	strheq	r3, [r4, #12]
 800ec00:	bf18      	it	ne
 800ec02:	81a3      	strhne	r3, [r4, #12]
 800ec04:	bd10      	pop	{r4, pc}

0800ec06 <__sclose>:
 800ec06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec0a:	f000 b813 	b.w	800ec34 <_close_r>
	...

0800ec10 <_write_r>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	4d07      	ldr	r5, [pc, #28]	; (800ec30 <_write_r+0x20>)
 800ec14:	4604      	mov	r4, r0
 800ec16:	4608      	mov	r0, r1
 800ec18:	4611      	mov	r1, r2
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	602a      	str	r2, [r5, #0]
 800ec1e:	461a      	mov	r2, r3
 800ec20:	f7f3 fa13 	bl	800204a <_write>
 800ec24:	1c43      	adds	r3, r0, #1
 800ec26:	d102      	bne.n	800ec2e <_write_r+0x1e>
 800ec28:	682b      	ldr	r3, [r5, #0]
 800ec2a:	b103      	cbz	r3, 800ec2e <_write_r+0x1e>
 800ec2c:	6023      	str	r3, [r4, #0]
 800ec2e:	bd38      	pop	{r3, r4, r5, pc}
 800ec30:	200005ec 	.word	0x200005ec

0800ec34 <_close_r>:
 800ec34:	b538      	push	{r3, r4, r5, lr}
 800ec36:	4d06      	ldr	r5, [pc, #24]	; (800ec50 <_close_r+0x1c>)
 800ec38:	2300      	movs	r3, #0
 800ec3a:	4604      	mov	r4, r0
 800ec3c:	4608      	mov	r0, r1
 800ec3e:	602b      	str	r3, [r5, #0]
 800ec40:	f7f3 fa1f 	bl	8002082 <_close>
 800ec44:	1c43      	adds	r3, r0, #1
 800ec46:	d102      	bne.n	800ec4e <_close_r+0x1a>
 800ec48:	682b      	ldr	r3, [r5, #0]
 800ec4a:	b103      	cbz	r3, 800ec4e <_close_r+0x1a>
 800ec4c:	6023      	str	r3, [r4, #0]
 800ec4e:	bd38      	pop	{r3, r4, r5, pc}
 800ec50:	200005ec 	.word	0x200005ec

0800ec54 <_fstat_r>:
 800ec54:	b538      	push	{r3, r4, r5, lr}
 800ec56:	4d07      	ldr	r5, [pc, #28]	; (800ec74 <_fstat_r+0x20>)
 800ec58:	2300      	movs	r3, #0
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	4608      	mov	r0, r1
 800ec5e:	4611      	mov	r1, r2
 800ec60:	602b      	str	r3, [r5, #0]
 800ec62:	f7f3 fa1a 	bl	800209a <_fstat>
 800ec66:	1c43      	adds	r3, r0, #1
 800ec68:	d102      	bne.n	800ec70 <_fstat_r+0x1c>
 800ec6a:	682b      	ldr	r3, [r5, #0]
 800ec6c:	b103      	cbz	r3, 800ec70 <_fstat_r+0x1c>
 800ec6e:	6023      	str	r3, [r4, #0]
 800ec70:	bd38      	pop	{r3, r4, r5, pc}
 800ec72:	bf00      	nop
 800ec74:	200005ec 	.word	0x200005ec

0800ec78 <_isatty_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	4d06      	ldr	r5, [pc, #24]	; (800ec94 <_isatty_r+0x1c>)
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	4604      	mov	r4, r0
 800ec80:	4608      	mov	r0, r1
 800ec82:	602b      	str	r3, [r5, #0]
 800ec84:	f7f3 fa19 	bl	80020ba <_isatty>
 800ec88:	1c43      	adds	r3, r0, #1
 800ec8a:	d102      	bne.n	800ec92 <_isatty_r+0x1a>
 800ec8c:	682b      	ldr	r3, [r5, #0]
 800ec8e:	b103      	cbz	r3, 800ec92 <_isatty_r+0x1a>
 800ec90:	6023      	str	r3, [r4, #0]
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	200005ec 	.word	0x200005ec

0800ec98 <_lseek_r>:
 800ec98:	b538      	push	{r3, r4, r5, lr}
 800ec9a:	4d07      	ldr	r5, [pc, #28]	; (800ecb8 <_lseek_r+0x20>)
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	4608      	mov	r0, r1
 800eca0:	4611      	mov	r1, r2
 800eca2:	2200      	movs	r2, #0
 800eca4:	602a      	str	r2, [r5, #0]
 800eca6:	461a      	mov	r2, r3
 800eca8:	f7f3 fa12 	bl	80020d0 <_lseek>
 800ecac:	1c43      	adds	r3, r0, #1
 800ecae:	d102      	bne.n	800ecb6 <_lseek_r+0x1e>
 800ecb0:	682b      	ldr	r3, [r5, #0]
 800ecb2:	b103      	cbz	r3, 800ecb6 <_lseek_r+0x1e>
 800ecb4:	6023      	str	r3, [r4, #0]
 800ecb6:	bd38      	pop	{r3, r4, r5, pc}
 800ecb8:	200005ec 	.word	0x200005ec

0800ecbc <_malloc_usable_size_r>:
 800ecbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecc0:	1f18      	subs	r0, r3, #4
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	bfbc      	itt	lt
 800ecc6:	580b      	ldrlt	r3, [r1, r0]
 800ecc8:	18c0      	addlt	r0, r0, r3
 800ecca:	4770      	bx	lr

0800eccc <_read_r>:
 800eccc:	b538      	push	{r3, r4, r5, lr}
 800ecce:	4d07      	ldr	r5, [pc, #28]	; (800ecec <_read_r+0x20>)
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	4608      	mov	r0, r1
 800ecd4:	4611      	mov	r1, r2
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	602a      	str	r2, [r5, #0]
 800ecda:	461a      	mov	r2, r3
 800ecdc:	f7f3 f998 	bl	8002010 <_read>
 800ece0:	1c43      	adds	r3, r0, #1
 800ece2:	d102      	bne.n	800ecea <_read_r+0x1e>
 800ece4:	682b      	ldr	r3, [r5, #0]
 800ece6:	b103      	cbz	r3, 800ecea <_read_r+0x1e>
 800ece8:	6023      	str	r3, [r4, #0]
 800ecea:	bd38      	pop	{r3, r4, r5, pc}
 800ecec:	200005ec 	.word	0x200005ec

0800ecf0 <_init>:
 800ecf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecf2:	bf00      	nop
 800ecf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecf6:	bc08      	pop	{r3}
 800ecf8:	469e      	mov	lr, r3
 800ecfa:	4770      	bx	lr

0800ecfc <_fini>:
 800ecfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecfe:	bf00      	nop
 800ed00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed02:	bc08      	pop	{r3}
 800ed04:	469e      	mov	lr, r3
 800ed06:	4770      	bx	lr

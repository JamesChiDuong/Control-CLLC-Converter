
V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e080  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800e260  0800e260  0001e260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e838  0800e838  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e838  0800e838  0001e838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e840  0800e840  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e840  0800e840  0001e840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e844  0800e844  0001e844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001f0  0800ea38  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800ea38  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a95e  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003105  00000000  00000000  0003ab7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003dc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  0003f258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a170  00000000  00000000  000406f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019743  00000000  00000000  0006a860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001147e2  00000000  00000000  00083fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00198785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007424  00000000  00000000  001987d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e248 	.word	0x0800e248

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800e248 	.word	0x0800e248

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	b08d      	sub	sp, #52	; 0x34
 800104c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f000 fef6 	bl	8001e3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001052:	f000 f921 	bl	8001298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001056:	f000 fbd7 	bl	8001808 <MX_GPIO_Init>
  MX_TIM2_Init();
 800105a:	f000 fa95 	bl	8001588 <MX_TIM2_Init>
  MX_ADC1_Init();
 800105e:	f000 f967 	bl	8001330 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001062:	f000 f9df 	bl	8001424 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001066:	f000 fb01 	bl	800166c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800106a:	f000 fb81 	bl	8001770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  USER_CALLBACK_init();
 800106e:	f008 f987 	bl	8009380 <USER_CALLBACK_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*When receive the data from USART2, it will implement here */
	  if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETTIMER) !=NULL))
 8001072:	4b7b      	ldr	r3, [pc, #492]	; (8001260 <main+0x218>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d13a      	bne.n	80010f0 <main+0xa8>
 800107a:	497a      	ldr	r1, [pc, #488]	; (8001264 <main+0x21c>)
 800107c:	487a      	ldr	r0, [pc, #488]	; (8001268 <main+0x220>)
 800107e:	f009 fa47 	bl	800a510 <strstr>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d033      	beq.n	80010f0 <main+0xa8>
	  {
		  PWM_Variable = USER_TIMER_handleString(Rx_Buffer);
 8001088:	4c78      	ldr	r4, [pc, #480]	; (800126c <main+0x224>)
 800108a:	463b      	mov	r3, r7
 800108c:	4976      	ldr	r1, [pc, #472]	; (8001268 <main+0x220>)
 800108e:	4618      	mov	r0, r3
 8001090:	f008 faac 	bl	80095ec <USER_TIMER_handleString>
 8001094:	463b      	mov	r3, r7
 8001096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  USER_TIMER_setValueOfPWM(PWM_Variable);
 800109c:	4b73      	ldr	r3, [pc, #460]	; (800126c <main+0x224>)
 800109e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a0:	f008 fa0e 	bl	80094c0 <USER_TIMER_setValueOfPWM>
		  USER_CALLBACK_clearRxBuffer();
 80010a4:	f008 f9e0 	bl	8009468 <USER_CALLBACK_clearRxBuffer>
		  USER_CALLBACK_clearRxData();
 80010a8:	f008 f9ee 	bl	8009488 <USER_CALLBACK_clearRxData>
		  CheckFlagUSART = 0;
 80010ac:	4b6c      	ldr	r3, [pc, #432]	; (8001260 <main+0x218>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG_MAIN
	sprintf(Tx_Buffer,"The Timer: %u, The Channel: %u, The value of CCR = %lu The value of ARR = %lu\r\n",PWM_Variable.NumberOfTimer,PWM_Variable.Channel,USER_TIMER_getValueCCR(),USER_TIMER_getValueARR());
 80010b2:	4b6e      	ldr	r3, [pc, #440]	; (800126c <main+0x224>)
 80010b4:	889b      	ldrh	r3, [r3, #4]
 80010b6:	461e      	mov	r6, r3
 80010b8:	4b6c      	ldr	r3, [pc, #432]	; (800126c <main+0x224>)
 80010ba:	689c      	ldr	r4, [r3, #8]
 80010bc:	f008 fafc 	bl	80096b8 <USER_TIMER_getValueCCR>
 80010c0:	4605      	mov	r5, r0
 80010c2:	f008 faed 	bl	80096a0 <USER_TIMER_getValueARR>
 80010c6:	4603      	mov	r3, r0
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	9500      	str	r5, [sp, #0]
 80010cc:	4623      	mov	r3, r4
 80010ce:	4632      	mov	r2, r6
 80010d0:	4967      	ldr	r1, [pc, #412]	; (8001270 <main+0x228>)
 80010d2:	4868      	ldr	r0, [pc, #416]	; (8001274 <main+0x22c>)
 80010d4:	f009 f9fc 	bl	800a4d0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Tx_Buffer,strlen(Tx_Buffer),1000);
 80010d8:	4866      	ldr	r0, [pc, #408]	; (8001274 <main+0x22c>)
 80010da:	f7ff f8a1 	bl	8000220 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	4963      	ldr	r1, [pc, #396]	; (8001274 <main+0x22c>)
 80010e8:	4863      	ldr	r0, [pc, #396]	; (8001278 <main+0x230>)
 80010ea:	f006 f8a9 	bl	8007240 <HAL_UART_Transmit>
 80010ee:	e090      	b.n	8001212 <main+0x1ca>
#endif
	  }
	  else if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETADC) !=NULL))
 80010f0:	4b5b      	ldr	r3, [pc, #364]	; (8001260 <main+0x218>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d168      	bne.n	80011ca <main+0x182>
 80010f8:	4960      	ldr	r1, [pc, #384]	; (800127c <main+0x234>)
 80010fa:	485b      	ldr	r0, [pc, #364]	; (8001268 <main+0x220>)
 80010fc:	f009 fa08 	bl	800a510 <strstr>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d061      	beq.n	80011ca <main+0x182>
	  {
		  ADCFilter_Variable = USER_ADC_handleString(Rx_Buffer);
 8001106:	4858      	ldr	r0, [pc, #352]	; (8001268 <main+0x220>)
 8001108:	f008 f8dc 	bl	80092c4 <USER_ADC_handleString>
 800110c:	eef0 6a40 	vmov.f32	s13, s0
 8001110:	eeb0 7a60 	vmov.f32	s14, s1
 8001114:	eef0 7a41 	vmov.f32	s15, s2
 8001118:	4b59      	ldr	r3, [pc, #356]	; (8001280 <main+0x238>)
 800111a:	edc3 6a00 	vstr	s13, [r3]
 800111e:	ed83 7a01 	vstr	s14, [r3, #4]
 8001122:	edc3 7a02 	vstr	s15, [r3, #8]
		  USER_ADC_ConfigFilter(ADCFilter_Variable);
 8001126:	4b56      	ldr	r3, [pc, #344]	; (8001280 <main+0x238>)
 8001128:	edd3 6a00 	vldr	s13, [r3]
 800112c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001130:	edd3 7a02 	vldr	s15, [r3, #8]
 8001134:	eeb0 0a66 	vmov.f32	s0, s13
 8001138:	eef0 0a47 	vmov.f32	s1, s14
 800113c:	eeb0 1a67 	vmov.f32	s2, s15
 8001140:	f008 f8a4 	bl	800928c <USER_ADC_ConfigFilter>
		  USER_CALLBACK_clearRxBuffer();
 8001144:	f008 f990 	bl	8009468 <USER_CALLBACK_clearRxBuffer>
		  USER_CALLBACK_clearRxData();
 8001148:	f008 f99e 	bl	8009488 <USER_CALLBACK_clearRxData>
		  CheckFlagUSART = 0;
 800114c:	4b44      	ldr	r3, [pc, #272]	; (8001260 <main+0x218>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG_MAIN
	sprintf(Tx_Buffer,"The Cutoff: %f, The sampleFrequency: %f",USER_ADC_GetInforFilter().cutoffFreq,USER_ADC_GetInforFilter().sampleTime);
 8001152:	f008 f8f5 	bl	8009340 <USER_ADC_GetInforFilter>
 8001156:	eef0 6a40 	vmov.f32	s13, s0
 800115a:	eeb0 7a60 	vmov.f32	s14, s1
 800115e:	eef0 7a41 	vmov.f32	s15, s2
 8001162:	edc7 6a04 	vstr	s13, [r7, #16]
 8001166:	ed87 7a05 	vstr	s14, [r7, #20]
 800116a:	edc7 7a06 	vstr	s15, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fa11 	bl	8000598 <__aeabi_f2d>
 8001176:	4604      	mov	r4, r0
 8001178:	460d      	mov	r5, r1
 800117a:	f008 f8e1 	bl	8009340 <USER_ADC_GetInforFilter>
 800117e:	eef0 6a40 	vmov.f32	s13, s0
 8001182:	eeb0 7a60 	vmov.f32	s14, s1
 8001186:	eef0 7a41 	vmov.f32	s15, s2
 800118a:	edc7 6a07 	vstr	s13, [r7, #28]
 800118e:	ed87 7a08 	vstr	s14, [r7, #32]
 8001192:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9fd 	bl	8000598 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	e9cd 2300 	strd	r2, r3, [sp]
 80011a6:	4622      	mov	r2, r4
 80011a8:	462b      	mov	r3, r5
 80011aa:	4936      	ldr	r1, [pc, #216]	; (8001284 <main+0x23c>)
 80011ac:	4831      	ldr	r0, [pc, #196]	; (8001274 <main+0x22c>)
 80011ae:	f009 f98f 	bl	800a4d0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Tx_Buffer,strlen(Tx_Buffer),1000);
 80011b2:	4830      	ldr	r0, [pc, #192]	; (8001274 <main+0x22c>)
 80011b4:	f7ff f834 	bl	8000220 <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c0:	492c      	ldr	r1, [pc, #176]	; (8001274 <main+0x22c>)
 80011c2:	482d      	ldr	r0, [pc, #180]	; (8001278 <main+0x230>)
 80011c4:	f006 f83c 	bl	8007240 <HAL_UART_Transmit>
 80011c8:	e023      	b.n	8001212 <main+0x1ca>
#endif
	  }
	  else if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETPWMWITHADC) !=NULL))
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <main+0x218>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d11f      	bne.n	8001212 <main+0x1ca>
 80011d2:	492d      	ldr	r1, [pc, #180]	; (8001288 <main+0x240>)
 80011d4:	4824      	ldr	r0, [pc, #144]	; (8001268 <main+0x220>)
 80011d6:	f009 f99b 	bl	800a510 <strstr>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d018      	beq.n	8001212 <main+0x1ca>
	  {
		  PWM_Variable.Duty = USER_TIMER_ConvertADCValueToDutyCycle(ADC_Variable[0]);
 80011e0:	4b2a      	ldr	r3, [pc, #168]	; (800128c <main+0x244>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	f008 fa6e 	bl	80096d0 <USER_TIMER_ConvertADCValueToDutyCycle>
 80011f4:	eef0 7a40 	vmov.f32	s15, s0
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <main+0x224>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]
		  PWM_Variable.NumberOfTimer = 2;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <main+0x224>)
 8001200:	2202      	movs	r2, #2
 8001202:	809a      	strh	r2, [r3, #4]
		  PWM_Variable.Channel = 2;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <main+0x224>)
 8001206:	2202      	movs	r2, #2
 8001208:	609a      	str	r2, [r3, #8]
		  USER_TIMER_setValueOfPWM(PWM_Variable);
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <main+0x224>)
 800120c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800120e:	f008 f957 	bl	80094c0 <USER_TIMER_setValueOfPWM>
	  }

//	  /*When the ADC trigger, it will run here */
	  if(CheckFlagADC == 1)
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <main+0x248>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b01      	cmp	r3, #1
 8001218:	f47f af2b 	bne.w	8001072 <main+0x2a>
	  {
		  HAL_GPIO_TogglePin(TEST_ADC_GPIO_Port,TEST_ADC_Pin);
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f003 fe4f 	bl	8004ec4 <HAL_GPIO_TogglePin>
//		  ADC_Variable[0] = USER_ADC_GetADCFilterValue(1); /*Get value from channel 1*/
//		  ADC_Variable[1] = USER_ADC_GetADCFilterValue(5); /*Get value from channel 5*/
//		  ADC_Variable[2] = USER_ADC_GetADCFilterValue(12); /*Get value from channel 12 - PB0*/
		  ADC_Variable[0] = HAL_ADC_GetValue(&hadc3);
 8001226:	481b      	ldr	r0, [pc, #108]	; (8001294 <main+0x24c>)
 8001228:	f001 fbdc 	bl	80029e4 <HAL_ADC_GetValue>
 800122c:	4603      	mov	r3, r0
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <main+0x244>)
 8001230:	6013      	str	r3, [r2, #0]
		  ADC_Variable[1] = hadc3.Instance->JDR1;
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <main+0x24c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <main+0x244>)
 800123c:	6053      	str	r3, [r2, #4]
		  if((hadc3.Instance->ISR & ADC_ISR_JEOC) == ADC_ISR_JEOC)
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <main+0x24c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0320 	and.w	r3, r3, #32
 8001248:	2b20      	cmp	r3, #32
 800124a:	d105      	bne.n	8001258 <main+0x210>
		  {

			  ADC_Variable[1] = hadc3.Instance->JDR2;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <main+0x24c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <main+0x244>)
 8001256:	6053      	str	r3, [r2, #4]
		  }

		  CheckFlagADC = 0;
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <main+0x248>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
	  if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETTIMER) !=NULL))
 800125e:	e708      	b.n	8001072 <main+0x2a>
 8001260:	200004ba 	.word	0x200004ba
 8001264:	0800e260 	.word	0x0800e260
 8001268:	200004a4 	.word	0x200004a4
 800126c:	2000040c 	.word	0x2000040c
 8001270:	0800e268 	.word	0x0800e268
 8001274:	20000434 	.word	0x20000434
 8001278:	2000037c 	.word	0x2000037c
 800127c:	0800e2b8 	.word	0x0800e2b8
 8001280:	2000041c 	.word	0x2000041c
 8001284:	0800e2bc 	.word	0x0800e2bc
 8001288:	0800e2e4 	.word	0x0800e2e4
 800128c:	20000428 	.word	0x20000428
 8001290:	200004b9 	.word	0x200004b9
 8001294:	20000278 	.word	0x20000278

08001298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b094      	sub	sp, #80	; 0x50
 800129c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	2238      	movs	r2, #56	; 0x38
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f008 fa8a 	bl	80097c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012be:	f003 fe1b 	bl	8004ef8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012cc:	2340      	movs	r3, #64	; 0x40
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d0:	2302      	movs	r3, #2
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012d4:	2302      	movs	r3, #2
 80012d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80012d8:	2304      	movs	r3, #4
 80012da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80012dc:	234b      	movs	r3, #75	; 0x4b
 80012de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ec:	f107 0318 	add.w	r3, r7, #24
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 feb5 	bl	8005060 <HAL_RCC_OscConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80012fc:	f000 fac2 	bl	8001884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001300:	230f      	movs	r3, #15
 8001302:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001304:	2303      	movs	r3, #3
 8001306:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2104      	movs	r1, #4
 8001318:	4618      	mov	r0, r3
 800131a:	f004 f9b9 	bl	8005690 <HAL_RCC_ClockConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001324:	f000 faae 	bl	8001884 <Error_Handler>
  }
}
 8001328:	bf00      	nop
 800132a:	3750      	adds	r7, #80	; 0x50
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2220      	movs	r2, #32
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f008 fa39 	bl	80097c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <MX_ADC1_Init+0xec>)
 8001350:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001354:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <MX_ADC1_Init+0xec>)
 8001358:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800135c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <MX_ADC1_Init+0xec>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_ADC1_Init+0xec>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800136a:	4b2c      	ldr	r3, [pc, #176]	; (800141c <MX_ADC1_Init+0xec>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_ADC1_Init+0xec>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <MX_ADC1_Init+0xec>)
 8001378:	2204      	movs	r2, #4
 800137a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <MX_ADC1_Init+0xec>)
 800137e:	2200      	movs	r2, #0
 8001380:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <MX_ADC1_Init+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <MX_ADC1_Init+0xec>)
 800138a:	2201      	movs	r2, #1
 800138c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800138e:	4b23      	ldr	r3, [pc, #140]	; (800141c <MX_ADC1_Init+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_CC2;
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <MX_ADC1_Init+0xec>)
 8001398:	f44f 628c 	mov.w	r2, #1120	; 0x460
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_ADC1_Init+0xec>)
 80013a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_ADC1_Init+0xec>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_ADC1_Init+0xec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <MX_ADC1_Init+0xec>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013bc:	4817      	ldr	r0, [pc, #92]	; (800141c <MX_ADC1_Init+0xec>)
 80013be:	f000 fff3 	bl	80023a8 <HAL_ADC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80013c8:	f000 fa5c 	bl	8001884 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	4811      	ldr	r0, [pc, #68]	; (800141c <MX_ADC1_Init+0xec>)
 80013d8:	f003 f8d4 	bl	8004584 <HAL_ADCEx_MultiModeConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80013e2:	f000 fa4f 	bl	8001884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_ADC1_Init+0xf0>)
 80013e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ea:	2306      	movs	r3, #6
 80013ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013f2:	237f      	movs	r3, #127	; 0x7f
 80013f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013f6:	2304      	movs	r3, #4
 80013f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <MX_ADC1_Init+0xec>)
 8001404:	f001 fd70 	bl	8002ee8 <HAL_ADC_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800140e:	f000 fa39 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	; 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000020c 	.word	0x2000020c
 8001420:	04300002 	.word	0x04300002

08001424 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09a      	sub	sp, #104	; 0x68
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800142a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001436:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800143a:	2220      	movs	r2, #32
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f008 f9be 	bl	80097c0 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	223c      	movs	r2, #60	; 0x3c
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f008 f9b8 	bl	80097c0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001450:	4b49      	ldr	r3, [pc, #292]	; (8001578 <MX_ADC3_Init+0x154>)
 8001452:	4a4a      	ldr	r2, [pc, #296]	; (800157c <MX_ADC3_Init+0x158>)
 8001454:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001456:	4b48      	ldr	r3, [pc, #288]	; (8001578 <MX_ADC3_Init+0x154>)
 8001458:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800145c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <MX_ADC3_Init+0x154>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001464:	4b44      	ldr	r3, [pc, #272]	; (8001578 <MX_ADC3_Init+0x154>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800146a:	4b43      	ldr	r3, [pc, #268]	; (8001578 <MX_ADC3_Init+0x154>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001470:	4b41      	ldr	r3, [pc, #260]	; (8001578 <MX_ADC3_Init+0x154>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001476:	4b40      	ldr	r3, [pc, #256]	; (8001578 <MX_ADC3_Init+0x154>)
 8001478:	2204      	movs	r2, #4
 800147a:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800147c:	4b3e      	ldr	r3, [pc, #248]	; (8001578 <MX_ADC3_Init+0x154>)
 800147e:	2200      	movs	r2, #0
 8001480:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <MX_ADC3_Init+0x154>)
 8001484:	2201      	movs	r2, #1
 8001486:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001488:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <MX_ADC3_Init+0x154>)
 800148a:	2201      	movs	r2, #1
 800148c:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <MX_ADC3_Init+0x154>)
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <MX_ADC3_Init+0x154>)
 8001498:	2200      	movs	r2, #0
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149c:	4b36      	ldr	r3, [pc, #216]	; (8001578 <MX_ADC3_Init+0x154>)
 800149e:	2200      	movs	r2, #0
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80014a2:	4b35      	ldr	r3, [pc, #212]	; (8001578 <MX_ADC3_Init+0x154>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014aa:	4b33      	ldr	r3, [pc, #204]	; (8001578 <MX_ADC3_Init+0x154>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80014b0:	4b31      	ldr	r3, [pc, #196]	; (8001578 <MX_ADC3_Init+0x154>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014b8:	482f      	ldr	r0, [pc, #188]	; (8001578 <MX_ADC3_Init+0x154>)
 80014ba:	f000 ff75 	bl	80023a8 <HAL_ADC_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80014c4:	f000 f9de 	bl	8001884 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80014cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014d0:	4619      	mov	r1, r3
 80014d2:	4829      	ldr	r0, [pc, #164]	; (8001578 <MX_ADC3_Init+0x154>)
 80014d4:	f003 f856 	bl	8004584 <HAL_ADCEx_MultiModeConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 80014de:	f000 f9d1 	bl	8001884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014e2:	4b27      	ldr	r3, [pc, #156]	; (8001580 <MX_ADC3_Init+0x15c>)
 80014e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014e6:	2306      	movs	r3, #6
 80014e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80014ea:	2307      	movs	r3, #7
 80014ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ee:	237f      	movs	r3, #127	; 0x7f
 80014f0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014f2:	2304      	movs	r3, #4
 80014f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014fe:	4619      	mov	r1, r3
 8001500:	481d      	ldr	r0, [pc, #116]	; (8001578 <MX_ADC3_Init+0x154>)
 8001502:	f001 fcf1 	bl	8002ee8 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 800150c:	f000 f9ba 	bl	8001884 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <MX_ADC3_Init+0x160>)
 8001512:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001514:	2309      	movs	r3, #9
 8001516:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001518:	2307      	movs	r3, #7
 800151a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800151c:	237f      	movs	r3, #127	; 0x7f
 800151e:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001520:	2304      	movs	r3, #4
 8001522:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001528:	2301      	movs	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 800152c:	2301      	movs	r3, #1
 800152e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = ENABLE;
 8001538:	2301      	movs	r3, #1
 800153a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T3_TRGO;
 800153e:	23b0      	movs	r3, #176	; 0xb0
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800154c:	463b      	mov	r3, r7
 800154e:	4619      	mov	r1, r3
 8001550:	4809      	ldr	r0, [pc, #36]	; (8001578 <MX_ADC3_Init+0x154>)
 8001552:	f002 faeb 	bl	8003b2c <HAL_ADCEx_InjectedConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 800155c:	f000 f992 	bl	8001884 <Error_Handler>
  }
  if (HAL_ADCEx_EnableInjectedQueue(&hadc3) != HAL_OK)
 8001560:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_ADC3_Init+0x154>)
 8001562:	f003 f917 	bl	8004794 <HAL_ADCEx_EnableInjectedQueue>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC3_Init+0x14c>
  {
    Error_Handler();
 800156c:	f000 f98a 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	3768      	adds	r7, #104	; 0x68
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000278 	.word	0x20000278
 800157c:	50000400 	.word	0x50000400
 8001580:	04300002 	.word	0x04300002
 8001584:	32601000 	.word	0x32601000

08001588 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	; 0x38
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <MX_TIM2_Init+0xe0>)
 80015bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80015c2:	4b29      	ldr	r3, [pc, #164]	; (8001668 <MX_TIM2_Init+0xe0>)
 80015c4:	2209      	movs	r2, #9
 80015c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <MX_TIM2_Init+0xe0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 149;
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <MX_TIM2_Init+0xe0>)
 80015d0:	2295      	movs	r2, #149	; 0x95
 80015d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <MX_TIM2_Init+0xe0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b23      	ldr	r3, [pc, #140]	; (8001668 <MX_TIM2_Init+0xe0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015e0:	4821      	ldr	r0, [pc, #132]	; (8001668 <MX_TIM2_Init+0xe0>)
 80015e2:	f004 fcbf 	bl	8005f64 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015ec:	f000 f94a 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fa:	4619      	mov	r1, r3
 80015fc:	481a      	ldr	r0, [pc, #104]	; (8001668 <MX_TIM2_Init+0xe0>)
 80015fe:	f004 ff8f 	bl	8006520 <HAL_TIM_ConfigClockSource>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001608:	f000 f93c 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800160c:	4816      	ldr	r0, [pc, #88]	; (8001668 <MX_TIM2_Init+0xe0>)
 800160e:	f004 fd00 	bl	8006012 <HAL_TIM_PWM_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001618:	f000 f934 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800161c:	2320      	movs	r3, #32
 800161e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <MX_TIM2_Init+0xe0>)
 800162c:	f005 fd22 	bl	8007074 <HAL_TIMEx_MasterConfigSynchronization>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001636:	f000 f925 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163a:	2360      	movs	r3, #96	; 0x60
 800163c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800164a:	463b      	mov	r3, r7
 800164c:	2204      	movs	r2, #4
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_TIM2_Init+0xe0>)
 8001652:	f004 fe51 	bl	80062f8 <HAL_TIM_PWM_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800165c:	f000 f912 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001660:	bf00      	nop
 8001662:	3738      	adds	r7, #56	; 0x38
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200002e4 	.word	0x200002e4

0800166c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08e      	sub	sp, #56	; 0x38
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168c:	463b      	mov	r3, r7
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <MX_TIM3_Init+0xfc>)
 80016a0:	4a32      	ldr	r2, [pc, #200]	; (800176c <MX_TIM3_Init+0x100>)
 80016a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <MX_TIM3_Init+0xfc>)
 80016a6:	2209      	movs	r2, #9
 80016a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016aa:	4b2f      	ldr	r3, [pc, #188]	; (8001768 <MX_TIM3_Init+0xfc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 149;
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <MX_TIM3_Init+0xfc>)
 80016b2:	2295      	movs	r2, #149	; 0x95
 80016b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <MX_TIM3_Init+0xfc>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <MX_TIM3_Init+0xfc>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016c2:	4829      	ldr	r0, [pc, #164]	; (8001768 <MX_TIM3_Init+0xfc>)
 80016c4:	f004 fc4e 	bl	8005f64 <HAL_TIM_Base_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016ce:	f000 f8d9 	bl	8001884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016dc:	4619      	mov	r1, r3
 80016de:	4822      	ldr	r0, [pc, #136]	; (8001768 <MX_TIM3_Init+0xfc>)
 80016e0:	f004 ff1e 	bl	8006520 <HAL_TIM_ConfigClockSource>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016ea:	f000 f8cb 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016ee:	481e      	ldr	r0, [pc, #120]	; (8001768 <MX_TIM3_Init+0xfc>)
 80016f0:	f004 fc8f 	bl	8006012 <HAL_TIM_PWM_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016fa:	f000 f8c3 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016fe:	2320      	movs	r3, #32
 8001700:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	4816      	ldr	r0, [pc, #88]	; (8001768 <MX_TIM3_Init+0xfc>)
 800170e:	f005 fcb1 	bl	8007074 <HAL_TIMEx_MasterConfigSynchronization>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001718:	f000 f8b4 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171c:	2360      	movs	r3, #96	; 0x60
 800171e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <MX_TIM3_Init+0xfc>)
 8001734:	f004 fde0 	bl	80062f8 <HAL_TIM_PWM_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800173e:	f000 f8a1 	bl	8001884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	2204      	movs	r2, #4
 8001746:	4619      	mov	r1, r3
 8001748:	4807      	ldr	r0, [pc, #28]	; (8001768 <MX_TIM3_Init+0xfc>)
 800174a:	f004 fdd5 	bl	80062f8 <HAL_TIM_PWM_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001754:	f000 f896 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001758:	4803      	ldr	r0, [pc, #12]	; (8001768 <MX_TIM3_Init+0xfc>)
 800175a:	f000 f991 	bl	8001a80 <HAL_TIM_MspPostInit>

}
 800175e:	bf00      	nop
 8001760:	3738      	adds	r7, #56	; 0x38
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000330 	.word	0x20000330
 800176c:	40000400 	.word	0x40000400

08001770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <MX_USART2_UART_Init+0x90>)
 8001776:	4a23      	ldr	r2, [pc, #140]	; (8001804 <MX_USART2_UART_Init+0x94>)
 8001778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <MX_USART2_UART_Init+0x90>)
 800177c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <MX_USART2_UART_Init+0x90>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <MX_USART2_UART_Init+0x90>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MX_USART2_UART_Init+0x90>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_USART2_UART_Init+0x90>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_USART2_UART_Init+0x90>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_USART2_UART_Init+0x90>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017a6:	4b16      	ldr	r3, [pc, #88]	; (8001800 <MX_USART2_UART_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_USART2_UART_Init+0x90>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <MX_USART2_UART_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b8:	4811      	ldr	r0, [pc, #68]	; (8001800 <MX_USART2_UART_Init+0x90>)
 80017ba:	f005 fcf1 	bl	80071a0 <HAL_UART_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017c4:	f000 f85e 	bl	8001884 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017c8:	2100      	movs	r1, #0
 80017ca:	480d      	ldr	r0, [pc, #52]	; (8001800 <MX_USART2_UART_Init+0x90>)
 80017cc:	f007 fc93 	bl	80090f6 <HAL_UARTEx_SetTxFifoThreshold>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017d6:	f000 f855 	bl	8001884 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017da:	2100      	movs	r1, #0
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <MX_USART2_UART_Init+0x90>)
 80017de:	f007 fcc8 	bl	8009172 <HAL_UARTEx_SetRxFifoThreshold>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017e8:	f000 f84c 	bl	8001884 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017ec:	4804      	ldr	r0, [pc, #16]	; (8001800 <MX_USART2_UART_Init+0x90>)
 80017ee:	f007 fc49 	bl	8009084 <HAL_UARTEx_DisableFifoMode>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017f8:	f000 f844 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000037c 	.word	0x2000037c
 8001804:	40004400 	.word	0x40004400

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <MX_GPIO_Init+0x78>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a17      	ldr	r2, [pc, #92]	; (8001880 <MX_GPIO_Init+0x78>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <MX_GPIO_Init+0x78>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_GPIO_Init+0x78>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a11      	ldr	r2, [pc, #68]	; (8001880 <MX_GPIO_Init+0x78>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_GPIO_Init+0x78>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_ADC_GPIO_Port, TEST_ADC_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001856:	f003 fb1d 	bl	8004e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_ADC_Pin */
  GPIO_InitStruct.Pin = TEST_ADC_Pin;
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST_ADC_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001874:	f003 f98c 	bl	8004b90 <HAL_GPIO_Init>

}
 8001878:	bf00      	nop
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_MspInit+0x44>)
 8001898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_MspInit+0x44>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6613      	str	r3, [r2, #96]	; 0x60
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_MspInit+0x44>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_MspInit+0x44>)
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_MspInit+0x44>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_MspInit+0x44>)
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018c6:	f003 fbbb 	bl	8005040 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0a0      	sub	sp, #128	; 0x80
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f0:	f107 0318 	add.w	r3, r7, #24
 80018f4:	2254      	movs	r2, #84	; 0x54
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f007 ff61 	bl	80097c0 <memset>
  if(hadc->Instance==ADC1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001906:	d13d      	bne.n	8001984 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800190e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001912:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001914:	f107 0318 	add.w	r3, r7, #24
 8001918:	4618      	mov	r0, r3
 800191a:	f004 f8d5 	bl	8005ac8 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001924:	f7ff ffae 	bl	8001884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001928:	4b39      	ldr	r3, [pc, #228]	; (8001a10 <HAL_ADC_MspInit+0x138>)
 800192a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192c:	4a38      	ldr	r2, [pc, #224]	; (8001a10 <HAL_ADC_MspInit+0x138>)
 800192e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <HAL_ADC_MspInit+0x138>)
 8001936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <HAL_ADC_MspInit+0x138>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	4a32      	ldr	r2, [pc, #200]	; (8001a10 <HAL_ADC_MspInit+0x138>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194c:	4b30      	ldr	r3, [pc, #192]	; (8001a10 <HAL_ADC_MspInit+0x138>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001958:	2301      	movs	r3, #1
 800195a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800195c:	2303      	movs	r3, #3
 800195e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196e:	f003 f90f 	bl	8004b90 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	2012      	movs	r0, #18
 8001978:	f003 f815 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800197c:	2012      	movs	r0, #18
 800197e:	f003 f82c 	bl	80049da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001982:	e041      	b.n	8001a08 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <HAL_ADC_MspInit+0x13c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d13c      	bne.n	8001a08 <HAL_ADC_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800198e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001992:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001994:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001998:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800199a:	f107 0318 	add.w	r3, r7, #24
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 f892 	bl	8005ac8 <HAL_RCCEx_PeriphCLKConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 80019aa:	f7ff ff6b 	bl	8001884 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_ADC_MspInit+0x138>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_ADC_MspInit+0x138>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_ADC_MspInit+0x138>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_ADC_MspInit+0x138>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <HAL_ADC_MspInit+0x138>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_ADC_MspInit+0x138>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 80019de:	f242 0303 	movw	r3, #8195	; 0x2003
 80019e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e4:	2303      	movs	r3, #3
 80019e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019f0:	4619      	mov	r1, r3
 80019f2:	4809      	ldr	r0, [pc, #36]	; (8001a18 <HAL_ADC_MspInit+0x140>)
 80019f4:	f003 f8cc 	bl	8004b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2100      	movs	r1, #0
 80019fc:	202f      	movs	r0, #47	; 0x2f
 80019fe:	f002 ffd2 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001a02:	202f      	movs	r0, #47	; 0x2f
 8001a04:	f002 ffe9 	bl	80049da <HAL_NVIC_EnableIRQ>
}
 8001a08:	bf00      	nop
 8001a0a:	3780      	adds	r7, #128	; 0x80
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40021000 	.word	0x40021000
 8001a14:	50000400 	.word	0x50000400
 8001a18:	48000400 	.word	0x48000400

08001a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a2c:	d10c      	bne.n	8001a48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_TIM_Base_MspInit+0x5c>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <HAL_TIM_Base_MspInit+0x5c>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_TIM_Base_MspInit+0x5c>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a46:	e010      	b.n	8001a6a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_TIM_Base_MspInit+0x60>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10b      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_TIM_Base_MspInit+0x5c>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a56:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <HAL_TIM_Base_MspInit+0x5c>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_TIM_Base_MspInit+0x5c>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40000400 	.word	0x40000400

08001a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b088      	sub	sp, #32
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_TIM_MspPostInit+0x64>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d11c      	bne.n	8001adc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_TIM_MspPostInit+0x68>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	4a10      	ldr	r2, [pc, #64]	; (8001ae8 <HAL_TIM_MspPostInit+0x68>)
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_TIM_MspPostInit+0x68>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001aba:	2350      	movs	r3, #80	; 0x50
 8001abc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad8:	f003 f85a 	bl	8004b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001adc:	bf00      	nop
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40000400 	.word	0x40000400
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b09e      	sub	sp, #120	; 0x78
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b04:	f107 0310 	add.w	r3, r7, #16
 8001b08:	2254      	movs	r2, #84	; 0x54
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f007 fe57 	bl	80097c0 <memset>
  if(huart->Instance==USART2)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a23      	ldr	r2, [pc, #140]	; (8001ba4 <HAL_UART_MspInit+0xb8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d13e      	bne.n	8001b9a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 ffcd 	bl	8005ac8 <HAL_RCCEx_PeriphCLKConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b34:	f7ff fea6 	bl	8001884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_UART_MspInit+0xbc>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ba8 <HAL_UART_MspInit+0xbc>)
 8001b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b42:	6593      	str	r3, [r2, #88]	; 0x58
 8001b44:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <HAL_UART_MspInit+0xbc>)
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b50:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_UART_MspInit+0xbc>)
 8001b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <HAL_UART_MspInit+0xbc>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_UART_MspInit+0xbc>)
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b68:	230c      	movs	r3, #12
 8001b6a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b78:	2307      	movs	r3, #7
 8001b7a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b86:	f003 f803 	bl	8004b90 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2026      	movs	r0, #38	; 0x26
 8001b90:	f002 ff09 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b94:	2026      	movs	r0, #38	; 0x26
 8001b96:	f002 ff20 	bl	80049da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3778      	adds	r7, #120	; 0x78
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40004400 	.word	0x40004400
 8001ba8:	40021000 	.word	0x40021000

08001bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <NMI_Handler+0x4>

08001bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <MemManage_Handler+0x4>

08001bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf8:	f000 f974 	bl	8001ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <ADC1_2_IRQHandler+0x10>)
 8001c06:	f000 fefb 	bl	8002a00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000020c 	.word	0x2000020c

08001c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <USART2_IRQHandler+0x10>)
 8001c1a:	f005 fbfd 	bl	8007418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000037c 	.word	0x2000037c

08001c28 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <ADC3_IRQHandler+0x10>)
 8001c2e:	f000 fee7 	bl	8002a00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000278 	.word	0x20000278

08001c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
	return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_kill>:

int _kill(int pid, int sig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c56:	f007 fd7b 	bl	8009750 <__errno>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2216      	movs	r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_exit>:

void _exit (int status)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ffe7 	bl	8001c4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c7e:	e7fe      	b.n	8001c7e <_exit+0x12>

08001c80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e00a      	b.n	8001ca8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c92:	f3af 8000 	nop.w
 8001c96:	4601      	mov	r1, r0
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	60ba      	str	r2, [r7, #8]
 8001c9e:	b2ca      	uxtb	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbf0      	blt.n	8001c92 <_read+0x12>
	}

return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e009      	b.n	8001ce0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	60ba      	str	r2, [r7, #8]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	dbf1      	blt.n	8001ccc <_write+0x12>
	}
	return len;
 8001ce8:	687b      	ldr	r3, [r7, #4]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_close>:

int _close(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	return -1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
 8001d12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <_isatty>:

int _isatty(int file)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
	return 1;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d64:	4a14      	ldr	r2, [pc, #80]	; (8001db8 <_sbrk+0x5c>)
 8001d66:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <_sbrk+0x60>)
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <_sbrk+0x64>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <_sbrk+0x68>)
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <_sbrk+0x64>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d207      	bcs.n	8001d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d8c:	f007 fce0 	bl	8009750 <__errno>
 8001d90:	4603      	mov	r3, r0
 8001d92:	220c      	movs	r2, #12
 8001d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	e009      	b.n	8001db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da2:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <_sbrk+0x64>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a05      	ldr	r2, [pc, #20]	; (8001dc0 <_sbrk+0x64>)
 8001dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20020000 	.word	0x20020000
 8001dbc:	00000400 	.word	0x00000400
 8001dc0:	20000498 	.word	0x20000498
 8001dc4:	200004d8 	.word	0x200004d8

08001dc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <SystemInit+0x20>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd2:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <SystemInit+0x20>)
 8001dd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dec:	480d      	ldr	r0, [pc, #52]	; (8001e24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df0:	480d      	ldr	r0, [pc, #52]	; (8001e28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001df2:	490e      	ldr	r1, [pc, #56]	; (8001e2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001df4:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <LoopForever+0xe>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0b      	ldr	r2, [pc, #44]	; (8001e34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e08:	4c0b      	ldr	r4, [pc, #44]	; (8001e38 <LoopForever+0x16>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e16:	f7ff ffd7 	bl	8001dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f007 fc9f 	bl	800975c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e1e:	f7ff f913 	bl	8001048 <main>

08001e22 <LoopForever>:

LoopForever:
    b LoopForever
 8001e22:	e7fe      	b.n	8001e22 <LoopForever>
  ldr   r0, =_estack
 8001e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e2c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001e30:	0800e848 	.word	0x0800e848
  ldr r2, =_sbss
 8001e34:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001e38:	200004d4 	.word	0x200004d4

08001e3c <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e3c:	e7fe      	b.n	8001e3c <ADC4_IRQHandler>

08001e3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f002 fda1 	bl	8004990 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e4e:	200f      	movs	r0, #15
 8001e50:	f000 f80e 	bl	8001e70 <HAL_InitTick>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	71fb      	strb	r3, [r7, #7]
 8001e5e:	e001      	b.n	8001e64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e60:	f7ff fd16 	bl	8001890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e64:	79fb      	ldrb	r3, [r7, #7]

}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e7c:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_InitTick+0x68>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d022      	beq.n	8001eca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_InitTick+0x6c>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_InitTick+0x68>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 fdac 	bl	80049f6 <HAL_SYSTICK_Config>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10f      	bne.n	8001ec4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b0f      	cmp	r3, #15
 8001ea8:	d809      	bhi.n	8001ebe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb2:	f002 fd78 	bl	80049a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <HAL_InitTick+0x70>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	e007      	b.n	8001ece <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e004      	b.n	8001ece <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e001      	b.n	8001ece <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	20000004 	.word	0x20000004

08001ee4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_IncTick+0x1c>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <HAL_IncTick+0x20>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a03      	ldr	r2, [pc, #12]	; (8001f00 <HAL_IncTick+0x1c>)
 8001ef4:	6013      	str	r3, [r2, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	2000049c 	.word	0x2000049c
 8001f04:	20000008 	.word	0x20000008

08001f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <HAL_GetTick+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	2000049c 	.word	0x2000049c

08001f20 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	609a      	str	r2, [r3, #8]
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	3360      	adds	r3, #96	; 0x60
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <LL_ADC_SetOffset+0x44>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fc0:	bf00      	nop
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	03fff000 	.word	0x03fff000

08001fd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3360      	adds	r3, #96	; 0x60
 8001fde:	461a      	mov	r2, r3
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3360      	adds	r3, #96	; 0x60
 800200c:	461a      	mov	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	431a      	orrs	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002032:	b480      	push	{r7}
 8002034:	b087      	sub	sp, #28
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3360      	adds	r3, #96	; 0x60
 8002042:	461a      	mov	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	431a      	orrs	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800205c:	bf00      	nop
 800205e:	371c      	adds	r7, #28
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3360      	adds	r3, #96	; 0x60
 8002078:	461a      	mov	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	431a      	orrs	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	615a      	str	r2, [r3, #20]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b087      	sub	sp, #28
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	3330      	adds	r3, #48	; 0x30
 80020fa:	461a      	mov	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	4413      	add	r3, r2
 8002108:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	211f      	movs	r1, #31
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	401a      	ands	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	f003 011f 	and.w	r1, r3, #31
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	fa01 f303 	lsl.w	r3, r1, r3
 8002130:	431a      	orrs	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002136:	bf00      	nop
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002168:	b480      	push	{r7}
 800216a:	b087      	sub	sp, #28
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3314      	adds	r3, #20
 8002178:	461a      	mov	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	0e5b      	lsrs	r3, r3, #25
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	4413      	add	r3, r2
 8002186:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	0d1b      	lsrs	r3, r3, #20
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	2107      	movs	r1, #7
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	401a      	ands	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	0d1b      	lsrs	r3, r3, #20
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	431a      	orrs	r2, r3
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021b2:	bf00      	nop
 80021b4:	371c      	adds	r7, #28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a0f      	ldr	r2, [pc, #60]	; (800220c <LL_ADC_SetChannelSingleDiff+0x4c>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d10a      	bne.n	80021ea <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	431a      	orrs	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80021e8:	e00a      	b.n	8002200 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f6:	43db      	mvns	r3, r3
 80021f8:	401a      	ands	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	407f0000 	.word	0x407f0000

08002210 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 031f 	and.w	r3, r3, #31
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6093      	str	r3, [r2, #8]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800227c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002280:	d101      	bne.n	8002286 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022d0:	d101      	bne.n	80022d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <LL_ADC_IsEnabled+0x18>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <LL_ADC_IsEnabled+0x1a>
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002342:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002346:	f043 0204 	orr.w	r2, r3, #4
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b04      	cmp	r3, #4
 800236c:	d101      	bne.n	8002372 <LL_ADC_REG_IsConversionOngoing+0x18>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 0308 	and.w	r3, r3, #8
 8002390:	2b08      	cmp	r3, #8
 8002392:	d101      	bne.n	8002398 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e1af      	b.n	8002722 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d109      	bne.n	80023e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff fa81 	bl	80018d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff3f 	bl	800226c <LL_ADC_IsDeepPowerDownEnabled>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff ff25 	bl	8002248 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff5a 	bl	80022bc <LL_ADC_IsInternalRegulatorEnabled>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d115      	bne.n	800243a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff3e 	bl	8002294 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002418:	4b9f      	ldr	r3, [pc, #636]	; (8002698 <HAL_ADC_Init+0x2f0>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	099b      	lsrs	r3, r3, #6
 800241e:	4a9f      	ldr	r2, [pc, #636]	; (800269c <HAL_ADC_Init+0x2f4>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	099b      	lsrs	r3, r3, #6
 8002426:	3301      	adds	r3, #1
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800242c:	e002      	b.n	8002434 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3b01      	subs	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f9      	bne.n	800242e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff3c 	bl	80022bc <LL_ADC_IsInternalRegulatorEnabled>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10d      	bne.n	8002466 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244e:	f043 0210 	orr.w	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff75 	bl	800235a <LL_ADC_REG_IsConversionOngoing>
 8002470:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b00      	cmp	r3, #0
 800247c:	f040 8148 	bne.w	8002710 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 8144 	bne.w	8002710 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002490:	f043 0202 	orr.w	r2, r3, #2
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff35 	bl	800230c <LL_ADC_IsEnabled>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d141      	bne.n	800252c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024b0:	d004      	beq.n	80024bc <HAL_ADC_Init+0x114>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a7a      	ldr	r2, [pc, #488]	; (80026a0 <HAL_ADC_Init+0x2f8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d10f      	bne.n	80024dc <HAL_ADC_Init+0x134>
 80024bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024c0:	f7ff ff24 	bl	800230c <LL_ADC_IsEnabled>
 80024c4:	4604      	mov	r4, r0
 80024c6:	4876      	ldr	r0, [pc, #472]	; (80026a0 <HAL_ADC_Init+0x2f8>)
 80024c8:	f7ff ff20 	bl	800230c <LL_ADC_IsEnabled>
 80024cc:	4603      	mov	r3, r0
 80024ce:	4323      	orrs	r3, r4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e012      	b.n	8002502 <HAL_ADC_Init+0x15a>
 80024dc:	4871      	ldr	r0, [pc, #452]	; (80026a4 <HAL_ADC_Init+0x2fc>)
 80024de:	f7ff ff15 	bl	800230c <LL_ADC_IsEnabled>
 80024e2:	4604      	mov	r4, r0
 80024e4:	4870      	ldr	r0, [pc, #448]	; (80026a8 <HAL_ADC_Init+0x300>)
 80024e6:	f7ff ff11 	bl	800230c <LL_ADC_IsEnabled>
 80024ea:	4603      	mov	r3, r0
 80024ec:	431c      	orrs	r4, r3
 80024ee:	486f      	ldr	r0, [pc, #444]	; (80026ac <HAL_ADC_Init+0x304>)
 80024f0:	f7ff ff0c 	bl	800230c <LL_ADC_IsEnabled>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4323      	orrs	r3, r4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d012      	beq.n	800252c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800250e:	d004      	beq.n	800251a <HAL_ADC_Init+0x172>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a62      	ldr	r2, [pc, #392]	; (80026a0 <HAL_ADC_Init+0x2f8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_ADC_Init+0x176>
 800251a:	4a65      	ldr	r2, [pc, #404]	; (80026b0 <HAL_ADC_Init+0x308>)
 800251c:	e000      	b.n	8002520 <HAL_ADC_Init+0x178>
 800251e:	4a65      	ldr	r2, [pc, #404]	; (80026b4 <HAL_ADC_Init+0x30c>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4619      	mov	r1, r3
 8002526:	4610      	mov	r0, r2
 8002528:	f7ff fcfa 	bl	8001f20 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7f5b      	ldrb	r3, [r3, #29]
 8002530:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002536:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800253c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002542:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800254a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002556:	2b01      	cmp	r3, #1
 8002558:	d106      	bne.n	8002568 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255e:	3b01      	subs	r3, #1
 8002560:	045b      	lsls	r3, r3, #17
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	4b4b      	ldr	r3, [pc, #300]	; (80026b8 <HAL_ADC_Init+0x310>)
 800258c:	4013      	ands	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	69b9      	ldr	r1, [r7, #24]
 8002594:	430b      	orrs	r3, r1
 8002596:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fed1 	bl	800235a <LL_ADC_REG_IsConversionOngoing>
 80025b8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fede 	bl	8002380 <LL_ADC_INJ_IsConversionOngoing>
 80025c4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d17f      	bne.n	80026cc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d17c      	bne.n	80026cc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025d6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025de:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025ee:	f023 0302 	bic.w	r3, r3, #2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	430b      	orrs	r3, r1
 80025fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d017      	beq.n	8002634 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691a      	ldr	r2, [r3, #16]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002612:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800261c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002620:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6911      	ldr	r1, [r2, #16]
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	430b      	orrs	r3, r1
 800262e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002632:	e013      	b.n	800265c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002642:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002654:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002658:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002662:	2b01      	cmp	r3, #1
 8002664:	d12a      	bne.n	80026bc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800267c:	4311      	orrs	r1, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002688:	430a      	orrs	r2, r1
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0201 	orr.w	r2, r2, #1
 8002694:	611a      	str	r2, [r3, #16]
 8002696:	e019      	b.n	80026cc <HAL_ADC_Init+0x324>
 8002698:	20000000 	.word	0x20000000
 800269c:	053e2d63 	.word	0x053e2d63
 80026a0:	50000100 	.word	0x50000100
 80026a4:	50000400 	.word	0x50000400
 80026a8:	50000500 	.word	0x50000500
 80026ac:	50000600 	.word	0x50000600
 80026b0:	50000300 	.word	0x50000300
 80026b4:	50000700 	.word	0x50000700
 80026b8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10c      	bne.n	80026ee <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f023 010f 	bic.w	r1, r3, #15
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	1e5a      	subs	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
 80026ec:	e007      	b.n	80026fe <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 020f 	bic.w	r2, r2, #15
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	65da      	str	r2, [r3, #92]	; 0x5c
 800270e:	e007      	b.n	8002720 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	f043 0210 	orr.w	r2, r3, #16
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002720:	7ffb      	ldrb	r3, [r7, #31]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3724      	adds	r7, #36	; 0x24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}
 800272a:	bf00      	nop

0800272c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800273c:	d004      	beq.n	8002748 <HAL_ADC_Start_IT+0x1c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a93      	ldr	r2, [pc, #588]	; (8002990 <HAL_ADC_Start_IT+0x264>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d101      	bne.n	800274c <HAL_ADC_Start_IT+0x20>
 8002748:	4b92      	ldr	r3, [pc, #584]	; (8002994 <HAL_ADC_Start_IT+0x268>)
 800274a:	e000      	b.n	800274e <HAL_ADC_Start_IT+0x22>
 800274c:	4b92      	ldr	r3, [pc, #584]	; (8002998 <HAL_ADC_Start_IT+0x26c>)
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fd5e 	bl	8002210 <LL_ADC_GetMultimode>
 8002754:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fdfd 	bl	800235a <LL_ADC_REG_IsConversionOngoing>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f040 8134 	bne.w	80029d0 <HAL_ADC_Start_IT+0x2a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_ADC_Start_IT+0x4a>
 8002772:	2302      	movs	r3, #2
 8002774:	e131      	b.n	80029da <HAL_ADC_Start_IT+0x2ae>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fff2 	bl	8003768 <ADC_Enable>
 8002784:	4603      	mov	r3, r0
 8002786:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 811b 	bne.w	80029c6 <HAL_ADC_Start_IT+0x29a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a79      	ldr	r2, [pc, #484]	; (8002990 <HAL_ADC_Start_IT+0x264>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d009      	beq.n	80027c2 <HAL_ADC_Start_IT+0x96>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a7a      	ldr	r2, [pc, #488]	; (800299c <HAL_ADC_Start_IT+0x270>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d002      	beq.n	80027be <HAL_ADC_Start_IT+0x92>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	e003      	b.n	80027c6 <HAL_ADC_Start_IT+0x9a>
 80027be:	4b78      	ldr	r3, [pc, #480]	; (80029a0 <HAL_ADC_Start_IT+0x274>)
 80027c0:	e001      	b.n	80027c6 <HAL_ADC_Start_IT+0x9a>
 80027c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d002      	beq.n	80027d4 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d105      	bne.n	80027e0 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d006      	beq.n	80027fa <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f0:	f023 0206 	bic.w	r2, r3, #6
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	661a      	str	r2, [r3, #96]	; 0x60
 80027f8:	e002      	b.n	8002800 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	221c      	movs	r2, #28
 8002806:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 021c 	bic.w	r2, r2, #28
 800281e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d108      	bne.n	800283a <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0208 	orr.w	r2, r2, #8
 8002836:	605a      	str	r2, [r3, #4]
          break;
 8002838:	e008      	b.n	800284c <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0204 	orr.w	r2, r2, #4
 8002848:	605a      	str	r2, [r3, #4]
          break;
 800284a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d107      	bne.n	8002864 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0210 	orr.w	r2, r2, #16
 8002862:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a49      	ldr	r2, [pc, #292]	; (8002990 <HAL_ADC_Start_IT+0x264>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_ADC_Start_IT+0x156>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a4a      	ldr	r2, [pc, #296]	; (800299c <HAL_ADC_Start_IT+0x270>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d002      	beq.n	800287e <HAL_ADC_Start_IT+0x152>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	e003      	b.n	8002886 <HAL_ADC_Start_IT+0x15a>
 800287e:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <HAL_ADC_Start_IT+0x274>)
 8002880:	e001      	b.n	8002886 <HAL_ADC_Start_IT+0x15a>
 8002882:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	4293      	cmp	r3, r2
 800288c:	d008      	beq.n	80028a0 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	2b05      	cmp	r3, #5
 8002898:	d002      	beq.n	80028a0 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	2b09      	cmp	r3, #9
 800289e:	d13b      	bne.n	8002918 <HAL_ADC_Start_IT+0x1ec>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d02d      	beq.n	800290a <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d110      	bne.n	80028e8 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0220 	bic.w	r2, r2, #32
 80028d4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028e4:	605a      	str	r2, [r3, #4]
              break;
 80028e6:	e011      	b.n	800290c <HAL_ADC_Start_IT+0x1e0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028f6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0220 	orr.w	r2, r2, #32
 8002906:	605a      	str	r2, [r3, #4]
              break;
 8002908:	e000      	b.n	800290c <HAL_ADC_Start_IT+0x1e0>
          }
        }
 800290a:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fd0e 	bl	8002332 <LL_ADC_REG_StartConversion>
 8002916:	e05f      	b.n	80029d8 <HAL_ADC_Start_IT+0x2ac>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_ADC_Start_IT+0x264>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d009      	beq.n	8002942 <HAL_ADC_Start_IT+0x216>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1a      	ldr	r2, [pc, #104]	; (800299c <HAL_ADC_Start_IT+0x270>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d002      	beq.n	800293e <HAL_ADC_Start_IT+0x212>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	e003      	b.n	8002946 <HAL_ADC_Start_IT+0x21a>
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_ADC_Start_IT+0x274>)
 8002940:	e001      	b.n	8002946 <HAL_ADC_Start_IT+0x21a>
 8002942:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002946:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d040      	beq.n	80029d6 <HAL_ADC_Start_IT+0x2aa>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800295c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d11b      	bne.n	80029a4 <HAL_ADC_Start_IT+0x278>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0220 	bic.w	r2, r2, #32
 800297a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800298a:	605a      	str	r2, [r3, #4]
              break;
 800298c:	e024      	b.n	80029d8 <HAL_ADC_Start_IT+0x2ac>
 800298e:	bf00      	nop
 8002990:	50000100 	.word	0x50000100
 8002994:	50000300 	.word	0x50000300
 8002998:	50000700 	.word	0x50000700
 800299c:	50000500 	.word	0x50000500
 80029a0:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029b2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0220 	orr.w	r2, r2, #32
 80029c2:	605a      	str	r2, [r3, #4]
              break;
 80029c4:	e008      	b.n	80029d8 <HAL_ADC_Start_IT+0x2ac>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80029ce:	e003      	b.n	80029d8 <HAL_ADC_Start_IT+0x2ac>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
 80029d2:	75fb      	strb	r3, [r7, #23]
 80029d4:	e000      	b.n	80029d8 <HAL_ADC_Start_IT+0x2ac>
        }
 80029d6:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80029d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop

080029e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a24:	d004      	beq.n	8002a30 <HAL_ADC_IRQHandler+0x30>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a8e      	ldr	r2, [pc, #568]	; (8002c64 <HAL_ADC_IRQHandler+0x264>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_IRQHandler+0x34>
 8002a30:	4b8d      	ldr	r3, [pc, #564]	; (8002c68 <HAL_ADC_IRQHandler+0x268>)
 8002a32:	e000      	b.n	8002a36 <HAL_ADC_IRQHandler+0x36>
 8002a34:	4b8d      	ldr	r3, [pc, #564]	; (8002c6c <HAL_ADC_IRQHandler+0x26c>)
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fbea 	bl	8002210 <LL_ADC_GetMultimode>
 8002a3c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d017      	beq.n	8002a78 <HAL_ADC_IRQHandler+0x78>
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d012      	beq.n	8002a78 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d105      	bne.n	8002a6a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a62:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f001 f853 	bl	8003b16 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2202      	movs	r2, #2
 8002a76:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f003 0304 	and.w	r3, r3, #4
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <HAL_ADC_IRQHandler+0x8c>
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8094 	beq.w	8002bc0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 808e 	beq.w	8002bc0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff faff 	bl	80020c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d072      	beq.n	8002bb2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a64      	ldr	r2, [pc, #400]	; (8002c64 <HAL_ADC_IRQHandler+0x264>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d009      	beq.n	8002aea <HAL_ADC_IRQHandler+0xea>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a65      	ldr	r2, [pc, #404]	; (8002c70 <HAL_ADC_IRQHandler+0x270>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d002      	beq.n	8002ae6 <HAL_ADC_IRQHandler+0xe6>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	e003      	b.n	8002aee <HAL_ADC_IRQHandler+0xee>
 8002ae6:	4b63      	ldr	r3, [pc, #396]	; (8002c74 <HAL_ADC_IRQHandler+0x274>)
 8002ae8:	e001      	b.n	8002aee <HAL_ADC_IRQHandler+0xee>
 8002aea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d008      	beq.n	8002b08 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b05      	cmp	r3, #5
 8002b00:	d002      	beq.n	8002b08 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2b09      	cmp	r3, #9
 8002b06:	d104      	bne.n	8002b12 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	623b      	str	r3, [r7, #32]
 8002b10:	e014      	b.n	8002b3c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a53      	ldr	r2, [pc, #332]	; (8002c64 <HAL_ADC_IRQHandler+0x264>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d009      	beq.n	8002b30 <HAL_ADC_IRQHandler+0x130>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a53      	ldr	r2, [pc, #332]	; (8002c70 <HAL_ADC_IRQHandler+0x270>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d002      	beq.n	8002b2c <HAL_ADC_IRQHandler+0x12c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	e003      	b.n	8002b34 <HAL_ADC_IRQHandler+0x134>
 8002b2c:	4b51      	ldr	r3, [pc, #324]	; (8002c74 <HAL_ADC_IRQHandler+0x274>)
 8002b2e:	e001      	b.n	8002b34 <HAL_ADC_IRQHandler+0x134>
 8002b30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b34:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d135      	bne.n	8002bb2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d12e      	bne.n	8002bb2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fbfe 	bl	800235a <LL_ADC_REG_IsConversionOngoing>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d11a      	bne.n	8002b9a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 020c 	bic.w	r2, r2, #12
 8002b72:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d112      	bne.n	8002bb2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b98:	e00b      	b.n	8002bb2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9e:	f043 0210 	orr.w	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002baa:	f043 0201 	orr.w	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f006 fc36 	bl	8009424 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	220c      	movs	r2, #12
 8002bbe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d004      	beq.n	8002bd4 <HAL_ADC_IRQHandler+0x1d4>
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80b3 	beq.w	8002d46 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80ad 	beq.w	8002d46 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d105      	bne.n	8002c04 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fa9a 	bl	8002142 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002c0e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fa55 	bl	80020c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c1a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <HAL_ADC_IRQHandler+0x264>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d009      	beq.n	8002c3a <HAL_ADC_IRQHandler+0x23a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <HAL_ADC_IRQHandler+0x270>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d002      	beq.n	8002c36 <HAL_ADC_IRQHandler+0x236>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	e003      	b.n	8002c3e <HAL_ADC_IRQHandler+0x23e>
 8002c36:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_ADC_IRQHandler+0x274>)
 8002c38:	e001      	b.n	8002c3e <HAL_ADC_IRQHandler+0x23e>
 8002c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d008      	beq.n	8002c58 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d002      	beq.n	8002c58 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b07      	cmp	r3, #7
 8002c56:	d10f      	bne.n	8002c78 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	e01f      	b.n	8002ca2 <HAL_ADC_IRQHandler+0x2a2>
 8002c62:	bf00      	nop
 8002c64:	50000100 	.word	0x50000100
 8002c68:	50000300 	.word	0x50000300
 8002c6c:	50000700 	.word	0x50000700
 8002c70:	50000500 	.word	0x50000500
 8002c74:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a8b      	ldr	r2, [pc, #556]	; (8002eac <HAL_ADC_IRQHandler+0x4ac>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d009      	beq.n	8002c96 <HAL_ADC_IRQHandler+0x296>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a8a      	ldr	r2, [pc, #552]	; (8002eb0 <HAL_ADC_IRQHandler+0x4b0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d002      	beq.n	8002c92 <HAL_ADC_IRQHandler+0x292>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	e003      	b.n	8002c9a <HAL_ADC_IRQHandler+0x29a>
 8002c92:	4b88      	ldr	r3, [pc, #544]	; (8002eb4 <HAL_ADC_IRQHandler+0x4b4>)
 8002c94:	e001      	b.n	8002c9a <HAL_ADC_IRQHandler+0x29a>
 8002c96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c9a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d047      	beq.n	8002d38 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_ADC_IRQHandler+0x2c2>
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d03f      	beq.n	8002d38 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d13a      	bne.n	8002d38 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	d133      	bne.n	8002d38 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d12e      	bne.n	8002d38 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fb4e 	bl	8002380 <LL_ADC_INJ_IsConversionOngoing>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d11a      	bne.n	8002d20 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cf8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d112      	bne.n	8002d38 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d1e:	e00b      	b.n	8002d38 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	f043 0210 	orr.w	r2, r3, #16
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d30:	f043 0201 	orr.w	r2, r3, #1
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 fec4 	bl	8003ac6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2260      	movs	r2, #96	; 0x60
 8002d44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d011      	beq.n	8002d74 <HAL_ADC_IRQHandler+0x374>
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8aa 	bl	8002ec0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d012      	beq.n	8002da4 <HAL_ADC_IRQHandler+0x3a4>
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 feaa 	bl	8003aee <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002da2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d012      	beq.n	8002dd4 <HAL_ADC_IRQHandler+0x3d4>
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00d      	beq.n	8002dd4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fe9c 	bl	8003b02 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d043      	beq.n	8002e66 <HAL_ADC_IRQHandler+0x466>
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d03e      	beq.n	8002e66 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d102      	bne.n	8002df6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002df0:	2301      	movs	r3, #1
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
 8002df4:	e021      	b.n	8002e3a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d015      	beq.n	8002e28 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e04:	d004      	beq.n	8002e10 <HAL_ADC_IRQHandler+0x410>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a28      	ldr	r2, [pc, #160]	; (8002eac <HAL_ADC_IRQHandler+0x4ac>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_IRQHandler+0x414>
 8002e10:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <HAL_ADC_IRQHandler+0x4b8>)
 8002e12:	e000      	b.n	8002e16 <HAL_ADC_IRQHandler+0x416>
 8002e14:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <HAL_ADC_IRQHandler+0x4bc>)
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fa08 	bl	800222c <LL_ADC_GetMultiDMATransfer>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002e22:	2301      	movs	r3, #1
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
 8002e26:	e008      	b.n	8002e3a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002e36:	2301      	movs	r3, #1
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d10e      	bne.n	8002e5e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	f043 0202 	orr.w	r2, r3, #2
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 f83b 	bl	8002ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2210      	movs	r2, #16
 8002e64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d018      	beq.n	8002ea2 <HAL_ADC_IRQHandler+0x4a2>
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d013      	beq.n	8002ea2 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8a:	f043 0208 	orr.w	r2, r3, #8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e9a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 fe1c 	bl	8003ada <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002ea2:	bf00      	nop
 8002ea4:	3728      	adds	r7, #40	; 0x28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	50000100 	.word	0x50000100
 8002eb0:	50000500 	.word	0x50000500
 8002eb4:	50000400 	.word	0x50000400
 8002eb8:	50000300 	.word	0x50000300
 8002ebc:	50000700 	.word	0x50000700

08002ec0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b0b6      	sub	sp, #216	; 0xd8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d102      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x24>
 8002f06:	2302      	movs	r3, #2
 8002f08:	f000 bc13 	b.w	8003732 <HAL_ADC_ConfigChannel+0x84a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fa1e 	bl	800235a <LL_ADC_REG_IsConversionOngoing>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 83f3 	bne.w	800370c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	f7ff f8d9 	bl	80020ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fa0c 	bl	800235a <LL_ADC_REG_IsConversionOngoing>
 8002f42:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fa18 	bl	8002380 <LL_ADC_INJ_IsConversionOngoing>
 8002f50:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f040 81d9 	bne.w	8003310 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 81d4 	bne.w	8003310 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f70:	d10f      	bne.n	8002f92 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6818      	ldr	r0, [r3, #0]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f7ff f8f3 	bl	8002168 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff f887 	bl	800209e <LL_ADC_SetSamplingTimeCommonConfig>
 8002f90:	e00e      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6818      	ldr	r0, [r3, #0]
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	f7ff f8e2 	bl	8002168 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f877 	bl	800209e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	08db      	lsrs	r3, r3, #3
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d022      	beq.n	8003018 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6919      	ldr	r1, [r3, #16]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fe2:	f7fe ffd1 	bl	8001f88 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6818      	ldr	r0, [r3, #0]
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6919      	ldr	r1, [r3, #16]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	f7ff f81d 	bl	8002032 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	6919      	ldr	r1, [r3, #16]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	7f1b      	ldrb	r3, [r3, #28]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d102      	bne.n	800300e <HAL_ADC_ConfigChannel+0x126>
 8003008:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800300c:	e000      	b.n	8003010 <HAL_ADC_ConfigChannel+0x128>
 800300e:	2300      	movs	r3, #0
 8003010:	461a      	mov	r2, r3
 8003012:	f7ff f829 	bl	8002068 <LL_ADC_SetOffsetSaturation>
 8003016:	e17b      	b.n	8003310 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2100      	movs	r1, #0
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe ffd6 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8003024:	4603      	mov	r3, r0
 8003026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <HAL_ADC_ConfigChannel+0x15c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe ffcb 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	0e9b      	lsrs	r3, r3, #26
 800303e:	f003 021f 	and.w	r2, r3, #31
 8003042:	e01e      	b.n	8003082 <HAL_ADC_ConfigChannel+0x19a>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe ffc0 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8003050:	4603      	mov	r3, r0
 8003052:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003062:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003066:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800306a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003072:	2320      	movs	r3, #32
 8003074:	e004      	b.n	8003080 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003076:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308a:	2b00      	cmp	r3, #0
 800308c:	d105      	bne.n	800309a <HAL_ADC_ConfigChannel+0x1b2>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	0e9b      	lsrs	r3, r3, #26
 8003094:	f003 031f 	and.w	r3, r3, #31
 8003098:	e018      	b.n	80030cc <HAL_ADC_ConfigChannel+0x1e4>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80030ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80030b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80030be:	2320      	movs	r3, #32
 80030c0:	e004      	b.n	80030cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80030c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d106      	bne.n	80030de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2200      	movs	r2, #0
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe ff8f 	bl	8001ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2101      	movs	r1, #1
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fe ff73 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 80030ea:	4603      	mov	r3, r0
 80030ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10a      	bne.n	800310a <HAL_ADC_ConfigChannel+0x222>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2101      	movs	r1, #1
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe ff68 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8003100:	4603      	mov	r3, r0
 8003102:	0e9b      	lsrs	r3, r3, #26
 8003104:	f003 021f 	and.w	r2, r3, #31
 8003108:	e01e      	b.n	8003148 <HAL_ADC_ConfigChannel+0x260>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2101      	movs	r1, #1
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe ff5d 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8003116:	4603      	mov	r3, r0
 8003118:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003128:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800312c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003130:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003138:	2320      	movs	r3, #32
 800313a:	e004      	b.n	8003146 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800313c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x278>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	e018      	b.n	8003192 <HAL_ADC_ConfigChannel+0x2aa>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800316c:	fa93 f3a3 	rbit	r3, r3
 8003170:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003174:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003178:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800317c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003184:	2320      	movs	r3, #32
 8003186:	e004      	b.n	8003192 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003188:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800318c:	fab3 f383 	clz	r3, r3
 8003190:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003192:	429a      	cmp	r2, r3
 8003194:	d106      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	2101      	movs	r1, #1
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe ff2c 	bl	8001ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2102      	movs	r1, #2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe ff10 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <HAL_ADC_ConfigChannel+0x2e8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2102      	movs	r1, #2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe ff05 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 80031c6:	4603      	mov	r3, r0
 80031c8:	0e9b      	lsrs	r3, r3, #26
 80031ca:	f003 021f 	and.w	r2, r3, #31
 80031ce:	e01e      	b.n	800320e <HAL_ADC_ConfigChannel+0x326>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2102      	movs	r1, #2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe fefa 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 80031dc:	4603      	mov	r3, r0
 80031de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031e6:	fa93 f3a3 	rbit	r3, r3
 80031ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80031ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80031f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80031fe:	2320      	movs	r3, #32
 8003200:	e004      	b.n	800320c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003202:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x33e>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	0e9b      	lsrs	r3, r3, #26
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	e016      	b.n	8003254 <HAL_ADC_ConfigChannel+0x36c>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800323a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800323e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003246:	2320      	movs	r3, #32
 8003248:	e004      	b.n	8003254 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800324a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003254:	429a      	cmp	r2, r3
 8003256:	d106      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2200      	movs	r2, #0
 800325e:	2102      	movs	r1, #2
 8003260:	4618      	mov	r0, r3
 8003262:	f7fe fecb 	bl	8001ffc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2103      	movs	r1, #3
 800326c:	4618      	mov	r0, r3
 800326e:	f7fe feaf 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8003272:	4603      	mov	r3, r0
 8003274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10a      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x3aa>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2103      	movs	r1, #3
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe fea4 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	0e9b      	lsrs	r3, r3, #26
 800328c:	f003 021f 	and.w	r2, r3, #31
 8003290:	e017      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x3da>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2103      	movs	r1, #3
 8003298:	4618      	mov	r0, r3
 800329a:	f7fe fe99 	bl	8001fd0 <LL_ADC_GetOffsetChannel>
 800329e:	4603      	mov	r3, r0
 80032a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80032aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80032ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80032b4:	2320      	movs	r3, #32
 80032b6:	e003      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80032b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d105      	bne.n	80032da <HAL_ADC_ConfigChannel+0x3f2>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	0e9b      	lsrs	r3, r3, #26
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	e011      	b.n	80032fe <HAL_ADC_ConfigChannel+0x416>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80032ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80032f2:	2320      	movs	r3, #32
 80032f4:	e003      	b.n	80032fe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80032f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032fe:	429a      	cmp	r2, r3
 8003300:	d106      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2200      	movs	r2, #0
 8003308:	2103      	movs	r1, #3
 800330a:	4618      	mov	r0, r3
 800330c:	f7fe fe76 	bl	8001ffc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe fff9 	bl	800230c <LL_ADC_IsEnabled>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	f040 813d 	bne.w	800359c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6819      	ldr	r1, [r3, #0]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	461a      	mov	r2, r3
 8003330:	f7fe ff46 	bl	80021c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	4aa2      	ldr	r2, [pc, #648]	; (80035c4 <HAL_ADC_ConfigChannel+0x6dc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	f040 812e 	bne.w	800359c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x480>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	0e9b      	lsrs	r3, r3, #26
 8003356:	3301      	adds	r3, #1
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	2b09      	cmp	r3, #9
 800335e:	bf94      	ite	ls
 8003360:	2301      	movls	r3, #1
 8003362:	2300      	movhi	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e019      	b.n	800339c <HAL_ADC_ConfigChannel+0x4b4>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003378:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800337a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003380:	2320      	movs	r3, #32
 8003382:	e003      	b.n	800338c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	b2db      	uxtb	r3, r3
 800338c:	3301      	adds	r3, #1
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	2b09      	cmp	r3, #9
 8003394:	bf94      	ite	ls
 8003396:	2301      	movls	r3, #1
 8003398:	2300      	movhi	r3, #0
 800339a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800339c:	2b00      	cmp	r3, #0
 800339e:	d079      	beq.n	8003494 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d107      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x4d4>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	0e9b      	lsrs	r3, r3, #26
 80033b2:	3301      	adds	r3, #1
 80033b4:	069b      	lsls	r3, r3, #26
 80033b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ba:	e015      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x500>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c4:	fa93 f3a3 	rbit	r3, r3
 80033c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80033ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80033d4:	2320      	movs	r3, #32
 80033d6:	e003      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80033d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033da:	fab3 f383 	clz	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	069b      	lsls	r3, r3, #26
 80033e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x520>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	0e9b      	lsrs	r3, r3, #26
 80033fa:	3301      	adds	r3, #1
 80033fc:	f003 031f 	and.w	r3, r3, #31
 8003400:	2101      	movs	r1, #1
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	e017      	b.n	8003438 <HAL_ADC_ConfigChannel+0x550>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003410:	fa93 f3a3 	rbit	r3, r3
 8003414:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003418:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800341a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003420:	2320      	movs	r3, #32
 8003422:	e003      	b.n	800342c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003424:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	3301      	adds	r3, #1
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2101      	movs	r1, #1
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	ea42 0103 	orr.w	r1, r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <HAL_ADC_ConfigChannel+0x576>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	3301      	adds	r3, #1
 8003450:	f003 021f 	and.w	r2, r3, #31
 8003454:	4613      	mov	r3, r2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	051b      	lsls	r3, r3, #20
 800345c:	e018      	b.n	8003490 <HAL_ADC_ConfigChannel+0x5a8>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800346c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003476:	2320      	movs	r3, #32
 8003478:	e003      	b.n	8003482 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	3301      	adds	r3, #1
 8003484:	f003 021f 	and.w	r2, r3, #31
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003490:	430b      	orrs	r3, r1
 8003492:	e07e      	b.n	8003592 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349c:	2b00      	cmp	r3, #0
 800349e:	d107      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x5c8>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	0e9b      	lsrs	r3, r3, #26
 80034a6:	3301      	adds	r3, #1
 80034a8:	069b      	lsls	r3, r3, #26
 80034aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ae:	e015      	b.n	80034dc <HAL_ADC_ConfigChannel+0x5f4>
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b8:	fa93 f3a3 	rbit	r3, r3
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80034c8:	2320      	movs	r3, #32
 80034ca:	e003      	b.n	80034d4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	3301      	adds	r3, #1
 80034d6:	069b      	lsls	r3, r3, #26
 80034d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x614>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	0e9b      	lsrs	r3, r3, #26
 80034ee:	3301      	adds	r3, #1
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	2101      	movs	r1, #1
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	e017      	b.n	800352c <HAL_ADC_ConfigChannel+0x644>
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	fa93 f3a3 	rbit	r3, r3
 8003508:	61fb      	str	r3, [r7, #28]
  return result;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003514:	2320      	movs	r3, #32
 8003516:	e003      	b.n	8003520 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	3301      	adds	r3, #1
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2101      	movs	r1, #1
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	ea42 0103 	orr.w	r1, r2, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10d      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x670>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0e9b      	lsrs	r3, r3, #26
 8003542:	3301      	adds	r3, #1
 8003544:	f003 021f 	and.w	r2, r3, #31
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	3b1e      	subs	r3, #30
 8003550:	051b      	lsls	r3, r3, #20
 8003552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003556:	e01b      	b.n	8003590 <HAL_ADC_ConfigChannel+0x6a8>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	613b      	str	r3, [r7, #16]
  return result;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003570:	2320      	movs	r3, #32
 8003572:	e003      	b.n	800357c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	3301      	adds	r3, #1
 800357e:	f003 021f 	and.w	r2, r3, #31
 8003582:	4613      	mov	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4413      	add	r3, r2
 8003588:	3b1e      	subs	r3, #30
 800358a:	051b      	lsls	r3, r3, #20
 800358c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003590:	430b      	orrs	r3, r1
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	6892      	ldr	r2, [r2, #8]
 8003596:	4619      	mov	r1, r3
 8003598:	f7fe fde6 	bl	8002168 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_ADC_ConfigChannel+0x6e0>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80be 	beq.w	8003726 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035b2:	d004      	beq.n	80035be <HAL_ADC_ConfigChannel+0x6d6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <HAL_ADC_ConfigChannel+0x6e4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10a      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x6ec>
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <HAL_ADC_ConfigChannel+0x6e8>)
 80035c0:	e009      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x6ee>
 80035c2:	bf00      	nop
 80035c4:	407f0000 	.word	0x407f0000
 80035c8:	80080000 	.word	0x80080000
 80035cc:	50000100 	.word	0x50000100
 80035d0:	50000300 	.word	0x50000300
 80035d4:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_ADC_ConfigChannel+0x854>)
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fcc8 	bl	8001f6c <LL_ADC_GetCommonPathInternalCh>
 80035dc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a56      	ldr	r2, [pc, #344]	; (8003740 <HAL_ADC_ConfigChannel+0x858>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_ADC_ConfigChannel+0x70c>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a55      	ldr	r2, [pc, #340]	; (8003744 <HAL_ADC_ConfigChannel+0x85c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d13a      	bne.n	800366a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d134      	bne.n	800366a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003608:	d005      	beq.n	8003616 <HAL_ADC_ConfigChannel+0x72e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a4e      	ldr	r2, [pc, #312]	; (8003748 <HAL_ADC_ConfigChannel+0x860>)
 8003610:	4293      	cmp	r3, r2
 8003612:	f040 8085 	bne.w	8003720 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800361e:	d004      	beq.n	800362a <HAL_ADC_ConfigChannel+0x742>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a49      	ldr	r2, [pc, #292]	; (800374c <HAL_ADC_ConfigChannel+0x864>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d101      	bne.n	800362e <HAL_ADC_ConfigChannel+0x746>
 800362a:	4a49      	ldr	r2, [pc, #292]	; (8003750 <HAL_ADC_ConfigChannel+0x868>)
 800362c:	e000      	b.n	8003630 <HAL_ADC_ConfigChannel+0x748>
 800362e:	4a43      	ldr	r2, [pc, #268]	; (800373c <HAL_ADC_ConfigChannel+0x854>)
 8003630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003634:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f7fe fc83 	bl	8001f46 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003640:	4b44      	ldr	r3, [pc, #272]	; (8003754 <HAL_ADC_ConfigChannel+0x86c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	099b      	lsrs	r3, r3, #6
 8003646:	4a44      	ldr	r2, [pc, #272]	; (8003758 <HAL_ADC_ConfigChannel+0x870>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	099b      	lsrs	r3, r3, #6
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800365a:	e002      	b.n	8003662 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	3b01      	subs	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1f9      	bne.n	800365c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003668:	e05a      	b.n	8003720 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a3b      	ldr	r2, [pc, #236]	; (800375c <HAL_ADC_ConfigChannel+0x874>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d125      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x7d8>
 8003674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d11f      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a31      	ldr	r2, [pc, #196]	; (800374c <HAL_ADC_ConfigChannel+0x864>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d104      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x7ac>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a34      	ldr	r2, [pc, #208]	; (8003760 <HAL_ADC_ConfigChannel+0x878>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d047      	beq.n	8003724 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800369c:	d004      	beq.n	80036a8 <HAL_ADC_ConfigChannel+0x7c0>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2a      	ldr	r2, [pc, #168]	; (800374c <HAL_ADC_ConfigChannel+0x864>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d101      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x7c4>
 80036a8:	4a29      	ldr	r2, [pc, #164]	; (8003750 <HAL_ADC_ConfigChannel+0x868>)
 80036aa:	e000      	b.n	80036ae <HAL_ADC_ConfigChannel+0x7c6>
 80036ac:	4a23      	ldr	r2, [pc, #140]	; (800373c <HAL_ADC_ConfigChannel+0x854>)
 80036ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b6:	4619      	mov	r1, r3
 80036b8:	4610      	mov	r0, r2
 80036ba:	f7fe fc44 	bl	8001f46 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036be:	e031      	b.n	8003724 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a27      	ldr	r2, [pc, #156]	; (8003764 <HAL_ADC_ConfigChannel+0x87c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d12d      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d127      	bne.n	8003726 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1c      	ldr	r2, [pc, #112]	; (800374c <HAL_ADC_ConfigChannel+0x864>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036e8:	d004      	beq.n	80036f4 <HAL_ADC_ConfigChannel+0x80c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a17      	ldr	r2, [pc, #92]	; (800374c <HAL_ADC_ConfigChannel+0x864>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d101      	bne.n	80036f8 <HAL_ADC_ConfigChannel+0x810>
 80036f4:	4a16      	ldr	r2, [pc, #88]	; (8003750 <HAL_ADC_ConfigChannel+0x868>)
 80036f6:	e000      	b.n	80036fa <HAL_ADC_ConfigChannel+0x812>
 80036f8:	4a10      	ldr	r2, [pc, #64]	; (800373c <HAL_ADC_ConfigChannel+0x854>)
 80036fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f7fe fc1e 	bl	8001f46 <LL_ADC_SetCommonPathInternalCh>
 800370a:	e00c      	b.n	8003726 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003710:	f043 0220 	orr.w	r2, r3, #32
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800371e:	e002      	b.n	8003726 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003720:	bf00      	nop
 8003722:	e000      	b.n	8003726 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003724:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800372e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003732:	4618      	mov	r0, r3
 8003734:	37d8      	adds	r7, #216	; 0xd8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	50000700 	.word	0x50000700
 8003740:	c3210000 	.word	0xc3210000
 8003744:	90c00010 	.word	0x90c00010
 8003748:	50000600 	.word	0x50000600
 800374c:	50000100 	.word	0x50000100
 8003750:	50000300 	.word	0x50000300
 8003754:	20000000 	.word	0x20000000
 8003758:	053e2d63 	.word	0x053e2d63
 800375c:	c7520000 	.word	0xc7520000
 8003760:	50000500 	.word	0x50000500
 8003764:	cb840000 	.word	0xcb840000

08003768 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7fe fdc9 	bl	800230c <LL_ADC_IsEnabled>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d14d      	bne.n	800381c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	4b28      	ldr	r3, [pc, #160]	; (8003828 <ADC_Enable+0xc0>)
 8003788:	4013      	ands	r3, r2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	f043 0210 	orr.w	r2, r3, #16
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379e:	f043 0201 	orr.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e039      	b.n	800381e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fd98 	bl	80022e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037b4:	f7fe fba8 	bl	8001f08 <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037ba:	e028      	b.n	800380e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fda3 	bl	800230c <LL_ADC_IsEnabled>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7fe fd87 	bl	80022e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037d6:	f7fe fb97 	bl	8001f08 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d914      	bls.n	800380e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d00d      	beq.n	800380e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f6:	f043 0210 	orr.w	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003802:	f043 0201 	orr.w	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e007      	b.n	800381e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d1cf      	bne.n	80037bc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	8000003f 	.word	0x8000003f

0800382c <LL_ADC_SetCommonPathInternalCh>:
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	609a      	str	r2, [r3, #8]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <LL_ADC_GetCommonPathInternalCh>:
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <LL_ADC_SetOffset>:
{
 8003870:	b480      	push	{r7}
 8003872:	b087      	sub	sp, #28
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3360      	adds	r3, #96	; 0x60
 8003882:	461a      	mov	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <LL_ADC_SetOffset+0x44>)
 8003892:	4013      	ands	r3, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	601a      	str	r2, [r3, #0]
}
 80038a8:	bf00      	nop
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	03fff000 	.word	0x03fff000

080038b8 <LL_ADC_GetOffsetChannel>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3360      	adds	r3, #96	; 0x60
 80038c6:	461a      	mov	r2, r3
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_ADC_SetOffsetState>:
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3360      	adds	r3, #96	; 0x60
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	431a      	orrs	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	601a      	str	r2, [r3, #0]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_ADC_SetOffsetSign>:
{
 800391a:	b480      	push	{r7}
 800391c:	b087      	sub	sp, #28
 800391e:	af00      	add	r7, sp, #0
 8003920:	60f8      	str	r0, [r7, #12]
 8003922:	60b9      	str	r1, [r7, #8]
 8003924:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3360      	adds	r3, #96	; 0x60
 800392a:	461a      	mov	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	431a      	orrs	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	601a      	str	r2, [r3, #0]
}
 8003944:	bf00      	nop
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_ADC_SetOffsetSaturation>:
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3360      	adds	r3, #96	; 0x60
 8003960:	461a      	mov	r2, r3
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	431a      	orrs	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	601a      	str	r2, [r3, #0]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	615a      	str	r2, [r3, #20]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <LL_ADC_SetChannelSamplingTime>:
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3314      	adds	r3, #20
 80039bc:	461a      	mov	r2, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	0e5b      	lsrs	r3, r3, #25
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	4413      	add	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	0d1b      	lsrs	r3, r3, #20
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2107      	movs	r1, #7
 80039da:	fa01 f303 	lsl.w	r3, r1, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	401a      	ands	r2, r3
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	0d1b      	lsrs	r3, r3, #20
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	431a      	orrs	r2, r3
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	601a      	str	r2, [r3, #0]
}
 80039f6:	bf00      	nop
 80039f8:	371c      	adds	r7, #28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <LL_ADC_SetChannelSingleDiff>:
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a0f      	ldr	r2, [pc, #60]	; (8003a50 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d10a      	bne.n	8003a2e <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a24:	431a      	orrs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003a2c:	e00a      	b.n	8003a44 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	401a      	ands	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	407f0000 	.word	0x407f0000

08003a54 <LL_ADC_IsEnabled>:
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <LL_ADC_IsEnabled+0x18>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <LL_ADC_IsEnabled+0x1a>
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_ADC_REG_IsConversionOngoing>:
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d101      	bne.n	8003a92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d101      	bne.n	8003ab8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
	...

08003b2c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b0b6      	sub	sp, #216	; 0xd8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d102      	bne.n	8003b56 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003b50:	2302      	movs	r3, #2
 8003b52:	f000 bcfd 	b.w	8004550 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d130      	bne.n	8003bd0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b09      	cmp	r3, #9
 8003b74:	d179      	bne.n	8003c6a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d010      	beq.n	8003ba0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	0e9b      	lsrs	r3, r3, #26
 8003b84:	025b      	lsls	r3, r3, #9
 8003b86:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003b92:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b9e:	e007      	b.n	8003bb0 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0e9b      	lsrs	r3, r3, #26
 8003ba6:	025b      	lsls	r3, r3, #9
 8003ba8:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003bac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bb6:	4b84      	ldr	r3, [pc, #528]	; (8003dc8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6812      	ldr	r2, [r2, #0]
 8003bbe:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bcc:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003bce:	e04c      	b.n	8003c6a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11d      	bne.n	8003c14 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	6a1a      	ldr	r2, [r3, #32]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00d      	beq.n	8003c0a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003bfc:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c08:	e004      	b.n	8003c14 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	0e9b      	lsrs	r3, r3, #26
 8003c1a:	f003 021f 	and.w	r2, r3, #31
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c38:	1e5a      	subs	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c5a:	4b5b      	ldr	r3, [pc, #364]	; (8003dc8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	430b      	orrs	r3, r1
 8003c68:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff ff16 	bl	8003aa0 <LL_ADC_INJ_IsConversionOngoing>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d124      	bne.n	8003cc4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d112      	bne.n	8003caa <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c94:	055a      	lsls	r2, r3, #21
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c9c:	051b      	lsls	r3, r3, #20
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	60da      	str	r2, [r3, #12]
 8003ca8:	e00c      	b.n	8003cc4 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003cba:	055a      	lsls	r2, r3, #21
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fed6 	bl	8003a7a <LL_ADC_REG_IsConversionOngoing>
 8003cce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fee2 	bl	8003aa0 <LL_ADC_INJ_IsConversionOngoing>
 8003cdc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f040 822e 	bne.w	8004146 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f040 8229 	bne.w	8004146 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d116      	bne.n	8003d32 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d108      	bne.n	8003d20 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003d1c:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003d1e:	e01f      	b.n	8003d60 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003d2e:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003d30:	e016      	b.n	8003d60 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d109      	bne.n	8003d50 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003d4e:	e007      	b.n	8003d60 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003d5e:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d110      	bne.n	8003d8c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	430b      	orrs	r3, r1
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0202 	orr.w	r2, r2, #2
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	e007      	b.n	8003d9c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691a      	ldr	r2, [r3, #16]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0202 	bic.w	r2, r2, #2
 8003d9a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003da4:	d112      	bne.n	8003dcc <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2200      	movs	r2, #0
 8003db0:	4619      	mov	r1, r3
 8003db2:	f7ff fdfb 	bl	80039ac <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff fde1 	bl	8003986 <LL_ADC_SetSamplingTimeCommonConfig>
 8003dc4:	e011      	b.n	8003dea <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8003dc6:	bf00      	nop
 8003dc8:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f7ff fde7 	bl	80039ac <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2100      	movs	r1, #0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fdce 	bl	8003986 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	08db      	lsrs	r3, r3, #3
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d022      	beq.n	8003e52 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	6919      	ldr	r1, [r3, #16]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e1c:	f7ff fd28 	bl	8003870 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6919      	ldr	r1, [r3, #16]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f7ff fd74 	bl	800391a <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d102      	bne.n	8003e48 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e46:	e000      	b.n	8003e4a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f7ff fd80 	bl	8003950 <LL_ADC_SetOffsetSaturation>
 8003e50:	e179      	b.n	8004146 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fd2d 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fd22 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8003e74:	4603      	mov	r3, r0
 8003e76:	0e9b      	lsrs	r3, r3, #26
 8003e78:	f003 021f 	and.w	r2, r3, #31
 8003e7c:	e01e      	b.n	8003ebc <HAL_ADCEx_InjectedConfigChannel+0x390>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff fd17 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e94:	fa93 f3a3 	rbit	r3, r3
 8003e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003ea4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8003eac:	2320      	movs	r3, #32
 8003eae:	e004      	b.n	8003eba <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8003eb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003eb4:	fab3 f383 	clz	r3, r3
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	0e9b      	lsrs	r3, r3, #26
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	e018      	b.n	8003f06 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ee0:	fa93 f3a3 	rbit	r3, r3
 8003ee4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003ee8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003eec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003ef0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003ef8:	2320      	movs	r3, #32
 8003efa:	e004      	b.n	8003f06 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003efc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f00:	fab3 f383 	clz	r3, r3
 8003f04:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d106      	bne.n	8003f18 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	2100      	movs	r1, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fce6 	bl	80038e4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff fcca 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2101      	movs	r1, #1
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fcbf 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	0e9b      	lsrs	r3, r3, #26
 8003f3e:	f003 021f 	and.w	r2, r3, #31
 8003f42:	e01e      	b.n	8003f82 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2101      	movs	r1, #1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fcb4 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003f6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8003f72:	2320      	movs	r3, #32
 8003f74:	e004      	b.n	8003f80 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003f76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f7a:	fab3 f383 	clz	r3, r3
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	0e9b      	lsrs	r3, r3, #26
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	e018      	b.n	8003fcc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003fa6:	fa93 f3a3 	rbit	r3, r3
 8003faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003fb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8003fbe:	2320      	movs	r3, #32
 8003fc0:	e004      	b.n	8003fcc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8003fc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fc6:	fab3 f383 	clz	r3, r3
 8003fca:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d106      	bne.n	8003fde <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fc83 	bl	80038e4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff fc67 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2102      	movs	r1, #2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff fc5c 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8004000:	4603      	mov	r3, r0
 8004002:	0e9b      	lsrs	r3, r3, #26
 8004004:	f003 021f 	and.w	r2, r3, #31
 8004008:	e01e      	b.n	8004048 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2102      	movs	r1, #2
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fc51 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 8004016:	4603      	mov	r3, r0
 8004018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004020:	fa93 f3a3 	rbit	r3, r3
 8004024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004028:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800402c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004038:	2320      	movs	r3, #32
 800403a:	e004      	b.n	8004046 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 800403c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004050:	2b00      	cmp	r3, #0
 8004052:	d105      	bne.n	8004060 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	0e9b      	lsrs	r3, r3, #26
 800405a:	f003 031f 	and.w	r3, r3, #31
 800405e:	e014      	b.n	800408a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004066:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004068:	fa93 f3a3 	rbit	r3, r3
 800406c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800406e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004070:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800407c:	2320      	movs	r3, #32
 800407e:	e004      	b.n	800408a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004080:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004084:	fab3 f383 	clz	r3, r3
 8004088:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800408a:	429a      	cmp	r2, r3
 800408c:	d106      	bne.n	800409c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	2102      	movs	r1, #2
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fc24 	bl	80038e4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2103      	movs	r1, #3
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff fc08 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10a      	bne.n	80040c8 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2103      	movs	r1, #3
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff fbfd 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 80040be:	4603      	mov	r3, r0
 80040c0:	0e9b      	lsrs	r3, r3, #26
 80040c2:	f003 021f 	and.w	r2, r3, #31
 80040c6:	e017      	b.n	80040f8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2103      	movs	r1, #3
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff fbf2 	bl	80038b8 <LL_ADC_GetOffsetChannel>
 80040d4:	4603      	mov	r3, r0
 80040d6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80040e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80040ea:	2320      	movs	r3, #32
 80040ec:	e003      	b.n	80040f6 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80040ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f0:	fab3 f383 	clz	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	0e9b      	lsrs	r3, r3, #26
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	e011      	b.n	8004134 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800411e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004120:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004128:	2320      	movs	r3, #32
 800412a:	e003      	b.n	8004134 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 800412c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800412e:	fab3 f383 	clz	r3, r3
 8004132:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004134:	429a      	cmp	r2, r3
 8004136:	d106      	bne.n	8004146 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2200      	movs	r2, #0
 800413e:	2103      	movs	r1, #3
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fbcf 	bl	80038e4 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fc82 	bl	8003a54 <LL_ADC_IsEnabled>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 813d 	bne.w	80043d2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	461a      	mov	r2, r3
 8004166:	f7ff fc4d 	bl	8003a04 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	4aa2      	ldr	r2, [pc, #648]	; (80043f8 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8004170:	4293      	cmp	r3, r2
 8004172:	f040 812e 	bne.w	80043d2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10b      	bne.n	800419e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	0e9b      	lsrs	r3, r3, #26
 800418c:	3301      	adds	r3, #1
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2b09      	cmp	r3, #9
 8004194:	bf94      	ite	ls
 8004196:	2301      	movls	r3, #1
 8004198:	2300      	movhi	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	e019      	b.n	80041d2 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80041ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80041b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80041b6:	2320      	movs	r3, #32
 80041b8:	e003      	b.n	80041c2 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80041ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	3301      	adds	r3, #1
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	bf94      	ite	ls
 80041cc:	2301      	movls	r3, #1
 80041ce:	2300      	movhi	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d079      	beq.n	80042ca <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d107      	bne.n	80041f2 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	0e9b      	lsrs	r3, r3, #26
 80041e8:	3301      	adds	r3, #1
 80041ea:	069b      	lsls	r3, r3, #26
 80041ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041f0:	e015      	b.n	800421e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004202:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800420a:	2320      	movs	r3, #32
 800420c:	e003      	b.n	8004216 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800420e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004210:	fab3 f383 	clz	r3, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	3301      	adds	r3, #1
 8004218:	069b      	lsls	r3, r3, #26
 800421a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <HAL_ADCEx_InjectedConfigChannel+0x712>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	0e9b      	lsrs	r3, r3, #26
 8004230:	3301      	adds	r3, #1
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	2101      	movs	r1, #1
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	e017      	b.n	800426e <HAL_ADCEx_InjectedConfigChannel+0x742>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004246:	fa93 f3a3 	rbit	r3, r3
 800424a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800424c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004256:	2320      	movs	r3, #32
 8004258:	e003      	b.n	8004262 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800425a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800425c:	fab3 f383 	clz	r3, r3
 8004260:	b2db      	uxtb	r3, r3
 8004262:	3301      	adds	r3, #1
 8004264:	f003 031f 	and.w	r3, r3, #31
 8004268:	2101      	movs	r1, #1
 800426a:	fa01 f303 	lsl.w	r3, r1, r3
 800426e:	ea42 0103 	orr.w	r1, r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	0e9b      	lsrs	r3, r3, #26
 8004284:	3301      	adds	r3, #1
 8004286:	f003 021f 	and.w	r2, r3, #31
 800428a:	4613      	mov	r3, r2
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	4413      	add	r3, r2
 8004290:	051b      	lsls	r3, r3, #20
 8004292:	e018      	b.n	80042c6 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429c:	fa93 f3a3 	rbit	r3, r3
 80042a0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80042ac:	2320      	movs	r3, #32
 80042ae:	e003      	b.n	80042b8 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80042b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	3301      	adds	r3, #1
 80042ba:	f003 021f 	and.w	r2, r3, #31
 80042be:	4613      	mov	r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	4413      	add	r3, r2
 80042c4:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042c6:	430b      	orrs	r3, r1
 80042c8:	e07e      	b.n	80043c8 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	0e9b      	lsrs	r3, r3, #26
 80042dc:	3301      	adds	r3, #1
 80042de:	069b      	lsls	r3, r3, #26
 80042e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042e4:	e015      	b.n	8004312 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80042fe:	2320      	movs	r3, #32
 8004300:	e003      	b.n	800430a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	b2db      	uxtb	r3, r3
 800430a:	3301      	adds	r3, #1
 800430c:	069b      	lsls	r3, r3, #26
 800430e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_ADCEx_InjectedConfigChannel+0x806>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0e9b      	lsrs	r3, r3, #26
 8004324:	3301      	adds	r3, #1
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	2101      	movs	r1, #1
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	e017      	b.n	8004362 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	61bb      	str	r3, [r7, #24]
  return result;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800434a:	2320      	movs	r3, #32
 800434c:	e003      	b.n	8004356 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800434e:	6a3b      	ldr	r3, [r7, #32]
 8004350:	fab3 f383 	clz	r3, r3
 8004354:	b2db      	uxtb	r3, r3
 8004356:	3301      	adds	r3, #1
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2101      	movs	r1, #1
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	ea42 0103 	orr.w	r1, r2, r3
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10d      	bne.n	800438e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	0e9b      	lsrs	r3, r3, #26
 8004378:	3301      	adds	r3, #1
 800437a:	f003 021f 	and.w	r2, r3, #31
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	3b1e      	subs	r3, #30
 8004386:	051b      	lsls	r3, r3, #20
 8004388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800438c:	e01b      	b.n	80043c6 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	fa93 f3a3 	rbit	r3, r3
 800439a:	60fb      	str	r3, [r7, #12]
  return result;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 80043a6:	2320      	movs	r3, #32
 80043a8:	e003      	b.n	80043b2 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	fab3 f383 	clz	r3, r3
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	3301      	adds	r3, #1
 80043b4:	f003 021f 	and.w	r2, r3, #31
 80043b8:	4613      	mov	r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4413      	add	r3, r2
 80043be:	3b1e      	subs	r3, #30
 80043c0:	051b      	lsls	r3, r3, #20
 80043c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043c6:	430b      	orrs	r3, r1
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	6892      	ldr	r2, [r2, #8]
 80043cc:	4619      	mov	r1, r3
 80043ce:	f7ff faed 	bl	80039ac <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b09      	ldr	r3, [pc, #36]	; (80043fc <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 80043d8:	4013      	ands	r3, r2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80b2 	beq.w	8004544 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e8:	d004      	beq.n	80043f4 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a04      	ldr	r2, [pc, #16]	; (8004400 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d109      	bne.n	8004408 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 80043f6:	e008      	b.n	800440a <HAL_ADCEx_InjectedConfigChannel+0x8de>
 80043f8:	407f0000 	.word	0x407f0000
 80043fc:	80080000 	.word	0x80080000
 8004400:	50000100 	.word	0x50000100
 8004404:	50000300 	.word	0x50000300
 8004408:	4b53      	ldr	r3, [pc, #332]	; (8004558 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fa21 	bl	8003852 <LL_ADC_GetCommonPathInternalCh>
 8004410:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a50      	ldr	r2, [pc, #320]	; (800455c <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a4f      	ldr	r2, [pc, #316]	; (8004560 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d139      	bne.n	800449c <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800442c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d133      	bne.n	800449c <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800443c:	d004      	beq.n	8004448 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a48      	ldr	r2, [pc, #288]	; (8004564 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d17a      	bne.n	800453e <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004450:	d004      	beq.n	800445c <HAL_ADCEx_InjectedConfigChannel+0x930>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a44      	ldr	r2, [pc, #272]	; (8004568 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d101      	bne.n	8004460 <HAL_ADCEx_InjectedConfigChannel+0x934>
 800445c:	4a43      	ldr	r2, [pc, #268]	; (800456c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800445e:	e000      	b.n	8004462 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8004460:	4a3d      	ldr	r2, [pc, #244]	; (8004558 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004462:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004466:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800446a:	4619      	mov	r1, r3
 800446c:	4610      	mov	r0, r2
 800446e:	f7ff f9dd 	bl	800382c <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004472:	4b3f      	ldr	r3, [pc, #252]	; (8004570 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	099b      	lsrs	r3, r3, #6
 8004478:	4a3e      	ldr	r2, [pc, #248]	; (8004574 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	099a      	lsrs	r2, r3, #6
 8004480:	4613      	mov	r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	3318      	adds	r3, #24
 800448a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800448c:	e002      	b.n	8004494 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	3b01      	subs	r3, #1
 8004492:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f9      	bne.n	800448e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800449a:	e050      	b.n	800453e <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a35      	ldr	r2, [pc, #212]	; (8004578 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d125      	bne.n	80044f2 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d11f      	bne.n	80044f2 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2c      	ldr	r2, [pc, #176]	; (8004568 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d104      	bne.n	80044c6 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2e      	ldr	r2, [pc, #184]	; (800457c <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d03d      	beq.n	8004542 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044ce:	d004      	beq.n	80044da <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a24      	ldr	r2, [pc, #144]	; (8004568 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 80044da:	4a24      	ldr	r2, [pc, #144]	; (800456c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80044dc:	e000      	b.n	80044e0 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 80044de:	4a1e      	ldr	r2, [pc, #120]	; (8004558 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80044e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044e8:	4619      	mov	r1, r3
 80044ea:	4610      	mov	r0, r2
 80044ec:	f7ff f99e 	bl	800382c <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044f0:	e027      	b.n	8004542 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a22      	ldr	r2, [pc, #136]	; (8004580 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d123      	bne.n	8004544 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d11d      	bne.n	8004544 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a16      	ldr	r2, [pc, #88]	; (8004568 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d018      	beq.n	8004544 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800451a:	d004      	beq.n	8004526 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a11      	ldr	r2, [pc, #68]	; (8004568 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8004526:	4a11      	ldr	r2, [pc, #68]	; (800456c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004528:	e000      	b.n	800452c <HAL_ADCEx_InjectedConfigChannel+0xa00>
 800452a:	4a0b      	ldr	r2, [pc, #44]	; (8004558 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800452c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f7ff f978 	bl	800382c <LL_ADC_SetCommonPathInternalCh>
 800453c:	e002      	b.n	8004544 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800453e:	bf00      	nop
 8004540:	e000      	b.n	8004544 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004542:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800454c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004550:	4618      	mov	r0, r3
 8004552:	37d8      	adds	r7, #216	; 0xd8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	50000700 	.word	0x50000700
 800455c:	c3210000 	.word	0xc3210000
 8004560:	90c00010 	.word	0x90c00010
 8004564:	50000600 	.word	0x50000600
 8004568:	50000100 	.word	0x50000100
 800456c:	50000300 	.word	0x50000300
 8004570:	20000000 	.word	0x20000000
 8004574:	053e2d63 	.word	0x053e2d63
 8004578:	c7520000 	.word	0xc7520000
 800457c:	50000500 	.word	0x50000500
 8004580:	cb840000 	.word	0xcb840000

08004584 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b0a1      	sub	sp, #132	; 0x84
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800459a:	2b01      	cmp	r3, #1
 800459c:	d101      	bne.n	80045a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800459e:	2302      	movs	r3, #2
 80045a0:	e0e7      	b.n	8004772 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80045aa:	2300      	movs	r3, #0
 80045ac:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80045ae:	2300      	movs	r3, #0
 80045b0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045ba:	d102      	bne.n	80045c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80045bc:	4b6f      	ldr	r3, [pc, #444]	; (800477c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	e009      	b.n	80045d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a6e      	ldr	r2, [pc, #440]	; (8004780 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d102      	bne.n	80045d2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80045cc:	4b6d      	ldr	r3, [pc, #436]	; (8004784 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045ce:	60bb      	str	r3, [r7, #8]
 80045d0:	e001      	b.n	80045d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045d2:	2300      	movs	r3, #0
 80045d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10b      	bne.n	80045f4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e0:	f043 0220 	orr.w	r2, r3, #32
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0be      	b.n	8004772 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff fa3f 	bl	8003a7a <LL_ADC_REG_IsConversionOngoing>
 80045fc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fa39 	bl	8003a7a <LL_ADC_REG_IsConversionOngoing>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	f040 80a0 	bne.w	8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004612:	2b00      	cmp	r3, #0
 8004614:	f040 809c 	bne.w	8004750 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004620:	d004      	beq.n	800462c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a55      	ldr	r2, [pc, #340]	; (800477c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d101      	bne.n	8004630 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800462c:	4b56      	ldr	r3, [pc, #344]	; (8004788 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800462e:	e000      	b.n	8004632 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004630:	4b56      	ldr	r3, [pc, #344]	; (800478c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004632:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d04b      	beq.n	80046d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800463c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	6859      	ldr	r1, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800464e:	035b      	lsls	r3, r3, #13
 8004650:	430b      	orrs	r3, r1
 8004652:	431a      	orrs	r2, r3
 8004654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004656:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004660:	d004      	beq.n	800466c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a45      	ldr	r2, [pc, #276]	; (800477c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d10f      	bne.n	800468c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800466c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004670:	f7ff f9f0 	bl	8003a54 <LL_ADC_IsEnabled>
 8004674:	4604      	mov	r4, r0
 8004676:	4841      	ldr	r0, [pc, #260]	; (800477c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004678:	f7ff f9ec 	bl	8003a54 <LL_ADC_IsEnabled>
 800467c:	4603      	mov	r3, r0
 800467e:	4323      	orrs	r3, r4
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf0c      	ite	eq
 8004684:	2301      	moveq	r3, #1
 8004686:	2300      	movne	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	e012      	b.n	80046b2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800468c:	483c      	ldr	r0, [pc, #240]	; (8004780 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800468e:	f7ff f9e1 	bl	8003a54 <LL_ADC_IsEnabled>
 8004692:	4604      	mov	r4, r0
 8004694:	483b      	ldr	r0, [pc, #236]	; (8004784 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004696:	f7ff f9dd 	bl	8003a54 <LL_ADC_IsEnabled>
 800469a:	4603      	mov	r3, r0
 800469c:	431c      	orrs	r4, r3
 800469e:	483c      	ldr	r0, [pc, #240]	; (8004790 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80046a0:	f7ff f9d8 	bl	8003a54 <LL_ADC_IsEnabled>
 80046a4:	4603      	mov	r3, r0
 80046a6:	4323      	orrs	r3, r4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d056      	beq.n	8004764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80046b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046be:	f023 030f 	bic.w	r3, r3, #15
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	6811      	ldr	r1, [r2, #0]
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	6892      	ldr	r2, [r2, #8]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	431a      	orrs	r2, r3
 80046ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046d2:	e047      	b.n	8004764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046e8:	d004      	beq.n	80046f4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a23      	ldr	r2, [pc, #140]	; (800477c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10f      	bne.n	8004714 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80046f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046f8:	f7ff f9ac 	bl	8003a54 <LL_ADC_IsEnabled>
 80046fc:	4604      	mov	r4, r0
 80046fe:	481f      	ldr	r0, [pc, #124]	; (800477c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004700:	f7ff f9a8 	bl	8003a54 <LL_ADC_IsEnabled>
 8004704:	4603      	mov	r3, r0
 8004706:	4323      	orrs	r3, r4
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e012      	b.n	800473a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004714:	481a      	ldr	r0, [pc, #104]	; (8004780 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004716:	f7ff f99d 	bl	8003a54 <LL_ADC_IsEnabled>
 800471a:	4604      	mov	r4, r0
 800471c:	4819      	ldr	r0, [pc, #100]	; (8004784 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800471e:	f7ff f999 	bl	8003a54 <LL_ADC_IsEnabled>
 8004722:	4603      	mov	r3, r0
 8004724:	431c      	orrs	r4, r3
 8004726:	481a      	ldr	r0, [pc, #104]	; (8004790 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004728:	f7ff f994 	bl	8003a54 <LL_ADC_IsEnabled>
 800472c:	4603      	mov	r3, r0
 800472e:	4323      	orrs	r3, r4
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf0c      	ite	eq
 8004734:	2301      	moveq	r3, #1
 8004736:	2300      	movne	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d012      	beq.n	8004764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800473e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004746:	f023 030f 	bic.w	r3, r3, #15
 800474a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800474c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800474e:	e009      	b.n	8004764 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004762:	e000      	b.n	8004766 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004764:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800476e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004772:	4618      	mov	r0, r3
 8004774:	3784      	adds	r7, #132	; 0x84
 8004776:	46bd      	mov	sp, r7
 8004778:	bd90      	pop	{r4, r7, pc}
 800477a:	bf00      	nop
 800477c:	50000100 	.word	0x50000100
 8004780:	50000400 	.word	0x50000400
 8004784:	50000500 	.word	0x50000500
 8004788:	50000300 	.word	0x50000300
 800478c:	50000700 	.word	0x50000700
 8004790:	50000600 	.word	0x50000600

08004794 <HAL_ADCEx_EnableInjectedQueue>:
  *         conversion is ongoing.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_EnableInjectedQueue(ADC_HandleTypeDef *hadc)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff f96a 	bl	8003a7a <LL_ADC_REG_IsConversionOngoing>
 80047a6:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff f977 	bl	8003aa0 <LL_ADC_INJ_IsConversionOngoing>
 80047b2:	60f8      	str	r0, [r7, #12]

  /* Parameter can be set only if no conversion is on-going */
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d113      	bne.n	80047e2 <HAL_ADCEx_EnableInjectedQueue+0x4e>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d110      	bne.n	80047e2 <HAL_ADCEx_EnableInjectedQueue+0x4e>
     )
  {
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047ce:	60da      	str	r2, [r3, #12]

    /* Update state, clear previous result related to injected queue overflow */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	75fb      	strb	r3, [r7, #23]
 80047e0:	e001      	b.n	80047e6 <HAL_ADCEx_EnableInjectedQueue+0x52>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 80047e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <__NVIC_SetPriorityGrouping+0x44>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800480c:	4013      	ands	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800481c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004822:	4a04      	ldr	r2, [pc, #16]	; (8004834 <__NVIC_SetPriorityGrouping+0x44>)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	60d3      	str	r3, [r2, #12]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	e000ed00 	.word	0xe000ed00

08004838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <__NVIC_GetPriorityGrouping+0x18>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	0a1b      	lsrs	r3, r3, #8
 8004842:	f003 0307 	and.w	r3, r3, #7
}
 8004846:	4618      	mov	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	2b00      	cmp	r3, #0
 8004864:	db0b      	blt.n	800487e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	4907      	ldr	r1, [pc, #28]	; (800488c <__NVIC_EnableIRQ+0x38>)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	2001      	movs	r0, #1
 8004876:	fa00 f202 	lsl.w	r2, r0, r2
 800487a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	e000e100 	.word	0xe000e100

08004890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800489c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db0a      	blt.n	80048ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	490c      	ldr	r1, [pc, #48]	; (80048dc <__NVIC_SetPriority+0x4c>)
 80048aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ae:	0112      	lsls	r2, r2, #4
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	440b      	add	r3, r1
 80048b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048b8:	e00a      	b.n	80048d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	4908      	ldr	r1, [pc, #32]	; (80048e0 <__NVIC_SetPriority+0x50>)
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	3b04      	subs	r3, #4
 80048c8:	0112      	lsls	r2, r2, #4
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	440b      	add	r3, r1
 80048ce:	761a      	strb	r2, [r3, #24]
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	e000e100 	.word	0xe000e100
 80048e0:	e000ed00 	.word	0xe000ed00

080048e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b089      	sub	sp, #36	; 0x24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f1c3 0307 	rsb	r3, r3, #7
 80048fe:	2b04      	cmp	r3, #4
 8004900:	bf28      	it	cs
 8004902:	2304      	movcs	r3, #4
 8004904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3304      	adds	r3, #4
 800490a:	2b06      	cmp	r3, #6
 800490c:	d902      	bls.n	8004914 <NVIC_EncodePriority+0x30>
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3b03      	subs	r3, #3
 8004912:	e000      	b.n	8004916 <NVIC_EncodePriority+0x32>
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004918:	f04f 32ff 	mov.w	r2, #4294967295
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43da      	mvns	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	401a      	ands	r2, r3
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800492c:	f04f 31ff 	mov.w	r1, #4294967295
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	fa01 f303 	lsl.w	r3, r1, r3
 8004936:	43d9      	mvns	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800493c:	4313      	orrs	r3, r2
         );
}
 800493e:	4618      	mov	r0, r3
 8004940:	3724      	adds	r7, #36	; 0x24
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3b01      	subs	r3, #1
 8004958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800495c:	d301      	bcc.n	8004962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800495e:	2301      	movs	r3, #1
 8004960:	e00f      	b.n	8004982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004962:	4a0a      	ldr	r2, [pc, #40]	; (800498c <SysTick_Config+0x40>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3b01      	subs	r3, #1
 8004968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800496a:	210f      	movs	r1, #15
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	f7ff ff8e 	bl	8004890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <SysTick_Config+0x40>)
 8004976:	2200      	movs	r2, #0
 8004978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800497a:	4b04      	ldr	r3, [pc, #16]	; (800498c <SysTick_Config+0x40>)
 800497c:	2207      	movs	r2, #7
 800497e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	e000e010 	.word	0xe000e010

08004990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff29 	bl	80047f0 <__NVIC_SetPriorityGrouping>
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	4603      	mov	r3, r0
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80049b4:	f7ff ff40 	bl	8004838 <__NVIC_GetPriorityGrouping>
 80049b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	6978      	ldr	r0, [r7, #20]
 80049c0:	f7ff ff90 	bl	80048e4 <NVIC_EncodePriority>
 80049c4:	4602      	mov	r2, r0
 80049c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ca:	4611      	mov	r1, r2
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff ff5f 	bl	8004890 <__NVIC_SetPriority>
}
 80049d2:	bf00      	nop
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	4603      	mov	r3, r0
 80049e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff ff33 	bl	8004854 <__NVIC_EnableIRQ>
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff ffa4 	bl	800494c <SysTick_Config>
 8004a04:	4603      	mov	r3, r0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d005      	beq.n	8004a32 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2204      	movs	r2, #4
 8004a2a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	73fb      	strb	r3, [r7, #15]
 8004a30:	e037      	b.n	8004aa2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 020e 	bic.w	r2, r2, #14
 8004a40:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a50:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a66:	f003 021f 	and.w	r2, r3, #31
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	2101      	movs	r1, #1
 8004a70:	fa01 f202 	lsl.w	r2, r1, r2
 8004a74:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a7e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00c      	beq.n	8004aa2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a96:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004aa0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d00d      	beq.n	8004af4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2204      	movs	r2, #4
 8004adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
 8004af2:	e047      	b.n	8004b84 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 020e 	bic.w	r2, r2, #14
 8004b02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b28:	f003 021f 	and.w	r2, r3, #31
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	2101      	movs	r1, #1
 8004b32:	fa01 f202 	lsl.w	r2, r1, r2
 8004b36:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b40:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00c      	beq.n	8004b64 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b58:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004b62:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	4798      	blx	r3
    }
  }
  return status;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b9e:	e15a      	b.n	8004e56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bac:	4013      	ands	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 814c 	beq.w	8004e50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d005      	beq.n	8004bd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d130      	bne.n	8004c32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	2203      	movs	r2, #3
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4013      	ands	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c06:	2201      	movs	r2, #1
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4013      	ands	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	f003 0201 	and.w	r2, r3, #1
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d017      	beq.n	8004c6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	005b      	lsls	r3, r3, #1
 8004c48:	2203      	movs	r2, #3
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4013      	ands	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d123      	bne.n	8004cc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	08da      	lsrs	r2, r3, #3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	3208      	adds	r2, #8
 8004c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	220f      	movs	r2, #15
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	08da      	lsrs	r2, r3, #3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3208      	adds	r2, #8
 8004cbc:	6939      	ldr	r1, [r7, #16]
 8004cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	2203      	movs	r2, #3
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f003 0203 	and.w	r2, r3, #3
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	693a      	ldr	r2, [r7, #16]
 8004cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 80a6 	beq.w	8004e50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d04:	4b5b      	ldr	r3, [pc, #364]	; (8004e74 <HAL_GPIO_Init+0x2e4>)
 8004d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d08:	4a5a      	ldr	r2, [pc, #360]	; (8004e74 <HAL_GPIO_Init+0x2e4>)
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	6613      	str	r3, [r2, #96]	; 0x60
 8004d10:	4b58      	ldr	r3, [pc, #352]	; (8004e74 <HAL_GPIO_Init+0x2e4>)
 8004d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d1c:	4a56      	ldr	r2, [pc, #344]	; (8004e78 <HAL_GPIO_Init+0x2e8>)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	089b      	lsrs	r3, r3, #2
 8004d22:	3302      	adds	r3, #2
 8004d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f003 0303 	and.w	r3, r3, #3
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	220f      	movs	r2, #15
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d46:	d01f      	beq.n	8004d88 <HAL_GPIO_Init+0x1f8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a4c      	ldr	r2, [pc, #304]	; (8004e7c <HAL_GPIO_Init+0x2ec>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d019      	beq.n	8004d84 <HAL_GPIO_Init+0x1f4>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a4b      	ldr	r2, [pc, #300]	; (8004e80 <HAL_GPIO_Init+0x2f0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <HAL_GPIO_Init+0x1f0>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a4a      	ldr	r2, [pc, #296]	; (8004e84 <HAL_GPIO_Init+0x2f4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00d      	beq.n	8004d7c <HAL_GPIO_Init+0x1ec>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a49      	ldr	r2, [pc, #292]	; (8004e88 <HAL_GPIO_Init+0x2f8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d007      	beq.n	8004d78 <HAL_GPIO_Init+0x1e8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a48      	ldr	r2, [pc, #288]	; (8004e8c <HAL_GPIO_Init+0x2fc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d101      	bne.n	8004d74 <HAL_GPIO_Init+0x1e4>
 8004d70:	2305      	movs	r3, #5
 8004d72:	e00a      	b.n	8004d8a <HAL_GPIO_Init+0x1fa>
 8004d74:	2306      	movs	r3, #6
 8004d76:	e008      	b.n	8004d8a <HAL_GPIO_Init+0x1fa>
 8004d78:	2304      	movs	r3, #4
 8004d7a:	e006      	b.n	8004d8a <HAL_GPIO_Init+0x1fa>
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e004      	b.n	8004d8a <HAL_GPIO_Init+0x1fa>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e002      	b.n	8004d8a <HAL_GPIO_Init+0x1fa>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_GPIO_Init+0x1fa>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	f002 0203 	and.w	r2, r2, #3
 8004d90:	0092      	lsls	r2, r2, #2
 8004d92:	4093      	lsls	r3, r2
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d9a:	4937      	ldr	r1, [pc, #220]	; (8004e78 <HAL_GPIO_Init+0x2e8>)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	089b      	lsrs	r3, r3, #2
 8004da0:	3302      	adds	r3, #2
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004da8:	4b39      	ldr	r3, [pc, #228]	; (8004e90 <HAL_GPIO_Init+0x300>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4013      	ands	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dcc:	4a30      	ldr	r2, [pc, #192]	; (8004e90 <HAL_GPIO_Init+0x300>)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004dd2:	4b2f      	ldr	r3, [pc, #188]	; (8004e90 <HAL_GPIO_Init+0x300>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	43db      	mvns	r3, r3
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4013      	ands	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004df6:	4a26      	ldr	r2, [pc, #152]	; (8004e90 <HAL_GPIO_Init+0x300>)
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004dfc:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <HAL_GPIO_Init+0x300>)
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e20:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <HAL_GPIO_Init+0x300>)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e26:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <HAL_GPIO_Init+0x300>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4013      	ands	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e4a:	4a11      	ldr	r2, [pc, #68]	; (8004e90 <HAL_GPIO_Init+0x300>)
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	3301      	adds	r3, #1
 8004e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f47f ae9d 	bne.w	8004ba0 <HAL_GPIO_Init+0x10>
  }
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	371c      	adds	r7, #28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	48000400 	.word	0x48000400
 8004e80:	48000800 	.word	0x48000800
 8004e84:	48000c00 	.word	0x48000c00
 8004e88:	48001000 	.word	0x48001000
 8004e8c:	48001400 	.word	0x48001400
 8004e90:	40010400 	.word	0x40010400

08004e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	807b      	strh	r3, [r7, #2]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ea4:	787b      	ldrb	r3, [r7, #1]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004eaa:	887a      	ldrh	r2, [r7, #2]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004eb0:	e002      	b.n	8004eb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004eb2:	887a      	ldrh	r2, [r7, #2]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ed6:	887a      	ldrh	r2, [r7, #2]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4013      	ands	r3, r2
 8004edc:	041a      	lsls	r2, r3, #16
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	43d9      	mvns	r1, r3
 8004ee2:	887b      	ldrh	r3, [r7, #2]
 8004ee4:	400b      	ands	r3, r1
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	619a      	str	r2, [r3, #24]
}
 8004eec:	bf00      	nop
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d141      	bne.n	8004f8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f06:	4b4b      	ldr	r3, [pc, #300]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f12:	d131      	bne.n	8004f78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f14:	4b47      	ldr	r3, [pc, #284]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f1a:	4a46      	ldr	r2, [pc, #280]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f24:	4b43      	ldr	r3, [pc, #268]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f2c:	4a41      	ldr	r2, [pc, #260]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f34:	4b40      	ldr	r3, [pc, #256]	; (8005038 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2232      	movs	r2, #50	; 0x32
 8004f3a:	fb02 f303 	mul.w	r3, r2, r3
 8004f3e:	4a3f      	ldr	r2, [pc, #252]	; (800503c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	0c9b      	lsrs	r3, r3, #18
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f4a:	e002      	b.n	8004f52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f52:	4b38      	ldr	r3, [pc, #224]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5e:	d102      	bne.n	8004f66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f2      	bne.n	8004f4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f66:	4b33      	ldr	r3, [pc, #204]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f72:	d158      	bne.n	8005026 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e057      	b.n	8005028 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f78:	4b2e      	ldr	r3, [pc, #184]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f7e:	4a2d      	ldr	r2, [pc, #180]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f88:	e04d      	b.n	8005026 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f90:	d141      	bne.n	8005016 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f92:	4b28      	ldr	r3, [pc, #160]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	d131      	bne.n	8005004 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fa0:	4b24      	ldr	r3, [pc, #144]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fa6:	4a23      	ldr	r2, [pc, #140]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fb0:	4b20      	ldr	r3, [pc, #128]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fb8:	4a1e      	ldr	r2, [pc, #120]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fc0:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2232      	movs	r2, #50	; 0x32
 8004fc6:	fb02 f303 	mul.w	r3, r2, r3
 8004fca:	4a1c      	ldr	r2, [pc, #112]	; (800503c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd0:	0c9b      	lsrs	r3, r3, #18
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fd6:	e002      	b.n	8004fde <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fde:	4b15      	ldr	r3, [pc, #84]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fea:	d102      	bne.n	8004ff2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f2      	bne.n	8004fd8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ffe:	d112      	bne.n	8005026 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e011      	b.n	8005028 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800500a:	4a0a      	ldr	r2, [pc, #40]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800500c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005010:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005014:	e007      	b.n	8005026 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005016:	4b07      	ldr	r3, [pc, #28]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800501e:	4a05      	ldr	r2, [pc, #20]	; (8005034 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005020:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005024:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40007000 	.word	0x40007000
 8005038:	20000000 	.word	0x20000000
 800503c:	431bde83 	.word	0x431bde83

08005040 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	4a04      	ldr	r2, [pc, #16]	; (800505c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800504a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800504e:	6093      	str	r3, [r2, #8]
}
 8005050:	bf00      	nop
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40007000 	.word	0x40007000

08005060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e306      	b.n	8005680 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d075      	beq.n	800516a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800507e:	4b97      	ldr	r3, [pc, #604]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 030c 	and.w	r3, r3, #12
 8005086:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005088:	4b94      	ldr	r3, [pc, #592]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	2b0c      	cmp	r3, #12
 8005096:	d102      	bne.n	800509e <HAL_RCC_OscConfig+0x3e>
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	2b03      	cmp	r3, #3
 800509c:	d002      	beq.n	80050a4 <HAL_RCC_OscConfig+0x44>
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d10b      	bne.n	80050bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050a4:	4b8d      	ldr	r3, [pc, #564]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d05b      	beq.n	8005168 <HAL_RCC_OscConfig+0x108>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d157      	bne.n	8005168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e2e1      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c4:	d106      	bne.n	80050d4 <HAL_RCC_OscConfig+0x74>
 80050c6:	4b85      	ldr	r3, [pc, #532]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a84      	ldr	r2, [pc, #528]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80050cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	e01d      	b.n	8005110 <HAL_RCC_OscConfig+0xb0>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050dc:	d10c      	bne.n	80050f8 <HAL_RCC_OscConfig+0x98>
 80050de:	4b7f      	ldr	r3, [pc, #508]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a7e      	ldr	r2, [pc, #504]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80050e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	4b7c      	ldr	r3, [pc, #496]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a7b      	ldr	r2, [pc, #492]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80050f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	e00b      	b.n	8005110 <HAL_RCC_OscConfig+0xb0>
 80050f8:	4b78      	ldr	r3, [pc, #480]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a77      	ldr	r2, [pc, #476]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80050fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	4b75      	ldr	r3, [pc, #468]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a74      	ldr	r2, [pc, #464]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 800510a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800510e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d013      	beq.n	8005140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fc fef6 	bl	8001f08 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005120:	f7fc fef2 	bl	8001f08 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	; 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e2a6      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005132:	4b6a      	ldr	r3, [pc, #424]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f0      	beq.n	8005120 <HAL_RCC_OscConfig+0xc0>
 800513e:	e014      	b.n	800516a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005140:	f7fc fee2 	bl	8001f08 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005148:	f7fc fede 	bl	8001f08 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b64      	cmp	r3, #100	; 0x64
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e292      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800515a:	4b60      	ldr	r3, [pc, #384]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1f0      	bne.n	8005148 <HAL_RCC_OscConfig+0xe8>
 8005166:	e000      	b.n	800516a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d075      	beq.n	8005262 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005176:	4b59      	ldr	r3, [pc, #356]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 030c 	and.w	r3, r3, #12
 800517e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005180:	4b56      	ldr	r3, [pc, #344]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0303 	and.w	r3, r3, #3
 8005188:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	2b0c      	cmp	r3, #12
 800518e:	d102      	bne.n	8005196 <HAL_RCC_OscConfig+0x136>
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d002      	beq.n	800519c <HAL_RCC_OscConfig+0x13c>
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	2b04      	cmp	r3, #4
 800519a:	d11f      	bne.n	80051dc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800519c:	4b4f      	ldr	r3, [pc, #316]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_RCC_OscConfig+0x154>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e265      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b4:	4b49      	ldr	r3, [pc, #292]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	061b      	lsls	r3, r3, #24
 80051c2:	4946      	ldr	r1, [pc, #280]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80051c8:	4b45      	ldr	r3, [pc, #276]	; (80052e0 <HAL_RCC_OscConfig+0x280>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fc fe4f 	bl	8001e70 <HAL_InitTick>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d043      	beq.n	8005260 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e251      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d023      	beq.n	800522c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e4:	4b3d      	ldr	r3, [pc, #244]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a3c      	ldr	r2, [pc, #240]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80051ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fc fe8a 	bl	8001f08 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051f8:	f7fc fe86 	bl	8001f08 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e23a      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800520a:	4b34      	ldr	r3, [pc, #208]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005216:	4b31      	ldr	r3, [pc, #196]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	061b      	lsls	r3, r3, #24
 8005224:	492d      	ldr	r1, [pc, #180]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 8005226:	4313      	orrs	r3, r2
 8005228:	604b      	str	r3, [r1, #4]
 800522a:	e01a      	b.n	8005262 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522c:	4b2b      	ldr	r3, [pc, #172]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 8005232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005238:	f7fc fe66 	bl	8001f08 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005240:	f7fc fe62 	bl	8001f08 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e216      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005252:	4b22      	ldr	r3, [pc, #136]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f0      	bne.n	8005240 <HAL_RCC_OscConfig+0x1e0>
 800525e:	e000      	b.n	8005262 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005260:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b00      	cmp	r3, #0
 800526c:	d041      	beq.n	80052f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01c      	beq.n	80052b0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005276:	4b19      	ldr	r3, [pc, #100]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 8005278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527c:	4a17      	ldr	r2, [pc, #92]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005286:	f7fc fe3f 	bl	8001f08 <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800528e:	f7fc fe3b 	bl	8001f08 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e1ef      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052a0:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80052a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0ef      	beq.n	800528e <HAL_RCC_OscConfig+0x22e>
 80052ae:	e020      	b.n	80052f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052b0:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80052b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052b6:	4a09      	ldr	r2, [pc, #36]	; (80052dc <HAL_RCC_OscConfig+0x27c>)
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fc fe22 	bl	8001f08 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052c6:	e00d      	b.n	80052e4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c8:	f7fc fe1e 	bl	8001f08 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d906      	bls.n	80052e4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e1d2      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
 80052da:	bf00      	nop
 80052dc:	40021000 	.word	0x40021000
 80052e0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052e4:	4b8c      	ldr	r3, [pc, #560]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 80052e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1ea      	bne.n	80052c8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0304 	and.w	r3, r3, #4
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 80a6 	beq.w	800544c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005300:	2300      	movs	r3, #0
 8005302:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005304:	4b84      	ldr	r3, [pc, #528]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 8005306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCC_OscConfig+0x2b4>
 8005310:	2301      	movs	r3, #1
 8005312:	e000      	b.n	8005316 <HAL_RCC_OscConfig+0x2b6>
 8005314:	2300      	movs	r3, #0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00d      	beq.n	8005336 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800531a:	4b7f      	ldr	r3, [pc, #508]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 800531c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800531e:	4a7e      	ldr	r2, [pc, #504]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 8005320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005324:	6593      	str	r3, [r2, #88]	; 0x58
 8005326:	4b7c      	ldr	r3, [pc, #496]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 8005328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005332:	2301      	movs	r3, #1
 8005334:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005336:	4b79      	ldr	r3, [pc, #484]	; (800551c <HAL_RCC_OscConfig+0x4bc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d118      	bne.n	8005374 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005342:	4b76      	ldr	r3, [pc, #472]	; (800551c <HAL_RCC_OscConfig+0x4bc>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a75      	ldr	r2, [pc, #468]	; (800551c <HAL_RCC_OscConfig+0x4bc>)
 8005348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800534c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800534e:	f7fc fddb 	bl	8001f08 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005356:	f7fc fdd7 	bl	8001f08 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e18b      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005368:	4b6c      	ldr	r3, [pc, #432]	; (800551c <HAL_RCC_OscConfig+0x4bc>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d108      	bne.n	800538e <HAL_RCC_OscConfig+0x32e>
 800537c:	4b66      	ldr	r3, [pc, #408]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 800537e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005382:	4a65      	ldr	r2, [pc, #404]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 8005384:	f043 0301 	orr.w	r3, r3, #1
 8005388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800538c:	e024      	b.n	80053d8 <HAL_RCC_OscConfig+0x378>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b05      	cmp	r3, #5
 8005394:	d110      	bne.n	80053b8 <HAL_RCC_OscConfig+0x358>
 8005396:	4b60      	ldr	r3, [pc, #384]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 8005398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539c:	4a5e      	ldr	r2, [pc, #376]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 800539e:	f043 0304 	orr.w	r3, r3, #4
 80053a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053a6:	4b5c      	ldr	r3, [pc, #368]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ac:	4a5a      	ldr	r2, [pc, #360]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053b6:	e00f      	b.n	80053d8 <HAL_RCC_OscConfig+0x378>
 80053b8:	4b57      	ldr	r3, [pc, #348]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 80053ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053be:	4a56      	ldr	r2, [pc, #344]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 80053c0:	f023 0301 	bic.w	r3, r3, #1
 80053c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053c8:	4b53      	ldr	r3, [pc, #332]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 80053ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ce:	4a52      	ldr	r2, [pc, #328]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 80053d0:	f023 0304 	bic.w	r3, r3, #4
 80053d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d016      	beq.n	800540e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e0:	f7fc fd92 	bl	8001f08 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e6:	e00a      	b.n	80053fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e8:	f7fc fd8e 	bl	8001f08 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e140      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053fe:	4b46      	ldr	r3, [pc, #280]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 8005400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0ed      	beq.n	80053e8 <HAL_RCC_OscConfig+0x388>
 800540c:	e015      	b.n	800543a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800540e:	f7fc fd7b 	bl	8001f08 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005414:	e00a      	b.n	800542c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005416:	f7fc fd77 	bl	8001f08 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	f241 3288 	movw	r2, #5000	; 0x1388
 8005424:	4293      	cmp	r3, r2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e129      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800542c:	4b3a      	ldr	r3, [pc, #232]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1ed      	bne.n	8005416 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800543a:	7ffb      	ldrb	r3, [r7, #31]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005440:	4b35      	ldr	r3, [pc, #212]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 8005442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005444:	4a34      	ldr	r2, [pc, #208]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 8005446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	d03c      	beq.n	80054d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01c      	beq.n	800549a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005460:	4b2d      	ldr	r3, [pc, #180]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 8005462:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005466:	4a2c      	ldr	r2, [pc, #176]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 8005468:	f043 0301 	orr.w	r3, r3, #1
 800546c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005470:	f7fc fd4a 	bl	8001f08 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005478:	f7fc fd46 	bl	8001f08 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e0fa      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800548a:	4b23      	ldr	r3, [pc, #140]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 800548c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0ef      	beq.n	8005478 <HAL_RCC_OscConfig+0x418>
 8005498:	e01b      	b.n	80054d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800549a:	4b1f      	ldr	r3, [pc, #124]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 800549c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054a0:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054aa:	f7fc fd2d 	bl	8001f08 <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054b2:	f7fc fd29 	bl	8001f08 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e0dd      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80054c4:	4b14      	ldr	r3, [pc, #80]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 80054c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1ef      	bne.n	80054b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 80d1 	beq.w	800567e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054dc:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f003 030c 	and.w	r3, r3, #12
 80054e4:	2b0c      	cmp	r3, #12
 80054e6:	f000 808b 	beq.w	8005600 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d15e      	bne.n	80055b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f2:	4b09      	ldr	r3, [pc, #36]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a08      	ldr	r2, [pc, #32]	; (8005518 <HAL_RCC_OscConfig+0x4b8>)
 80054f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fe:	f7fc fd03 	bl	8001f08 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005504:	e00c      	b.n	8005520 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005506:	f7fc fcff 	bl	8001f08 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d905      	bls.n	8005520 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e0b3      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
 8005518:	40021000 	.word	0x40021000
 800551c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005520:	4b59      	ldr	r3, [pc, #356]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1ec      	bne.n	8005506 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800552c:	4b56      	ldr	r3, [pc, #344]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	4b56      	ldr	r3, [pc, #344]	; (800568c <HAL_RCC_OscConfig+0x62c>)
 8005532:	4013      	ands	r3, r2
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6a11      	ldr	r1, [r2, #32]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800553c:	3a01      	subs	r2, #1
 800553e:	0112      	lsls	r2, r2, #4
 8005540:	4311      	orrs	r1, r2
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005546:	0212      	lsls	r2, r2, #8
 8005548:	4311      	orrs	r1, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800554e:	0852      	lsrs	r2, r2, #1
 8005550:	3a01      	subs	r2, #1
 8005552:	0552      	lsls	r2, r2, #21
 8005554:	4311      	orrs	r1, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800555a:	0852      	lsrs	r2, r2, #1
 800555c:	3a01      	subs	r2, #1
 800555e:	0652      	lsls	r2, r2, #25
 8005560:	4311      	orrs	r1, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005566:	06d2      	lsls	r2, r2, #27
 8005568:	430a      	orrs	r2, r1
 800556a:	4947      	ldr	r1, [pc, #284]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 800556c:	4313      	orrs	r3, r2
 800556e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005570:	4b45      	ldr	r3, [pc, #276]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a44      	ldr	r2, [pc, #272]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 8005576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800557a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800557c:	4b42      	ldr	r3, [pc, #264]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4a41      	ldr	r2, [pc, #260]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 8005582:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005586:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005588:	f7fc fcbe 	bl	8001f08 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005590:	f7fc fcba 	bl	8001f08 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e06e      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a2:	4b39      	ldr	r3, [pc, #228]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0x530>
 80055ae:	e066      	b.n	800567e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b0:	4b35      	ldr	r3, [pc, #212]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a34      	ldr	r2, [pc, #208]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 80055b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ba:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80055bc:	4b32      	ldr	r3, [pc, #200]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	4a31      	ldr	r2, [pc, #196]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 80055c2:	f023 0303 	bic.w	r3, r3, #3
 80055c6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80055c8:	4b2f      	ldr	r3, [pc, #188]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4a2e      	ldr	r2, [pc, #184]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 80055ce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80055d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d8:	f7fc fc96 	bl	8001f08 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055e0:	f7fc fc92 	bl	8001f08 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e046      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055f2:	4b25      	ldr	r3, [pc, #148]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f0      	bne.n	80055e0 <HAL_RCC_OscConfig+0x580>
 80055fe:	e03e      	b.n	800567e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d101      	bne.n	800560c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e039      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800560c:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <HAL_RCC_OscConfig+0x628>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f003 0203 	and.w	r2, r3, #3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	429a      	cmp	r2, r3
 800561e:	d12c      	bne.n	800567a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	3b01      	subs	r3, #1
 800562c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d123      	bne.n	800567a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d11b      	bne.n	800567a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800564e:	429a      	cmp	r2, r3
 8005650:	d113      	bne.n	800567a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	085b      	lsrs	r3, r3, #1
 800565e:	3b01      	subs	r3, #1
 8005660:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005662:	429a      	cmp	r2, r3
 8005664:	d109      	bne.n	800567a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005670:	085b      	lsrs	r3, r3, #1
 8005672:	3b01      	subs	r3, #1
 8005674:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005676:	429a      	cmp	r2, r3
 8005678:	d001      	beq.n	800567e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40021000 	.word	0x40021000
 800568c:	019f800c 	.word	0x019f800c

08005690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800569a:	2300      	movs	r3, #0
 800569c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e11e      	b.n	80058e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056a8:	4b91      	ldr	r3, [pc, #580]	; (80058f0 <HAL_RCC_ClockConfig+0x260>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d910      	bls.n	80056d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b6:	4b8e      	ldr	r3, [pc, #568]	; (80058f0 <HAL_RCC_ClockConfig+0x260>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f023 020f 	bic.w	r2, r3, #15
 80056be:	498c      	ldr	r1, [pc, #560]	; (80058f0 <HAL_RCC_ClockConfig+0x260>)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056c6:	4b8a      	ldr	r3, [pc, #552]	; (80058f0 <HAL_RCC_ClockConfig+0x260>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e106      	b.n	80058e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d073      	beq.n	80057cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d129      	bne.n	8005740 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ec:	4b81      	ldr	r3, [pc, #516]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e0f4      	b.n	80058e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80056fc:	f000 f99e 	bl	8005a3c <RCC_GetSysClockFreqFromPLLSource>
 8005700:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4a7c      	ldr	r2, [pc, #496]	; (80058f8 <HAL_RCC_ClockConfig+0x268>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d93f      	bls.n	800578a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800570a:	4b7a      	ldr	r3, [pc, #488]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d009      	beq.n	800572a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800571e:	2b00      	cmp	r3, #0
 8005720:	d033      	beq.n	800578a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005726:	2b00      	cmp	r3, #0
 8005728:	d12f      	bne.n	800578a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800572a:	4b72      	ldr	r3, [pc, #456]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005732:	4a70      	ldr	r2, [pc, #448]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 8005734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005738:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800573a:	2380      	movs	r3, #128	; 0x80
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	e024      	b.n	800578a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d107      	bne.n	8005758 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005748:	4b6a      	ldr	r3, [pc, #424]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d109      	bne.n	8005768 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e0c6      	b.n	80058e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005758:	4b66      	ldr	r3, [pc, #408]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e0be      	b.n	80058e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005768:	f000 f8ce 	bl	8005908 <HAL_RCC_GetSysClockFreq>
 800576c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4a61      	ldr	r2, [pc, #388]	; (80058f8 <HAL_RCC_ClockConfig+0x268>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d909      	bls.n	800578a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005776:	4b5f      	ldr	r3, [pc, #380]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800577e:	4a5d      	ldr	r2, [pc, #372]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 8005780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005784:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005786:	2380      	movs	r3, #128	; 0x80
 8005788:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800578a:	4b5a      	ldr	r3, [pc, #360]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f023 0203 	bic.w	r2, r3, #3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4957      	ldr	r1, [pc, #348]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 8005798:	4313      	orrs	r3, r2
 800579a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800579c:	f7fc fbb4 	bl	8001f08 <HAL_GetTick>
 80057a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a2:	e00a      	b.n	80057ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a4:	f7fc fbb0 	bl	8001f08 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e095      	b.n	80058e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ba:	4b4e      	ldr	r3, [pc, #312]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 020c 	and.w	r2, r3, #12
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d1eb      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d023      	beq.n	8005820 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0304 	and.w	r3, r3, #4
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057e4:	4b43      	ldr	r3, [pc, #268]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	4a42      	ldr	r2, [pc, #264]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 80057ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80057ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0308 	and.w	r3, r3, #8
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80057fc:	4b3d      	ldr	r3, [pc, #244]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005804:	4a3b      	ldr	r2, [pc, #236]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 8005806:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800580a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800580c:	4b39      	ldr	r3, [pc, #228]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	4936      	ldr	r1, [pc, #216]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 800581a:	4313      	orrs	r3, r2
 800581c:	608b      	str	r3, [r1, #8]
 800581e:	e008      	b.n	8005832 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2b80      	cmp	r3, #128	; 0x80
 8005824:	d105      	bne.n	8005832 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005826:	4b33      	ldr	r3, [pc, #204]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	4a32      	ldr	r2, [pc, #200]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 800582c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005830:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005832:	4b2f      	ldr	r3, [pc, #188]	; (80058f0 <HAL_RCC_ClockConfig+0x260>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d21d      	bcs.n	800587c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005840:	4b2b      	ldr	r3, [pc, #172]	; (80058f0 <HAL_RCC_ClockConfig+0x260>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f023 020f 	bic.w	r2, r3, #15
 8005848:	4929      	ldr	r1, [pc, #164]	; (80058f0 <HAL_RCC_ClockConfig+0x260>)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	4313      	orrs	r3, r2
 800584e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005850:	f7fc fb5a 	bl	8001f08 <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005856:	e00a      	b.n	800586e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005858:	f7fc fb56 	bl	8001f08 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	; 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d901      	bls.n	800586e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800586a:	2303      	movs	r3, #3
 800586c:	e03b      	b.n	80058e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800586e:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <HAL_RCC_ClockConfig+0x260>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 030f 	and.w	r3, r3, #15
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d1ed      	bne.n	8005858 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005888:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4917      	ldr	r1, [pc, #92]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 8005896:	4313      	orrs	r3, r2
 8005898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058a6:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	490f      	ldr	r1, [pc, #60]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80058ba:	f000 f825 	bl	8005908 <HAL_RCC_GetSysClockFreq>
 80058be:	4602      	mov	r2, r0
 80058c0:	4b0c      	ldr	r3, [pc, #48]	; (80058f4 <HAL_RCC_ClockConfig+0x264>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	091b      	lsrs	r3, r3, #4
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	490c      	ldr	r1, [pc, #48]	; (80058fc <HAL_RCC_ClockConfig+0x26c>)
 80058cc:	5ccb      	ldrb	r3, [r1, r3]
 80058ce:	f003 031f 	and.w	r3, r3, #31
 80058d2:	fa22 f303 	lsr.w	r3, r2, r3
 80058d6:	4a0a      	ldr	r2, [pc, #40]	; (8005900 <HAL_RCC_ClockConfig+0x270>)
 80058d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80058da:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <HAL_RCC_ClockConfig+0x274>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fc fac6 	bl	8001e70 <HAL_InitTick>
 80058e4:	4603      	mov	r3, r0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	40022000 	.word	0x40022000
 80058f4:	40021000 	.word	0x40021000
 80058f8:	04c4b400 	.word	0x04c4b400
 80058fc:	0800e2f8 	.word	0x0800e2f8
 8005900:	20000000 	.word	0x20000000
 8005904:	20000004 	.word	0x20000004

08005908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800590e:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 030c 	and.w	r3, r3, #12
 8005916:	2b04      	cmp	r3, #4
 8005918:	d102      	bne.n	8005920 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800591a:	4b2a      	ldr	r3, [pc, #168]	; (80059c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800591c:	613b      	str	r3, [r7, #16]
 800591e:	e047      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005920:	4b27      	ldr	r3, [pc, #156]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 030c 	and.w	r3, r3, #12
 8005928:	2b08      	cmp	r3, #8
 800592a:	d102      	bne.n	8005932 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800592c:	4b26      	ldr	r3, [pc, #152]	; (80059c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	e03e      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005932:	4b23      	ldr	r3, [pc, #140]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
 800593a:	2b0c      	cmp	r3, #12
 800593c:	d136      	bne.n	80059ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800593e:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005948:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	091b      	lsrs	r3, r3, #4
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	3301      	adds	r3, #1
 8005954:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b03      	cmp	r3, #3
 800595a:	d10c      	bne.n	8005976 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800595c:	4a1a      	ldr	r2, [pc, #104]	; (80059c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	fbb2 f3f3 	udiv	r3, r2, r3
 8005964:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005966:	68d2      	ldr	r2, [r2, #12]
 8005968:	0a12      	lsrs	r2, r2, #8
 800596a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800596e:	fb02 f303 	mul.w	r3, r2, r3
 8005972:	617b      	str	r3, [r7, #20]
      break;
 8005974:	e00c      	b.n	8005990 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005976:	4a13      	ldr	r2, [pc, #76]	; (80059c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	fbb2 f3f3 	udiv	r3, r2, r3
 800597e:	4a10      	ldr	r2, [pc, #64]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005980:	68d2      	ldr	r2, [r2, #12]
 8005982:	0a12      	lsrs	r2, r2, #8
 8005984:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005988:	fb02 f303 	mul.w	r3, r2, r3
 800598c:	617b      	str	r3, [r7, #20]
      break;
 800598e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005990:	4b0b      	ldr	r3, [pc, #44]	; (80059c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	0e5b      	lsrs	r3, r3, #25
 8005996:	f003 0303 	and.w	r3, r3, #3
 800599a:	3301      	adds	r3, #1
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	e001      	b.n	80059b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80059b0:	693b      	ldr	r3, [r7, #16]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	371c      	adds	r7, #28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40021000 	.word	0x40021000
 80059c4:	00f42400 	.word	0x00f42400
 80059c8:	007a1200 	.word	0x007a1200

080059cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059d0:	4b03      	ldr	r3, [pc, #12]	; (80059e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80059d2:	681b      	ldr	r3, [r3, #0]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000000 	.word	0x20000000

080059e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80059e8:	f7ff fff0 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 80059ec:	4602      	mov	r2, r0
 80059ee:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	0a1b      	lsrs	r3, r3, #8
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	4904      	ldr	r1, [pc, #16]	; (8005a0c <HAL_RCC_GetPCLK1Freq+0x28>)
 80059fa:	5ccb      	ldrb	r3, [r1, r3]
 80059fc:	f003 031f 	and.w	r3, r3, #31
 8005a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40021000 	.word	0x40021000
 8005a0c:	0800e308 	.word	0x0800e308

08005a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005a14:	f7ff ffda 	bl	80059cc <HAL_RCC_GetHCLKFreq>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	0adb      	lsrs	r3, r3, #11
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	4904      	ldr	r1, [pc, #16]	; (8005a38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a26:	5ccb      	ldrb	r3, [r1, r3]
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40021000 	.word	0x40021000
 8005a38:	0800e308 	.word	0x0800e308

08005a3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a42:	4b1e      	ldr	r3, [pc, #120]	; (8005abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	3301      	adds	r3, #1
 8005a58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d10c      	bne.n	8005a7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a60:	4a17      	ldr	r2, [pc, #92]	; (8005ac0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	4a14      	ldr	r2, [pc, #80]	; (8005abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a6a:	68d2      	ldr	r2, [r2, #12]
 8005a6c:	0a12      	lsrs	r2, r2, #8
 8005a6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	617b      	str	r3, [r7, #20]
    break;
 8005a78:	e00c      	b.n	8005a94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a7a:	4a12      	ldr	r2, [pc, #72]	; (8005ac4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a82:	4a0e      	ldr	r2, [pc, #56]	; (8005abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a84:	68d2      	ldr	r2, [r2, #12]
 8005a86:	0a12      	lsrs	r2, r2, #8
 8005a88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a8c:	fb02 f303 	mul.w	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]
    break;
 8005a92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a94:	4b09      	ldr	r3, [pc, #36]	; (8005abc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	0e5b      	lsrs	r3, r3, #25
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005aae:	687b      	ldr	r3, [r7, #4]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	371c      	adds	r7, #28
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	40021000 	.word	0x40021000
 8005ac0:	007a1200 	.word	0x007a1200
 8005ac4:	00f42400 	.word	0x00f42400

08005ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 8098 	beq.w	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aea:	4b43      	ldr	r3, [pc, #268]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10d      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005af6:	4b40      	ldr	r3, [pc, #256]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005afa:	4a3f      	ldr	r2, [pc, #252]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b00:	6593      	str	r3, [r2, #88]	; 0x58
 8005b02:	4b3d      	ldr	r3, [pc, #244]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0a:	60bb      	str	r3, [r7, #8]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b12:	4b3a      	ldr	r3, [pc, #232]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a39      	ldr	r2, [pc, #228]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b1e:	f7fc f9f3 	bl	8001f08 <HAL_GetTick>
 8005b22:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b24:	e009      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b26:	f7fc f9ef 	bl	8001f08 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d902      	bls.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	74fb      	strb	r3, [r7, #19]
        break;
 8005b38:	e005      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b3a:	4b30      	ldr	r3, [pc, #192]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d0ef      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005b46:	7cfb      	ldrb	r3, [r7, #19]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d159      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b4c:	4b2a      	ldr	r3, [pc, #168]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b56:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01e      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d019      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b68:	4b23      	ldr	r3, [pc, #140]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b74:	4b20      	ldr	r3, [pc, #128]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7a:	4a1f      	ldr	r2, [pc, #124]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b84:	4b1c      	ldr	r3, [pc, #112]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8a:	4a1b      	ldr	r2, [pc, #108]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b94:	4a18      	ldr	r2, [pc, #96]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d016      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba6:	f7fc f9af 	bl	8001f08 <HAL_GetTick>
 8005baa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bac:	e00b      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bae:	f7fc f9ab 	bl	8001f08 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d902      	bls.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	74fb      	strb	r3, [r7, #19]
            break;
 8005bc4:	e006      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005bc6:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ec      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005bd4:	7cfb      	ldrb	r3, [r7, #19]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10b      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bda:	4b07      	ldr	r3, [pc, #28]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be8:	4903      	ldr	r1, [pc, #12]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005bf0:	e008      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005bf2:	7cfb      	ldrb	r3, [r7, #19]
 8005bf4:	74bb      	strb	r3, [r7, #18]
 8005bf6:	e005      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c00:	7cfb      	ldrb	r3, [r7, #19]
 8005c02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c04:	7c7b      	ldrb	r3, [r7, #17]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d105      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c0a:	4ba7      	ldr	r3, [pc, #668]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0e:	4aa6      	ldr	r2, [pc, #664]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c22:	4ba1      	ldr	r3, [pc, #644]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c28:	f023 0203 	bic.w	r2, r3, #3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	499d      	ldr	r1, [pc, #628]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c44:	4b98      	ldr	r3, [pc, #608]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4a:	f023 020c 	bic.w	r2, r3, #12
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	4995      	ldr	r1, [pc, #596]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0304 	and.w	r3, r3, #4
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c66:	4b90      	ldr	r3, [pc, #576]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	498c      	ldr	r1, [pc, #560]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0308 	and.w	r3, r3, #8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00a      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c88:	4b87      	ldr	r3, [pc, #540]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	4984      	ldr	r1, [pc, #528]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005caa:	4b7f      	ldr	r3, [pc, #508]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	497b      	ldr	r1, [pc, #492]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00a      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ccc:	4b76      	ldr	r3, [pc, #472]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	4973      	ldr	r1, [pc, #460]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00a      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cee:	4b6e      	ldr	r3, [pc, #440]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	496a      	ldr	r1, [pc, #424]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d10:	4b65      	ldr	r3, [pc, #404]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d16:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	4962      	ldr	r1, [pc, #392]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d20:	4313      	orrs	r3, r2
 8005d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d32:	4b5d      	ldr	r3, [pc, #372]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	4959      	ldr	r1, [pc, #356]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d00a      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d54:	4b54      	ldr	r3, [pc, #336]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d5a:	f023 0203 	bic.w	r2, r3, #3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d62:	4951      	ldr	r1, [pc, #324]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00a      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d76:	4b4c      	ldr	r3, [pc, #304]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	4948      	ldr	r1, [pc, #288]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d015      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d98:	4b43      	ldr	r3, [pc, #268]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	4940      	ldr	r1, [pc, #256]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db6:	d105      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005db8:	4b3b      	ldr	r3, [pc, #236]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4a3a      	ldr	r2, [pc, #232]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005dd0:	4b35      	ldr	r3, [pc, #212]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	4932      	ldr	r1, [pc, #200]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dee:	d105      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005df0:	4b2d      	ldr	r3, [pc, #180]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	4a2c      	ldr	r2, [pc, #176]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dfa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d015      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e08:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	4924      	ldr	r1, [pc, #144]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e26:	d105      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e28:	4b1f      	ldr	r3, [pc, #124]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	4a1e      	ldr	r2, [pc, #120]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e32:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d015      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e40:	4b19      	ldr	r3, [pc, #100]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	4916      	ldr	r1, [pc, #88]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e5e:	d105      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e60:	4b11      	ldr	r3, [pc, #68]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a10      	ldr	r2, [pc, #64]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e6a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d019      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e78:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e86:	4908      	ldr	r1, [pc, #32]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e96:	d109      	bne.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e98:	4b03      	ldr	r3, [pc, #12]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4a02      	ldr	r2, [pc, #8]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ea2:	60d3      	str	r3, [r2, #12]
 8005ea4:	e002      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005ea6:	bf00      	nop
 8005ea8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d015      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005eb8:	4b29      	ldr	r3, [pc, #164]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ebe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec6:	4926      	ldr	r1, [pc, #152]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ed6:	d105      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ed8:	4b21      	ldr	r3, [pc, #132]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	4a20      	ldr	r2, [pc, #128]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d015      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ef0:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005efe:	4918      	ldr	r1, [pc, #96]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0e:	d105      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f10:	4b13      	ldr	r3, [pc, #76]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	4a12      	ldr	r2, [pc, #72]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f1a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d015      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005f28:	4b0d      	ldr	r3, [pc, #52]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	490a      	ldr	r1, [pc, #40]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f46:	d105      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f48:	4b05      	ldr	r3, [pc, #20]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	4a04      	ldr	r2, [pc, #16]	; (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005f54:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40021000 	.word	0x40021000

08005f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e049      	b.n	800600a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fb fd46 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	f000 fbd2 	bl	800674c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e049      	b.n	80060b8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f841 	bl	80060c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2202      	movs	r2, #2
 8006042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	3304      	adds	r3, #4
 800604e:	4619      	mov	r1, r3
 8006050:	4610      	mov	r0, r2
 8006052:	f000 fb7b 	bl	800674c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d109      	bne.n	80060f8 <HAL_TIM_PWM_Start+0x24>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	e03c      	b.n	8006172 <HAL_TIM_PWM_Start+0x9e>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d109      	bne.n	8006112 <HAL_TIM_PWM_Start+0x3e>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b01      	cmp	r3, #1
 8006108:	bf14      	ite	ne
 800610a:	2301      	movne	r3, #1
 800610c:	2300      	moveq	r3, #0
 800610e:	b2db      	uxtb	r3, r3
 8006110:	e02f      	b.n	8006172 <HAL_TIM_PWM_Start+0x9e>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b08      	cmp	r3, #8
 8006116:	d109      	bne.n	800612c <HAL_TIM_PWM_Start+0x58>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b01      	cmp	r3, #1
 8006122:	bf14      	ite	ne
 8006124:	2301      	movne	r3, #1
 8006126:	2300      	moveq	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	e022      	b.n	8006172 <HAL_TIM_PWM_Start+0x9e>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	2b0c      	cmp	r3, #12
 8006130:	d109      	bne.n	8006146 <HAL_TIM_PWM_Start+0x72>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	bf14      	ite	ne
 800613e:	2301      	movne	r3, #1
 8006140:	2300      	moveq	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	e015      	b.n	8006172 <HAL_TIM_PWM_Start+0x9e>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b10      	cmp	r3, #16
 800614a:	d109      	bne.n	8006160 <HAL_TIM_PWM_Start+0x8c>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b01      	cmp	r3, #1
 8006156:	bf14      	ite	ne
 8006158:	2301      	movne	r3, #1
 800615a:	2300      	moveq	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	e008      	b.n	8006172 <HAL_TIM_PWM_Start+0x9e>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b01      	cmp	r3, #1
 800616a:	bf14      	ite	ne
 800616c:	2301      	movne	r3, #1
 800616e:	2300      	moveq	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e0a6      	b.n	80062c8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d104      	bne.n	800618a <HAL_TIM_PWM_Start+0xb6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006188:	e023      	b.n	80061d2 <HAL_TIM_PWM_Start+0xfe>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	2b04      	cmp	r3, #4
 800618e:	d104      	bne.n	800619a <HAL_TIM_PWM_Start+0xc6>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006198:	e01b      	b.n	80061d2 <HAL_TIM_PWM_Start+0xfe>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b08      	cmp	r3, #8
 800619e:	d104      	bne.n	80061aa <HAL_TIM_PWM_Start+0xd6>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a8:	e013      	b.n	80061d2 <HAL_TIM_PWM_Start+0xfe>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b0c      	cmp	r3, #12
 80061ae:	d104      	bne.n	80061ba <HAL_TIM_PWM_Start+0xe6>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061b8:	e00b      	b.n	80061d2 <HAL_TIM_PWM_Start+0xfe>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d104      	bne.n	80061ca <HAL_TIM_PWM_Start+0xf6>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c8:	e003      	b.n	80061d2 <HAL_TIM_PWM_Start+0xfe>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2201      	movs	r2, #1
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 ff24 	bl	8007028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a3a      	ldr	r2, [pc, #232]	; (80062d0 <HAL_TIM_PWM_Start+0x1fc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d018      	beq.n	800621c <HAL_TIM_PWM_Start+0x148>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a39      	ldr	r2, [pc, #228]	; (80062d4 <HAL_TIM_PWM_Start+0x200>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <HAL_TIM_PWM_Start+0x148>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a37      	ldr	r2, [pc, #220]	; (80062d8 <HAL_TIM_PWM_Start+0x204>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00e      	beq.n	800621c <HAL_TIM_PWM_Start+0x148>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a36      	ldr	r2, [pc, #216]	; (80062dc <HAL_TIM_PWM_Start+0x208>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d009      	beq.n	800621c <HAL_TIM_PWM_Start+0x148>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a34      	ldr	r2, [pc, #208]	; (80062e0 <HAL_TIM_PWM_Start+0x20c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_TIM_PWM_Start+0x148>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a33      	ldr	r2, [pc, #204]	; (80062e4 <HAL_TIM_PWM_Start+0x210>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d101      	bne.n	8006220 <HAL_TIM_PWM_Start+0x14c>
 800621c:	2301      	movs	r3, #1
 800621e:	e000      	b.n	8006222 <HAL_TIM_PWM_Start+0x14e>
 8006220:	2300      	movs	r3, #0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006234:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a25      	ldr	r2, [pc, #148]	; (80062d0 <HAL_TIM_PWM_Start+0x1fc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d022      	beq.n	8006286 <HAL_TIM_PWM_Start+0x1b2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006248:	d01d      	beq.n	8006286 <HAL_TIM_PWM_Start+0x1b2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a26      	ldr	r2, [pc, #152]	; (80062e8 <HAL_TIM_PWM_Start+0x214>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d018      	beq.n	8006286 <HAL_TIM_PWM_Start+0x1b2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a24      	ldr	r2, [pc, #144]	; (80062ec <HAL_TIM_PWM_Start+0x218>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <HAL_TIM_PWM_Start+0x1b2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a23      	ldr	r2, [pc, #140]	; (80062f0 <HAL_TIM_PWM_Start+0x21c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00e      	beq.n	8006286 <HAL_TIM_PWM_Start+0x1b2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a19      	ldr	r2, [pc, #100]	; (80062d4 <HAL_TIM_PWM_Start+0x200>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d009      	beq.n	8006286 <HAL_TIM_PWM_Start+0x1b2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a18      	ldr	r2, [pc, #96]	; (80062d8 <HAL_TIM_PWM_Start+0x204>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d004      	beq.n	8006286 <HAL_TIM_PWM_Start+0x1b2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a18      	ldr	r2, [pc, #96]	; (80062e4 <HAL_TIM_PWM_Start+0x210>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d115      	bne.n	80062b2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <HAL_TIM_PWM_Start+0x220>)
 800628e:	4013      	ands	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b06      	cmp	r3, #6
 8006296:	d015      	beq.n	80062c4 <HAL_TIM_PWM_Start+0x1f0>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800629e:	d011      	beq.n	80062c4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b0:	e008      	b.n	80062c4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0201 	orr.w	r2, r2, #1
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e000      	b.n	80062c6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	40013400 	.word	0x40013400
 80062d8:	40014000 	.word	0x40014000
 80062dc:	40014400 	.word	0x40014400
 80062e0:	40014800 	.word	0x40014800
 80062e4:	40015000 	.word	0x40015000
 80062e8:	40000400 	.word	0x40000400
 80062ec:	40000800 	.word	0x40000800
 80062f0:	40000c00 	.word	0x40000c00
 80062f4:	00010007 	.word	0x00010007

080062f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006312:	2302      	movs	r3, #2
 8006314:	e0ff      	b.n	8006516 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b14      	cmp	r3, #20
 8006322:	f200 80f0 	bhi.w	8006506 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006326:	a201      	add	r2, pc, #4	; (adr r2, 800632c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	08006381 	.word	0x08006381
 8006330:	08006507 	.word	0x08006507
 8006334:	08006507 	.word	0x08006507
 8006338:	08006507 	.word	0x08006507
 800633c:	080063c1 	.word	0x080063c1
 8006340:	08006507 	.word	0x08006507
 8006344:	08006507 	.word	0x08006507
 8006348:	08006507 	.word	0x08006507
 800634c:	08006403 	.word	0x08006403
 8006350:	08006507 	.word	0x08006507
 8006354:	08006507 	.word	0x08006507
 8006358:	08006507 	.word	0x08006507
 800635c:	08006443 	.word	0x08006443
 8006360:	08006507 	.word	0x08006507
 8006364:	08006507 	.word	0x08006507
 8006368:	08006507 	.word	0x08006507
 800636c:	08006485 	.word	0x08006485
 8006370:	08006507 	.word	0x08006507
 8006374:	08006507 	.word	0x08006507
 8006378:	08006507 	.word	0x08006507
 800637c:	080064c5 	.word	0x080064c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fa88 	bl	800689c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0208 	orr.w	r2, r2, #8
 800639a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0204 	bic.w	r2, r2, #4
 80063aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6999      	ldr	r1, [r3, #24]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	619a      	str	r2, [r3, #24]
      break;
 80063be:	e0a5      	b.n	800650c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fb02 	bl	80069d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6999      	ldr	r1, [r3, #24]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	021a      	lsls	r2, r3, #8
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	619a      	str	r2, [r3, #24]
      break;
 8006400:	e084      	b.n	800650c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fb75 	bl	8006af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69da      	ldr	r2, [r3, #28]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0208 	orr.w	r2, r2, #8
 800641c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0204 	bic.w	r2, r2, #4
 800642c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69d9      	ldr	r1, [r3, #28]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	61da      	str	r2, [r3, #28]
      break;
 8006440:	e064      	b.n	800650c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68b9      	ldr	r1, [r7, #8]
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fbe7 	bl	8006c1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800645c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800646c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69d9      	ldr	r1, [r3, #28]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	021a      	lsls	r2, r3, #8
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	61da      	str	r2, [r3, #28]
      break;
 8006482:	e043      	b.n	800650c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fc5a 	bl	8006d44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0208 	orr.w	r2, r2, #8
 800649e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0204 	bic.w	r2, r2, #4
 80064ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	691a      	ldr	r2, [r3, #16]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80064c2:	e023      	b.n	800650c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68b9      	ldr	r1, [r7, #8]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f000 fca4 	bl	8006e18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	021a      	lsls	r2, r3, #8
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006504:	e002      	b.n	800650c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	75fb      	strb	r3, [r7, #23]
      break;
 800650a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006514:	7dfb      	ldrb	r3, [r7, #23]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop

08006520 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006534:	2b01      	cmp	r3, #1
 8006536:	d101      	bne.n	800653c <HAL_TIM_ConfigClockSource+0x1c>
 8006538:	2302      	movs	r3, #2
 800653a:	e0f6      	b.n	800672a <HAL_TIM_ConfigClockSource+0x20a>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800655a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800655e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006566:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a6f      	ldr	r2, [pc, #444]	; (8006734 <HAL_TIM_ConfigClockSource+0x214>)
 8006576:	4293      	cmp	r3, r2
 8006578:	f000 80c1 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1de>
 800657c:	4a6d      	ldr	r2, [pc, #436]	; (8006734 <HAL_TIM_ConfigClockSource+0x214>)
 800657e:	4293      	cmp	r3, r2
 8006580:	f200 80c6 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 8006584:	4a6c      	ldr	r2, [pc, #432]	; (8006738 <HAL_TIM_ConfigClockSource+0x218>)
 8006586:	4293      	cmp	r3, r2
 8006588:	f000 80b9 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1de>
 800658c:	4a6a      	ldr	r2, [pc, #424]	; (8006738 <HAL_TIM_ConfigClockSource+0x218>)
 800658e:	4293      	cmp	r3, r2
 8006590:	f200 80be 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 8006594:	4a69      	ldr	r2, [pc, #420]	; (800673c <HAL_TIM_ConfigClockSource+0x21c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	f000 80b1 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1de>
 800659c:	4a67      	ldr	r2, [pc, #412]	; (800673c <HAL_TIM_ConfigClockSource+0x21c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	f200 80b6 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 80065a4:	4a66      	ldr	r2, [pc, #408]	; (8006740 <HAL_TIM_ConfigClockSource+0x220>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	f000 80a9 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1de>
 80065ac:	4a64      	ldr	r2, [pc, #400]	; (8006740 <HAL_TIM_ConfigClockSource+0x220>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	f200 80ae 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 80065b4:	4a63      	ldr	r2, [pc, #396]	; (8006744 <HAL_TIM_ConfigClockSource+0x224>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	f000 80a1 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1de>
 80065bc:	4a61      	ldr	r2, [pc, #388]	; (8006744 <HAL_TIM_ConfigClockSource+0x224>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	f200 80a6 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 80065c4:	4a60      	ldr	r2, [pc, #384]	; (8006748 <HAL_TIM_ConfigClockSource+0x228>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	f000 8099 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1de>
 80065cc:	4a5e      	ldr	r2, [pc, #376]	; (8006748 <HAL_TIM_ConfigClockSource+0x228>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	f200 809e 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 80065d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065d8:	f000 8091 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1de>
 80065dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80065e0:	f200 8096 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 80065e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065e8:	f000 8089 	beq.w	80066fe <HAL_TIM_ConfigClockSource+0x1de>
 80065ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065f0:	f200 808e 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 80065f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f8:	d03e      	beq.n	8006678 <HAL_TIM_ConfigClockSource+0x158>
 80065fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065fe:	f200 8087 	bhi.w	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 8006602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006606:	f000 8086 	beq.w	8006716 <HAL_TIM_ConfigClockSource+0x1f6>
 800660a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800660e:	d87f      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 8006610:	2b70      	cmp	r3, #112	; 0x70
 8006612:	d01a      	beq.n	800664a <HAL_TIM_ConfigClockSource+0x12a>
 8006614:	2b70      	cmp	r3, #112	; 0x70
 8006616:	d87b      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 8006618:	2b60      	cmp	r3, #96	; 0x60
 800661a:	d050      	beq.n	80066be <HAL_TIM_ConfigClockSource+0x19e>
 800661c:	2b60      	cmp	r3, #96	; 0x60
 800661e:	d877      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 8006620:	2b50      	cmp	r3, #80	; 0x50
 8006622:	d03c      	beq.n	800669e <HAL_TIM_ConfigClockSource+0x17e>
 8006624:	2b50      	cmp	r3, #80	; 0x50
 8006626:	d873      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 8006628:	2b40      	cmp	r3, #64	; 0x40
 800662a:	d058      	beq.n	80066de <HAL_TIM_ConfigClockSource+0x1be>
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	d86f      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 8006630:	2b30      	cmp	r3, #48	; 0x30
 8006632:	d064      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x1de>
 8006634:	2b30      	cmp	r3, #48	; 0x30
 8006636:	d86b      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 8006638:	2b20      	cmp	r3, #32
 800663a:	d060      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x1de>
 800663c:	2b20      	cmp	r3, #32
 800663e:	d867      	bhi.n	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
 8006640:	2b00      	cmp	r3, #0
 8006642:	d05c      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x1de>
 8006644:	2b10      	cmp	r3, #16
 8006646:	d05a      	beq.n	80066fe <HAL_TIM_ConfigClockSource+0x1de>
 8006648:	e062      	b.n	8006710 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	6899      	ldr	r1, [r3, #8]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f000 fcc5 	bl	8006fe8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800666c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	609a      	str	r2, [r3, #8]
      break;
 8006676:	e04f      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	6899      	ldr	r1, [r3, #8]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f000 fcae 	bl	8006fe8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800669a:	609a      	str	r2, [r3, #8]
      break;
 800669c:	e03c      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	461a      	mov	r2, r3
 80066ac:	f000 fc20 	bl	8006ef0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2150      	movs	r1, #80	; 0x50
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fc79 	bl	8006fae <TIM_ITRx_SetConfig>
      break;
 80066bc:	e02c      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6859      	ldr	r1, [r3, #4]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	461a      	mov	r2, r3
 80066cc:	f000 fc3f 	bl	8006f4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2160      	movs	r1, #96	; 0x60
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fc69 	bl	8006fae <TIM_ITRx_SetConfig>
      break;
 80066dc:	e01c      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	6859      	ldr	r1, [r3, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	461a      	mov	r2, r3
 80066ec:	f000 fc00 	bl	8006ef0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2140      	movs	r1, #64	; 0x40
 80066f6:	4618      	mov	r0, r3
 80066f8:	f000 fc59 	bl	8006fae <TIM_ITRx_SetConfig>
      break;
 80066fc:	e00c      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f000 fc50 	bl	8006fae <TIM_ITRx_SetConfig>
      break;
 800670e:	e003      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	73fb      	strb	r3, [r7, #15]
      break;
 8006714:	e000      	b.n	8006718 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006728:	7bfb      	ldrb	r3, [r7, #15]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	00100070 	.word	0x00100070
 8006738:	00100060 	.word	0x00100060
 800673c:	00100050 	.word	0x00100050
 8006740:	00100040 	.word	0x00100040
 8006744:	00100030 	.word	0x00100030
 8006748:	00100020 	.word	0x00100020

0800674c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a46      	ldr	r2, [pc, #280]	; (8006878 <TIM_Base_SetConfig+0x12c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d017      	beq.n	8006794 <TIM_Base_SetConfig+0x48>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676a:	d013      	beq.n	8006794 <TIM_Base_SetConfig+0x48>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a43      	ldr	r2, [pc, #268]	; (800687c <TIM_Base_SetConfig+0x130>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00f      	beq.n	8006794 <TIM_Base_SetConfig+0x48>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a42      	ldr	r2, [pc, #264]	; (8006880 <TIM_Base_SetConfig+0x134>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d00b      	beq.n	8006794 <TIM_Base_SetConfig+0x48>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a41      	ldr	r2, [pc, #260]	; (8006884 <TIM_Base_SetConfig+0x138>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d007      	beq.n	8006794 <TIM_Base_SetConfig+0x48>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a40      	ldr	r2, [pc, #256]	; (8006888 <TIM_Base_SetConfig+0x13c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d003      	beq.n	8006794 <TIM_Base_SetConfig+0x48>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a3f      	ldr	r2, [pc, #252]	; (800688c <TIM_Base_SetConfig+0x140>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d108      	bne.n	80067a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a33      	ldr	r2, [pc, #204]	; (8006878 <TIM_Base_SetConfig+0x12c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d023      	beq.n	80067f6 <TIM_Base_SetConfig+0xaa>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b4:	d01f      	beq.n	80067f6 <TIM_Base_SetConfig+0xaa>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a30      	ldr	r2, [pc, #192]	; (800687c <TIM_Base_SetConfig+0x130>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01b      	beq.n	80067f6 <TIM_Base_SetConfig+0xaa>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a2f      	ldr	r2, [pc, #188]	; (8006880 <TIM_Base_SetConfig+0x134>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d017      	beq.n	80067f6 <TIM_Base_SetConfig+0xaa>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a2e      	ldr	r2, [pc, #184]	; (8006884 <TIM_Base_SetConfig+0x138>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d013      	beq.n	80067f6 <TIM_Base_SetConfig+0xaa>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a2d      	ldr	r2, [pc, #180]	; (8006888 <TIM_Base_SetConfig+0x13c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d00f      	beq.n	80067f6 <TIM_Base_SetConfig+0xaa>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a2d      	ldr	r2, [pc, #180]	; (8006890 <TIM_Base_SetConfig+0x144>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d00b      	beq.n	80067f6 <TIM_Base_SetConfig+0xaa>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a2c      	ldr	r2, [pc, #176]	; (8006894 <TIM_Base_SetConfig+0x148>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d007      	beq.n	80067f6 <TIM_Base_SetConfig+0xaa>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a2b      	ldr	r2, [pc, #172]	; (8006898 <TIM_Base_SetConfig+0x14c>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d003      	beq.n	80067f6 <TIM_Base_SetConfig+0xaa>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a26      	ldr	r2, [pc, #152]	; (800688c <TIM_Base_SetConfig+0x140>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d108      	bne.n	8006808 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a12      	ldr	r2, [pc, #72]	; (8006878 <TIM_Base_SetConfig+0x12c>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d013      	beq.n	800685c <TIM_Base_SetConfig+0x110>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a14      	ldr	r2, [pc, #80]	; (8006888 <TIM_Base_SetConfig+0x13c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00f      	beq.n	800685c <TIM_Base_SetConfig+0x110>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a14      	ldr	r2, [pc, #80]	; (8006890 <TIM_Base_SetConfig+0x144>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d00b      	beq.n	800685c <TIM_Base_SetConfig+0x110>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a13      	ldr	r2, [pc, #76]	; (8006894 <TIM_Base_SetConfig+0x148>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d007      	beq.n	800685c <TIM_Base_SetConfig+0x110>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a12      	ldr	r2, [pc, #72]	; (8006898 <TIM_Base_SetConfig+0x14c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_Base_SetConfig+0x110>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a0d      	ldr	r2, [pc, #52]	; (800688c <TIM_Base_SetConfig+0x140>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d103      	bne.n	8006864 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	691a      	ldr	r2, [r3, #16]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	615a      	str	r2, [r3, #20]
}
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40012c00 	.word	0x40012c00
 800687c:	40000400 	.word	0x40000400
 8006880:	40000800 	.word	0x40000800
 8006884:	40000c00 	.word	0x40000c00
 8006888:	40013400 	.word	0x40013400
 800688c:	40015000 	.word	0x40015000
 8006890:	40014000 	.word	0x40014000
 8006894:	40014400 	.word	0x40014400
 8006898:	40014800 	.word	0x40014800

0800689c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f023 0201 	bic.w	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f023 0303 	bic.w	r3, r3, #3
 80068d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f023 0302 	bic.w	r3, r3, #2
 80068e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a30      	ldr	r2, [pc, #192]	; (80069b8 <TIM_OC1_SetConfig+0x11c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d013      	beq.n	8006924 <TIM_OC1_SetConfig+0x88>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a2f      	ldr	r2, [pc, #188]	; (80069bc <TIM_OC1_SetConfig+0x120>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00f      	beq.n	8006924 <TIM_OC1_SetConfig+0x88>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a2e      	ldr	r2, [pc, #184]	; (80069c0 <TIM_OC1_SetConfig+0x124>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00b      	beq.n	8006924 <TIM_OC1_SetConfig+0x88>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a2d      	ldr	r2, [pc, #180]	; (80069c4 <TIM_OC1_SetConfig+0x128>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d007      	beq.n	8006924 <TIM_OC1_SetConfig+0x88>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a2c      	ldr	r2, [pc, #176]	; (80069c8 <TIM_OC1_SetConfig+0x12c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <TIM_OC1_SetConfig+0x88>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a2b      	ldr	r2, [pc, #172]	; (80069cc <TIM_OC1_SetConfig+0x130>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d10c      	bne.n	800693e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f023 0308 	bic.w	r3, r3, #8
 800692a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f023 0304 	bic.w	r3, r3, #4
 800693c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <TIM_OC1_SetConfig+0x11c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d013      	beq.n	800696e <TIM_OC1_SetConfig+0xd2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a1c      	ldr	r2, [pc, #112]	; (80069bc <TIM_OC1_SetConfig+0x120>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00f      	beq.n	800696e <TIM_OC1_SetConfig+0xd2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <TIM_OC1_SetConfig+0x124>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00b      	beq.n	800696e <TIM_OC1_SetConfig+0xd2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <TIM_OC1_SetConfig+0x128>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d007      	beq.n	800696e <TIM_OC1_SetConfig+0xd2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a19      	ldr	r2, [pc, #100]	; (80069c8 <TIM_OC1_SetConfig+0x12c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d003      	beq.n	800696e <TIM_OC1_SetConfig+0xd2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a18      	ldr	r2, [pc, #96]	; (80069cc <TIM_OC1_SetConfig+0x130>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d111      	bne.n	8006992 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800697c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	621a      	str	r2, [r3, #32]
}
 80069ac:	bf00      	nop
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40013400 	.word	0x40013400
 80069c0:	40014000 	.word	0x40014000
 80069c4:	40014400 	.word	0x40014400
 80069c8:	40014800 	.word	0x40014800
 80069cc:	40015000 	.word	0x40015000

080069d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	f023 0210 	bic.w	r2, r3, #16
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	021b      	lsls	r3, r3, #8
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f023 0320 	bic.w	r3, r3, #32
 8006a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a2c      	ldr	r2, [pc, #176]	; (8006ae0 <TIM_OC2_SetConfig+0x110>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d007      	beq.n	8006a44 <TIM_OC2_SetConfig+0x74>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a2b      	ldr	r2, [pc, #172]	; (8006ae4 <TIM_OC2_SetConfig+0x114>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d003      	beq.n	8006a44 <TIM_OC2_SetConfig+0x74>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a2a      	ldr	r2, [pc, #168]	; (8006ae8 <TIM_OC2_SetConfig+0x118>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d10d      	bne.n	8006a60 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a1f      	ldr	r2, [pc, #124]	; (8006ae0 <TIM_OC2_SetConfig+0x110>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d013      	beq.n	8006a90 <TIM_OC2_SetConfig+0xc0>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ae4 <TIM_OC2_SetConfig+0x114>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d00f      	beq.n	8006a90 <TIM_OC2_SetConfig+0xc0>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a1e      	ldr	r2, [pc, #120]	; (8006aec <TIM_OC2_SetConfig+0x11c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d00b      	beq.n	8006a90 <TIM_OC2_SetConfig+0xc0>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a1d      	ldr	r2, [pc, #116]	; (8006af0 <TIM_OC2_SetConfig+0x120>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d007      	beq.n	8006a90 <TIM_OC2_SetConfig+0xc0>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a1c      	ldr	r2, [pc, #112]	; (8006af4 <TIM_OC2_SetConfig+0x124>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d003      	beq.n	8006a90 <TIM_OC2_SetConfig+0xc0>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a17      	ldr	r2, [pc, #92]	; (8006ae8 <TIM_OC2_SetConfig+0x118>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d113      	bne.n	8006ab8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	009b      	lsls	r3, r3, #2
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	621a      	str	r2, [r3, #32]
}
 8006ad2:	bf00      	nop
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	40012c00 	.word	0x40012c00
 8006ae4:	40013400 	.word	0x40013400
 8006ae8:	40015000 	.word	0x40015000
 8006aec:	40014000 	.word	0x40014000
 8006af0:	40014400 	.word	0x40014400
 8006af4:	40014800 	.word	0x40014800

08006af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0303 	bic.w	r3, r3, #3
 8006b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	021b      	lsls	r3, r3, #8
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a2b      	ldr	r2, [pc, #172]	; (8006c04 <TIM_OC3_SetConfig+0x10c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d007      	beq.n	8006b6a <TIM_OC3_SetConfig+0x72>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a2a      	ldr	r2, [pc, #168]	; (8006c08 <TIM_OC3_SetConfig+0x110>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d003      	beq.n	8006b6a <TIM_OC3_SetConfig+0x72>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a29      	ldr	r2, [pc, #164]	; (8006c0c <TIM_OC3_SetConfig+0x114>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d10d      	bne.n	8006b86 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a1e      	ldr	r2, [pc, #120]	; (8006c04 <TIM_OC3_SetConfig+0x10c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d013      	beq.n	8006bb6 <TIM_OC3_SetConfig+0xbe>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a1d      	ldr	r2, [pc, #116]	; (8006c08 <TIM_OC3_SetConfig+0x110>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00f      	beq.n	8006bb6 <TIM_OC3_SetConfig+0xbe>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a1d      	ldr	r2, [pc, #116]	; (8006c10 <TIM_OC3_SetConfig+0x118>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00b      	beq.n	8006bb6 <TIM_OC3_SetConfig+0xbe>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a1c      	ldr	r2, [pc, #112]	; (8006c14 <TIM_OC3_SetConfig+0x11c>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d007      	beq.n	8006bb6 <TIM_OC3_SetConfig+0xbe>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	4a1b      	ldr	r2, [pc, #108]	; (8006c18 <TIM_OC3_SetConfig+0x120>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d003      	beq.n	8006bb6 <TIM_OC3_SetConfig+0xbe>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <TIM_OC3_SetConfig+0x114>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d113      	bne.n	8006bde <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	011b      	lsls	r3, r3, #4
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	011b      	lsls	r3, r3, #4
 8006bd8:	693a      	ldr	r2, [r7, #16]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	621a      	str	r2, [r3, #32]
}
 8006bf8:	bf00      	nop
 8006bfa:	371c      	adds	r7, #28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40013400 	.word	0x40013400
 8006c0c:	40015000 	.word	0x40015000
 8006c10:	40014000 	.word	0x40014000
 8006c14:	40014400 	.word	0x40014400
 8006c18:	40014800 	.word	0x40014800

08006c1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	031b      	lsls	r3, r3, #12
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a2c      	ldr	r2, [pc, #176]	; (8006d2c <TIM_OC4_SetConfig+0x110>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d007      	beq.n	8006c90 <TIM_OC4_SetConfig+0x74>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a2b      	ldr	r2, [pc, #172]	; (8006d30 <TIM_OC4_SetConfig+0x114>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d003      	beq.n	8006c90 <TIM_OC4_SetConfig+0x74>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a2a      	ldr	r2, [pc, #168]	; (8006d34 <TIM_OC4_SetConfig+0x118>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10d      	bne.n	8006cac <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	031b      	lsls	r3, r3, #12
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006caa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a1f      	ldr	r2, [pc, #124]	; (8006d2c <TIM_OC4_SetConfig+0x110>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d013      	beq.n	8006cdc <TIM_OC4_SetConfig+0xc0>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a1e      	ldr	r2, [pc, #120]	; (8006d30 <TIM_OC4_SetConfig+0x114>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00f      	beq.n	8006cdc <TIM_OC4_SetConfig+0xc0>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a1e      	ldr	r2, [pc, #120]	; (8006d38 <TIM_OC4_SetConfig+0x11c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d00b      	beq.n	8006cdc <TIM_OC4_SetConfig+0xc0>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a1d      	ldr	r2, [pc, #116]	; (8006d3c <TIM_OC4_SetConfig+0x120>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d007      	beq.n	8006cdc <TIM_OC4_SetConfig+0xc0>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a1c      	ldr	r2, [pc, #112]	; (8006d40 <TIM_OC4_SetConfig+0x124>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d003      	beq.n	8006cdc <TIM_OC4_SetConfig+0xc0>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <TIM_OC4_SetConfig+0x118>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d113      	bne.n	8006d04 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ce2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	019b      	lsls	r3, r3, #6
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	019b      	lsls	r3, r3, #6
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40012c00 	.word	0x40012c00
 8006d30:	40013400 	.word	0x40013400
 8006d34:	40015000 	.word	0x40015000
 8006d38:	40014000 	.word	0x40014000
 8006d3c:	40014400 	.word	0x40014400
 8006d40:	40014800 	.word	0x40014800

08006d44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	041b      	lsls	r3, r3, #16
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a19      	ldr	r2, [pc, #100]	; (8006e00 <TIM_OC5_SetConfig+0xbc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d013      	beq.n	8006dc6 <TIM_OC5_SetConfig+0x82>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a18      	ldr	r2, [pc, #96]	; (8006e04 <TIM_OC5_SetConfig+0xc0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00f      	beq.n	8006dc6 <TIM_OC5_SetConfig+0x82>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <TIM_OC5_SetConfig+0xc4>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d00b      	beq.n	8006dc6 <TIM_OC5_SetConfig+0x82>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a16      	ldr	r2, [pc, #88]	; (8006e0c <TIM_OC5_SetConfig+0xc8>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d007      	beq.n	8006dc6 <TIM_OC5_SetConfig+0x82>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a15      	ldr	r2, [pc, #84]	; (8006e10 <TIM_OC5_SetConfig+0xcc>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d003      	beq.n	8006dc6 <TIM_OC5_SetConfig+0x82>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a14      	ldr	r2, [pc, #80]	; (8006e14 <TIM_OC5_SetConfig+0xd0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d109      	bne.n	8006dda <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	021b      	lsls	r3, r3, #8
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	621a      	str	r2, [r3, #32]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	40012c00 	.word	0x40012c00
 8006e04:	40013400 	.word	0x40013400
 8006e08:	40014000 	.word	0x40014000
 8006e0c:	40014400 	.word	0x40014400
 8006e10:	40014800 	.word	0x40014800
 8006e14:	40015000 	.word	0x40015000

08006e18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b087      	sub	sp, #28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	051b      	lsls	r3, r3, #20
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a1a      	ldr	r2, [pc, #104]	; (8006ed8 <TIM_OC6_SetConfig+0xc0>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d013      	beq.n	8006e9c <TIM_OC6_SetConfig+0x84>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a19      	ldr	r2, [pc, #100]	; (8006edc <TIM_OC6_SetConfig+0xc4>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d00f      	beq.n	8006e9c <TIM_OC6_SetConfig+0x84>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a18      	ldr	r2, [pc, #96]	; (8006ee0 <TIM_OC6_SetConfig+0xc8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d00b      	beq.n	8006e9c <TIM_OC6_SetConfig+0x84>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a17      	ldr	r2, [pc, #92]	; (8006ee4 <TIM_OC6_SetConfig+0xcc>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d007      	beq.n	8006e9c <TIM_OC6_SetConfig+0x84>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a16      	ldr	r2, [pc, #88]	; (8006ee8 <TIM_OC6_SetConfig+0xd0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d003      	beq.n	8006e9c <TIM_OC6_SetConfig+0x84>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a15      	ldr	r2, [pc, #84]	; (8006eec <TIM_OC6_SetConfig+0xd4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d109      	bne.n	8006eb0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	029b      	lsls	r3, r3, #10
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	693a      	ldr	r2, [r7, #16]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40012c00 	.word	0x40012c00
 8006edc:	40013400 	.word	0x40013400
 8006ee0:	40014000 	.word	0x40014000
 8006ee4:	40014400 	.word	0x40014400
 8006ee8:	40014800 	.word	0x40014800
 8006eec:	40015000 	.word	0x40015000

08006ef0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f023 0201 	bic.w	r2, r3, #1
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	f023 030a 	bic.w	r3, r3, #10
 8006f2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	621a      	str	r2, [r3, #32]
}
 8006f42:	bf00      	nop
 8006f44:	371c      	adds	r7, #28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b087      	sub	sp, #28
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	60f8      	str	r0, [r7, #12]
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	f023 0210 	bic.w	r2, r3, #16
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	031b      	lsls	r3, r3, #12
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	011b      	lsls	r3, r3, #4
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	697a      	ldr	r2, [r7, #20]
 8006f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	621a      	str	r2, [r3, #32]
}
 8006fa2:	bf00      	nop
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	f043 0307 	orr.w	r3, r3, #7
 8006fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	609a      	str	r2, [r3, #8]
}
 8006fdc:	bf00      	nop
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b087      	sub	sp, #28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007002:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	021a      	lsls	r2, r3, #8
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	431a      	orrs	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4313      	orrs	r3, r2
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	609a      	str	r2, [r3, #8]
}
 800701c:	bf00      	nop
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f003 031f 	and.w	r3, r3, #31
 800703a:	2201      	movs	r2, #1
 800703c:	fa02 f303 	lsl.w	r3, r2, r3
 8007040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a1a      	ldr	r2, [r3, #32]
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	43db      	mvns	r3, r3
 800704a:	401a      	ands	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a1a      	ldr	r2, [r3, #32]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	f003 031f 	and.w	r3, r3, #31
 800705a:	6879      	ldr	r1, [r7, #4]
 800705c:	fa01 f303 	lsl.w	r3, r1, r3
 8007060:	431a      	orrs	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	621a      	str	r2, [r3, #32]
}
 8007066:	bf00      	nop
 8007068:	371c      	adds	r7, #28
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
	...

08007074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007088:	2302      	movs	r3, #2
 800708a:	e074      	b.n	8007176 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a34      	ldr	r2, [pc, #208]	; (8007184 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d009      	beq.n	80070ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a33      	ldr	r2, [pc, #204]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d004      	beq.n	80070ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a31      	ldr	r2, [pc, #196]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d108      	bne.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a21      	ldr	r2, [pc, #132]	; (8007184 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d022      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710c:	d01d      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a1f      	ldr	r2, [pc, #124]	; (8007190 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d018      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a1d      	ldr	r2, [pc, #116]	; (8007194 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d013      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a1c      	ldr	r2, [pc, #112]	; (8007198 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d00e      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a15      	ldr	r2, [pc, #84]	; (8007188 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d009      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a18      	ldr	r2, [pc, #96]	; (800719c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d004      	beq.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a11      	ldr	r2, [pc, #68]	; (800718c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d10c      	bne.n	8007164 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	4313      	orrs	r3, r2
 800715a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40012c00 	.word	0x40012c00
 8007188:	40013400 	.word	0x40013400
 800718c:	40015000 	.word	0x40015000
 8007190:	40000400 	.word	0x40000400
 8007194:	40000800 	.word	0x40000800
 8007198:	40000c00 	.word	0x40000c00
 800719c:	40014000 	.word	0x40014000

080071a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e042      	b.n	8007238 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d106      	bne.n	80071ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7fa fc91 	bl	8001aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2224      	movs	r2, #36	; 0x24
 80071ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 0201 	bic.w	r2, r2, #1
 80071e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fc50 	bl	8007a88 <UART_SetConfig>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d101      	bne.n	80071f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e022      	b.n	8007238 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 ff40 	bl	8008080 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800720e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800721e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 ffc7 	bl	80081c4 <UART_CheckIdleState>
 8007236:	4603      	mov	r3, r0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3708      	adds	r7, #8
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08a      	sub	sp, #40	; 0x28
 8007244:	af02      	add	r7, sp, #8
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	4613      	mov	r3, r2
 800724e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007256:	2b20      	cmp	r3, #32
 8007258:	f040 8083 	bne.w	8007362 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <HAL_UART_Transmit+0x28>
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e07b      	b.n	8007364 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_UART_Transmit+0x3a>
 8007276:	2302      	movs	r3, #2
 8007278:	e074      	b.n	8007364 <HAL_UART_Transmit+0x124>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2221      	movs	r2, #33	; 0x21
 800728e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007292:	f7fa fe39 	bl	8001f08 <HAL_GetTick>
 8007296:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	88fa      	ldrh	r2, [r7, #6]
 800729c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072b0:	d108      	bne.n	80072c4 <HAL_UART_Transmit+0x84>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d104      	bne.n	80072c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	e003      	b.n	80072cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072c8:	2300      	movs	r3, #0
 80072ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80072d4:	e02c      	b.n	8007330 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2200      	movs	r2, #0
 80072de:	2180      	movs	r1, #128	; 0x80
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 ffba 	bl	800825a <UART_WaitOnFlagUntilTimeout>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e039      	b.n	8007364 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10b      	bne.n	800730e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	881b      	ldrh	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007304:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	3302      	adds	r3, #2
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	e007      	b.n	800731e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	781a      	ldrb	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	3301      	adds	r3, #1
 800731c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007324:	b29b      	uxth	r3, r3
 8007326:	3b01      	subs	r3, #1
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007336:	b29b      	uxth	r3, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1cc      	bne.n	80072d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2200      	movs	r2, #0
 8007344:	2140      	movs	r1, #64	; 0x40
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 ff87 	bl	800825a <UART_WaitOnFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e006      	b.n	8007364 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2220      	movs	r2, #32
 800735a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	e000      	b.n	8007364 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007362:	2302      	movs	r3, #2
  }
}
 8007364:	4618      	mov	r0, r3
 8007366:	3720      	adds	r7, #32
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	; 0x28
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007380:	2b20      	cmp	r3, #32
 8007382:	d142      	bne.n	800740a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <HAL_UART_Receive_IT+0x24>
 800738a:	88fb      	ldrh	r3, [r7, #6]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e03b      	b.n	800740c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800739a:	2b01      	cmp	r3, #1
 800739c:	d101      	bne.n	80073a2 <HAL_UART_Receive_IT+0x36>
 800739e:	2302      	movs	r3, #2
 80073a0:	e034      	b.n	800740c <HAL_UART_Receive_IT+0xa0>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a17      	ldr	r2, [pc, #92]	; (8007414 <HAL_UART_Receive_IT+0xa8>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d01f      	beq.n	80073fa <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d018      	beq.n	80073fa <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	613b      	str	r3, [r7, #16]
   return(result);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	461a      	mov	r2, r3
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	623b      	str	r3, [r7, #32]
 80073e8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	69f9      	ldr	r1, [r7, #28]
 80073ec:	6a3a      	ldr	r2, [r7, #32]
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e6      	bne.n	80073c8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80073fa:	88fb      	ldrh	r3, [r7, #6]
 80073fc:	461a      	mov	r2, r3
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 fff3 	bl	80083ec <UART_Start_Receive_IT>
 8007406:	4603      	mov	r3, r0
 8007408:	e000      	b.n	800740c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800740a:	2302      	movs	r3, #2
  }
}
 800740c:	4618      	mov	r0, r3
 800740e:	3728      	adds	r7, #40	; 0x28
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40008000 	.word	0x40008000

08007418 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b0ba      	sub	sp, #232	; 0xe8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800743e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007442:	f640 030f 	movw	r3, #2063	; 0x80f
 8007446:	4013      	ands	r3, r2
 8007448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800744c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007450:	2b00      	cmp	r3, #0
 8007452:	d11b      	bne.n	800748c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b00      	cmp	r3, #0
 800745e:	d015      	beq.n	800748c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d105      	bne.n	8007478 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800746c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d009      	beq.n	800748c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 82d6 	beq.w	8007a2e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
      }
      return;
 800748a:	e2d0      	b.n	8007a2e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800748c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 811f 	beq.w	80076d4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007496:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800749a:	4b8b      	ldr	r3, [pc, #556]	; (80076c8 <HAL_UART_IRQHandler+0x2b0>)
 800749c:	4013      	ands	r3, r2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80074a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80074a6:	4b89      	ldr	r3, [pc, #548]	; (80076cc <HAL_UART_IRQHandler+0x2b4>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 8112 	beq.w	80076d4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d011      	beq.n	80074e0 <HAL_UART_IRQHandler+0xc8>
 80074bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2201      	movs	r2, #1
 80074ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074d6:	f043 0201 	orr.w	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d011      	beq.n	8007510 <HAL_UART_IRQHandler+0xf8>
 80074ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2202      	movs	r2, #2
 80074fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007506:	f043 0204 	orr.w	r2, r3, #4
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	d011      	beq.n	8007540 <HAL_UART_IRQHandler+0x128>
 800751c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2204      	movs	r2, #4
 800752e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007536:	f043 0202 	orr.w	r2, r3, #2
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d017      	beq.n	800757c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800754c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d105      	bne.n	8007564 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007558:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800755c:	4b5a      	ldr	r3, [pc, #360]	; (80076c8 <HAL_UART_IRQHandler+0x2b0>)
 800755e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2208      	movs	r2, #8
 800756a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007572:	f043 0208 	orr.w	r2, r3, #8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800757c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007584:	2b00      	cmp	r3, #0
 8007586:	d012      	beq.n	80075ae <HAL_UART_IRQHandler+0x196>
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00c      	beq.n	80075ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800759c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075a4:	f043 0220 	orr.w	r2, r3, #32
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 823c 	beq.w	8007a32 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d013      	beq.n	80075ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d005      	beq.n	8007612 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007606:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800760a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800760e:	2b00      	cmp	r3, #0
 8007610:	d04f      	beq.n	80076b2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f001 f814 	bl	8008640 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007622:	2b40      	cmp	r3, #64	; 0x40
 8007624:	d141      	bne.n	80076aa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3308      	adds	r3, #8
 800762c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007634:	e853 3f00 	ldrex	r3, [r3]
 8007638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800763c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3308      	adds	r3, #8
 800764e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007652:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800765e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800766a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1d9      	bne.n	8007626 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d013      	beq.n	80076a2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800767e:	4a14      	ldr	r2, [pc, #80]	; (80076d0 <HAL_UART_IRQHandler+0x2b8>)
 8007680:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007686:	4618      	mov	r0, r3
 8007688:	f7fd fa1a 	bl	8004ac0 <HAL_DMA_Abort_IT>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d017      	beq.n	80076c2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800769c:	4610      	mov	r0, r2
 800769e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a0:	e00f      	b.n	80076c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f9da 	bl	8007a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a8:	e00b      	b.n	80076c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f9d6 	bl	8007a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b0:	e007      	b.n	80076c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 f9d2 	bl	8007a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80076c0:	e1b7      	b.n	8007a32 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c2:	bf00      	nop
    return;
 80076c4:	e1b5      	b.n	8007a32 <HAL_UART_IRQHandler+0x61a>
 80076c6:	bf00      	nop
 80076c8:	10000001 	.word	0x10000001
 80076cc:	04000120 	.word	0x04000120
 80076d0:	0800870d 	.word	0x0800870d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076d8:	2b01      	cmp	r3, #1
 80076da:	f040 814a 	bne.w	8007972 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076e2:	f003 0310 	and.w	r3, r3, #16
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 8143 	beq.w	8007972 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076f0:	f003 0310 	and.w	r3, r3, #16
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 813c 	beq.w	8007972 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2210      	movs	r2, #16
 8007700:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770c:	2b40      	cmp	r3, #64	; 0x40
 800770e:	f040 80b5 	bne.w	800787c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800771e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 8187 	beq.w	8007a36 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800772e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007732:	429a      	cmp	r2, r3
 8007734:	f080 817f 	bcs.w	8007a36 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800773e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0320 	and.w	r3, r3, #32
 800774e:	2b00      	cmp	r3, #0
 8007750:	f040 8086 	bne.w	8007860 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800776c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800777e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007782:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007786:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800778a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800778e:	e841 2300 	strex	r3, r2, [r1]
 8007792:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1da      	bne.n	8007754 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3308      	adds	r3, #8
 80077a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077a8:	e853 3f00 	ldrex	r3, [r3]
 80077ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80077ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077b0:	f023 0301 	bic.w	r3, r3, #1
 80077b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	3308      	adds	r3, #8
 80077be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e1      	bne.n	800779e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	3308      	adds	r3, #8
 80077e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3308      	adds	r3, #8
 80077fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007800:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007804:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800780c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e3      	bne.n	80077da <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2220      	movs	r2, #32
 8007816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800782e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007830:	f023 0310 	bic.w	r3, r3, #16
 8007834:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007842:	65bb      	str	r3, [r7, #88]	; 0x58
 8007844:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007848:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800784a:	e841 2300 	strex	r3, r2, [r1]
 800784e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1e4      	bne.n	8007820 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800785a:	4618      	mov	r0, r3
 800785c:	f7fd f8d7 	bl	8004a0e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800786c:	b29b      	uxth	r3, r3
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	b29b      	uxth	r3, r3
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f8fb 	bl	8007a70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800787a:	e0dc      	b.n	8007a36 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007888:	b29b      	uxth	r3, r3
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007896:	b29b      	uxth	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 80ce 	beq.w	8007a3a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800789e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 80c9 	beq.w	8007a3a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078ca:	647b      	str	r3, [r7, #68]	; 0x44
 80078cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e4      	bne.n	80078a8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3308      	adds	r3, #8
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	623b      	str	r3, [r7, #32]
   return(result);
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078f4:	f023 0301 	bic.w	r3, r3, #1
 80078f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3308      	adds	r3, #8
 8007902:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007906:	633a      	str	r2, [r7, #48]	; 0x30
 8007908:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800790c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e1      	bne.n	80078de <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2220      	movs	r2, #32
 800791e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	e853 3f00 	ldrex	r3, [r3]
 800793a:	60fb      	str	r3, [r7, #12]
   return(result);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f023 0310 	bic.w	r3, r3, #16
 8007942:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007950:	61fb      	str	r3, [r7, #28]
 8007952:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007954:	69b9      	ldr	r1, [r7, #24]
 8007956:	69fa      	ldr	r2, [r7, #28]
 8007958:	e841 2300 	strex	r3, r2, [r1]
 800795c:	617b      	str	r3, [r7, #20]
   return(result);
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d1e4      	bne.n	800792e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007968:	4619      	mov	r1, r3
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f880 	bl	8007a70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007970:	e063      	b.n	8007a3a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00e      	beq.n	800799c <HAL_UART_IRQHandler+0x584>
 800797e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d008      	beq.n	800799c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007992:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 fb57 	bl	8009048 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800799a:	e051      	b.n	8007a40 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800799c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d014      	beq.n	80079d2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d105      	bne.n	80079c0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d008      	beq.n	80079d2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d03a      	beq.n	8007a3e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	4798      	blx	r3
    }
    return;
 80079d0:	e035      	b.n	8007a3e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d009      	beq.n	80079f2 <HAL_UART_IRQHandler+0x5da>
 80079de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fea4 	bl	8008738 <UART_EndTransmit_IT>
    return;
 80079f0:	e026      	b.n	8007a40 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d009      	beq.n	8007a12 <HAL_UART_IRQHandler+0x5fa>
 80079fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f001 fb30 	bl	8009070 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a10:	e016      	b.n	8007a40 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d010      	beq.n	8007a40 <HAL_UART_IRQHandler+0x628>
 8007a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	da0c      	bge.n	8007a40 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f001 fb18 	bl	800905c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a2c:	e008      	b.n	8007a40 <HAL_UART_IRQHandler+0x628>
      return;
 8007a2e:	bf00      	nop
 8007a30:	e006      	b.n	8007a40 <HAL_UART_IRQHandler+0x628>
    return;
 8007a32:	bf00      	nop
 8007a34:	e004      	b.n	8007a40 <HAL_UART_IRQHandler+0x628>
      return;
 8007a36:	bf00      	nop
 8007a38:	e002      	b.n	8007a40 <HAL_UART_IRQHandler+0x628>
      return;
 8007a3a:	bf00      	nop
 8007a3c:	e000      	b.n	8007a40 <HAL_UART_IRQHandler+0x628>
    return;
 8007a3e:	bf00      	nop
  }
}
 8007a40:	37e8      	adds	r7, #232	; 0xe8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop

08007a48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a8c:	b08c      	sub	sp, #48	; 0x30
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	431a      	orrs	r2, r3
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681a      	ldr	r2, [r3, #0]
 8007ab6:	4baa      	ldr	r3, [pc, #680]	; (8007d60 <UART_SetConfig+0x2d8>)
 8007ab8:	4013      	ands	r3, r2
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	6812      	ldr	r2, [r2, #0]
 8007abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ac0:	430b      	orrs	r3, r1
 8007ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	430a      	orrs	r2, r1
 8007ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a9f      	ldr	r2, [pc, #636]	; (8007d64 <UART_SetConfig+0x2dc>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d004      	beq.n	8007af4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af0:	4313      	orrs	r3, r2
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007afe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	6812      	ldr	r2, [r2, #0]
 8007b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	f023 010f 	bic.w	r1, r3, #15
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	430a      	orrs	r2, r1
 8007b20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a90      	ldr	r2, [pc, #576]	; (8007d68 <UART_SetConfig+0x2e0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d125      	bne.n	8007b78 <UART_SetConfig+0xf0>
 8007b2c:	4b8f      	ldr	r3, [pc, #572]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b32:	f003 0303 	and.w	r3, r3, #3
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d81a      	bhi.n	8007b70 <UART_SetConfig+0xe8>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <UART_SetConfig+0xb8>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b51 	.word	0x08007b51
 8007b44:	08007b61 	.word	0x08007b61
 8007b48:	08007b59 	.word	0x08007b59
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b56:	e116      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b58:	2302      	movs	r3, #2
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5e:	e112      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b60:	2304      	movs	r3, #4
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b66:	e10e      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b68:	2308      	movs	r3, #8
 8007b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6e:	e10a      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b70:	2310      	movs	r3, #16
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b76:	e106      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a7c      	ldr	r2, [pc, #496]	; (8007d70 <UART_SetConfig+0x2e8>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d138      	bne.n	8007bf4 <UART_SetConfig+0x16c>
 8007b82:	4b7a      	ldr	r3, [pc, #488]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b88:	f003 030c 	and.w	r3, r3, #12
 8007b8c:	2b0c      	cmp	r3, #12
 8007b8e:	d82d      	bhi.n	8007bec <UART_SetConfig+0x164>
 8007b90:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x110>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bcd 	.word	0x08007bcd
 8007b9c:	08007bed 	.word	0x08007bed
 8007ba0:	08007bed 	.word	0x08007bed
 8007ba4:	08007bed 	.word	0x08007bed
 8007ba8:	08007bdd 	.word	0x08007bdd
 8007bac:	08007bed 	.word	0x08007bed
 8007bb0:	08007bed 	.word	0x08007bed
 8007bb4:	08007bed 	.word	0x08007bed
 8007bb8:	08007bd5 	.word	0x08007bd5
 8007bbc:	08007bed 	.word	0x08007bed
 8007bc0:	08007bed 	.word	0x08007bed
 8007bc4:	08007bed 	.word	0x08007bed
 8007bc8:	08007be5 	.word	0x08007be5
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd2:	e0d8      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bda:	e0d4      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007be2:	e0d0      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007be4:	2308      	movs	r3, #8
 8007be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bea:	e0cc      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007bec:	2310      	movs	r3, #16
 8007bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bf2:	e0c8      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a5e      	ldr	r2, [pc, #376]	; (8007d74 <UART_SetConfig+0x2ec>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d125      	bne.n	8007c4a <UART_SetConfig+0x1c2>
 8007bfe:	4b5b      	ldr	r3, [pc, #364]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c04:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c08:	2b30      	cmp	r3, #48	; 0x30
 8007c0a:	d016      	beq.n	8007c3a <UART_SetConfig+0x1b2>
 8007c0c:	2b30      	cmp	r3, #48	; 0x30
 8007c0e:	d818      	bhi.n	8007c42 <UART_SetConfig+0x1ba>
 8007c10:	2b20      	cmp	r3, #32
 8007c12:	d00a      	beq.n	8007c2a <UART_SetConfig+0x1a2>
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	d814      	bhi.n	8007c42 <UART_SetConfig+0x1ba>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d002      	beq.n	8007c22 <UART_SetConfig+0x19a>
 8007c1c:	2b10      	cmp	r3, #16
 8007c1e:	d008      	beq.n	8007c32 <UART_SetConfig+0x1aa>
 8007c20:	e00f      	b.n	8007c42 <UART_SetConfig+0x1ba>
 8007c22:	2300      	movs	r3, #0
 8007c24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c28:	e0ad      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c30:	e0a9      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c32:	2304      	movs	r3, #4
 8007c34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c38:	e0a5      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c40:	e0a1      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c42:	2310      	movs	r3, #16
 8007c44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c48:	e09d      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a4a      	ldr	r2, [pc, #296]	; (8007d78 <UART_SetConfig+0x2f0>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d125      	bne.n	8007ca0 <UART_SetConfig+0x218>
 8007c54:	4b45      	ldr	r3, [pc, #276]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8007c60:	d016      	beq.n	8007c90 <UART_SetConfig+0x208>
 8007c62:	2bc0      	cmp	r3, #192	; 0xc0
 8007c64:	d818      	bhi.n	8007c98 <UART_SetConfig+0x210>
 8007c66:	2b80      	cmp	r3, #128	; 0x80
 8007c68:	d00a      	beq.n	8007c80 <UART_SetConfig+0x1f8>
 8007c6a:	2b80      	cmp	r3, #128	; 0x80
 8007c6c:	d814      	bhi.n	8007c98 <UART_SetConfig+0x210>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d002      	beq.n	8007c78 <UART_SetConfig+0x1f0>
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	d008      	beq.n	8007c88 <UART_SetConfig+0x200>
 8007c76:	e00f      	b.n	8007c98 <UART_SetConfig+0x210>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c7e:	e082      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c80:	2302      	movs	r3, #2
 8007c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c86:	e07e      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c88:	2304      	movs	r3, #4
 8007c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c8e:	e07a      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c90:	2308      	movs	r3, #8
 8007c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c96:	e076      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007c98:	2310      	movs	r3, #16
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9e:	e072      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a35      	ldr	r2, [pc, #212]	; (8007d7c <UART_SetConfig+0x2f4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d12a      	bne.n	8007d00 <UART_SetConfig+0x278>
 8007caa:	4b30      	ldr	r3, [pc, #192]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cb8:	d01a      	beq.n	8007cf0 <UART_SetConfig+0x268>
 8007cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cbe:	d81b      	bhi.n	8007cf8 <UART_SetConfig+0x270>
 8007cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc4:	d00c      	beq.n	8007ce0 <UART_SetConfig+0x258>
 8007cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cca:	d815      	bhi.n	8007cf8 <UART_SetConfig+0x270>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <UART_SetConfig+0x250>
 8007cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd4:	d008      	beq.n	8007ce8 <UART_SetConfig+0x260>
 8007cd6:	e00f      	b.n	8007cf8 <UART_SetConfig+0x270>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cde:	e052      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ce6:	e04e      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007ce8:	2304      	movs	r3, #4
 8007cea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cee:	e04a      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf6:	e046      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007cf8:	2310      	movs	r3, #16
 8007cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cfe:	e042      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a17      	ldr	r2, [pc, #92]	; (8007d64 <UART_SetConfig+0x2dc>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d13a      	bne.n	8007d80 <UART_SetConfig+0x2f8>
 8007d0a:	4b18      	ldr	r3, [pc, #96]	; (8007d6c <UART_SetConfig+0x2e4>)
 8007d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d18:	d01a      	beq.n	8007d50 <UART_SetConfig+0x2c8>
 8007d1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d1e:	d81b      	bhi.n	8007d58 <UART_SetConfig+0x2d0>
 8007d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d24:	d00c      	beq.n	8007d40 <UART_SetConfig+0x2b8>
 8007d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d2a:	d815      	bhi.n	8007d58 <UART_SetConfig+0x2d0>
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <UART_SetConfig+0x2b0>
 8007d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d34:	d008      	beq.n	8007d48 <UART_SetConfig+0x2c0>
 8007d36:	e00f      	b.n	8007d58 <UART_SetConfig+0x2d0>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d3e:	e022      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d40:	2302      	movs	r3, #2
 8007d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d46:	e01e      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d4e:	e01a      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d56:	e016      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d5e:	e012      	b.n	8007d86 <UART_SetConfig+0x2fe>
 8007d60:	cfff69f3 	.word	0xcfff69f3
 8007d64:	40008000 	.word	0x40008000
 8007d68:	40013800 	.word	0x40013800
 8007d6c:	40021000 	.word	0x40021000
 8007d70:	40004400 	.word	0x40004400
 8007d74:	40004800 	.word	0x40004800
 8007d78:	40004c00 	.word	0x40004c00
 8007d7c:	40005000 	.word	0x40005000
 8007d80:	2310      	movs	r3, #16
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4aae      	ldr	r2, [pc, #696]	; (8008044 <UART_SetConfig+0x5bc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	f040 8097 	bne.w	8007ec0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d823      	bhi.n	8007de2 <UART_SetConfig+0x35a>
 8007d9a:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <UART_SetConfig+0x318>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08007de3 	.word	0x08007de3
 8007da8:	08007dcd 	.word	0x08007dcd
 8007dac:	08007de3 	.word	0x08007de3
 8007db0:	08007dd3 	.word	0x08007dd3
 8007db4:	08007de3 	.word	0x08007de3
 8007db8:	08007de3 	.word	0x08007de3
 8007dbc:	08007de3 	.word	0x08007de3
 8007dc0:	08007ddb 	.word	0x08007ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc4:	f7fd fe0e 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8007dc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dca:	e010      	b.n	8007dee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dcc:	4b9e      	ldr	r3, [pc, #632]	; (8008048 <UART_SetConfig+0x5c0>)
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dd0:	e00d      	b.n	8007dee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dd2:	f7fd fd99 	bl	8005908 <HAL_RCC_GetSysClockFreq>
 8007dd6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dd8:	e009      	b.n	8007dee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007de0:	e005      	b.n	8007dee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007dec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8130 	beq.w	8008056 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfa:	4a94      	ldr	r2, [pc, #592]	; (800804c <UART_SetConfig+0x5c4>)
 8007dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e00:	461a      	mov	r2, r3
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e08:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	685a      	ldr	r2, [r3, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	005b      	lsls	r3, r3, #1
 8007e12:	4413      	add	r3, r2
 8007e14:	69ba      	ldr	r2, [r7, #24]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d305      	bcc.n	8007e26 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d903      	bls.n	8007e2e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e2c:	e113      	b.n	8008056 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e30:	2200      	movs	r2, #0
 8007e32:	60bb      	str	r3, [r7, #8]
 8007e34:	60fa      	str	r2, [r7, #12]
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	4a84      	ldr	r2, [pc, #528]	; (800804c <UART_SetConfig+0x5c4>)
 8007e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2200      	movs	r2, #0
 8007e44:	603b      	str	r3, [r7, #0]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e50:	f7f8 ff42 	bl	8000cd8 <__aeabi_uldivmod>
 8007e54:	4602      	mov	r2, r0
 8007e56:	460b      	mov	r3, r1
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	f04f 0300 	mov.w	r3, #0
 8007e64:	020b      	lsls	r3, r1, #8
 8007e66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e6a:	0202      	lsls	r2, r0, #8
 8007e6c:	6979      	ldr	r1, [r7, #20]
 8007e6e:	6849      	ldr	r1, [r1, #4]
 8007e70:	0849      	lsrs	r1, r1, #1
 8007e72:	2000      	movs	r0, #0
 8007e74:	460c      	mov	r4, r1
 8007e76:	4605      	mov	r5, r0
 8007e78:	eb12 0804 	adds.w	r8, r2, r4
 8007e7c:	eb43 0905 	adc.w	r9, r3, r5
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	469a      	mov	sl, r3
 8007e88:	4693      	mov	fp, r2
 8007e8a:	4652      	mov	r2, sl
 8007e8c:	465b      	mov	r3, fp
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4649      	mov	r1, r9
 8007e92:	f7f8 ff21 	bl	8000cd8 <__aeabi_uldivmod>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ea4:	d308      	bcc.n	8007eb8 <UART_SetConfig+0x430>
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eac:	d204      	bcs.n	8007eb8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	6a3a      	ldr	r2, [r7, #32]
 8007eb4:	60da      	str	r2, [r3, #12]
 8007eb6:	e0ce      	b.n	8008056 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ebe:	e0ca      	b.n	8008056 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ec8:	d166      	bne.n	8007f98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007eca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ece:	2b08      	cmp	r3, #8
 8007ed0:	d827      	bhi.n	8007f22 <UART_SetConfig+0x49a>
 8007ed2:	a201      	add	r2, pc, #4	; (adr r2, 8007ed8 <UART_SetConfig+0x450>)
 8007ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed8:	08007efd 	.word	0x08007efd
 8007edc:	08007f05 	.word	0x08007f05
 8007ee0:	08007f0d 	.word	0x08007f0d
 8007ee4:	08007f23 	.word	0x08007f23
 8007ee8:	08007f13 	.word	0x08007f13
 8007eec:	08007f23 	.word	0x08007f23
 8007ef0:	08007f23 	.word	0x08007f23
 8007ef4:	08007f23 	.word	0x08007f23
 8007ef8:	08007f1b 	.word	0x08007f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007efc:	f7fd fd72 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8007f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f02:	e014      	b.n	8007f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f04:	f7fd fd84 	bl	8005a10 <HAL_RCC_GetPCLK2Freq>
 8007f08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f0a:	e010      	b.n	8007f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f0c:	4b4e      	ldr	r3, [pc, #312]	; (8008048 <UART_SetConfig+0x5c0>)
 8007f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f10:	e00d      	b.n	8007f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f12:	f7fd fcf9 	bl	8005908 <HAL_RCC_GetSysClockFreq>
 8007f16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f18:	e009      	b.n	8007f2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f20:	e005      	b.n	8007f2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 8090 	beq.w	8008056 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	4a44      	ldr	r2, [pc, #272]	; (800804c <UART_SetConfig+0x5c4>)
 8007f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f40:	461a      	mov	r2, r3
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f48:	005a      	lsls	r2, r3, #1
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	085b      	lsrs	r3, r3, #1
 8007f50:	441a      	add	r2, r3
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	2b0f      	cmp	r3, #15
 8007f60:	d916      	bls.n	8007f90 <UART_SetConfig+0x508>
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f68:	d212      	bcs.n	8007f90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	f023 030f 	bic.w	r3, r3, #15
 8007f72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	085b      	lsrs	r3, r3, #1
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	f003 0307 	and.w	r3, r3, #7
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	8bfb      	ldrh	r3, [r7, #30]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	8bfa      	ldrh	r2, [r7, #30]
 8007f8c:	60da      	str	r2, [r3, #12]
 8007f8e:	e062      	b.n	8008056 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f96:	e05e      	b.n	8008056 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d828      	bhi.n	8007ff2 <UART_SetConfig+0x56a>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <UART_SetConfig+0x520>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fcd 	.word	0x08007fcd
 8007fac:	08007fd5 	.word	0x08007fd5
 8007fb0:	08007fdd 	.word	0x08007fdd
 8007fb4:	08007ff3 	.word	0x08007ff3
 8007fb8:	08007fe3 	.word	0x08007fe3
 8007fbc:	08007ff3 	.word	0x08007ff3
 8007fc0:	08007ff3 	.word	0x08007ff3
 8007fc4:	08007ff3 	.word	0x08007ff3
 8007fc8:	08007feb 	.word	0x08007feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fcc:	f7fd fd0a 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8007fd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fd2:	e014      	b.n	8007ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fd4:	f7fd fd1c 	bl	8005a10 <HAL_RCC_GetPCLK2Freq>
 8007fd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fda:	e010      	b.n	8007ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fdc:	4b1a      	ldr	r3, [pc, #104]	; (8008048 <UART_SetConfig+0x5c0>)
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fe0:	e00d      	b.n	8007ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fe2:	f7fd fc91 	bl	8005908 <HAL_RCC_GetSysClockFreq>
 8007fe6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fe8:	e009      	b.n	8007ffe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ff0:	e005      	b.n	8007ffe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ffc:	bf00      	nop
    }

    if (pclk != 0U)
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d028      	beq.n	8008056 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	4a10      	ldr	r2, [pc, #64]	; (800804c <UART_SetConfig+0x5c4>)
 800800a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800800e:	461a      	mov	r2, r3
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	fbb3 f2f2 	udiv	r2, r3, r2
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	085b      	lsrs	r3, r3, #1
 800801c:	441a      	add	r2, r3
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	fbb2 f3f3 	udiv	r3, r2, r3
 8008026:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	2b0f      	cmp	r3, #15
 800802c:	d910      	bls.n	8008050 <UART_SetConfig+0x5c8>
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008034:	d20c      	bcs.n	8008050 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	b29a      	uxth	r2, r3
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60da      	str	r2, [r3, #12]
 8008040:	e009      	b.n	8008056 <UART_SetConfig+0x5ce>
 8008042:	bf00      	nop
 8008044:	40008000 	.word	0x40008000
 8008048:	00f42400 	.word	0x00f42400
 800804c:	0800e310 	.word	0x0800e310
      }
      else
      {
        ret = HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2201      	movs	r2, #1
 800805a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2201      	movs	r2, #1
 8008062:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	2200      	movs	r2, #0
 800806a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2200      	movs	r2, #0
 8008070:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008072:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008076:	4618      	mov	r0, r3
 8008078:	3730      	adds	r7, #48	; 0x30
 800807a:	46bd      	mov	sp, r7
 800807c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008080 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00a      	beq.n	80080aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	430a      	orrs	r2, r1
 80080a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f2:	f003 0308 	and.w	r3, r3, #8
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008114:	f003 0310 	and.w	r3, r3, #16
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	430a      	orrs	r2, r1
 8008130:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008136:	f003 0320 	and.w	r3, r3, #32
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	430a      	orrs	r2, r1
 8008152:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01a      	beq.n	8008196 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	430a      	orrs	r2, r1
 8008174:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800817a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800817e:	d10a      	bne.n	8008196 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	430a      	orrs	r2, r1
 8008194:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00a      	beq.n	80081b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	605a      	str	r2, [r3, #4]
  }
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af02      	add	r7, sp, #8
 80081ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081d4:	f7f9 fe98 	bl	8001f08 <HAL_GetTick>
 80081d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b08      	cmp	r3, #8
 80081e6:	d10e      	bne.n	8008206 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f82f 	bl	800825a <UART_WaitOnFlagUntilTimeout>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e025      	b.n	8008252 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0304 	and.w	r3, r3, #4
 8008210:	2b04      	cmp	r3, #4
 8008212:	d10e      	bne.n	8008232 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f819 	bl	800825a <UART_WaitOnFlagUntilTimeout>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e00f      	b.n	8008252 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2220      	movs	r2, #32
 8008236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b09c      	sub	sp, #112	; 0x70
 800825e:	af00      	add	r7, sp, #0
 8008260:	60f8      	str	r0, [r7, #12]
 8008262:	60b9      	str	r1, [r7, #8]
 8008264:	603b      	str	r3, [r7, #0]
 8008266:	4613      	mov	r3, r2
 8008268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800826a:	e0a9      	b.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800826c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800826e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008272:	f000 80a5 	beq.w	80083c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008276:	f7f9 fe47 	bl	8001f08 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008282:	429a      	cmp	r2, r3
 8008284:	d302      	bcc.n	800828c <UART_WaitOnFlagUntilTimeout+0x32>
 8008286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008288:	2b00      	cmp	r3, #0
 800828a:	d140      	bne.n	800830e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800829a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800829c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082a0:	667b      	str	r3, [r7, #100]	; 0x64
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e6      	bne.n	800828c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3308      	adds	r3, #8
 80082c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	f023 0301 	bic.w	r3, r3, #1
 80082d4:	663b      	str	r3, [r7, #96]	; 0x60
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3308      	adds	r3, #8
 80082dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082de:	64ba      	str	r2, [r7, #72]	; 0x48
 80082e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082e6:	e841 2300 	strex	r3, r2, [r1]
 80082ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e5      	bne.n	80082be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2220      	movs	r2, #32
 80082f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2220      	movs	r2, #32
 80082fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e069      	b.n	80083e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d051      	beq.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	69db      	ldr	r3, [r3, #28]
 8008322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832a:	d149      	bne.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008334:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833e:	e853 3f00 	ldrex	r3, [r3]
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800834a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
 8008356:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800835a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800835c:	e841 2300 	strex	r3, r2, [r1]
 8008360:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1e6      	bne.n	8008336 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	3308      	adds	r3, #8
 800836e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	613b      	str	r3, [r7, #16]
   return(result);
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	f023 0301 	bic.w	r3, r3, #1
 800837e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3308      	adds	r3, #8
 8008386:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008388:	623a      	str	r2, [r7, #32]
 800838a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	69f9      	ldr	r1, [r7, #28]
 800838e:	6a3a      	ldr	r2, [r7, #32]
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	61bb      	str	r3, [r7, #24]
   return(result);
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e5      	bne.n	8008368 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2220      	movs	r2, #32
 80083a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2220      	movs	r2, #32
 80083a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e010      	b.n	80083e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	69da      	ldr	r2, [r3, #28]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4013      	ands	r3, r2
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	bf0c      	ite	eq
 80083d0:	2301      	moveq	r3, #1
 80083d2:	2300      	movne	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	461a      	mov	r2, r3
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	429a      	cmp	r2, r3
 80083dc:	f43f af46 	beq.w	800826c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3770      	adds	r7, #112	; 0x70
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b0a3      	sub	sp, #140	; 0x8c
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	4613      	mov	r3, r2
 80083f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	88fa      	ldrh	r2, [r7, #6]
 8008404:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	88fa      	ldrh	r2, [r7, #6]
 800840c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841e:	d10e      	bne.n	800843e <UART_Start_Receive_IT+0x52>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d105      	bne.n	8008434 <UART_Start_Receive_IT+0x48>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800842e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008432:	e02d      	b.n	8008490 <UART_Start_Receive_IT+0xa4>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	22ff      	movs	r2, #255	; 0xff
 8008438:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800843c:	e028      	b.n	8008490 <UART_Start_Receive_IT+0xa4>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10d      	bne.n	8008462 <UART_Start_Receive_IT+0x76>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d104      	bne.n	8008458 <UART_Start_Receive_IT+0x6c>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	22ff      	movs	r2, #255	; 0xff
 8008452:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008456:	e01b      	b.n	8008490 <UART_Start_Receive_IT+0xa4>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	227f      	movs	r2, #127	; 0x7f
 800845c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008460:	e016      	b.n	8008490 <UART_Start_Receive_IT+0xa4>
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800846a:	d10d      	bne.n	8008488 <UART_Start_Receive_IT+0x9c>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d104      	bne.n	800847e <UART_Start_Receive_IT+0x92>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	227f      	movs	r2, #127	; 0x7f
 8008478:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800847c:	e008      	b.n	8008490 <UART_Start_Receive_IT+0xa4>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	223f      	movs	r2, #63	; 0x3f
 8008482:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008486:	e003      	b.n	8008490 <UART_Start_Receive_IT+0xa4>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2222      	movs	r2, #34	; 0x22
 800849c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3308      	adds	r3, #8
 80084a6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084aa:	e853 3f00 	ldrex	r3, [r3]
 80084ae:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80084b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084b2:	f043 0301 	orr.w	r3, r3, #1
 80084b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3308      	adds	r3, #8
 80084c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80084c4:	673a      	str	r2, [r7, #112]	; 0x70
 80084c6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80084ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80084cc:	e841 2300 	strex	r3, r2, [r1]
 80084d0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80084d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1e3      	bne.n	80084a0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084e0:	d153      	bne.n	800858a <UART_Start_Receive_IT+0x19e>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80084e8:	88fa      	ldrh	r2, [r7, #6]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d34d      	bcc.n	800858a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f6:	d107      	bne.n	8008508 <UART_Start_Receive_IT+0x11c>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d103      	bne.n	8008508 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4a4b      	ldr	r2, [pc, #300]	; (8008630 <UART_Start_Receive_IT+0x244>)
 8008504:	671a      	str	r2, [r3, #112]	; 0x70
 8008506:	e002      	b.n	800850e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4a4a      	ldr	r2, [pc, #296]	; (8008634 <UART_Start_Receive_IT+0x248>)
 800850c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	691b      	ldr	r3, [r3, #16]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d01a      	beq.n	8008554 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008526:	e853 3f00 	ldrex	r3, [r3]
 800852a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800852c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800852e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008532:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008542:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008546:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800854e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e4      	bne.n	800851e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3308      	adds	r3, #8
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800856a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3308      	adds	r3, #8
 8008572:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008574:	64ba      	str	r2, [r7, #72]	; 0x48
 8008576:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800857a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e5      	bne.n	8008554 <UART_Start_Receive_IT+0x168>
 8008588:	e04a      	b.n	8008620 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008592:	d107      	bne.n	80085a4 <UART_Start_Receive_IT+0x1b8>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d103      	bne.n	80085a4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	4a26      	ldr	r2, [pc, #152]	; (8008638 <UART_Start_Receive_IT+0x24c>)
 80085a0:	671a      	str	r2, [r3, #112]	; 0x70
 80085a2:	e002      	b.n	80085aa <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4a25      	ldr	r2, [pc, #148]	; (800863c <UART_Start_Receive_IT+0x250>)
 80085a8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d019      	beq.n	80085ee <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ca:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80085ce:	677b      	str	r3, [r7, #116]	; 0x74
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	461a      	mov	r2, r3
 80085d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085d8:	637b      	str	r3, [r7, #52]	; 0x34
 80085da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085e0:	e841 2300 	strex	r3, r2, [r1]
 80085e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1e6      	bne.n	80085ba <UART_Start_Receive_IT+0x1ce>
 80085ec:	e018      	b.n	8008620 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	e853 3f00 	ldrex	r3, [r3]
 80085fa:	613b      	str	r3, [r7, #16]
   return(result);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	f043 0320 	orr.w	r3, r3, #32
 8008602:	67bb      	str	r3, [r7, #120]	; 0x78
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	461a      	mov	r2, r3
 800860a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800860c:	623b      	str	r3, [r7, #32]
 800860e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008610:	69f9      	ldr	r1, [r7, #28]
 8008612:	6a3a      	ldr	r2, [r7, #32]
 8008614:	e841 2300 	strex	r3, r2, [r1]
 8008618:	61bb      	str	r3, [r7, #24]
   return(result);
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1e6      	bne.n	80085ee <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	378c      	adds	r7, #140	; 0x8c
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	08008d49 	.word	0x08008d49
 8008634:	08008a51 	.word	0x08008a51
 8008638:	080088ef 	.word	0x080088ef
 800863c:	0800878f 	.word	0x0800878f

08008640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008640:	b480      	push	{r7}
 8008642:	b095      	sub	sp, #84	; 0x54
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800865c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008666:	643b      	str	r3, [r7, #64]	; 0x40
 8008668:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800866c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800866e:	e841 2300 	strex	r3, r2, [r1]
 8008672:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008676:	2b00      	cmp	r3, #0
 8008678:	d1e6      	bne.n	8008648 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3308      	adds	r3, #8
 8008680:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	61fb      	str	r3, [r7, #28]
   return(result);
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008690:	f023 0301 	bic.w	r3, r3, #1
 8008694:	64bb      	str	r3, [r7, #72]	; 0x48
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3308      	adds	r3, #8
 800869c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800869e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086a6:	e841 2300 	strex	r3, r2, [r1]
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1e3      	bne.n	800867a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d118      	bne.n	80086ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f023 0310 	bic.w	r3, r3, #16
 80086ce:	647b      	str	r3, [r7, #68]	; 0x44
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	461a      	mov	r2, r3
 80086d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086d8:	61bb      	str	r3, [r7, #24]
 80086da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086dc:	6979      	ldr	r1, [r7, #20]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	e841 2300 	strex	r3, r2, [r1]
 80086e4:	613b      	str	r3, [r7, #16]
   return(result);
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1e6      	bne.n	80086ba <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008700:	bf00      	nop
 8008702:	3754      	adds	r7, #84	; 0x54
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2200      	movs	r2, #0
 8008726:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f7ff f996 	bl	8007a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008730:	bf00      	nop
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	60bb      	str	r3, [r7, #8]
   return(result);
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008754:	61fb      	str	r3, [r7, #28]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	61bb      	str	r3, [r7, #24]
 8008760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6979      	ldr	r1, [r7, #20]
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	613b      	str	r3, [r7, #16]
   return(result);
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e6      	bne.n	8008740 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2220      	movs	r2, #32
 8008776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff f961 	bl	8007a48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008786:	bf00      	nop
 8008788:	3720      	adds	r7, #32
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b096      	sub	sp, #88	; 0x58
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800879c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a6:	2b22      	cmp	r3, #34	; 0x22
 80087a8:	f040 8095 	bne.w	80088d6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80087b6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80087ba:	b2d9      	uxtb	r1, r3
 80087bc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c6:	400a      	ands	r2, r1
 80087c8:	b2d2      	uxtb	r2, r2
 80087ca:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087dc:	b29b      	uxth	r3, r3
 80087de:	3b01      	subs	r3, #1
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d178      	bne.n	80088e6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fc:	e853 3f00 	ldrex	r3, [r3]
 8008800:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008804:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008808:	653b      	str	r3, [r7, #80]	; 0x50
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	461a      	mov	r2, r3
 8008810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008812:	647b      	str	r3, [r7, #68]	; 0x44
 8008814:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e6      	bne.n	80087f4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3308      	adds	r3, #8
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008830:	e853 3f00 	ldrex	r3, [r3]
 8008834:	623b      	str	r3, [r7, #32]
   return(result);
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	f023 0301 	bic.w	r3, r3, #1
 800883c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3308      	adds	r3, #8
 8008844:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008846:	633a      	str	r2, [r7, #48]	; 0x30
 8008848:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800884c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e5      	bne.n	8008826 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886c:	2b01      	cmp	r3, #1
 800886e:	d12e      	bne.n	80088ce <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	60fb      	str	r3, [r7, #12]
   return(result);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f023 0310 	bic.w	r3, r3, #16
 800888a:	64bb      	str	r3, [r7, #72]	; 0x48
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	461a      	mov	r2, r3
 8008892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008894:	61fb      	str	r3, [r7, #28]
 8008896:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	69b9      	ldr	r1, [r7, #24]
 800889a:	69fa      	ldr	r2, [r7, #28]
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	617b      	str	r3, [r7, #20]
   return(result);
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e6      	bne.n	8008876 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	69db      	ldr	r3, [r3, #28]
 80088ae:	f003 0310 	and.w	r3, r3, #16
 80088b2:	2b10      	cmp	r3, #16
 80088b4:	d103      	bne.n	80088be <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2210      	movs	r2, #16
 80088bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7ff f8d2 	bl	8007a70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80088cc:	e00b      	b.n	80088e6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fd74 	bl	80093bc <HAL_UART_RxCpltCallback>
}
 80088d4:	e007      	b.n	80088e6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	699a      	ldr	r2, [r3, #24]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f042 0208 	orr.w	r2, r2, #8
 80088e4:	619a      	str	r2, [r3, #24]
}
 80088e6:	bf00      	nop
 80088e8:	3758      	adds	r7, #88	; 0x58
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b096      	sub	sp, #88	; 0x58
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80088fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008906:	2b22      	cmp	r3, #34	; 0x22
 8008908:	f040 8095 	bne.w	8008a36 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800891a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800891c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008920:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008924:	4013      	ands	r3, r2
 8008926:	b29a      	uxth	r2, r3
 8008928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800892a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008930:	1c9a      	adds	r2, r3, #2
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800893c:	b29b      	uxth	r3, r3
 800893e:	3b01      	subs	r3, #1
 8008940:	b29a      	uxth	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d178      	bne.n	8008a46 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895c:	e853 3f00 	ldrex	r3, [r3]
 8008960:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008964:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008968:	64fb      	str	r3, [r7, #76]	; 0x4c
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	461a      	mov	r2, r3
 8008970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008972:	643b      	str	r3, [r7, #64]	; 0x40
 8008974:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008978:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800897a:	e841 2300 	strex	r3, r2, [r1]
 800897e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008982:	2b00      	cmp	r3, #0
 8008984:	d1e6      	bne.n	8008954 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3308      	adds	r3, #8
 800898c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	e853 3f00 	ldrex	r3, [r3]
 8008994:	61fb      	str	r3, [r7, #28]
   return(result);
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	f023 0301 	bic.w	r3, r3, #1
 800899c:	64bb      	str	r3, [r7, #72]	; 0x48
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3308      	adds	r3, #8
 80089a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089ae:	e841 2300 	strex	r3, r2, [r1]
 80089b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1e5      	bne.n	8008986 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2220      	movs	r2, #32
 80089be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d12e      	bne.n	8008a2e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	e853 3f00 	ldrex	r3, [r3]
 80089e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	f023 0310 	bic.w	r3, r3, #16
 80089ea:	647b      	str	r3, [r7, #68]	; 0x44
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	461a      	mov	r2, r3
 80089f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089f4:	61bb      	str	r3, [r7, #24]
 80089f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f8:	6979      	ldr	r1, [r7, #20]
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	e841 2300 	strex	r3, r2, [r1]
 8008a00:	613b      	str	r3, [r7, #16]
   return(result);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d1e6      	bne.n	80089d6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	69db      	ldr	r3, [r3, #28]
 8008a0e:	f003 0310 	and.w	r3, r3, #16
 8008a12:	2b10      	cmp	r3, #16
 8008a14:	d103      	bne.n	8008a1e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2210      	movs	r2, #16
 8008a1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a24:	4619      	mov	r1, r3
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7ff f822 	bl	8007a70 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a2c:	e00b      	b.n	8008a46 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fcc4 	bl	80093bc <HAL_UART_RxCpltCallback>
}
 8008a34:	e007      	b.n	8008a46 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	699a      	ldr	r2, [r3, #24]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f042 0208 	orr.w	r2, r2, #8
 8008a44:	619a      	str	r2, [r3, #24]
}
 8008a46:	bf00      	nop
 8008a48:	3758      	adds	r7, #88	; 0x58
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b0a6      	sub	sp, #152	; 0x98
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a5e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69db      	ldr	r3, [r3, #28]
 8008a68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a86:	2b22      	cmp	r3, #34	; 0x22
 8008a88:	f040 814f 	bne.w	8008d2a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a92:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a96:	e0f6      	b.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008aa2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008aa6:	b2d9      	uxtb	r1, r3
 8008aa8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab2:	400a      	ands	r2, r1
 8008ab4:	b2d2      	uxtb	r2, r2
 8008ab6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008abc:	1c5a      	adds	r2, r3, #1
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	3b01      	subs	r3, #1
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ae2:	f003 0307 	and.w	r3, r3, #7
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d053      	beq.n	8008b92 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008aea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d011      	beq.n	8008b1a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00b      	beq.n	8008b1a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2201      	movs	r2, #1
 8008b08:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b10:	f043 0201 	orr.w	r2, r3, #1
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d011      	beq.n	8008b4a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b2a:	f003 0301 	and.w	r3, r3, #1
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00b      	beq.n	8008b4a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2202      	movs	r2, #2
 8008b38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b40:	f043 0204 	orr.w	r2, r3, #4
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008b4e:	f003 0304 	and.w	r3, r3, #4
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d011      	beq.n	8008b7a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008b56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00b      	beq.n	8008b7a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2204      	movs	r2, #4
 8008b68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b70:	f043 0202 	orr.w	r2, r3, #2
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d006      	beq.n	8008b92 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7fe ff69 	bl	8007a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d173      	bne.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ba6:	e853 3f00 	ldrex	r3, [r3]
 8008baa:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	461a      	mov	r2, r3
 8008bbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008bc0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bc2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008bc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bc8:	e841 2300 	strex	r3, r2, [r1]
 8008bcc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1e4      	bne.n	8008b9e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3308      	adds	r3, #8
 8008bda:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bde:	e853 3f00 	ldrex	r3, [r3]
 8008be2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bea:	f023 0301 	bic.w	r3, r3, #1
 8008bee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008bf8:	657a      	str	r2, [r7, #84]	; 0x54
 8008bfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c00:	e841 2300 	strex	r3, r2, [r1]
 8008c04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d1e3      	bne.n	8008bd4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d12e      	bne.n	8008c80 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2200      	movs	r2, #0
 8008c26:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c30:	e853 3f00 	ldrex	r3, [r3]
 8008c34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c38:	f023 0310 	bic.w	r3, r3, #16
 8008c3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c46:	643b      	str	r3, [r7, #64]	; 0x40
 8008c48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c4e:	e841 2300 	strex	r3, r2, [r1]
 8008c52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1e6      	bne.n	8008c28 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	f003 0310 	and.w	r3, r3, #16
 8008c64:	2b10      	cmp	r3, #16
 8008c66:	d103      	bne.n	8008c70 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2210      	movs	r2, #16
 8008c6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7fe fef9 	bl	8007a70 <HAL_UARTEx_RxEventCallback>
 8008c7e:	e002      	b.n	8008c86 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fb9b 	bl	80093bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d006      	beq.n	8008c9c <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f47f aefe 	bne.w	8008a98 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ca2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008ca6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d045      	beq.n	8008d3a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cb4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d23e      	bcs.n	8008d3a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	e853 3f00 	ldrex	r3, [r3]
 8008cca:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cd2:	673b      	str	r3, [r7, #112]	; 0x70
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008cdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ce4:	e841 2300 	strex	r3, r2, [r1]
 8008ce8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1e5      	bne.n	8008cbc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a14      	ldr	r2, [pc, #80]	; (8008d44 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008cf4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	e853 3f00 	ldrex	r3, [r3]
 8008d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f043 0320 	orr.w	r3, r3, #32
 8008d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d14:	61bb      	str	r3, [r7, #24]
 8008d16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d18:	6979      	ldr	r1, [r7, #20]
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	e841 2300 	strex	r3, r2, [r1]
 8008d20:	613b      	str	r3, [r7, #16]
   return(result);
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1e6      	bne.n	8008cf6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d28:	e007      	b.n	8008d3a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	699a      	ldr	r2, [r3, #24]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f042 0208 	orr.w	r2, r2, #8
 8008d38:	619a      	str	r2, [r3, #24]
}
 8008d3a:	bf00      	nop
 8008d3c:	3798      	adds	r7, #152	; 0x98
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	0800878f 	.word	0x0800878f

08008d48 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b0a8      	sub	sp, #160	; 0xa0
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d56:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7e:	2b22      	cmp	r3, #34	; 0x22
 8008d80:	f040 8153 	bne.w	800902a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d8a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d8e:	e0fa      	b.n	8008f86 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008da2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008da6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008daa:	4013      	ands	r3, r2
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008db2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db8:	1c9a      	adds	r2, r3, #2
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008dda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d053      	beq.n	8008e8e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008de6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d011      	beq.n	8008e16 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008df2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00b      	beq.n	8008e16 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2201      	movs	r2, #1
 8008e04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e0c:	f043 0201 	orr.w	r2, r3, #1
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d011      	beq.n	8008e46 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00b      	beq.n	8008e46 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2202      	movs	r2, #2
 8008e34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e3c:	f043 0204 	orr.w	r2, r3, #4
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008e4a:	f003 0304 	and.w	r3, r3, #4
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d011      	beq.n	8008e76 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008e52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00b      	beq.n	8008e76 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	2204      	movs	r2, #4
 8008e64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e6c:	f043 0202 	orr.w	r2, r3, #2
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d006      	beq.n	8008e8e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7fe fdeb 	bl	8007a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d175      	bne.n	8008f86 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ea2:	e853 3f00 	ldrex	r3, [r3]
 8008ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ebe:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ec2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ec4:	e841 2300 	strex	r3, r2, [r1]
 8008ec8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008eca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1e4      	bne.n	8008e9a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3308      	adds	r3, #8
 8008ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eda:	e853 3f00 	ldrex	r3, [r3]
 8008ede:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ee6:	f023 0301 	bic.w	r3, r3, #1
 8008eea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ef8:	65ba      	str	r2, [r7, #88]	; 0x58
 8008efa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008efe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f00:	e841 2300 	strex	r3, r2, [r1]
 8008f04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1e1      	bne.n	8008ed0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	d12e      	bne.n	8008f80 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f38:	f023 0310 	bic.w	r3, r3, #16
 8008f3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	461a      	mov	r2, r3
 8008f44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f46:	647b      	str	r3, [r7, #68]	; 0x44
 8008f48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f4e:	e841 2300 	strex	r3, r2, [r1]
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1e6      	bne.n	8008f28 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	69db      	ldr	r3, [r3, #28]
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b10      	cmp	r3, #16
 8008f66:	d103      	bne.n	8008f70 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2210      	movs	r2, #16
 8008f6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7fe fd79 	bl	8007a70 <HAL_UARTEx_RxEventCallback>
 8008f7e:	e002      	b.n	8008f86 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fa1b 	bl	80093bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f86:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d006      	beq.n	8008f9c <UART_RxISR_16BIT_FIFOEN+0x254>
 8008f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f92:	f003 0320 	and.w	r3, r3, #32
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f47f aefa 	bne.w	8008d90 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fa2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008fa6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d045      	beq.n	800903a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fb4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d23e      	bcs.n	800903a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	3308      	adds	r3, #8
 8008fc2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	e853 3f00 	ldrex	r3, [r3]
 8008fca:	623b      	str	r3, [r7, #32]
   return(result);
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fd2:	677b      	str	r3, [r7, #116]	; 0x74
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3308      	adds	r3, #8
 8008fda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008fdc:	633a      	str	r2, [r7, #48]	; 0x30
 8008fde:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe4:	e841 2300 	strex	r3, r2, [r1]
 8008fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1e5      	bne.n	8008fbc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a14      	ldr	r2, [pc, #80]	; (8009044 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008ff4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	60fb      	str	r3, [r7, #12]
   return(result);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f043 0320 	orr.w	r3, r3, #32
 800900a:	673b      	str	r3, [r7, #112]	; 0x70
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009014:	61fb      	str	r3, [r7, #28]
 8009016:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	69b9      	ldr	r1, [r7, #24]
 800901a:	69fa      	ldr	r2, [r7, #28]
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	617b      	str	r3, [r7, #20]
   return(result);
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e6      	bne.n	8008ff6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009028:	e007      	b.n	800903a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	699a      	ldr	r2, [r3, #24]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f042 0208 	orr.w	r2, r2, #8
 8009038:	619a      	str	r2, [r3, #24]
}
 800903a:	bf00      	nop
 800903c:	37a0      	adds	r7, #160	; 0xa0
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	080088ef 	.word	0x080088ef

08009048 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009084:	b480      	push	{r7}
 8009086:	b085      	sub	sp, #20
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009092:	2b01      	cmp	r3, #1
 8009094:	d101      	bne.n	800909a <HAL_UARTEx_DisableFifoMode+0x16>
 8009096:	2302      	movs	r3, #2
 8009098:	e027      	b.n	80090ea <HAL_UARTEx_DisableFifoMode+0x66>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2224      	movs	r2, #36	; 0x24
 80090a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f022 0201 	bic.w	r2, r2, #1
 80090c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2220      	movs	r2, #32
 80090dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3714      	adds	r7, #20
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b084      	sub	sp, #16
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
 80090fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009106:	2b01      	cmp	r3, #1
 8009108:	d101      	bne.n	800910e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800910a:	2302      	movs	r3, #2
 800910c:	e02d      	b.n	800916a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2224      	movs	r2, #36	; 0x24
 800911a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 0201 	bic.w	r2, r2, #1
 8009134:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	430a      	orrs	r2, r1
 8009148:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f850 	bl	80091f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2220      	movs	r2, #32
 800915c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009182:	2b01      	cmp	r3, #1
 8009184:	d101      	bne.n	800918a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009186:	2302      	movs	r3, #2
 8009188:	e02d      	b.n	80091e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2224      	movs	r2, #36	; 0x24
 8009196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f022 0201 	bic.w	r2, r2, #1
 80091b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f812 	bl	80091f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2220      	movs	r2, #32
 80091d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d108      	bne.n	8009212 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009210:	e031      	b.n	8009276 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009212:	2308      	movs	r3, #8
 8009214:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009216:	2308      	movs	r3, #8
 8009218:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	0e5b      	lsrs	r3, r3, #25
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 0307 	and.w	r3, r3, #7
 8009228:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	0f5b      	lsrs	r3, r3, #29
 8009232:	b2db      	uxtb	r3, r3
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	7b3a      	ldrb	r2, [r7, #12]
 800923e:	4911      	ldr	r1, [pc, #68]	; (8009284 <UARTEx_SetNbDataToProcess+0x94>)
 8009240:	5c8a      	ldrb	r2, [r1, r2]
 8009242:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009246:	7b3a      	ldrb	r2, [r7, #12]
 8009248:	490f      	ldr	r1, [pc, #60]	; (8009288 <UARTEx_SetNbDataToProcess+0x98>)
 800924a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800924c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009250:	b29a      	uxth	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	7b7a      	ldrb	r2, [r7, #13]
 800925c:	4909      	ldr	r1, [pc, #36]	; (8009284 <UARTEx_SetNbDataToProcess+0x94>)
 800925e:	5c8a      	ldrb	r2, [r1, r2]
 8009260:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009264:	7b7a      	ldrb	r2, [r7, #13]
 8009266:	4908      	ldr	r1, [pc, #32]	; (8009288 <UARTEx_SetNbDataToProcess+0x98>)
 8009268:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800926a:	fb93 f3f2 	sdiv	r3, r3, r2
 800926e:	b29a      	uxth	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009276:	bf00      	nop
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	0800e328 	.word	0x0800e328
 8009288:	0800e330 	.word	0x0800e330

0800928c <USER_ADC_ConfigFilter>:

COMPONENT_ADCFilter FilterSignal ={50000,100000,0};
/*Static funtion*/

void USER_ADC_ConfigFilter(COMPONENT_ADCFilter FilterSignalConfig)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	eef0 6a40 	vmov.f32	s13, s0
 8009296:	eeb0 7a60 	vmov.f32	s14, s1
 800929a:	eef0 7a41 	vmov.f32	s15, s2
 800929e:	edc7 6a01 	vstr	s13, [r7, #4]
 80092a2:	ed87 7a02 	vstr	s14, [r7, #8]
 80092a6:	edc7 7a03 	vstr	s15, [r7, #12]
	FilterSignal.cutoffFreq = FilterSignalConfig.cutoffFreq;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a04      	ldr	r2, [pc, #16]	; (80092c0 <USER_ADC_ConfigFilter+0x34>)
 80092ae:	6013      	str	r3, [r2, #0]
	FilterSignalConfig.sampleTime = FilterSignalConfig.sampleTime;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	60bb      	str	r3, [r7, #8]
}
 80092b4:	bf00      	nop
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr
 80092c0:	2000000c 	.word	0x2000000c

080092c4 <USER_ADC_handleString>:
	FilterSignal.output = __USER_FILTER_LowPassFilter(rawSignal, FilterSignal.cutoffFreq, FilterSignal.sampleTime,channelADC);
	return FilterSignal.output;
}
/*Syntax buffer ADC-100-100000(ADC-cutoff-samplingtime) */
COMPONENT_ADCFilter USER_ADC_handleString(char* Buffer)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08e      	sub	sp, #56	; 0x38
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6178      	str	r0, [r7, #20]
	COMPONENT_ADCFilter var;
	char* ptr = NULL;
 80092cc:	2300      	movs	r3, #0
 80092ce:	637b      	str	r3, [r7, #52]	; 0x34
	ptr = strtok(Buffer,"-");
 80092d0:	491a      	ldr	r1, [pc, #104]	; (800933c <USER_ADC_handleString+0x78>)
 80092d2:	6978      	ldr	r0, [r7, #20]
 80092d4:	f001 ffb8 	bl	800b248 <strtok>
 80092d8:	6378      	str	r0, [r7, #52]	; 0x34
	ptr = strtok(NULL,"-");
 80092da:	4918      	ldr	r1, [pc, #96]	; (800933c <USER_ADC_handleString+0x78>)
 80092dc:	2000      	movs	r0, #0
 80092de:	f001 ffb3 	bl	800b248 <strtok>
 80092e2:	6378      	str	r0, [r7, #52]	; 0x34
	var.cutoffFreq = atoff(ptr);
 80092e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80092e6:	f000 fa2b 	bl	8009740 <atoff>
 80092ea:	eef0 7a40 	vmov.f32	s15, s0
 80092ee:	edc7 7a07 	vstr	s15, [r7, #28]
	ptr = strtok(NULL,"-");
 80092f2:	4912      	ldr	r1, [pc, #72]	; (800933c <USER_ADC_handleString+0x78>)
 80092f4:	2000      	movs	r0, #0
 80092f6:	f001 ffa7 	bl	800b248 <strtok>
 80092fa:	6378      	str	r0, [r7, #52]	; 0x34
	var.sampleTime = atoff(ptr);
 80092fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80092fe:	f000 fa1f 	bl	8009740 <atoff>
 8009302:	eef0 7a40 	vmov.f32	s15, s0
 8009306:	edc7 7a08 	vstr	s15, [r7, #32]

	return var;
 800930a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800930e:	f107 021c 	add.w	r2, r7, #28
 8009312:	ca07      	ldmia	r2, {r0, r1, r2}
 8009314:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800931a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	ee06 1a90 	vmov	s13, r1
 8009322:	ee07 2a10 	vmov	s14, r2
 8009326:	ee07 3a90 	vmov	s15, r3
}
 800932a:	eeb0 0a66 	vmov.f32	s0, s13
 800932e:	eef0 0a47 	vmov.f32	s1, s14
 8009332:	eeb0 1a67 	vmov.f32	s2, s15
 8009336:	3738      	adds	r7, #56	; 0x38
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	0800e2f0 	.word	0x0800e2f0

08009340 <USER_ADC_GetInforFilter>:

COMPONENT_ADCFilter USER_ADC_GetInforFilter(void)
{
 8009340:	b480      	push	{r7}
 8009342:	b089      	sub	sp, #36	; 0x24
 8009344:	af00      	add	r7, sp, #0
	return FilterSignal;
 8009346:	4a0d      	ldr	r2, [pc, #52]	; (800937c <USER_ADC_GetInforFilter+0x3c>)
 8009348:	f107 0314 	add.w	r3, r7, #20
 800934c:	ca07      	ldmia	r2, {r0, r1, r2}
 800934e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009352:	6979      	ldr	r1, [r7, #20]
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	ee06 1a90 	vmov	s13, r1
 800935c:	ee07 2a10 	vmov	s14, r2
 8009360:	ee07 3a90 	vmov	s15, r3
}
 8009364:	eeb0 0a66 	vmov.f32	s0, s13
 8009368:	eef0 0a47 	vmov.f32	s1, s14
 800936c:	eeb0 1a67 	vmov.f32	s2, s15
 8009370:	3724      	adds	r7, #36	; 0x24
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	2000000c 	.word	0x2000000c

08009380 <USER_CALLBACK_init>:
uint8_t CheckFlagUSART = 0;/*************************************************** Flag checking when UART jump into CallBack funtion*/
uint16_t Voltage_Variable = 0;/*********************************************** Voltage Variable*/
uint32_t ADCVar[3];

void USER_CALLBACK_init(void)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8009384:	2104      	movs	r1, #4
 8009386:	4808      	ldr	r0, [pc, #32]	; (80093a8 <USER_CALLBACK_init+0x28>)
 8009388:	f7fc fea4 	bl	80060d4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800938c:	2100      	movs	r1, #0
 800938e:	4807      	ldr	r0, [pc, #28]	; (80093ac <USER_CALLBACK_init+0x2c>)
 8009390:	f7fc fea0 	bl	80060d4 <HAL_TIM_PWM_Start>
//	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
	 // HAL_TIM_Base_Start_IT(&htim2);
	//  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);/******************************* To disable ADC*/
	  /*Start Interrupt Function*/
	  /****Uart Transfer*****/
	  HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx_data, 1);
 8009394:	2201      	movs	r2, #1
 8009396:	4906      	ldr	r1, [pc, #24]	; (80093b0 <USER_CALLBACK_init+0x30>)
 8009398:	4806      	ldr	r0, [pc, #24]	; (80093b4 <USER_CALLBACK_init+0x34>)
 800939a:	f7fd ffe7 	bl	800736c <HAL_UART_Receive_IT>
	  /**** ADC Start 1********/
	  //HAL_ADC_Start_IT(&hadc1);
	  /**** ADC 4 Start with DMA*****/
	  //HAL_ADC_Start_DMA(&hadc3,ADCVar,3);
	  HAL_ADC_Start_IT(&hadc3);
 800939e:	4806      	ldr	r0, [pc, #24]	; (80093b8 <USER_CALLBACK_init+0x38>)
 80093a0:	f7f9 f9c4 	bl	800272c <HAL_ADC_Start_IT>
	  // Use HAL_ADC_Start when want to start mesuare ADC
	  // HAL_ADC_Stop to stop mesuare
}
 80093a4:	bf00      	nop
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	200002e4 	.word	0x200002e4
 80093ac:	20000330 	.word	0x20000330
 80093b0:	200004a0 	.word	0x200004a0
 80093b4:	2000037c 	.word	0x2000037c
 80093b8:	20000278 	.word	0x20000278

080093bc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a10      	ldr	r2, [pc, #64]	; (800940c <HAL_UART_RxCpltCallback+0x50>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d119      	bne.n	8009402 <HAL_UART_RxCpltCallback+0x46>
	{
		Rx_Buffer[count++] = Rx_data[0];
 80093ce:	4b10      	ldr	r3, [pc, #64]	; (8009410 <HAL_UART_RxCpltCallback+0x54>)
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	1c5a      	adds	r2, r3, #1
 80093d4:	b2d1      	uxtb	r1, r2
 80093d6:	4a0e      	ldr	r2, [pc, #56]	; (8009410 <HAL_UART_RxCpltCallback+0x54>)
 80093d8:	7011      	strb	r1, [r2, #0]
 80093da:	461a      	mov	r2, r3
 80093dc:	4b0d      	ldr	r3, [pc, #52]	; (8009414 <HAL_UART_RxCpltCallback+0x58>)
 80093de:	7819      	ldrb	r1, [r3, #0]
 80093e0:	4b0d      	ldr	r3, [pc, #52]	; (8009418 <HAL_UART_RxCpltCallback+0x5c>)
 80093e2:	5499      	strb	r1, [r3, r2]
		if((Rx_data[0]) == '\r')
 80093e4:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <HAL_UART_RxCpltCallback+0x58>)
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	2b0d      	cmp	r3, #13
 80093ea:	d105      	bne.n	80093f8 <HAL_UART_RxCpltCallback+0x3c>
		{
			count = 0;
 80093ec:	4b08      	ldr	r3, [pc, #32]	; (8009410 <HAL_UART_RxCpltCallback+0x54>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	701a      	strb	r2, [r3, #0]
			CheckFlagUSART = 1;
 80093f2:	4b0a      	ldr	r3, [pc, #40]	; (800941c <HAL_UART_RxCpltCallback+0x60>)
 80093f4:	2201      	movs	r2, #1
 80093f6:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, (uint8_t*)Rx_data,1);
 80093f8:	2201      	movs	r2, #1
 80093fa:	4906      	ldr	r1, [pc, #24]	; (8009414 <HAL_UART_RxCpltCallback+0x58>)
 80093fc:	4808      	ldr	r0, [pc, #32]	; (8009420 <HAL_UART_RxCpltCallback+0x64>)
 80093fe:	f7fd ffb5 	bl	800736c <HAL_UART_Receive_IT>
	}
}
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	40004400 	.word	0x40004400
 8009410:	200004b8 	.word	0x200004b8
 8009414:	200004a0 	.word	0x200004a0
 8009418:	200004a4 	.word	0x200004a4
 800941c:	200004ba 	.word	0x200004ba
 8009420:	2000037c 	.word	0x2000037c

08009424 <HAL_ADC_ConvCpltCallback>:
/********Conversion complete callback in non-blocking mode***/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	4b0a      	ldr	r3, [pc, #40]	; (800945c <HAL_ADC_ConvCpltCallback+0x38>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d102      	bne.n	800943e <HAL_ADC_ConvCpltCallback+0x1a>
	{
		CheckFlagADC = 1;
 8009438:	4b09      	ldr	r3, [pc, #36]	; (8009460 <HAL_ADC_ConvCpltCallback+0x3c>)
 800943a:	2201      	movs	r2, #1
 800943c:	701a      	strb	r2, [r3, #0]
	}
	if(hadc->Instance == hadc3.Instance)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	4b08      	ldr	r3, [pc, #32]	; (8009464 <HAL_ADC_ConvCpltCallback+0x40>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d102      	bne.n	8009450 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		CheckFlagADC = 1;
 800944a:	4b05      	ldr	r3, [pc, #20]	; (8009460 <HAL_ADC_ConvCpltCallback+0x3c>)
 800944c:	2201      	movs	r2, #1
 800944e:	701a      	strb	r2, [r3, #0]
	}
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	2000020c 	.word	0x2000020c
 8009460:	200004b9 	.word	0x200004b9
 8009464:	20000278 	.word	0x20000278

08009468 <USER_CALLBACK_clearRxBuffer>:

void USER_CALLBACK_clearRxBuffer(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
	memset(Rx_Buffer,'\0',strlen(Rx_Buffer));
 800946c:	4805      	ldr	r0, [pc, #20]	; (8009484 <USER_CALLBACK_clearRxBuffer+0x1c>)
 800946e:	f7f6 fed7 	bl	8000220 <strlen>
 8009472:	4603      	mov	r3, r0
 8009474:	461a      	mov	r2, r3
 8009476:	2100      	movs	r1, #0
 8009478:	4802      	ldr	r0, [pc, #8]	; (8009484 <USER_CALLBACK_clearRxBuffer+0x1c>)
 800947a:	f000 f9a1 	bl	80097c0 <memset>
}
 800947e:	bf00      	nop
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	200004a4 	.word	0x200004a4

08009488 <USER_CALLBACK_clearRxData>:
void USER_CALLBACK_clearRxData(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
	memset(Rx_data,'\0',strlen(Rx_data));
 800948c:	4805      	ldr	r0, [pc, #20]	; (80094a4 <USER_CALLBACK_clearRxData+0x1c>)
 800948e:	f7f6 fec7 	bl	8000220 <strlen>
 8009492:	4603      	mov	r3, r0
 8009494:	461a      	mov	r2, r3
 8009496:	2100      	movs	r1, #0
 8009498:	4802      	ldr	r0, [pc, #8]	; (80094a4 <USER_CALLBACK_clearRxData+0x1c>)
 800949a:	f000 f991 	bl	80097c0 <memset>
}
 800949e:	bf00      	nop
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	200004a0 	.word	0x200004a0

080094a8 <__USER_TIMER_convertU16>:
/****Static Prototype *****/
static uint16_t __USER_TIMER_convertU16(int DutyCycle);

/****Define function********************/
static uint16_t __USER_TIMER_convertU16(int DutyCycle)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
	return (uint16_t)DutyCycle;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	b29b      	uxth	r3, r3
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <USER_TIMER_setValueOfPWM>:


void USER_TIMER_setValueOfPWM(COMPONENT_TIMER TimerVariable)
{
 80094c0:	b590      	push	{r4, r7, lr}
 80094c2:	b099      	sub	sp, #100	; 0x64
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	463c      	mov	r4, r7
 80094c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TIM_HandleTypeDef htim;
	switch(TimerVariable.NumberOfTimer)
 80094cc:	88bb      	ldrh	r3, [r7, #4]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d002      	beq.n	80094d8 <USER_TIMER_setValueOfPWM+0x18>
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d009      	beq.n	80094ea <USER_TIMER_setValueOfPWM+0x2a>
 80094d6:	e011      	b.n	80094fc <USER_TIMER_setValueOfPWM+0x3c>
	{
		case 2:
			htim = htim2;
 80094d8:	4a3e      	ldr	r2, [pc, #248]	; (80095d4 <USER_TIMER_setValueOfPWM+0x114>)
 80094da:	f107 0314 	add.w	r3, r7, #20
 80094de:	4611      	mov	r1, r2
 80094e0:	224c      	movs	r2, #76	; 0x4c
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 f95e 	bl	80097a4 <memcpy>
			break;
 80094e8:	e008      	b.n	80094fc <USER_TIMER_setValueOfPWM+0x3c>
		case 3:
			htim = htim3;
 80094ea:	4a3b      	ldr	r2, [pc, #236]	; (80095d8 <USER_TIMER_setValueOfPWM+0x118>)
 80094ec:	f107 0314 	add.w	r3, r7, #20
 80094f0:	4611      	mov	r1, r2
 80094f2:	224c      	movs	r2, #76	; 0x4c
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 f955 	bl	80097a4 <memcpy>
			break;
 80094fa:	bf00      	nop
	}
	switch (TimerVariable.Channel)
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d00c      	beq.n	800951c <USER_TIMER_setValueOfPWM+0x5c>
 8009502:	2b03      	cmp	r3, #3
 8009504:	d80d      	bhi.n	8009522 <USER_TIMER_setValueOfPWM+0x62>
 8009506:	2b01      	cmp	r3, #1
 8009508:	d002      	beq.n	8009510 <USER_TIMER_setValueOfPWM+0x50>
 800950a:	2b02      	cmp	r3, #2
 800950c:	d003      	beq.n	8009516 <USER_TIMER_setValueOfPWM+0x56>
 800950e:	e008      	b.n	8009522 <USER_TIMER_setValueOfPWM+0x62>
	{
		case 1: /* Channel to trigger ADC */
			TimerVariable.Channel = TIM_CHANNEL_1;
 8009510:	2300      	movs	r3, #0
 8009512:	60bb      	str	r3, [r7, #8]
			break;
 8009514:	e005      	b.n	8009522 <USER_TIMER_setValueOfPWM+0x62>
		case 2: /* Channel to PWM */
			TimerVariable.Channel = TIM_CHANNEL_2;
 8009516:	2304      	movs	r3, #4
 8009518:	60bb      	str	r3, [r7, #8]
			break;
 800951a:	e002      	b.n	8009522 <USER_TIMER_setValueOfPWM+0x62>
		case 3:
			TimerVariable.Channel = TIM_CHANNEL_3;
 800951c:	2308      	movs	r3, #8
 800951e:	60bb      	str	r3, [r7, #8]
			break;
 8009520:	bf00      	nop
	}
	//assert((TimerVariable.frequency >=100000) || TimerVariable.frequency == 0);
	switch (TimerVariable.frequency)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d104      	bne.n	8009532 <USER_TIMER_setValueOfPWM+0x72>
	{
		case 0:
			ValueOfARR = (uint32_t)__HAL_TIM_GET_AUTORELOAD(&htim);
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	4a2b      	ldr	r2, [pc, #172]	; (80095dc <USER_TIMER_setValueOfPWM+0x11c>)
 800952e:	6013      	str	r3, [r2, #0]
			break;
 8009530:	e010      	b.n	8009554 <USER_TIMER_setValueOfPWM+0x94>
		default:
			htim.Instance->ARR = ((uint32_t)((AHBFrequency)/(TimerVariable.frequency*(htim.Init.Prescaler+1))) -1);
 8009532:	4b2b      	ldr	r3, [pc, #172]	; (80095e0 <USER_TIMER_setValueOfPWM+0x120>)
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	69b9      	ldr	r1, [r7, #24]
 800953a:	3101      	adds	r1, #1
 800953c:	fb01 f303 	mul.w	r3, r1, r3
 8009540:	fbb2 f2f3 	udiv	r2, r2, r3
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	3a01      	subs	r2, #1
 8009548:	62da      	str	r2, [r3, #44]	; 0x2c
			ValueOfARR = (uint32_t)__HAL_TIM_GET_AUTORELOAD(&htim);
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954e:	4a23      	ldr	r2, [pc, #140]	; (80095dc <USER_TIMER_setValueOfPWM+0x11c>)
 8009550:	6013      	str	r3, [r2, #0]
			break;
 8009552:	bf00      	nop
	}
	ValueOfCCR = (((uint32_t)TimerVariable.Duty*ValueOfARR)/100);
 8009554:	edd7 7a00 	vldr	s15, [r7]
 8009558:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800955c:	ee17 2a90 	vmov	r2, s15
 8009560:	4b1e      	ldr	r3, [pc, #120]	; (80095dc <USER_TIMER_setValueOfPWM+0x11c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	fb02 f303 	mul.w	r3, r2, r3
 8009568:	4a1e      	ldr	r2, [pc, #120]	; (80095e4 <USER_TIMER_setValueOfPWM+0x124>)
 800956a:	fba2 2303 	umull	r2, r3, r2, r3
 800956e:	095b      	lsrs	r3, r3, #5
 8009570:	4a1d      	ldr	r2, [pc, #116]	; (80095e8 <USER_TIMER_setValueOfPWM+0x128>)
 8009572:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d104      	bne.n	8009584 <USER_TIMER_setValueOfPWM+0xc4>
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	4a1a      	ldr	r2, [pc, #104]	; (80095e8 <USER_TIMER_setValueOfPWM+0x128>)
 800957e:	6812      	ldr	r2, [r2, #0]
 8009580:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009582:	e023      	b.n	80095cc <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2b04      	cmp	r3, #4
 8009588:	d104      	bne.n	8009594 <USER_TIMER_setValueOfPWM+0xd4>
 800958a:	697a      	ldr	r2, [r7, #20]
 800958c:	4b16      	ldr	r3, [pc, #88]	; (80095e8 <USER_TIMER_setValueOfPWM+0x128>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009592:	e01b      	b.n	80095cc <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2b08      	cmp	r3, #8
 8009598:	d104      	bne.n	80095a4 <USER_TIMER_setValueOfPWM+0xe4>
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	4b12      	ldr	r3, [pc, #72]	; (80095e8 <USER_TIMER_setValueOfPWM+0x128>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80095a2:	e013      	b.n	80095cc <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2b0c      	cmp	r3, #12
 80095a8:	d104      	bne.n	80095b4 <USER_TIMER_setValueOfPWM+0xf4>
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	4b0e      	ldr	r3, [pc, #56]	; (80095e8 <USER_TIMER_setValueOfPWM+0x128>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80095b2:	e00b      	b.n	80095cc <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	2b10      	cmp	r3, #16
 80095b8:	d104      	bne.n	80095c4 <USER_TIMER_setValueOfPWM+0x104>
 80095ba:	697a      	ldr	r2, [r7, #20]
 80095bc:	4b0a      	ldr	r3, [pc, #40]	; (80095e8 <USER_TIMER_setValueOfPWM+0x128>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6493      	str	r3, [r2, #72]	; 0x48
}
 80095c2:	e003      	b.n	80095cc <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 80095c4:	697a      	ldr	r2, [r7, #20]
 80095c6:	4b08      	ldr	r3, [pc, #32]	; (80095e8 <USER_TIMER_setValueOfPWM+0x128>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80095cc:	bf00      	nop
 80095ce:	3764      	adds	r7, #100	; 0x64
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd90      	pop	{r4, r7, pc}
 80095d4:	200002e4 	.word	0x200002e4
 80095d8:	20000330 	.word	0x20000330
 80095dc:	200004bc 	.word	0x200004bc
 80095e0:	20000018 	.word	0x20000018
 80095e4:	51eb851f 	.word	0x51eb851f
 80095e8:	200004c0 	.word	0x200004c0

080095ec <USER_TIMER_handleString>:
/*Syntax buffer TIMER-30-20000-2-2(TIMER-dutycycle-tanso-numberoftimer-channel) */
COMPONENT_TIMER USER_TIMER_handleString(char* Buffer)
{
 80095ec:	b590      	push	{r4, r7, lr}
 80095ee:	b089      	sub	sp, #36	; 0x24
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]
	char* ptr = NULL;
 80095f6:	2300      	movs	r3, #0
 80095f8:	61fb      	str	r3, [r7, #28]
	COMPONENT_TIMER var = {0.0,0,0,0};
 80095fa:	f107 030c 	add.w	r3, r7, #12
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]
 8009602:	605a      	str	r2, [r3, #4]
 8009604:	609a      	str	r2, [r3, #8]
 8009606:	60da      	str	r2, [r3, #12]


	ptr = strtok(Buffer,"-");
 8009608:	4924      	ldr	r1, [pc, #144]	; (800969c <USER_TIMER_handleString+0xb0>)
 800960a:	6838      	ldr	r0, [r7, #0]
 800960c:	f001 fe1c 	bl	800b248 <strtok>
 8009610:	61f8      	str	r0, [r7, #28]
	ptr = strtok(NULL,"-");
 8009612:	4922      	ldr	r1, [pc, #136]	; (800969c <USER_TIMER_handleString+0xb0>)
 8009614:	2000      	movs	r0, #0
 8009616:	f001 fe17 	bl	800b248 <strtok>
 800961a:	61f8      	str	r0, [r7, #28]
	var.Duty = __USER_TIMER_convertU16(atoi(ptr));
 800961c:	69f8      	ldr	r0, [r7, #28]
 800961e:	f000 f892 	bl	8009746 <atoi>
 8009622:	4603      	mov	r3, r0
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff ff3f 	bl	80094a8 <__USER_TIMER_convertU16>
 800962a:	4603      	mov	r3, r0
 800962c:	ee07 3a90 	vmov	s15, r3
 8009630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009634:	edc7 7a03 	vstr	s15, [r7, #12]
	ptr = strtok(NULL,"-");
 8009638:	4918      	ldr	r1, [pc, #96]	; (800969c <USER_TIMER_handleString+0xb0>)
 800963a:	2000      	movs	r0, #0
 800963c:	f001 fe04 	bl	800b248 <strtok>
 8009640:	61f8      	str	r0, [r7, #28]
	var.frequency = (uint32_t)atoi(ptr);
 8009642:	69f8      	ldr	r0, [r7, #28]
 8009644:	f000 f87f 	bl	8009746 <atoi>
 8009648:	4603      	mov	r3, r0
 800964a:	61bb      	str	r3, [r7, #24]
	ptr = strtok(NULL,"-");
 800964c:	4913      	ldr	r1, [pc, #76]	; (800969c <USER_TIMER_handleString+0xb0>)
 800964e:	2000      	movs	r0, #0
 8009650:	f001 fdfa 	bl	800b248 <strtok>
 8009654:	61f8      	str	r0, [r7, #28]
	var.NumberOfTimer = __USER_TIMER_convertU16(atoi(ptr));
 8009656:	69f8      	ldr	r0, [r7, #28]
 8009658:	f000 f875 	bl	8009746 <atoi>
 800965c:	4603      	mov	r3, r0
 800965e:	4618      	mov	r0, r3
 8009660:	f7ff ff22 	bl	80094a8 <__USER_TIMER_convertU16>
 8009664:	4603      	mov	r3, r0
 8009666:	823b      	strh	r3, [r7, #16]
	ptr = strtok(NULL,"-");
 8009668:	490c      	ldr	r1, [pc, #48]	; (800969c <USER_TIMER_handleString+0xb0>)
 800966a:	2000      	movs	r0, #0
 800966c:	f001 fdec 	bl	800b248 <strtok>
 8009670:	61f8      	str	r0, [r7, #28]
	var.Channel = __USER_TIMER_convertU16(atoi(ptr));
 8009672:	69f8      	ldr	r0, [r7, #28]
 8009674:	f000 f867 	bl	8009746 <atoi>
 8009678:	4603      	mov	r3, r0
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff ff14 	bl	80094a8 <__USER_TIMER_convertU16>
 8009680:	4603      	mov	r3, r0
 8009682:	617b      	str	r3, [r7, #20]
	return var;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	461c      	mov	r4, r3
 8009688:	f107 030c 	add.w	r3, r7, #12
 800968c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800968e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	3724      	adds	r7, #36	; 0x24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd90      	pop	{r4, r7, pc}
 800969a:	bf00      	nop
 800969c:	0800e2f4 	.word	0x0800e2f4

080096a0 <USER_TIMER_getValueARR>:
uint32_t USER_TIMER_getValueARR(void)
{
 80096a0:	b480      	push	{r7}
 80096a2:	af00      	add	r7, sp, #0
	return ValueOfARR;
 80096a4:	4b03      	ldr	r3, [pc, #12]	; (80096b4 <USER_TIMER_getValueARR+0x14>)
 80096a6:	681b      	ldr	r3, [r3, #0]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	200004bc 	.word	0x200004bc

080096b8 <USER_TIMER_getValueCCR>:
uint32_t USER_TIMER_getValueCCR(void)
{
 80096b8:	b480      	push	{r7}
 80096ba:	af00      	add	r7, sp, #0
	return ValueOfCCR;
 80096bc:	4b03      	ldr	r3, [pc, #12]	; (80096cc <USER_TIMER_getValueCCR+0x14>)
 80096be:	681b      	ldr	r3, [r3, #0]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	200004c0 	.word	0x200004c0

080096d0 <USER_TIMER_ConvertADCValueToDutyCycle>:
  * @brief  Convert ADC value to Dutycycle. Voltage 0 - 3.3V conver 0->100%
  * @note   Parameters of this function
  *          - ADC value
  */
float USER_TIMER_ConvertADCValueToDutyCycle(float ADCValue)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float tempValue = (ADCValue/1000);
 80096da:	ed97 7a01 	vldr	s14, [r7, #4]
 80096de:	eddf 6a16 	vldr	s13, [pc, #88]	; 8009738 <USER_TIMER_ConvertADCValueToDutyCycle+0x68>
 80096e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80096e6:	edc7 7a03 	vstr	s15, [r7, #12]
	float DutyCycle = 0;
 80096ea:	f04f 0300 	mov.w	r3, #0
 80096ee:	60bb      	str	r3, [r7, #8]

	DutyCycle = (tempValue*100)/3.3;
 80096f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80096f4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800973c <USER_TIMER_ConvertADCValueToDutyCycle+0x6c>
 80096f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096fc:	ee17 0a90 	vmov	r0, s15
 8009700:	f7f6 ff4a 	bl	8000598 <__aeabi_f2d>
 8009704:	a30a      	add	r3, pc, #40	; (adr r3, 8009730 <USER_TIMER_ConvertADCValueToDutyCycle+0x60>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f7f7 f8c7 	bl	800089c <__aeabi_ddiv>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4610      	mov	r0, r2
 8009714:	4619      	mov	r1, r3
 8009716:	f7f7 fa8f 	bl	8000c38 <__aeabi_d2f>
 800971a:	4603      	mov	r3, r0
 800971c:	60bb      	str	r3, [r7, #8]
	return DutyCycle;
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	ee07 3a90 	vmov	s15, r3
}
 8009724:	eeb0 0a67 	vmov.f32	s0, s15
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	66666666 	.word	0x66666666
 8009734:	400a6666 	.word	0x400a6666
 8009738:	447a0000 	.word	0x447a0000
 800973c:	42c80000 	.word	0x42c80000

08009740 <atoff>:
 8009740:	2100      	movs	r1, #0
 8009742:	f001 bd25 	b.w	800b190 <strtof>

08009746 <atoi>:
 8009746:	220a      	movs	r2, #10
 8009748:	2100      	movs	r1, #0
 800974a:	f001 be5d 	b.w	800b408 <strtol>
	...

08009750 <__errno>:
 8009750:	4b01      	ldr	r3, [pc, #4]	; (8009758 <__errno+0x8>)
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	2000001c 	.word	0x2000001c

0800975c <__libc_init_array>:
 800975c:	b570      	push	{r4, r5, r6, lr}
 800975e:	4d0d      	ldr	r5, [pc, #52]	; (8009794 <__libc_init_array+0x38>)
 8009760:	4c0d      	ldr	r4, [pc, #52]	; (8009798 <__libc_init_array+0x3c>)
 8009762:	1b64      	subs	r4, r4, r5
 8009764:	10a4      	asrs	r4, r4, #2
 8009766:	2600      	movs	r6, #0
 8009768:	42a6      	cmp	r6, r4
 800976a:	d109      	bne.n	8009780 <__libc_init_array+0x24>
 800976c:	4d0b      	ldr	r5, [pc, #44]	; (800979c <__libc_init_array+0x40>)
 800976e:	4c0c      	ldr	r4, [pc, #48]	; (80097a0 <__libc_init_array+0x44>)
 8009770:	f004 fd6a 	bl	800e248 <_init>
 8009774:	1b64      	subs	r4, r4, r5
 8009776:	10a4      	asrs	r4, r4, #2
 8009778:	2600      	movs	r6, #0
 800977a:	42a6      	cmp	r6, r4
 800977c:	d105      	bne.n	800978a <__libc_init_array+0x2e>
 800977e:	bd70      	pop	{r4, r5, r6, pc}
 8009780:	f855 3b04 	ldr.w	r3, [r5], #4
 8009784:	4798      	blx	r3
 8009786:	3601      	adds	r6, #1
 8009788:	e7ee      	b.n	8009768 <__libc_init_array+0xc>
 800978a:	f855 3b04 	ldr.w	r3, [r5], #4
 800978e:	4798      	blx	r3
 8009790:	3601      	adds	r6, #1
 8009792:	e7f2      	b.n	800977a <__libc_init_array+0x1e>
 8009794:	0800e840 	.word	0x0800e840
 8009798:	0800e840 	.word	0x0800e840
 800979c:	0800e840 	.word	0x0800e840
 80097a0:	0800e844 	.word	0x0800e844

080097a4 <memcpy>:
 80097a4:	440a      	add	r2, r1
 80097a6:	4291      	cmp	r1, r2
 80097a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80097ac:	d100      	bne.n	80097b0 <memcpy+0xc>
 80097ae:	4770      	bx	lr
 80097b0:	b510      	push	{r4, lr}
 80097b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ba:	4291      	cmp	r1, r2
 80097bc:	d1f9      	bne.n	80097b2 <memcpy+0xe>
 80097be:	bd10      	pop	{r4, pc}

080097c0 <memset>:
 80097c0:	4402      	add	r2, r0
 80097c2:	4603      	mov	r3, r0
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d100      	bne.n	80097ca <memset+0xa>
 80097c8:	4770      	bx	lr
 80097ca:	f803 1b01 	strb.w	r1, [r3], #1
 80097ce:	e7f9      	b.n	80097c4 <memset+0x4>

080097d0 <__cvt>:
 80097d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097d4:	ec55 4b10 	vmov	r4, r5, d0
 80097d8:	2d00      	cmp	r5, #0
 80097da:	460e      	mov	r6, r1
 80097dc:	4619      	mov	r1, r3
 80097de:	462b      	mov	r3, r5
 80097e0:	bfbb      	ittet	lt
 80097e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80097e6:	461d      	movlt	r5, r3
 80097e8:	2300      	movge	r3, #0
 80097ea:	232d      	movlt	r3, #45	; 0x2d
 80097ec:	700b      	strb	r3, [r1, #0]
 80097ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097f4:	4691      	mov	r9, r2
 80097f6:	f023 0820 	bic.w	r8, r3, #32
 80097fa:	bfbc      	itt	lt
 80097fc:	4622      	movlt	r2, r4
 80097fe:	4614      	movlt	r4, r2
 8009800:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009804:	d005      	beq.n	8009812 <__cvt+0x42>
 8009806:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800980a:	d100      	bne.n	800980e <__cvt+0x3e>
 800980c:	3601      	adds	r6, #1
 800980e:	2102      	movs	r1, #2
 8009810:	e000      	b.n	8009814 <__cvt+0x44>
 8009812:	2103      	movs	r1, #3
 8009814:	ab03      	add	r3, sp, #12
 8009816:	9301      	str	r3, [sp, #4]
 8009818:	ab02      	add	r3, sp, #8
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	ec45 4b10 	vmov	d0, r4, r5
 8009820:	4653      	mov	r3, sl
 8009822:	4632      	mov	r2, r6
 8009824:	f001 fea4 	bl	800b570 <_dtoa_r>
 8009828:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800982c:	4607      	mov	r7, r0
 800982e:	d102      	bne.n	8009836 <__cvt+0x66>
 8009830:	f019 0f01 	tst.w	r9, #1
 8009834:	d022      	beq.n	800987c <__cvt+0xac>
 8009836:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800983a:	eb07 0906 	add.w	r9, r7, r6
 800983e:	d110      	bne.n	8009862 <__cvt+0x92>
 8009840:	783b      	ldrb	r3, [r7, #0]
 8009842:	2b30      	cmp	r3, #48	; 0x30
 8009844:	d10a      	bne.n	800985c <__cvt+0x8c>
 8009846:	2200      	movs	r2, #0
 8009848:	2300      	movs	r3, #0
 800984a:	4620      	mov	r0, r4
 800984c:	4629      	mov	r1, r5
 800984e:	f7f7 f963 	bl	8000b18 <__aeabi_dcmpeq>
 8009852:	b918      	cbnz	r0, 800985c <__cvt+0x8c>
 8009854:	f1c6 0601 	rsb	r6, r6, #1
 8009858:	f8ca 6000 	str.w	r6, [sl]
 800985c:	f8da 3000 	ldr.w	r3, [sl]
 8009860:	4499      	add	r9, r3
 8009862:	2200      	movs	r2, #0
 8009864:	2300      	movs	r3, #0
 8009866:	4620      	mov	r0, r4
 8009868:	4629      	mov	r1, r5
 800986a:	f7f7 f955 	bl	8000b18 <__aeabi_dcmpeq>
 800986e:	b108      	cbz	r0, 8009874 <__cvt+0xa4>
 8009870:	f8cd 900c 	str.w	r9, [sp, #12]
 8009874:	2230      	movs	r2, #48	; 0x30
 8009876:	9b03      	ldr	r3, [sp, #12]
 8009878:	454b      	cmp	r3, r9
 800987a:	d307      	bcc.n	800988c <__cvt+0xbc>
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009880:	1bdb      	subs	r3, r3, r7
 8009882:	4638      	mov	r0, r7
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	b004      	add	sp, #16
 8009888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988c:	1c59      	adds	r1, r3, #1
 800988e:	9103      	str	r1, [sp, #12]
 8009890:	701a      	strb	r2, [r3, #0]
 8009892:	e7f0      	b.n	8009876 <__cvt+0xa6>

08009894 <__exponent>:
 8009894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009896:	4603      	mov	r3, r0
 8009898:	2900      	cmp	r1, #0
 800989a:	bfb8      	it	lt
 800989c:	4249      	neglt	r1, r1
 800989e:	f803 2b02 	strb.w	r2, [r3], #2
 80098a2:	bfb4      	ite	lt
 80098a4:	222d      	movlt	r2, #45	; 0x2d
 80098a6:	222b      	movge	r2, #43	; 0x2b
 80098a8:	2909      	cmp	r1, #9
 80098aa:	7042      	strb	r2, [r0, #1]
 80098ac:	dd2a      	ble.n	8009904 <__exponent+0x70>
 80098ae:	f10d 0407 	add.w	r4, sp, #7
 80098b2:	46a4      	mov	ip, r4
 80098b4:	270a      	movs	r7, #10
 80098b6:	46a6      	mov	lr, r4
 80098b8:	460a      	mov	r2, r1
 80098ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80098be:	fb07 1516 	mls	r5, r7, r6, r1
 80098c2:	3530      	adds	r5, #48	; 0x30
 80098c4:	2a63      	cmp	r2, #99	; 0x63
 80098c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80098ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098ce:	4631      	mov	r1, r6
 80098d0:	dcf1      	bgt.n	80098b6 <__exponent+0x22>
 80098d2:	3130      	adds	r1, #48	; 0x30
 80098d4:	f1ae 0502 	sub.w	r5, lr, #2
 80098d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098dc:	1c44      	adds	r4, r0, #1
 80098de:	4629      	mov	r1, r5
 80098e0:	4561      	cmp	r1, ip
 80098e2:	d30a      	bcc.n	80098fa <__exponent+0x66>
 80098e4:	f10d 0209 	add.w	r2, sp, #9
 80098e8:	eba2 020e 	sub.w	r2, r2, lr
 80098ec:	4565      	cmp	r5, ip
 80098ee:	bf88      	it	hi
 80098f0:	2200      	movhi	r2, #0
 80098f2:	4413      	add	r3, r2
 80098f4:	1a18      	subs	r0, r3, r0
 80098f6:	b003      	add	sp, #12
 80098f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009902:	e7ed      	b.n	80098e0 <__exponent+0x4c>
 8009904:	2330      	movs	r3, #48	; 0x30
 8009906:	3130      	adds	r1, #48	; 0x30
 8009908:	7083      	strb	r3, [r0, #2]
 800990a:	70c1      	strb	r1, [r0, #3]
 800990c:	1d03      	adds	r3, r0, #4
 800990e:	e7f1      	b.n	80098f4 <__exponent+0x60>

08009910 <_printf_float>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	ed2d 8b02 	vpush	{d8}
 8009918:	b08d      	sub	sp, #52	; 0x34
 800991a:	460c      	mov	r4, r1
 800991c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009920:	4616      	mov	r6, r2
 8009922:	461f      	mov	r7, r3
 8009924:	4605      	mov	r5, r0
 8009926:	f002 ff93 	bl	800c850 <_localeconv_r>
 800992a:	f8d0 a000 	ldr.w	sl, [r0]
 800992e:	4650      	mov	r0, sl
 8009930:	f7f6 fc76 	bl	8000220 <strlen>
 8009934:	2300      	movs	r3, #0
 8009936:	930a      	str	r3, [sp, #40]	; 0x28
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	9305      	str	r3, [sp, #20]
 800993c:	f8d8 3000 	ldr.w	r3, [r8]
 8009940:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009944:	3307      	adds	r3, #7
 8009946:	f023 0307 	bic.w	r3, r3, #7
 800994a:	f103 0208 	add.w	r2, r3, #8
 800994e:	f8c8 2000 	str.w	r2, [r8]
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800995a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800995e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009962:	9307      	str	r3, [sp, #28]
 8009964:	f8cd 8018 	str.w	r8, [sp, #24]
 8009968:	ee08 0a10 	vmov	s16, r0
 800996c:	4b9f      	ldr	r3, [pc, #636]	; (8009bec <_printf_float+0x2dc>)
 800996e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009972:	f04f 32ff 	mov.w	r2, #4294967295
 8009976:	f7f7 f901 	bl	8000b7c <__aeabi_dcmpun>
 800997a:	bb88      	cbnz	r0, 80099e0 <_printf_float+0xd0>
 800997c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009980:	4b9a      	ldr	r3, [pc, #616]	; (8009bec <_printf_float+0x2dc>)
 8009982:	f04f 32ff 	mov.w	r2, #4294967295
 8009986:	f7f7 f8db 	bl	8000b40 <__aeabi_dcmple>
 800998a:	bb48      	cbnz	r0, 80099e0 <_printf_float+0xd0>
 800998c:	2200      	movs	r2, #0
 800998e:	2300      	movs	r3, #0
 8009990:	4640      	mov	r0, r8
 8009992:	4649      	mov	r1, r9
 8009994:	f7f7 f8ca 	bl	8000b2c <__aeabi_dcmplt>
 8009998:	b110      	cbz	r0, 80099a0 <_printf_float+0x90>
 800999a:	232d      	movs	r3, #45	; 0x2d
 800999c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099a0:	4b93      	ldr	r3, [pc, #588]	; (8009bf0 <_printf_float+0x2e0>)
 80099a2:	4894      	ldr	r0, [pc, #592]	; (8009bf4 <_printf_float+0x2e4>)
 80099a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099a8:	bf94      	ite	ls
 80099aa:	4698      	movls	r8, r3
 80099ac:	4680      	movhi	r8, r0
 80099ae:	2303      	movs	r3, #3
 80099b0:	6123      	str	r3, [r4, #16]
 80099b2:	9b05      	ldr	r3, [sp, #20]
 80099b4:	f023 0204 	bic.w	r2, r3, #4
 80099b8:	6022      	str	r2, [r4, #0]
 80099ba:	f04f 0900 	mov.w	r9, #0
 80099be:	9700      	str	r7, [sp, #0]
 80099c0:	4633      	mov	r3, r6
 80099c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80099c4:	4621      	mov	r1, r4
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 f9d8 	bl	8009d7c <_printf_common>
 80099cc:	3001      	adds	r0, #1
 80099ce:	f040 8090 	bne.w	8009af2 <_printf_float+0x1e2>
 80099d2:	f04f 30ff 	mov.w	r0, #4294967295
 80099d6:	b00d      	add	sp, #52	; 0x34
 80099d8:	ecbd 8b02 	vpop	{d8}
 80099dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e0:	4642      	mov	r2, r8
 80099e2:	464b      	mov	r3, r9
 80099e4:	4640      	mov	r0, r8
 80099e6:	4649      	mov	r1, r9
 80099e8:	f7f7 f8c8 	bl	8000b7c <__aeabi_dcmpun>
 80099ec:	b140      	cbz	r0, 8009a00 <_printf_float+0xf0>
 80099ee:	464b      	mov	r3, r9
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bfbc      	itt	lt
 80099f4:	232d      	movlt	r3, #45	; 0x2d
 80099f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099fa:	487f      	ldr	r0, [pc, #508]	; (8009bf8 <_printf_float+0x2e8>)
 80099fc:	4b7f      	ldr	r3, [pc, #508]	; (8009bfc <_printf_float+0x2ec>)
 80099fe:	e7d1      	b.n	80099a4 <_printf_float+0x94>
 8009a00:	6863      	ldr	r3, [r4, #4]
 8009a02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a06:	9206      	str	r2, [sp, #24]
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	d13f      	bne.n	8009a8c <_printf_float+0x17c>
 8009a0c:	2306      	movs	r3, #6
 8009a0e:	6063      	str	r3, [r4, #4]
 8009a10:	9b05      	ldr	r3, [sp, #20]
 8009a12:	6861      	ldr	r1, [r4, #4]
 8009a14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a18:	2300      	movs	r3, #0
 8009a1a:	9303      	str	r3, [sp, #12]
 8009a1c:	ab0a      	add	r3, sp, #40	; 0x28
 8009a1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a22:	ab09      	add	r3, sp, #36	; 0x24
 8009a24:	ec49 8b10 	vmov	d0, r8, r9
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	6022      	str	r2, [r4, #0]
 8009a2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a30:	4628      	mov	r0, r5
 8009a32:	f7ff fecd 	bl	80097d0 <__cvt>
 8009a36:	9b06      	ldr	r3, [sp, #24]
 8009a38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a3a:	2b47      	cmp	r3, #71	; 0x47
 8009a3c:	4680      	mov	r8, r0
 8009a3e:	d108      	bne.n	8009a52 <_printf_float+0x142>
 8009a40:	1cc8      	adds	r0, r1, #3
 8009a42:	db02      	blt.n	8009a4a <_printf_float+0x13a>
 8009a44:	6863      	ldr	r3, [r4, #4]
 8009a46:	4299      	cmp	r1, r3
 8009a48:	dd41      	ble.n	8009ace <_printf_float+0x1be>
 8009a4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a4e:	fa5f fb8b 	uxtb.w	fp, fp
 8009a52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a56:	d820      	bhi.n	8009a9a <_printf_float+0x18a>
 8009a58:	3901      	subs	r1, #1
 8009a5a:	465a      	mov	r2, fp
 8009a5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a60:	9109      	str	r1, [sp, #36]	; 0x24
 8009a62:	f7ff ff17 	bl	8009894 <__exponent>
 8009a66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a68:	1813      	adds	r3, r2, r0
 8009a6a:	2a01      	cmp	r2, #1
 8009a6c:	4681      	mov	r9, r0
 8009a6e:	6123      	str	r3, [r4, #16]
 8009a70:	dc02      	bgt.n	8009a78 <_printf_float+0x168>
 8009a72:	6822      	ldr	r2, [r4, #0]
 8009a74:	07d2      	lsls	r2, r2, #31
 8009a76:	d501      	bpl.n	8009a7c <_printf_float+0x16c>
 8009a78:	3301      	adds	r3, #1
 8009a7a:	6123      	str	r3, [r4, #16]
 8009a7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d09c      	beq.n	80099be <_printf_float+0xae>
 8009a84:	232d      	movs	r3, #45	; 0x2d
 8009a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a8a:	e798      	b.n	80099be <_printf_float+0xae>
 8009a8c:	9a06      	ldr	r2, [sp, #24]
 8009a8e:	2a47      	cmp	r2, #71	; 0x47
 8009a90:	d1be      	bne.n	8009a10 <_printf_float+0x100>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1bc      	bne.n	8009a10 <_printf_float+0x100>
 8009a96:	2301      	movs	r3, #1
 8009a98:	e7b9      	b.n	8009a0e <_printf_float+0xfe>
 8009a9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a9e:	d118      	bne.n	8009ad2 <_printf_float+0x1c2>
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	6863      	ldr	r3, [r4, #4]
 8009aa4:	dd0b      	ble.n	8009abe <_printf_float+0x1ae>
 8009aa6:	6121      	str	r1, [r4, #16]
 8009aa8:	b913      	cbnz	r3, 8009ab0 <_printf_float+0x1a0>
 8009aaa:	6822      	ldr	r2, [r4, #0]
 8009aac:	07d0      	lsls	r0, r2, #31
 8009aae:	d502      	bpl.n	8009ab6 <_printf_float+0x1a6>
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	440b      	add	r3, r1
 8009ab4:	6123      	str	r3, [r4, #16]
 8009ab6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ab8:	f04f 0900 	mov.w	r9, #0
 8009abc:	e7de      	b.n	8009a7c <_printf_float+0x16c>
 8009abe:	b913      	cbnz	r3, 8009ac6 <_printf_float+0x1b6>
 8009ac0:	6822      	ldr	r2, [r4, #0]
 8009ac2:	07d2      	lsls	r2, r2, #31
 8009ac4:	d501      	bpl.n	8009aca <_printf_float+0x1ba>
 8009ac6:	3302      	adds	r3, #2
 8009ac8:	e7f4      	b.n	8009ab4 <_printf_float+0x1a4>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e7f2      	b.n	8009ab4 <_printf_float+0x1a4>
 8009ace:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad4:	4299      	cmp	r1, r3
 8009ad6:	db05      	blt.n	8009ae4 <_printf_float+0x1d4>
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	6121      	str	r1, [r4, #16]
 8009adc:	07d8      	lsls	r0, r3, #31
 8009ade:	d5ea      	bpl.n	8009ab6 <_printf_float+0x1a6>
 8009ae0:	1c4b      	adds	r3, r1, #1
 8009ae2:	e7e7      	b.n	8009ab4 <_printf_float+0x1a4>
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	bfd4      	ite	le
 8009ae8:	f1c1 0202 	rsble	r2, r1, #2
 8009aec:	2201      	movgt	r2, #1
 8009aee:	4413      	add	r3, r2
 8009af0:	e7e0      	b.n	8009ab4 <_printf_float+0x1a4>
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	055a      	lsls	r2, r3, #21
 8009af6:	d407      	bmi.n	8009b08 <_printf_float+0x1f8>
 8009af8:	6923      	ldr	r3, [r4, #16]
 8009afa:	4642      	mov	r2, r8
 8009afc:	4631      	mov	r1, r6
 8009afe:	4628      	mov	r0, r5
 8009b00:	47b8      	blx	r7
 8009b02:	3001      	adds	r0, #1
 8009b04:	d12c      	bne.n	8009b60 <_printf_float+0x250>
 8009b06:	e764      	b.n	80099d2 <_printf_float+0xc2>
 8009b08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b0c:	f240 80e0 	bls.w	8009cd0 <_printf_float+0x3c0>
 8009b10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b14:	2200      	movs	r2, #0
 8009b16:	2300      	movs	r3, #0
 8009b18:	f7f6 fffe 	bl	8000b18 <__aeabi_dcmpeq>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d034      	beq.n	8009b8a <_printf_float+0x27a>
 8009b20:	4a37      	ldr	r2, [pc, #220]	; (8009c00 <_printf_float+0x2f0>)
 8009b22:	2301      	movs	r3, #1
 8009b24:	4631      	mov	r1, r6
 8009b26:	4628      	mov	r0, r5
 8009b28:	47b8      	blx	r7
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	f43f af51 	beq.w	80099d2 <_printf_float+0xc2>
 8009b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b34:	429a      	cmp	r2, r3
 8009b36:	db02      	blt.n	8009b3e <_printf_float+0x22e>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	07d8      	lsls	r0, r3, #31
 8009b3c:	d510      	bpl.n	8009b60 <_printf_float+0x250>
 8009b3e:	ee18 3a10 	vmov	r3, s16
 8009b42:	4652      	mov	r2, sl
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	f43f af41 	beq.w	80099d2 <_printf_float+0xc2>
 8009b50:	f04f 0800 	mov.w	r8, #0
 8009b54:	f104 091a 	add.w	r9, r4, #26
 8009b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	4543      	cmp	r3, r8
 8009b5e:	dc09      	bgt.n	8009b74 <_printf_float+0x264>
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	079b      	lsls	r3, r3, #30
 8009b64:	f100 8105 	bmi.w	8009d72 <_printf_float+0x462>
 8009b68:	68e0      	ldr	r0, [r4, #12]
 8009b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b6c:	4298      	cmp	r0, r3
 8009b6e:	bfb8      	it	lt
 8009b70:	4618      	movlt	r0, r3
 8009b72:	e730      	b.n	80099d6 <_printf_float+0xc6>
 8009b74:	2301      	movs	r3, #1
 8009b76:	464a      	mov	r2, r9
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b8      	blx	r7
 8009b7e:	3001      	adds	r0, #1
 8009b80:	f43f af27 	beq.w	80099d2 <_printf_float+0xc2>
 8009b84:	f108 0801 	add.w	r8, r8, #1
 8009b88:	e7e6      	b.n	8009b58 <_printf_float+0x248>
 8009b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	dc39      	bgt.n	8009c04 <_printf_float+0x2f4>
 8009b90:	4a1b      	ldr	r2, [pc, #108]	; (8009c00 <_printf_float+0x2f0>)
 8009b92:	2301      	movs	r3, #1
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f43f af19 	beq.w	80099d2 <_printf_float+0xc2>
 8009ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	d102      	bne.n	8009bae <_printf_float+0x29e>
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	07d9      	lsls	r1, r3, #31
 8009bac:	d5d8      	bpl.n	8009b60 <_printf_float+0x250>
 8009bae:	ee18 3a10 	vmov	r3, s16
 8009bb2:	4652      	mov	r2, sl
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	47b8      	blx	r7
 8009bba:	3001      	adds	r0, #1
 8009bbc:	f43f af09 	beq.w	80099d2 <_printf_float+0xc2>
 8009bc0:	f04f 0900 	mov.w	r9, #0
 8009bc4:	f104 0a1a 	add.w	sl, r4, #26
 8009bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bca:	425b      	negs	r3, r3
 8009bcc:	454b      	cmp	r3, r9
 8009bce:	dc01      	bgt.n	8009bd4 <_printf_float+0x2c4>
 8009bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd2:	e792      	b.n	8009afa <_printf_float+0x1ea>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	4652      	mov	r2, sl
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4628      	mov	r0, r5
 8009bdc:	47b8      	blx	r7
 8009bde:	3001      	adds	r0, #1
 8009be0:	f43f aef7 	beq.w	80099d2 <_printf_float+0xc2>
 8009be4:	f109 0901 	add.w	r9, r9, #1
 8009be8:	e7ee      	b.n	8009bc8 <_printf_float+0x2b8>
 8009bea:	bf00      	nop
 8009bec:	7fefffff 	.word	0x7fefffff
 8009bf0:	0800e33c 	.word	0x0800e33c
 8009bf4:	0800e340 	.word	0x0800e340
 8009bf8:	0800e348 	.word	0x0800e348
 8009bfc:	0800e344 	.word	0x0800e344
 8009c00:	0800e34c 	.word	0x0800e34c
 8009c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	bfa8      	it	ge
 8009c0c:	461a      	movge	r2, r3
 8009c0e:	2a00      	cmp	r2, #0
 8009c10:	4691      	mov	r9, r2
 8009c12:	dc37      	bgt.n	8009c84 <_printf_float+0x374>
 8009c14:	f04f 0b00 	mov.w	fp, #0
 8009c18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c1c:	f104 021a 	add.w	r2, r4, #26
 8009c20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c22:	9305      	str	r3, [sp, #20]
 8009c24:	eba3 0309 	sub.w	r3, r3, r9
 8009c28:	455b      	cmp	r3, fp
 8009c2a:	dc33      	bgt.n	8009c94 <_printf_float+0x384>
 8009c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c30:	429a      	cmp	r2, r3
 8009c32:	db3b      	blt.n	8009cac <_printf_float+0x39c>
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	07da      	lsls	r2, r3, #31
 8009c38:	d438      	bmi.n	8009cac <_printf_float+0x39c>
 8009c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c3c:	9a05      	ldr	r2, [sp, #20]
 8009c3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c40:	1a9a      	subs	r2, r3, r2
 8009c42:	eba3 0901 	sub.w	r9, r3, r1
 8009c46:	4591      	cmp	r9, r2
 8009c48:	bfa8      	it	ge
 8009c4a:	4691      	movge	r9, r2
 8009c4c:	f1b9 0f00 	cmp.w	r9, #0
 8009c50:	dc35      	bgt.n	8009cbe <_printf_float+0x3ae>
 8009c52:	f04f 0800 	mov.w	r8, #0
 8009c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c5a:	f104 0a1a 	add.w	sl, r4, #26
 8009c5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c62:	1a9b      	subs	r3, r3, r2
 8009c64:	eba3 0309 	sub.w	r3, r3, r9
 8009c68:	4543      	cmp	r3, r8
 8009c6a:	f77f af79 	ble.w	8009b60 <_printf_float+0x250>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	4652      	mov	r2, sl
 8009c72:	4631      	mov	r1, r6
 8009c74:	4628      	mov	r0, r5
 8009c76:	47b8      	blx	r7
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f43f aeaa 	beq.w	80099d2 <_printf_float+0xc2>
 8009c7e:	f108 0801 	add.w	r8, r8, #1
 8009c82:	e7ec      	b.n	8009c5e <_printf_float+0x34e>
 8009c84:	4613      	mov	r3, r2
 8009c86:	4631      	mov	r1, r6
 8009c88:	4642      	mov	r2, r8
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	47b8      	blx	r7
 8009c8e:	3001      	adds	r0, #1
 8009c90:	d1c0      	bne.n	8009c14 <_printf_float+0x304>
 8009c92:	e69e      	b.n	80099d2 <_printf_float+0xc2>
 8009c94:	2301      	movs	r3, #1
 8009c96:	4631      	mov	r1, r6
 8009c98:	4628      	mov	r0, r5
 8009c9a:	9205      	str	r2, [sp, #20]
 8009c9c:	47b8      	blx	r7
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	f43f ae97 	beq.w	80099d2 <_printf_float+0xc2>
 8009ca4:	9a05      	ldr	r2, [sp, #20]
 8009ca6:	f10b 0b01 	add.w	fp, fp, #1
 8009caa:	e7b9      	b.n	8009c20 <_printf_float+0x310>
 8009cac:	ee18 3a10 	vmov	r3, s16
 8009cb0:	4652      	mov	r2, sl
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	47b8      	blx	r7
 8009cb8:	3001      	adds	r0, #1
 8009cba:	d1be      	bne.n	8009c3a <_printf_float+0x32a>
 8009cbc:	e689      	b.n	80099d2 <_printf_float+0xc2>
 8009cbe:	9a05      	ldr	r2, [sp, #20]
 8009cc0:	464b      	mov	r3, r9
 8009cc2:	4442      	add	r2, r8
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	47b8      	blx	r7
 8009cca:	3001      	adds	r0, #1
 8009ccc:	d1c1      	bne.n	8009c52 <_printf_float+0x342>
 8009cce:	e680      	b.n	80099d2 <_printf_float+0xc2>
 8009cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cd2:	2a01      	cmp	r2, #1
 8009cd4:	dc01      	bgt.n	8009cda <_printf_float+0x3ca>
 8009cd6:	07db      	lsls	r3, r3, #31
 8009cd8:	d538      	bpl.n	8009d4c <_printf_float+0x43c>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4642      	mov	r2, r8
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b8      	blx	r7
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	f43f ae74 	beq.w	80099d2 <_printf_float+0xc2>
 8009cea:	ee18 3a10 	vmov	r3, s16
 8009cee:	4652      	mov	r2, sl
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	47b8      	blx	r7
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	f43f ae6b 	beq.w	80099d2 <_printf_float+0xc2>
 8009cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d00:	2200      	movs	r2, #0
 8009d02:	2300      	movs	r3, #0
 8009d04:	f7f6 ff08 	bl	8000b18 <__aeabi_dcmpeq>
 8009d08:	b9d8      	cbnz	r0, 8009d42 <_printf_float+0x432>
 8009d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d0c:	f108 0201 	add.w	r2, r8, #1
 8009d10:	3b01      	subs	r3, #1
 8009d12:	4631      	mov	r1, r6
 8009d14:	4628      	mov	r0, r5
 8009d16:	47b8      	blx	r7
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d10e      	bne.n	8009d3a <_printf_float+0x42a>
 8009d1c:	e659      	b.n	80099d2 <_printf_float+0xc2>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	4652      	mov	r2, sl
 8009d22:	4631      	mov	r1, r6
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b8      	blx	r7
 8009d28:	3001      	adds	r0, #1
 8009d2a:	f43f ae52 	beq.w	80099d2 <_printf_float+0xc2>
 8009d2e:	f108 0801 	add.w	r8, r8, #1
 8009d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d34:	3b01      	subs	r3, #1
 8009d36:	4543      	cmp	r3, r8
 8009d38:	dcf1      	bgt.n	8009d1e <_printf_float+0x40e>
 8009d3a:	464b      	mov	r3, r9
 8009d3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d40:	e6dc      	b.n	8009afc <_printf_float+0x1ec>
 8009d42:	f04f 0800 	mov.w	r8, #0
 8009d46:	f104 0a1a 	add.w	sl, r4, #26
 8009d4a:	e7f2      	b.n	8009d32 <_printf_float+0x422>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	4642      	mov	r2, r8
 8009d50:	e7df      	b.n	8009d12 <_printf_float+0x402>
 8009d52:	2301      	movs	r3, #1
 8009d54:	464a      	mov	r2, r9
 8009d56:	4631      	mov	r1, r6
 8009d58:	4628      	mov	r0, r5
 8009d5a:	47b8      	blx	r7
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	f43f ae38 	beq.w	80099d2 <_printf_float+0xc2>
 8009d62:	f108 0801 	add.w	r8, r8, #1
 8009d66:	68e3      	ldr	r3, [r4, #12]
 8009d68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d6a:	1a5b      	subs	r3, r3, r1
 8009d6c:	4543      	cmp	r3, r8
 8009d6e:	dcf0      	bgt.n	8009d52 <_printf_float+0x442>
 8009d70:	e6fa      	b.n	8009b68 <_printf_float+0x258>
 8009d72:	f04f 0800 	mov.w	r8, #0
 8009d76:	f104 0919 	add.w	r9, r4, #25
 8009d7a:	e7f4      	b.n	8009d66 <_printf_float+0x456>

08009d7c <_printf_common>:
 8009d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d80:	4616      	mov	r6, r2
 8009d82:	4699      	mov	r9, r3
 8009d84:	688a      	ldr	r2, [r1, #8]
 8009d86:	690b      	ldr	r3, [r1, #16]
 8009d88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	bfb8      	it	lt
 8009d90:	4613      	movlt	r3, r2
 8009d92:	6033      	str	r3, [r6, #0]
 8009d94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d98:	4607      	mov	r7, r0
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	b10a      	cbz	r2, 8009da2 <_printf_common+0x26>
 8009d9e:	3301      	adds	r3, #1
 8009da0:	6033      	str	r3, [r6, #0]
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	0699      	lsls	r1, r3, #26
 8009da6:	bf42      	ittt	mi
 8009da8:	6833      	ldrmi	r3, [r6, #0]
 8009daa:	3302      	addmi	r3, #2
 8009dac:	6033      	strmi	r3, [r6, #0]
 8009dae:	6825      	ldr	r5, [r4, #0]
 8009db0:	f015 0506 	ands.w	r5, r5, #6
 8009db4:	d106      	bne.n	8009dc4 <_printf_common+0x48>
 8009db6:	f104 0a19 	add.w	sl, r4, #25
 8009dba:	68e3      	ldr	r3, [r4, #12]
 8009dbc:	6832      	ldr	r2, [r6, #0]
 8009dbe:	1a9b      	subs	r3, r3, r2
 8009dc0:	42ab      	cmp	r3, r5
 8009dc2:	dc26      	bgt.n	8009e12 <_printf_common+0x96>
 8009dc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dc8:	1e13      	subs	r3, r2, #0
 8009dca:	6822      	ldr	r2, [r4, #0]
 8009dcc:	bf18      	it	ne
 8009dce:	2301      	movne	r3, #1
 8009dd0:	0692      	lsls	r2, r2, #26
 8009dd2:	d42b      	bmi.n	8009e2c <_printf_common+0xb0>
 8009dd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dd8:	4649      	mov	r1, r9
 8009dda:	4638      	mov	r0, r7
 8009ddc:	47c0      	blx	r8
 8009dde:	3001      	adds	r0, #1
 8009de0:	d01e      	beq.n	8009e20 <_printf_common+0xa4>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	68e5      	ldr	r5, [r4, #12]
 8009de6:	6832      	ldr	r2, [r6, #0]
 8009de8:	f003 0306 	and.w	r3, r3, #6
 8009dec:	2b04      	cmp	r3, #4
 8009dee:	bf08      	it	eq
 8009df0:	1aad      	subeq	r5, r5, r2
 8009df2:	68a3      	ldr	r3, [r4, #8]
 8009df4:	6922      	ldr	r2, [r4, #16]
 8009df6:	bf0c      	ite	eq
 8009df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dfc:	2500      	movne	r5, #0
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	bfc4      	itt	gt
 8009e02:	1a9b      	subgt	r3, r3, r2
 8009e04:	18ed      	addgt	r5, r5, r3
 8009e06:	2600      	movs	r6, #0
 8009e08:	341a      	adds	r4, #26
 8009e0a:	42b5      	cmp	r5, r6
 8009e0c:	d11a      	bne.n	8009e44 <_printf_common+0xc8>
 8009e0e:	2000      	movs	r0, #0
 8009e10:	e008      	b.n	8009e24 <_printf_common+0xa8>
 8009e12:	2301      	movs	r3, #1
 8009e14:	4652      	mov	r2, sl
 8009e16:	4649      	mov	r1, r9
 8009e18:	4638      	mov	r0, r7
 8009e1a:	47c0      	blx	r8
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	d103      	bne.n	8009e28 <_printf_common+0xac>
 8009e20:	f04f 30ff 	mov.w	r0, #4294967295
 8009e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e28:	3501      	adds	r5, #1
 8009e2a:	e7c6      	b.n	8009dba <_printf_common+0x3e>
 8009e2c:	18e1      	adds	r1, r4, r3
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	2030      	movs	r0, #48	; 0x30
 8009e32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e36:	4422      	add	r2, r4
 8009e38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e40:	3302      	adds	r3, #2
 8009e42:	e7c7      	b.n	8009dd4 <_printf_common+0x58>
 8009e44:	2301      	movs	r3, #1
 8009e46:	4622      	mov	r2, r4
 8009e48:	4649      	mov	r1, r9
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	47c0      	blx	r8
 8009e4e:	3001      	adds	r0, #1
 8009e50:	d0e6      	beq.n	8009e20 <_printf_common+0xa4>
 8009e52:	3601      	adds	r6, #1
 8009e54:	e7d9      	b.n	8009e0a <_printf_common+0x8e>
	...

08009e58 <_printf_i>:
 8009e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e5c:	7e0f      	ldrb	r7, [r1, #24]
 8009e5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e60:	2f78      	cmp	r7, #120	; 0x78
 8009e62:	4691      	mov	r9, r2
 8009e64:	4680      	mov	r8, r0
 8009e66:	460c      	mov	r4, r1
 8009e68:	469a      	mov	sl, r3
 8009e6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e6e:	d807      	bhi.n	8009e80 <_printf_i+0x28>
 8009e70:	2f62      	cmp	r7, #98	; 0x62
 8009e72:	d80a      	bhi.n	8009e8a <_printf_i+0x32>
 8009e74:	2f00      	cmp	r7, #0
 8009e76:	f000 80d8 	beq.w	800a02a <_printf_i+0x1d2>
 8009e7a:	2f58      	cmp	r7, #88	; 0x58
 8009e7c:	f000 80a3 	beq.w	8009fc6 <_printf_i+0x16e>
 8009e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e88:	e03a      	b.n	8009f00 <_printf_i+0xa8>
 8009e8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e8e:	2b15      	cmp	r3, #21
 8009e90:	d8f6      	bhi.n	8009e80 <_printf_i+0x28>
 8009e92:	a101      	add	r1, pc, #4	; (adr r1, 8009e98 <_printf_i+0x40>)
 8009e94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e98:	08009ef1 	.word	0x08009ef1
 8009e9c:	08009f05 	.word	0x08009f05
 8009ea0:	08009e81 	.word	0x08009e81
 8009ea4:	08009e81 	.word	0x08009e81
 8009ea8:	08009e81 	.word	0x08009e81
 8009eac:	08009e81 	.word	0x08009e81
 8009eb0:	08009f05 	.word	0x08009f05
 8009eb4:	08009e81 	.word	0x08009e81
 8009eb8:	08009e81 	.word	0x08009e81
 8009ebc:	08009e81 	.word	0x08009e81
 8009ec0:	08009e81 	.word	0x08009e81
 8009ec4:	0800a011 	.word	0x0800a011
 8009ec8:	08009f35 	.word	0x08009f35
 8009ecc:	08009ff3 	.word	0x08009ff3
 8009ed0:	08009e81 	.word	0x08009e81
 8009ed4:	08009e81 	.word	0x08009e81
 8009ed8:	0800a033 	.word	0x0800a033
 8009edc:	08009e81 	.word	0x08009e81
 8009ee0:	08009f35 	.word	0x08009f35
 8009ee4:	08009e81 	.word	0x08009e81
 8009ee8:	08009e81 	.word	0x08009e81
 8009eec:	08009ffb 	.word	0x08009ffb
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	1d1a      	adds	r2, r3, #4
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	602a      	str	r2, [r5, #0]
 8009ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009efc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f00:	2301      	movs	r3, #1
 8009f02:	e0a3      	b.n	800a04c <_printf_i+0x1f4>
 8009f04:	6820      	ldr	r0, [r4, #0]
 8009f06:	6829      	ldr	r1, [r5, #0]
 8009f08:	0606      	lsls	r6, r0, #24
 8009f0a:	f101 0304 	add.w	r3, r1, #4
 8009f0e:	d50a      	bpl.n	8009f26 <_printf_i+0xce>
 8009f10:	680e      	ldr	r6, [r1, #0]
 8009f12:	602b      	str	r3, [r5, #0]
 8009f14:	2e00      	cmp	r6, #0
 8009f16:	da03      	bge.n	8009f20 <_printf_i+0xc8>
 8009f18:	232d      	movs	r3, #45	; 0x2d
 8009f1a:	4276      	negs	r6, r6
 8009f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f20:	485e      	ldr	r0, [pc, #376]	; (800a09c <_printf_i+0x244>)
 8009f22:	230a      	movs	r3, #10
 8009f24:	e019      	b.n	8009f5a <_printf_i+0x102>
 8009f26:	680e      	ldr	r6, [r1, #0]
 8009f28:	602b      	str	r3, [r5, #0]
 8009f2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f2e:	bf18      	it	ne
 8009f30:	b236      	sxthne	r6, r6
 8009f32:	e7ef      	b.n	8009f14 <_printf_i+0xbc>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	6820      	ldr	r0, [r4, #0]
 8009f38:	1d19      	adds	r1, r3, #4
 8009f3a:	6029      	str	r1, [r5, #0]
 8009f3c:	0601      	lsls	r1, r0, #24
 8009f3e:	d501      	bpl.n	8009f44 <_printf_i+0xec>
 8009f40:	681e      	ldr	r6, [r3, #0]
 8009f42:	e002      	b.n	8009f4a <_printf_i+0xf2>
 8009f44:	0646      	lsls	r6, r0, #25
 8009f46:	d5fb      	bpl.n	8009f40 <_printf_i+0xe8>
 8009f48:	881e      	ldrh	r6, [r3, #0]
 8009f4a:	4854      	ldr	r0, [pc, #336]	; (800a09c <_printf_i+0x244>)
 8009f4c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f4e:	bf0c      	ite	eq
 8009f50:	2308      	moveq	r3, #8
 8009f52:	230a      	movne	r3, #10
 8009f54:	2100      	movs	r1, #0
 8009f56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f5a:	6865      	ldr	r5, [r4, #4]
 8009f5c:	60a5      	str	r5, [r4, #8]
 8009f5e:	2d00      	cmp	r5, #0
 8009f60:	bfa2      	ittt	ge
 8009f62:	6821      	ldrge	r1, [r4, #0]
 8009f64:	f021 0104 	bicge.w	r1, r1, #4
 8009f68:	6021      	strge	r1, [r4, #0]
 8009f6a:	b90e      	cbnz	r6, 8009f70 <_printf_i+0x118>
 8009f6c:	2d00      	cmp	r5, #0
 8009f6e:	d04d      	beq.n	800a00c <_printf_i+0x1b4>
 8009f70:	4615      	mov	r5, r2
 8009f72:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f76:	fb03 6711 	mls	r7, r3, r1, r6
 8009f7a:	5dc7      	ldrb	r7, [r0, r7]
 8009f7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f80:	4637      	mov	r7, r6
 8009f82:	42bb      	cmp	r3, r7
 8009f84:	460e      	mov	r6, r1
 8009f86:	d9f4      	bls.n	8009f72 <_printf_i+0x11a>
 8009f88:	2b08      	cmp	r3, #8
 8009f8a:	d10b      	bne.n	8009fa4 <_printf_i+0x14c>
 8009f8c:	6823      	ldr	r3, [r4, #0]
 8009f8e:	07de      	lsls	r6, r3, #31
 8009f90:	d508      	bpl.n	8009fa4 <_printf_i+0x14c>
 8009f92:	6923      	ldr	r3, [r4, #16]
 8009f94:	6861      	ldr	r1, [r4, #4]
 8009f96:	4299      	cmp	r1, r3
 8009f98:	bfde      	ittt	le
 8009f9a:	2330      	movle	r3, #48	; 0x30
 8009f9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fa0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fa4:	1b52      	subs	r2, r2, r5
 8009fa6:	6122      	str	r2, [r4, #16]
 8009fa8:	f8cd a000 	str.w	sl, [sp]
 8009fac:	464b      	mov	r3, r9
 8009fae:	aa03      	add	r2, sp, #12
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	f7ff fee2 	bl	8009d7c <_printf_common>
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d14c      	bne.n	800a056 <_printf_i+0x1fe>
 8009fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc0:	b004      	add	sp, #16
 8009fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc6:	4835      	ldr	r0, [pc, #212]	; (800a09c <_printf_i+0x244>)
 8009fc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fcc:	6829      	ldr	r1, [r5, #0]
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fd4:	6029      	str	r1, [r5, #0]
 8009fd6:	061d      	lsls	r5, r3, #24
 8009fd8:	d514      	bpl.n	800a004 <_printf_i+0x1ac>
 8009fda:	07df      	lsls	r7, r3, #31
 8009fdc:	bf44      	itt	mi
 8009fde:	f043 0320 	orrmi.w	r3, r3, #32
 8009fe2:	6023      	strmi	r3, [r4, #0]
 8009fe4:	b91e      	cbnz	r6, 8009fee <_printf_i+0x196>
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	f023 0320 	bic.w	r3, r3, #32
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	2310      	movs	r3, #16
 8009ff0:	e7b0      	b.n	8009f54 <_printf_i+0xfc>
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	f043 0320 	orr.w	r3, r3, #32
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	2378      	movs	r3, #120	; 0x78
 8009ffc:	4828      	ldr	r0, [pc, #160]	; (800a0a0 <_printf_i+0x248>)
 8009ffe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a002:	e7e3      	b.n	8009fcc <_printf_i+0x174>
 800a004:	0659      	lsls	r1, r3, #25
 800a006:	bf48      	it	mi
 800a008:	b2b6      	uxthmi	r6, r6
 800a00a:	e7e6      	b.n	8009fda <_printf_i+0x182>
 800a00c:	4615      	mov	r5, r2
 800a00e:	e7bb      	b.n	8009f88 <_printf_i+0x130>
 800a010:	682b      	ldr	r3, [r5, #0]
 800a012:	6826      	ldr	r6, [r4, #0]
 800a014:	6961      	ldr	r1, [r4, #20]
 800a016:	1d18      	adds	r0, r3, #4
 800a018:	6028      	str	r0, [r5, #0]
 800a01a:	0635      	lsls	r5, r6, #24
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	d501      	bpl.n	800a024 <_printf_i+0x1cc>
 800a020:	6019      	str	r1, [r3, #0]
 800a022:	e002      	b.n	800a02a <_printf_i+0x1d2>
 800a024:	0670      	lsls	r0, r6, #25
 800a026:	d5fb      	bpl.n	800a020 <_printf_i+0x1c8>
 800a028:	8019      	strh	r1, [r3, #0]
 800a02a:	2300      	movs	r3, #0
 800a02c:	6123      	str	r3, [r4, #16]
 800a02e:	4615      	mov	r5, r2
 800a030:	e7ba      	b.n	8009fa8 <_printf_i+0x150>
 800a032:	682b      	ldr	r3, [r5, #0]
 800a034:	1d1a      	adds	r2, r3, #4
 800a036:	602a      	str	r2, [r5, #0]
 800a038:	681d      	ldr	r5, [r3, #0]
 800a03a:	6862      	ldr	r2, [r4, #4]
 800a03c:	2100      	movs	r1, #0
 800a03e:	4628      	mov	r0, r5
 800a040:	f7f6 f8f6 	bl	8000230 <memchr>
 800a044:	b108      	cbz	r0, 800a04a <_printf_i+0x1f2>
 800a046:	1b40      	subs	r0, r0, r5
 800a048:	6060      	str	r0, [r4, #4]
 800a04a:	6863      	ldr	r3, [r4, #4]
 800a04c:	6123      	str	r3, [r4, #16]
 800a04e:	2300      	movs	r3, #0
 800a050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a054:	e7a8      	b.n	8009fa8 <_printf_i+0x150>
 800a056:	6923      	ldr	r3, [r4, #16]
 800a058:	462a      	mov	r2, r5
 800a05a:	4649      	mov	r1, r9
 800a05c:	4640      	mov	r0, r8
 800a05e:	47d0      	blx	sl
 800a060:	3001      	adds	r0, #1
 800a062:	d0ab      	beq.n	8009fbc <_printf_i+0x164>
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	079b      	lsls	r3, r3, #30
 800a068:	d413      	bmi.n	800a092 <_printf_i+0x23a>
 800a06a:	68e0      	ldr	r0, [r4, #12]
 800a06c:	9b03      	ldr	r3, [sp, #12]
 800a06e:	4298      	cmp	r0, r3
 800a070:	bfb8      	it	lt
 800a072:	4618      	movlt	r0, r3
 800a074:	e7a4      	b.n	8009fc0 <_printf_i+0x168>
 800a076:	2301      	movs	r3, #1
 800a078:	4632      	mov	r2, r6
 800a07a:	4649      	mov	r1, r9
 800a07c:	4640      	mov	r0, r8
 800a07e:	47d0      	blx	sl
 800a080:	3001      	adds	r0, #1
 800a082:	d09b      	beq.n	8009fbc <_printf_i+0x164>
 800a084:	3501      	adds	r5, #1
 800a086:	68e3      	ldr	r3, [r4, #12]
 800a088:	9903      	ldr	r1, [sp, #12]
 800a08a:	1a5b      	subs	r3, r3, r1
 800a08c:	42ab      	cmp	r3, r5
 800a08e:	dcf2      	bgt.n	800a076 <_printf_i+0x21e>
 800a090:	e7eb      	b.n	800a06a <_printf_i+0x212>
 800a092:	2500      	movs	r5, #0
 800a094:	f104 0619 	add.w	r6, r4, #25
 800a098:	e7f5      	b.n	800a086 <_printf_i+0x22e>
 800a09a:	bf00      	nop
 800a09c:	0800e34e 	.word	0x0800e34e
 800a0a0:	0800e35f 	.word	0x0800e35f

0800a0a4 <_scanf_float>:
 800a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	b087      	sub	sp, #28
 800a0aa:	4617      	mov	r7, r2
 800a0ac:	9303      	str	r3, [sp, #12]
 800a0ae:	688b      	ldr	r3, [r1, #8]
 800a0b0:	1e5a      	subs	r2, r3, #1
 800a0b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a0b6:	bf83      	ittte	hi
 800a0b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a0bc:	195b      	addhi	r3, r3, r5
 800a0be:	9302      	strhi	r3, [sp, #8]
 800a0c0:	2300      	movls	r3, #0
 800a0c2:	bf86      	itte	hi
 800a0c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a0c8:	608b      	strhi	r3, [r1, #8]
 800a0ca:	9302      	strls	r3, [sp, #8]
 800a0cc:	680b      	ldr	r3, [r1, #0]
 800a0ce:	468b      	mov	fp, r1
 800a0d0:	2500      	movs	r5, #0
 800a0d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a0d6:	f84b 3b1c 	str.w	r3, [fp], #28
 800a0da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0de:	4680      	mov	r8, r0
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	465e      	mov	r6, fp
 800a0e4:	46aa      	mov	sl, r5
 800a0e6:	46a9      	mov	r9, r5
 800a0e8:	9501      	str	r5, [sp, #4]
 800a0ea:	68a2      	ldr	r2, [r4, #8]
 800a0ec:	b152      	cbz	r2, 800a104 <_scanf_float+0x60>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	2b4e      	cmp	r3, #78	; 0x4e
 800a0f4:	d864      	bhi.n	800a1c0 <_scanf_float+0x11c>
 800a0f6:	2b40      	cmp	r3, #64	; 0x40
 800a0f8:	d83c      	bhi.n	800a174 <_scanf_float+0xd0>
 800a0fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a0fe:	b2c8      	uxtb	r0, r1
 800a100:	280e      	cmp	r0, #14
 800a102:	d93a      	bls.n	800a17a <_scanf_float+0xd6>
 800a104:	f1b9 0f00 	cmp.w	r9, #0
 800a108:	d003      	beq.n	800a112 <_scanf_float+0x6e>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a116:	f1ba 0f01 	cmp.w	sl, #1
 800a11a:	f200 8113 	bhi.w	800a344 <_scanf_float+0x2a0>
 800a11e:	455e      	cmp	r6, fp
 800a120:	f200 8105 	bhi.w	800a32e <_scanf_float+0x28a>
 800a124:	2501      	movs	r5, #1
 800a126:	4628      	mov	r0, r5
 800a128:	b007      	add	sp, #28
 800a12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a132:	2a0d      	cmp	r2, #13
 800a134:	d8e6      	bhi.n	800a104 <_scanf_float+0x60>
 800a136:	a101      	add	r1, pc, #4	; (adr r1, 800a13c <_scanf_float+0x98>)
 800a138:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a13c:	0800a27b 	.word	0x0800a27b
 800a140:	0800a105 	.word	0x0800a105
 800a144:	0800a105 	.word	0x0800a105
 800a148:	0800a105 	.word	0x0800a105
 800a14c:	0800a2db 	.word	0x0800a2db
 800a150:	0800a2b3 	.word	0x0800a2b3
 800a154:	0800a105 	.word	0x0800a105
 800a158:	0800a105 	.word	0x0800a105
 800a15c:	0800a289 	.word	0x0800a289
 800a160:	0800a105 	.word	0x0800a105
 800a164:	0800a105 	.word	0x0800a105
 800a168:	0800a105 	.word	0x0800a105
 800a16c:	0800a105 	.word	0x0800a105
 800a170:	0800a241 	.word	0x0800a241
 800a174:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a178:	e7db      	b.n	800a132 <_scanf_float+0x8e>
 800a17a:	290e      	cmp	r1, #14
 800a17c:	d8c2      	bhi.n	800a104 <_scanf_float+0x60>
 800a17e:	a001      	add	r0, pc, #4	; (adr r0, 800a184 <_scanf_float+0xe0>)
 800a180:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a184:	0800a233 	.word	0x0800a233
 800a188:	0800a105 	.word	0x0800a105
 800a18c:	0800a233 	.word	0x0800a233
 800a190:	0800a2c7 	.word	0x0800a2c7
 800a194:	0800a105 	.word	0x0800a105
 800a198:	0800a1e1 	.word	0x0800a1e1
 800a19c:	0800a21d 	.word	0x0800a21d
 800a1a0:	0800a21d 	.word	0x0800a21d
 800a1a4:	0800a21d 	.word	0x0800a21d
 800a1a8:	0800a21d 	.word	0x0800a21d
 800a1ac:	0800a21d 	.word	0x0800a21d
 800a1b0:	0800a21d 	.word	0x0800a21d
 800a1b4:	0800a21d 	.word	0x0800a21d
 800a1b8:	0800a21d 	.word	0x0800a21d
 800a1bc:	0800a21d 	.word	0x0800a21d
 800a1c0:	2b6e      	cmp	r3, #110	; 0x6e
 800a1c2:	d809      	bhi.n	800a1d8 <_scanf_float+0x134>
 800a1c4:	2b60      	cmp	r3, #96	; 0x60
 800a1c6:	d8b2      	bhi.n	800a12e <_scanf_float+0x8a>
 800a1c8:	2b54      	cmp	r3, #84	; 0x54
 800a1ca:	d077      	beq.n	800a2bc <_scanf_float+0x218>
 800a1cc:	2b59      	cmp	r3, #89	; 0x59
 800a1ce:	d199      	bne.n	800a104 <_scanf_float+0x60>
 800a1d0:	2d07      	cmp	r5, #7
 800a1d2:	d197      	bne.n	800a104 <_scanf_float+0x60>
 800a1d4:	2508      	movs	r5, #8
 800a1d6:	e029      	b.n	800a22c <_scanf_float+0x188>
 800a1d8:	2b74      	cmp	r3, #116	; 0x74
 800a1da:	d06f      	beq.n	800a2bc <_scanf_float+0x218>
 800a1dc:	2b79      	cmp	r3, #121	; 0x79
 800a1de:	e7f6      	b.n	800a1ce <_scanf_float+0x12a>
 800a1e0:	6821      	ldr	r1, [r4, #0]
 800a1e2:	05c8      	lsls	r0, r1, #23
 800a1e4:	d51a      	bpl.n	800a21c <_scanf_float+0x178>
 800a1e6:	9b02      	ldr	r3, [sp, #8]
 800a1e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a1ec:	6021      	str	r1, [r4, #0]
 800a1ee:	f109 0901 	add.w	r9, r9, #1
 800a1f2:	b11b      	cbz	r3, 800a1fc <_scanf_float+0x158>
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	3201      	adds	r2, #1
 800a1f8:	9302      	str	r3, [sp, #8]
 800a1fa:	60a2      	str	r2, [r4, #8]
 800a1fc:	68a3      	ldr	r3, [r4, #8]
 800a1fe:	3b01      	subs	r3, #1
 800a200:	60a3      	str	r3, [r4, #8]
 800a202:	6923      	ldr	r3, [r4, #16]
 800a204:	3301      	adds	r3, #1
 800a206:	6123      	str	r3, [r4, #16]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	607b      	str	r3, [r7, #4]
 800a210:	f340 8084 	ble.w	800a31c <_scanf_float+0x278>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	3301      	adds	r3, #1
 800a218:	603b      	str	r3, [r7, #0]
 800a21a:	e766      	b.n	800a0ea <_scanf_float+0x46>
 800a21c:	eb1a 0f05 	cmn.w	sl, r5
 800a220:	f47f af70 	bne.w	800a104 <_scanf_float+0x60>
 800a224:	6822      	ldr	r2, [r4, #0]
 800a226:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a22a:	6022      	str	r2, [r4, #0]
 800a22c:	f806 3b01 	strb.w	r3, [r6], #1
 800a230:	e7e4      	b.n	800a1fc <_scanf_float+0x158>
 800a232:	6822      	ldr	r2, [r4, #0]
 800a234:	0610      	lsls	r0, r2, #24
 800a236:	f57f af65 	bpl.w	800a104 <_scanf_float+0x60>
 800a23a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a23e:	e7f4      	b.n	800a22a <_scanf_float+0x186>
 800a240:	f1ba 0f00 	cmp.w	sl, #0
 800a244:	d10e      	bne.n	800a264 <_scanf_float+0x1c0>
 800a246:	f1b9 0f00 	cmp.w	r9, #0
 800a24a:	d10e      	bne.n	800a26a <_scanf_float+0x1c6>
 800a24c:	6822      	ldr	r2, [r4, #0]
 800a24e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a252:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a256:	d108      	bne.n	800a26a <_scanf_float+0x1c6>
 800a258:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	f04f 0a01 	mov.w	sl, #1
 800a262:	e7e3      	b.n	800a22c <_scanf_float+0x188>
 800a264:	f1ba 0f02 	cmp.w	sl, #2
 800a268:	d055      	beq.n	800a316 <_scanf_float+0x272>
 800a26a:	2d01      	cmp	r5, #1
 800a26c:	d002      	beq.n	800a274 <_scanf_float+0x1d0>
 800a26e:	2d04      	cmp	r5, #4
 800a270:	f47f af48 	bne.w	800a104 <_scanf_float+0x60>
 800a274:	3501      	adds	r5, #1
 800a276:	b2ed      	uxtb	r5, r5
 800a278:	e7d8      	b.n	800a22c <_scanf_float+0x188>
 800a27a:	f1ba 0f01 	cmp.w	sl, #1
 800a27e:	f47f af41 	bne.w	800a104 <_scanf_float+0x60>
 800a282:	f04f 0a02 	mov.w	sl, #2
 800a286:	e7d1      	b.n	800a22c <_scanf_float+0x188>
 800a288:	b97d      	cbnz	r5, 800a2aa <_scanf_float+0x206>
 800a28a:	f1b9 0f00 	cmp.w	r9, #0
 800a28e:	f47f af3c 	bne.w	800a10a <_scanf_float+0x66>
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a298:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a29c:	f47f af39 	bne.w	800a112 <_scanf_float+0x6e>
 800a2a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2a4:	6022      	str	r2, [r4, #0]
 800a2a6:	2501      	movs	r5, #1
 800a2a8:	e7c0      	b.n	800a22c <_scanf_float+0x188>
 800a2aa:	2d03      	cmp	r5, #3
 800a2ac:	d0e2      	beq.n	800a274 <_scanf_float+0x1d0>
 800a2ae:	2d05      	cmp	r5, #5
 800a2b0:	e7de      	b.n	800a270 <_scanf_float+0x1cc>
 800a2b2:	2d02      	cmp	r5, #2
 800a2b4:	f47f af26 	bne.w	800a104 <_scanf_float+0x60>
 800a2b8:	2503      	movs	r5, #3
 800a2ba:	e7b7      	b.n	800a22c <_scanf_float+0x188>
 800a2bc:	2d06      	cmp	r5, #6
 800a2be:	f47f af21 	bne.w	800a104 <_scanf_float+0x60>
 800a2c2:	2507      	movs	r5, #7
 800a2c4:	e7b2      	b.n	800a22c <_scanf_float+0x188>
 800a2c6:	6822      	ldr	r2, [r4, #0]
 800a2c8:	0591      	lsls	r1, r2, #22
 800a2ca:	f57f af1b 	bpl.w	800a104 <_scanf_float+0x60>
 800a2ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a2d2:	6022      	str	r2, [r4, #0]
 800a2d4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2d8:	e7a8      	b.n	800a22c <_scanf_float+0x188>
 800a2da:	6822      	ldr	r2, [r4, #0]
 800a2dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a2e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a2e4:	d006      	beq.n	800a2f4 <_scanf_float+0x250>
 800a2e6:	0550      	lsls	r0, r2, #21
 800a2e8:	f57f af0c 	bpl.w	800a104 <_scanf_float+0x60>
 800a2ec:	f1b9 0f00 	cmp.w	r9, #0
 800a2f0:	f43f af0f 	beq.w	800a112 <_scanf_float+0x6e>
 800a2f4:	0591      	lsls	r1, r2, #22
 800a2f6:	bf58      	it	pl
 800a2f8:	9901      	ldrpl	r1, [sp, #4]
 800a2fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2fe:	bf58      	it	pl
 800a300:	eba9 0101 	subpl.w	r1, r9, r1
 800a304:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a308:	bf58      	it	pl
 800a30a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a30e:	6022      	str	r2, [r4, #0]
 800a310:	f04f 0900 	mov.w	r9, #0
 800a314:	e78a      	b.n	800a22c <_scanf_float+0x188>
 800a316:	f04f 0a03 	mov.w	sl, #3
 800a31a:	e787      	b.n	800a22c <_scanf_float+0x188>
 800a31c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a320:	4639      	mov	r1, r7
 800a322:	4640      	mov	r0, r8
 800a324:	4798      	blx	r3
 800a326:	2800      	cmp	r0, #0
 800a328:	f43f aedf 	beq.w	800a0ea <_scanf_float+0x46>
 800a32c:	e6ea      	b.n	800a104 <_scanf_float+0x60>
 800a32e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a332:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a336:	463a      	mov	r2, r7
 800a338:	4640      	mov	r0, r8
 800a33a:	4798      	blx	r3
 800a33c:	6923      	ldr	r3, [r4, #16]
 800a33e:	3b01      	subs	r3, #1
 800a340:	6123      	str	r3, [r4, #16]
 800a342:	e6ec      	b.n	800a11e <_scanf_float+0x7a>
 800a344:	1e6b      	subs	r3, r5, #1
 800a346:	2b06      	cmp	r3, #6
 800a348:	d825      	bhi.n	800a396 <_scanf_float+0x2f2>
 800a34a:	2d02      	cmp	r5, #2
 800a34c:	d836      	bhi.n	800a3bc <_scanf_float+0x318>
 800a34e:	455e      	cmp	r6, fp
 800a350:	f67f aee8 	bls.w	800a124 <_scanf_float+0x80>
 800a354:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a358:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a35c:	463a      	mov	r2, r7
 800a35e:	4640      	mov	r0, r8
 800a360:	4798      	blx	r3
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	3b01      	subs	r3, #1
 800a366:	6123      	str	r3, [r4, #16]
 800a368:	e7f1      	b.n	800a34e <_scanf_float+0x2aa>
 800a36a:	9802      	ldr	r0, [sp, #8]
 800a36c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a370:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a374:	9002      	str	r0, [sp, #8]
 800a376:	463a      	mov	r2, r7
 800a378:	4640      	mov	r0, r8
 800a37a:	4798      	blx	r3
 800a37c:	6923      	ldr	r3, [r4, #16]
 800a37e:	3b01      	subs	r3, #1
 800a380:	6123      	str	r3, [r4, #16]
 800a382:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a386:	fa5f fa8a 	uxtb.w	sl, sl
 800a38a:	f1ba 0f02 	cmp.w	sl, #2
 800a38e:	d1ec      	bne.n	800a36a <_scanf_float+0x2c6>
 800a390:	3d03      	subs	r5, #3
 800a392:	b2ed      	uxtb	r5, r5
 800a394:	1b76      	subs	r6, r6, r5
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	05da      	lsls	r2, r3, #23
 800a39a:	d52f      	bpl.n	800a3fc <_scanf_float+0x358>
 800a39c:	055b      	lsls	r3, r3, #21
 800a39e:	d510      	bpl.n	800a3c2 <_scanf_float+0x31e>
 800a3a0:	455e      	cmp	r6, fp
 800a3a2:	f67f aebf 	bls.w	800a124 <_scanf_float+0x80>
 800a3a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3ae:	463a      	mov	r2, r7
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	4798      	blx	r3
 800a3b4:	6923      	ldr	r3, [r4, #16]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	e7f1      	b.n	800a3a0 <_scanf_float+0x2fc>
 800a3bc:	46aa      	mov	sl, r5
 800a3be:	9602      	str	r6, [sp, #8]
 800a3c0:	e7df      	b.n	800a382 <_scanf_float+0x2de>
 800a3c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	2965      	cmp	r1, #101	; 0x65
 800a3ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3ce:	f106 35ff 	add.w	r5, r6, #4294967295
 800a3d2:	6123      	str	r3, [r4, #16]
 800a3d4:	d00c      	beq.n	800a3f0 <_scanf_float+0x34c>
 800a3d6:	2945      	cmp	r1, #69	; 0x45
 800a3d8:	d00a      	beq.n	800a3f0 <_scanf_float+0x34c>
 800a3da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3de:	463a      	mov	r2, r7
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4798      	blx	r3
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	1eb5      	subs	r5, r6, #2
 800a3ee:	6123      	str	r3, [r4, #16]
 800a3f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3f4:	463a      	mov	r2, r7
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	4798      	blx	r3
 800a3fa:	462e      	mov	r6, r5
 800a3fc:	6825      	ldr	r5, [r4, #0]
 800a3fe:	f015 0510 	ands.w	r5, r5, #16
 800a402:	d159      	bne.n	800a4b8 <_scanf_float+0x414>
 800a404:	7035      	strb	r5, [r6, #0]
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a40c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a410:	d11b      	bne.n	800a44a <_scanf_float+0x3a6>
 800a412:	9b01      	ldr	r3, [sp, #4]
 800a414:	454b      	cmp	r3, r9
 800a416:	eba3 0209 	sub.w	r2, r3, r9
 800a41a:	d123      	bne.n	800a464 <_scanf_float+0x3c0>
 800a41c:	2200      	movs	r2, #0
 800a41e:	4659      	mov	r1, fp
 800a420:	4640      	mov	r0, r8
 800a422:	f000 feaf 	bl	800b184 <_strtod_r>
 800a426:	6822      	ldr	r2, [r4, #0]
 800a428:	9b03      	ldr	r3, [sp, #12]
 800a42a:	f012 0f02 	tst.w	r2, #2
 800a42e:	ec57 6b10 	vmov	r6, r7, d0
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	d021      	beq.n	800a47a <_scanf_float+0x3d6>
 800a436:	9903      	ldr	r1, [sp, #12]
 800a438:	1d1a      	adds	r2, r3, #4
 800a43a:	600a      	str	r2, [r1, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	e9c3 6700 	strd	r6, r7, [r3]
 800a442:	68e3      	ldr	r3, [r4, #12]
 800a444:	3301      	adds	r3, #1
 800a446:	60e3      	str	r3, [r4, #12]
 800a448:	e66d      	b.n	800a126 <_scanf_float+0x82>
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0e5      	beq.n	800a41c <_scanf_float+0x378>
 800a450:	9905      	ldr	r1, [sp, #20]
 800a452:	230a      	movs	r3, #10
 800a454:	462a      	mov	r2, r5
 800a456:	3101      	adds	r1, #1
 800a458:	4640      	mov	r0, r8
 800a45a:	f000 ffd3 	bl	800b404 <_strtol_r>
 800a45e:	9b04      	ldr	r3, [sp, #16]
 800a460:	9e05      	ldr	r6, [sp, #20]
 800a462:	1ac2      	subs	r2, r0, r3
 800a464:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a468:	429e      	cmp	r6, r3
 800a46a:	bf28      	it	cs
 800a46c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a470:	4912      	ldr	r1, [pc, #72]	; (800a4bc <_scanf_float+0x418>)
 800a472:	4630      	mov	r0, r6
 800a474:	f000 f82c 	bl	800a4d0 <siprintf>
 800a478:	e7d0      	b.n	800a41c <_scanf_float+0x378>
 800a47a:	9903      	ldr	r1, [sp, #12]
 800a47c:	f012 0f04 	tst.w	r2, #4
 800a480:	f103 0204 	add.w	r2, r3, #4
 800a484:	600a      	str	r2, [r1, #0]
 800a486:	d1d9      	bne.n	800a43c <_scanf_float+0x398>
 800a488:	f8d3 8000 	ldr.w	r8, [r3]
 800a48c:	ee10 2a10 	vmov	r2, s0
 800a490:	ee10 0a10 	vmov	r0, s0
 800a494:	463b      	mov	r3, r7
 800a496:	4639      	mov	r1, r7
 800a498:	f7f6 fb70 	bl	8000b7c <__aeabi_dcmpun>
 800a49c:	b128      	cbz	r0, 800a4aa <_scanf_float+0x406>
 800a49e:	4808      	ldr	r0, [pc, #32]	; (800a4c0 <_scanf_float+0x41c>)
 800a4a0:	f000 f810 	bl	800a4c4 <nanf>
 800a4a4:	ed88 0a00 	vstr	s0, [r8]
 800a4a8:	e7cb      	b.n	800a442 <_scanf_float+0x39e>
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	4639      	mov	r1, r7
 800a4ae:	f7f6 fbc3 	bl	8000c38 <__aeabi_d2f>
 800a4b2:	f8c8 0000 	str.w	r0, [r8]
 800a4b6:	e7c4      	b.n	800a442 <_scanf_float+0x39e>
 800a4b8:	2500      	movs	r5, #0
 800a4ba:	e634      	b.n	800a126 <_scanf_float+0x82>
 800a4bc:	0800e370 	.word	0x0800e370
 800a4c0:	0800e477 	.word	0x0800e477

0800a4c4 <nanf>:
 800a4c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a4cc <nanf+0x8>
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	7fc00000 	.word	0x7fc00000

0800a4d0 <siprintf>:
 800a4d0:	b40e      	push	{r1, r2, r3}
 800a4d2:	b500      	push	{lr}
 800a4d4:	b09c      	sub	sp, #112	; 0x70
 800a4d6:	ab1d      	add	r3, sp, #116	; 0x74
 800a4d8:	9002      	str	r0, [sp, #8]
 800a4da:	9006      	str	r0, [sp, #24]
 800a4dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4e0:	4809      	ldr	r0, [pc, #36]	; (800a508 <siprintf+0x38>)
 800a4e2:	9107      	str	r1, [sp, #28]
 800a4e4:	9104      	str	r1, [sp, #16]
 800a4e6:	4909      	ldr	r1, [pc, #36]	; (800a50c <siprintf+0x3c>)
 800a4e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ec:	9105      	str	r1, [sp, #20]
 800a4ee:	6800      	ldr	r0, [r0, #0]
 800a4f0:	9301      	str	r3, [sp, #4]
 800a4f2:	a902      	add	r1, sp, #8
 800a4f4:	f002 ffde 	bl	800d4b4 <_svfiprintf_r>
 800a4f8:	9b02      	ldr	r3, [sp, #8]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	701a      	strb	r2, [r3, #0]
 800a4fe:	b01c      	add	sp, #112	; 0x70
 800a500:	f85d eb04 	ldr.w	lr, [sp], #4
 800a504:	b003      	add	sp, #12
 800a506:	4770      	bx	lr
 800a508:	2000001c 	.word	0x2000001c
 800a50c:	ffff0208 	.word	0xffff0208

0800a510 <strstr>:
 800a510:	780a      	ldrb	r2, [r1, #0]
 800a512:	b570      	push	{r4, r5, r6, lr}
 800a514:	b96a      	cbnz	r2, 800a532 <strstr+0x22>
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	429a      	cmp	r2, r3
 800a51a:	d109      	bne.n	800a530 <strstr+0x20>
 800a51c:	460c      	mov	r4, r1
 800a51e:	4605      	mov	r5, r0
 800a520:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a524:	2b00      	cmp	r3, #0
 800a526:	d0f6      	beq.n	800a516 <strstr+0x6>
 800a528:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a52c:	429e      	cmp	r6, r3
 800a52e:	d0f7      	beq.n	800a520 <strstr+0x10>
 800a530:	3001      	adds	r0, #1
 800a532:	7803      	ldrb	r3, [r0, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1ef      	bne.n	800a518 <strstr+0x8>
 800a538:	4618      	mov	r0, r3
 800a53a:	e7ec      	b.n	800a516 <strstr+0x6>

0800a53c <sulp>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	4604      	mov	r4, r0
 800a540:	460d      	mov	r5, r1
 800a542:	ec45 4b10 	vmov	d0, r4, r5
 800a546:	4616      	mov	r6, r2
 800a548:	f002 fd12 	bl	800cf70 <__ulp>
 800a54c:	ec51 0b10 	vmov	r0, r1, d0
 800a550:	b17e      	cbz	r6, 800a572 <sulp+0x36>
 800a552:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a556:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	dd09      	ble.n	800a572 <sulp+0x36>
 800a55e:	051b      	lsls	r3, r3, #20
 800a560:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a564:	2400      	movs	r4, #0
 800a566:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a56a:	4622      	mov	r2, r4
 800a56c:	462b      	mov	r3, r5
 800a56e:	f7f6 f86b 	bl	8000648 <__aeabi_dmul>
 800a572:	bd70      	pop	{r4, r5, r6, pc}
 800a574:	0000      	movs	r0, r0
	...

0800a578 <_strtod_l>:
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	ed2d 8b02 	vpush	{d8}
 800a580:	b09d      	sub	sp, #116	; 0x74
 800a582:	461f      	mov	r7, r3
 800a584:	2300      	movs	r3, #0
 800a586:	9318      	str	r3, [sp, #96]	; 0x60
 800a588:	4ba2      	ldr	r3, [pc, #648]	; (800a814 <_strtod_l+0x29c>)
 800a58a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	9305      	str	r3, [sp, #20]
 800a590:	4604      	mov	r4, r0
 800a592:	4618      	mov	r0, r3
 800a594:	4688      	mov	r8, r1
 800a596:	f7f5 fe43 	bl	8000220 <strlen>
 800a59a:	f04f 0a00 	mov.w	sl, #0
 800a59e:	4605      	mov	r5, r0
 800a5a0:	f04f 0b00 	mov.w	fp, #0
 800a5a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a5a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5aa:	781a      	ldrb	r2, [r3, #0]
 800a5ac:	2a2b      	cmp	r2, #43	; 0x2b
 800a5ae:	d04e      	beq.n	800a64e <_strtod_l+0xd6>
 800a5b0:	d83b      	bhi.n	800a62a <_strtod_l+0xb2>
 800a5b2:	2a0d      	cmp	r2, #13
 800a5b4:	d834      	bhi.n	800a620 <_strtod_l+0xa8>
 800a5b6:	2a08      	cmp	r2, #8
 800a5b8:	d834      	bhi.n	800a624 <_strtod_l+0xac>
 800a5ba:	2a00      	cmp	r2, #0
 800a5bc:	d03e      	beq.n	800a63c <_strtod_l+0xc4>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	930a      	str	r3, [sp, #40]	; 0x28
 800a5c2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a5c4:	7833      	ldrb	r3, [r6, #0]
 800a5c6:	2b30      	cmp	r3, #48	; 0x30
 800a5c8:	f040 80b0 	bne.w	800a72c <_strtod_l+0x1b4>
 800a5cc:	7873      	ldrb	r3, [r6, #1]
 800a5ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a5d2:	2b58      	cmp	r3, #88	; 0x58
 800a5d4:	d168      	bne.n	800a6a8 <_strtod_l+0x130>
 800a5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5d8:	9301      	str	r3, [sp, #4]
 800a5da:	ab18      	add	r3, sp, #96	; 0x60
 800a5dc:	9702      	str	r7, [sp, #8]
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	4a8d      	ldr	r2, [pc, #564]	; (800a818 <_strtod_l+0x2a0>)
 800a5e2:	ab19      	add	r3, sp, #100	; 0x64
 800a5e4:	a917      	add	r1, sp, #92	; 0x5c
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f001 fe2a 	bl	800c240 <__gethex>
 800a5ec:	f010 0707 	ands.w	r7, r0, #7
 800a5f0:	4605      	mov	r5, r0
 800a5f2:	d005      	beq.n	800a600 <_strtod_l+0x88>
 800a5f4:	2f06      	cmp	r7, #6
 800a5f6:	d12c      	bne.n	800a652 <_strtod_l+0xda>
 800a5f8:	3601      	adds	r6, #1
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	9617      	str	r6, [sp, #92]	; 0x5c
 800a5fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a600:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a602:	2b00      	cmp	r3, #0
 800a604:	f040 8590 	bne.w	800b128 <_strtod_l+0xbb0>
 800a608:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a60a:	b1eb      	cbz	r3, 800a648 <_strtod_l+0xd0>
 800a60c:	4652      	mov	r2, sl
 800a60e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a612:	ec43 2b10 	vmov	d0, r2, r3
 800a616:	b01d      	add	sp, #116	; 0x74
 800a618:	ecbd 8b02 	vpop	{d8}
 800a61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a620:	2a20      	cmp	r2, #32
 800a622:	d1cc      	bne.n	800a5be <_strtod_l+0x46>
 800a624:	3301      	adds	r3, #1
 800a626:	9317      	str	r3, [sp, #92]	; 0x5c
 800a628:	e7be      	b.n	800a5a8 <_strtod_l+0x30>
 800a62a:	2a2d      	cmp	r2, #45	; 0x2d
 800a62c:	d1c7      	bne.n	800a5be <_strtod_l+0x46>
 800a62e:	2201      	movs	r2, #1
 800a630:	920a      	str	r2, [sp, #40]	; 0x28
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	9217      	str	r2, [sp, #92]	; 0x5c
 800a636:	785b      	ldrb	r3, [r3, #1]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1c2      	bne.n	800a5c2 <_strtod_l+0x4a>
 800a63c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a63e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a642:	2b00      	cmp	r3, #0
 800a644:	f040 856e 	bne.w	800b124 <_strtod_l+0xbac>
 800a648:	4652      	mov	r2, sl
 800a64a:	465b      	mov	r3, fp
 800a64c:	e7e1      	b.n	800a612 <_strtod_l+0x9a>
 800a64e:	2200      	movs	r2, #0
 800a650:	e7ee      	b.n	800a630 <_strtod_l+0xb8>
 800a652:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a654:	b13a      	cbz	r2, 800a666 <_strtod_l+0xee>
 800a656:	2135      	movs	r1, #53	; 0x35
 800a658:	a81a      	add	r0, sp, #104	; 0x68
 800a65a:	f002 fd94 	bl	800d186 <__copybits>
 800a65e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a660:	4620      	mov	r0, r4
 800a662:	f002 f953 	bl	800c90c <_Bfree>
 800a666:	3f01      	subs	r7, #1
 800a668:	2f04      	cmp	r7, #4
 800a66a:	d806      	bhi.n	800a67a <_strtod_l+0x102>
 800a66c:	e8df f007 	tbb	[pc, r7]
 800a670:	1714030a 	.word	0x1714030a
 800a674:	0a          	.byte	0x0a
 800a675:	00          	.byte	0x00
 800a676:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a67a:	0728      	lsls	r0, r5, #28
 800a67c:	d5c0      	bpl.n	800a600 <_strtod_l+0x88>
 800a67e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a682:	e7bd      	b.n	800a600 <_strtod_l+0x88>
 800a684:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a688:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a68a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a68e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a692:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a696:	e7f0      	b.n	800a67a <_strtod_l+0x102>
 800a698:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a81c <_strtod_l+0x2a4>
 800a69c:	e7ed      	b.n	800a67a <_strtod_l+0x102>
 800a69e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a6a2:	f04f 3aff 	mov.w	sl, #4294967295
 800a6a6:	e7e8      	b.n	800a67a <_strtod_l+0x102>
 800a6a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6aa:	1c5a      	adds	r2, r3, #1
 800a6ac:	9217      	str	r2, [sp, #92]	; 0x5c
 800a6ae:	785b      	ldrb	r3, [r3, #1]
 800a6b0:	2b30      	cmp	r3, #48	; 0x30
 800a6b2:	d0f9      	beq.n	800a6a8 <_strtod_l+0x130>
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0a3      	beq.n	800a600 <_strtod_l+0x88>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	f04f 0900 	mov.w	r9, #0
 800a6be:	9304      	str	r3, [sp, #16]
 800a6c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6c2:	9308      	str	r3, [sp, #32]
 800a6c4:	f8cd 901c 	str.w	r9, [sp, #28]
 800a6c8:	464f      	mov	r7, r9
 800a6ca:	220a      	movs	r2, #10
 800a6cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a6ce:	7806      	ldrb	r6, [r0, #0]
 800a6d0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a6d4:	b2d9      	uxtb	r1, r3
 800a6d6:	2909      	cmp	r1, #9
 800a6d8:	d92a      	bls.n	800a730 <_strtod_l+0x1b8>
 800a6da:	9905      	ldr	r1, [sp, #20]
 800a6dc:	462a      	mov	r2, r5
 800a6de:	f003 f95b 	bl	800d998 <strncmp>
 800a6e2:	b398      	cbz	r0, 800a74c <_strtod_l+0x1d4>
 800a6e4:	2000      	movs	r0, #0
 800a6e6:	4632      	mov	r2, r6
 800a6e8:	463d      	mov	r5, r7
 800a6ea:	9005      	str	r0, [sp, #20]
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2a65      	cmp	r2, #101	; 0x65
 800a6f0:	d001      	beq.n	800a6f6 <_strtod_l+0x17e>
 800a6f2:	2a45      	cmp	r2, #69	; 0x45
 800a6f4:	d118      	bne.n	800a728 <_strtod_l+0x1b0>
 800a6f6:	b91d      	cbnz	r5, 800a700 <_strtod_l+0x188>
 800a6f8:	9a04      	ldr	r2, [sp, #16]
 800a6fa:	4302      	orrs	r2, r0
 800a6fc:	d09e      	beq.n	800a63c <_strtod_l+0xc4>
 800a6fe:	2500      	movs	r5, #0
 800a700:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a704:	f108 0201 	add.w	r2, r8, #1
 800a708:	9217      	str	r2, [sp, #92]	; 0x5c
 800a70a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a70e:	2a2b      	cmp	r2, #43	; 0x2b
 800a710:	d075      	beq.n	800a7fe <_strtod_l+0x286>
 800a712:	2a2d      	cmp	r2, #45	; 0x2d
 800a714:	d07b      	beq.n	800a80e <_strtod_l+0x296>
 800a716:	f04f 0c00 	mov.w	ip, #0
 800a71a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a71e:	2909      	cmp	r1, #9
 800a720:	f240 8082 	bls.w	800a828 <_strtod_l+0x2b0>
 800a724:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a728:	2600      	movs	r6, #0
 800a72a:	e09d      	b.n	800a868 <_strtod_l+0x2f0>
 800a72c:	2300      	movs	r3, #0
 800a72e:	e7c4      	b.n	800a6ba <_strtod_l+0x142>
 800a730:	2f08      	cmp	r7, #8
 800a732:	bfd8      	it	le
 800a734:	9907      	ldrle	r1, [sp, #28]
 800a736:	f100 0001 	add.w	r0, r0, #1
 800a73a:	bfda      	itte	le
 800a73c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a740:	9307      	strle	r3, [sp, #28]
 800a742:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a746:	3701      	adds	r7, #1
 800a748:	9017      	str	r0, [sp, #92]	; 0x5c
 800a74a:	e7bf      	b.n	800a6cc <_strtod_l+0x154>
 800a74c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a74e:	195a      	adds	r2, r3, r5
 800a750:	9217      	str	r2, [sp, #92]	; 0x5c
 800a752:	5d5a      	ldrb	r2, [r3, r5]
 800a754:	2f00      	cmp	r7, #0
 800a756:	d037      	beq.n	800a7c8 <_strtod_l+0x250>
 800a758:	9005      	str	r0, [sp, #20]
 800a75a:	463d      	mov	r5, r7
 800a75c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a760:	2b09      	cmp	r3, #9
 800a762:	d912      	bls.n	800a78a <_strtod_l+0x212>
 800a764:	2301      	movs	r3, #1
 800a766:	e7c2      	b.n	800a6ee <_strtod_l+0x176>
 800a768:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a76a:	1c5a      	adds	r2, r3, #1
 800a76c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a76e:	785a      	ldrb	r2, [r3, #1]
 800a770:	3001      	adds	r0, #1
 800a772:	2a30      	cmp	r2, #48	; 0x30
 800a774:	d0f8      	beq.n	800a768 <_strtod_l+0x1f0>
 800a776:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a77a:	2b08      	cmp	r3, #8
 800a77c:	f200 84d9 	bhi.w	800b132 <_strtod_l+0xbba>
 800a780:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a782:	9005      	str	r0, [sp, #20]
 800a784:	2000      	movs	r0, #0
 800a786:	9308      	str	r3, [sp, #32]
 800a788:	4605      	mov	r5, r0
 800a78a:	3a30      	subs	r2, #48	; 0x30
 800a78c:	f100 0301 	add.w	r3, r0, #1
 800a790:	d014      	beq.n	800a7bc <_strtod_l+0x244>
 800a792:	9905      	ldr	r1, [sp, #20]
 800a794:	4419      	add	r1, r3
 800a796:	9105      	str	r1, [sp, #20]
 800a798:	462b      	mov	r3, r5
 800a79a:	eb00 0e05 	add.w	lr, r0, r5
 800a79e:	210a      	movs	r1, #10
 800a7a0:	4573      	cmp	r3, lr
 800a7a2:	d113      	bne.n	800a7cc <_strtod_l+0x254>
 800a7a4:	182b      	adds	r3, r5, r0
 800a7a6:	2b08      	cmp	r3, #8
 800a7a8:	f105 0501 	add.w	r5, r5, #1
 800a7ac:	4405      	add	r5, r0
 800a7ae:	dc1c      	bgt.n	800a7ea <_strtod_l+0x272>
 800a7b0:	9907      	ldr	r1, [sp, #28]
 800a7b2:	230a      	movs	r3, #10
 800a7b4:	fb03 2301 	mla	r3, r3, r1, r2
 800a7b8:	9307      	str	r3, [sp, #28]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a7be:	1c51      	adds	r1, r2, #1
 800a7c0:	9117      	str	r1, [sp, #92]	; 0x5c
 800a7c2:	7852      	ldrb	r2, [r2, #1]
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	e7c9      	b.n	800a75c <_strtod_l+0x1e4>
 800a7c8:	4638      	mov	r0, r7
 800a7ca:	e7d2      	b.n	800a772 <_strtod_l+0x1fa>
 800a7cc:	2b08      	cmp	r3, #8
 800a7ce:	dc04      	bgt.n	800a7da <_strtod_l+0x262>
 800a7d0:	9e07      	ldr	r6, [sp, #28]
 800a7d2:	434e      	muls	r6, r1
 800a7d4:	9607      	str	r6, [sp, #28]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	e7e2      	b.n	800a7a0 <_strtod_l+0x228>
 800a7da:	f103 0c01 	add.w	ip, r3, #1
 800a7de:	f1bc 0f10 	cmp.w	ip, #16
 800a7e2:	bfd8      	it	le
 800a7e4:	fb01 f909 	mulle.w	r9, r1, r9
 800a7e8:	e7f5      	b.n	800a7d6 <_strtod_l+0x25e>
 800a7ea:	2d10      	cmp	r5, #16
 800a7ec:	bfdc      	itt	le
 800a7ee:	230a      	movle	r3, #10
 800a7f0:	fb03 2909 	mlale	r9, r3, r9, r2
 800a7f4:	e7e1      	b.n	800a7ba <_strtod_l+0x242>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	9305      	str	r3, [sp, #20]
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e77c      	b.n	800a6f8 <_strtod_l+0x180>
 800a7fe:	f04f 0c00 	mov.w	ip, #0
 800a802:	f108 0202 	add.w	r2, r8, #2
 800a806:	9217      	str	r2, [sp, #92]	; 0x5c
 800a808:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a80c:	e785      	b.n	800a71a <_strtod_l+0x1a2>
 800a80e:	f04f 0c01 	mov.w	ip, #1
 800a812:	e7f6      	b.n	800a802 <_strtod_l+0x28a>
 800a814:	0800e658 	.word	0x0800e658
 800a818:	0800e378 	.word	0x0800e378
 800a81c:	7ff00000 	.word	0x7ff00000
 800a820:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a822:	1c51      	adds	r1, r2, #1
 800a824:	9117      	str	r1, [sp, #92]	; 0x5c
 800a826:	7852      	ldrb	r2, [r2, #1]
 800a828:	2a30      	cmp	r2, #48	; 0x30
 800a82a:	d0f9      	beq.n	800a820 <_strtod_l+0x2a8>
 800a82c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a830:	2908      	cmp	r1, #8
 800a832:	f63f af79 	bhi.w	800a728 <_strtod_l+0x1b0>
 800a836:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a83a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a83c:	9206      	str	r2, [sp, #24]
 800a83e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a840:	1c51      	adds	r1, r2, #1
 800a842:	9117      	str	r1, [sp, #92]	; 0x5c
 800a844:	7852      	ldrb	r2, [r2, #1]
 800a846:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a84a:	2e09      	cmp	r6, #9
 800a84c:	d937      	bls.n	800a8be <_strtod_l+0x346>
 800a84e:	9e06      	ldr	r6, [sp, #24]
 800a850:	1b89      	subs	r1, r1, r6
 800a852:	2908      	cmp	r1, #8
 800a854:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a858:	dc02      	bgt.n	800a860 <_strtod_l+0x2e8>
 800a85a:	4576      	cmp	r6, lr
 800a85c:	bfa8      	it	ge
 800a85e:	4676      	movge	r6, lr
 800a860:	f1bc 0f00 	cmp.w	ip, #0
 800a864:	d000      	beq.n	800a868 <_strtod_l+0x2f0>
 800a866:	4276      	negs	r6, r6
 800a868:	2d00      	cmp	r5, #0
 800a86a:	d14d      	bne.n	800a908 <_strtod_l+0x390>
 800a86c:	9904      	ldr	r1, [sp, #16]
 800a86e:	4301      	orrs	r1, r0
 800a870:	f47f aec6 	bne.w	800a600 <_strtod_l+0x88>
 800a874:	2b00      	cmp	r3, #0
 800a876:	f47f aee1 	bne.w	800a63c <_strtod_l+0xc4>
 800a87a:	2a69      	cmp	r2, #105	; 0x69
 800a87c:	d027      	beq.n	800a8ce <_strtod_l+0x356>
 800a87e:	dc24      	bgt.n	800a8ca <_strtod_l+0x352>
 800a880:	2a49      	cmp	r2, #73	; 0x49
 800a882:	d024      	beq.n	800a8ce <_strtod_l+0x356>
 800a884:	2a4e      	cmp	r2, #78	; 0x4e
 800a886:	f47f aed9 	bne.w	800a63c <_strtod_l+0xc4>
 800a88a:	499f      	ldr	r1, [pc, #636]	; (800ab08 <_strtod_l+0x590>)
 800a88c:	a817      	add	r0, sp, #92	; 0x5c
 800a88e:	f001 ff2f 	bl	800c6f0 <__match>
 800a892:	2800      	cmp	r0, #0
 800a894:	f43f aed2 	beq.w	800a63c <_strtod_l+0xc4>
 800a898:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	2b28      	cmp	r3, #40	; 0x28
 800a89e:	d12d      	bne.n	800a8fc <_strtod_l+0x384>
 800a8a0:	499a      	ldr	r1, [pc, #616]	; (800ab0c <_strtod_l+0x594>)
 800a8a2:	aa1a      	add	r2, sp, #104	; 0x68
 800a8a4:	a817      	add	r0, sp, #92	; 0x5c
 800a8a6:	f001 ff37 	bl	800c718 <__hexnan>
 800a8aa:	2805      	cmp	r0, #5
 800a8ac:	d126      	bne.n	800a8fc <_strtod_l+0x384>
 800a8ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a8b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a8b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a8b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a8bc:	e6a0      	b.n	800a600 <_strtod_l+0x88>
 800a8be:	210a      	movs	r1, #10
 800a8c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a8c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a8c8:	e7b9      	b.n	800a83e <_strtod_l+0x2c6>
 800a8ca:	2a6e      	cmp	r2, #110	; 0x6e
 800a8cc:	e7db      	b.n	800a886 <_strtod_l+0x30e>
 800a8ce:	4990      	ldr	r1, [pc, #576]	; (800ab10 <_strtod_l+0x598>)
 800a8d0:	a817      	add	r0, sp, #92	; 0x5c
 800a8d2:	f001 ff0d 	bl	800c6f0 <__match>
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	f43f aeb0 	beq.w	800a63c <_strtod_l+0xc4>
 800a8dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8de:	498d      	ldr	r1, [pc, #564]	; (800ab14 <_strtod_l+0x59c>)
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	a817      	add	r0, sp, #92	; 0x5c
 800a8e4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8e6:	f001 ff03 	bl	800c6f0 <__match>
 800a8ea:	b910      	cbnz	r0, 800a8f2 <_strtod_l+0x37a>
 800a8ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a8f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ab24 <_strtod_l+0x5ac>
 800a8f6:	f04f 0a00 	mov.w	sl, #0
 800a8fa:	e681      	b.n	800a600 <_strtod_l+0x88>
 800a8fc:	4886      	ldr	r0, [pc, #536]	; (800ab18 <_strtod_l+0x5a0>)
 800a8fe:	f003 f833 	bl	800d968 <nan>
 800a902:	ec5b ab10 	vmov	sl, fp, d0
 800a906:	e67b      	b.n	800a600 <_strtod_l+0x88>
 800a908:	9b05      	ldr	r3, [sp, #20]
 800a90a:	9807      	ldr	r0, [sp, #28]
 800a90c:	1af3      	subs	r3, r6, r3
 800a90e:	2f00      	cmp	r7, #0
 800a910:	bf08      	it	eq
 800a912:	462f      	moveq	r7, r5
 800a914:	2d10      	cmp	r5, #16
 800a916:	9306      	str	r3, [sp, #24]
 800a918:	46a8      	mov	r8, r5
 800a91a:	bfa8      	it	ge
 800a91c:	f04f 0810 	movge.w	r8, #16
 800a920:	f7f5 fe18 	bl	8000554 <__aeabi_ui2d>
 800a924:	2d09      	cmp	r5, #9
 800a926:	4682      	mov	sl, r0
 800a928:	468b      	mov	fp, r1
 800a92a:	dd13      	ble.n	800a954 <_strtod_l+0x3dc>
 800a92c:	4b7b      	ldr	r3, [pc, #492]	; (800ab1c <_strtod_l+0x5a4>)
 800a92e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a932:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a936:	f7f5 fe87 	bl	8000648 <__aeabi_dmul>
 800a93a:	4682      	mov	sl, r0
 800a93c:	4648      	mov	r0, r9
 800a93e:	468b      	mov	fp, r1
 800a940:	f7f5 fe08 	bl	8000554 <__aeabi_ui2d>
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	4650      	mov	r0, sl
 800a94a:	4659      	mov	r1, fp
 800a94c:	f7f5 fcc6 	bl	80002dc <__adddf3>
 800a950:	4682      	mov	sl, r0
 800a952:	468b      	mov	fp, r1
 800a954:	2d0f      	cmp	r5, #15
 800a956:	dc38      	bgt.n	800a9ca <_strtod_l+0x452>
 800a958:	9b06      	ldr	r3, [sp, #24]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f43f ae50 	beq.w	800a600 <_strtod_l+0x88>
 800a960:	dd24      	ble.n	800a9ac <_strtod_l+0x434>
 800a962:	2b16      	cmp	r3, #22
 800a964:	dc0b      	bgt.n	800a97e <_strtod_l+0x406>
 800a966:	496d      	ldr	r1, [pc, #436]	; (800ab1c <_strtod_l+0x5a4>)
 800a968:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a96c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a970:	4652      	mov	r2, sl
 800a972:	465b      	mov	r3, fp
 800a974:	f7f5 fe68 	bl	8000648 <__aeabi_dmul>
 800a978:	4682      	mov	sl, r0
 800a97a:	468b      	mov	fp, r1
 800a97c:	e640      	b.n	800a600 <_strtod_l+0x88>
 800a97e:	9a06      	ldr	r2, [sp, #24]
 800a980:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a984:	4293      	cmp	r3, r2
 800a986:	db20      	blt.n	800a9ca <_strtod_l+0x452>
 800a988:	4c64      	ldr	r4, [pc, #400]	; (800ab1c <_strtod_l+0x5a4>)
 800a98a:	f1c5 050f 	rsb	r5, r5, #15
 800a98e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a992:	4652      	mov	r2, sl
 800a994:	465b      	mov	r3, fp
 800a996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a99a:	f7f5 fe55 	bl	8000648 <__aeabi_dmul>
 800a99e:	9b06      	ldr	r3, [sp, #24]
 800a9a0:	1b5d      	subs	r5, r3, r5
 800a9a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a9a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a9aa:	e7e3      	b.n	800a974 <_strtod_l+0x3fc>
 800a9ac:	9b06      	ldr	r3, [sp, #24]
 800a9ae:	3316      	adds	r3, #22
 800a9b0:	db0b      	blt.n	800a9ca <_strtod_l+0x452>
 800a9b2:	9b05      	ldr	r3, [sp, #20]
 800a9b4:	1b9e      	subs	r6, r3, r6
 800a9b6:	4b59      	ldr	r3, [pc, #356]	; (800ab1c <_strtod_l+0x5a4>)
 800a9b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a9bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9c0:	4650      	mov	r0, sl
 800a9c2:	4659      	mov	r1, fp
 800a9c4:	f7f5 ff6a 	bl	800089c <__aeabi_ddiv>
 800a9c8:	e7d6      	b.n	800a978 <_strtod_l+0x400>
 800a9ca:	9b06      	ldr	r3, [sp, #24]
 800a9cc:	eba5 0808 	sub.w	r8, r5, r8
 800a9d0:	4498      	add	r8, r3
 800a9d2:	f1b8 0f00 	cmp.w	r8, #0
 800a9d6:	dd74      	ble.n	800aac2 <_strtod_l+0x54a>
 800a9d8:	f018 030f 	ands.w	r3, r8, #15
 800a9dc:	d00a      	beq.n	800a9f4 <_strtod_l+0x47c>
 800a9de:	494f      	ldr	r1, [pc, #316]	; (800ab1c <_strtod_l+0x5a4>)
 800a9e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9e4:	4652      	mov	r2, sl
 800a9e6:	465b      	mov	r3, fp
 800a9e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9ec:	f7f5 fe2c 	bl	8000648 <__aeabi_dmul>
 800a9f0:	4682      	mov	sl, r0
 800a9f2:	468b      	mov	fp, r1
 800a9f4:	f038 080f 	bics.w	r8, r8, #15
 800a9f8:	d04f      	beq.n	800aa9a <_strtod_l+0x522>
 800a9fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a9fe:	dd22      	ble.n	800aa46 <_strtod_l+0x4ce>
 800aa00:	2500      	movs	r5, #0
 800aa02:	462e      	mov	r6, r5
 800aa04:	9507      	str	r5, [sp, #28]
 800aa06:	9505      	str	r5, [sp, #20]
 800aa08:	2322      	movs	r3, #34	; 0x22
 800aa0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ab24 <_strtod_l+0x5ac>
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	f04f 0a00 	mov.w	sl, #0
 800aa14:	9b07      	ldr	r3, [sp, #28]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f43f adf2 	beq.w	800a600 <_strtod_l+0x88>
 800aa1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f001 ff74 	bl	800c90c <_Bfree>
 800aa24:	9905      	ldr	r1, [sp, #20]
 800aa26:	4620      	mov	r0, r4
 800aa28:	f001 ff70 	bl	800c90c <_Bfree>
 800aa2c:	4631      	mov	r1, r6
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f001 ff6c 	bl	800c90c <_Bfree>
 800aa34:	9907      	ldr	r1, [sp, #28]
 800aa36:	4620      	mov	r0, r4
 800aa38:	f001 ff68 	bl	800c90c <_Bfree>
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f001 ff64 	bl	800c90c <_Bfree>
 800aa44:	e5dc      	b.n	800a600 <_strtod_l+0x88>
 800aa46:	4b36      	ldr	r3, [pc, #216]	; (800ab20 <_strtod_l+0x5a8>)
 800aa48:	9304      	str	r3, [sp, #16]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800aa50:	4650      	mov	r0, sl
 800aa52:	4659      	mov	r1, fp
 800aa54:	4699      	mov	r9, r3
 800aa56:	f1b8 0f01 	cmp.w	r8, #1
 800aa5a:	dc21      	bgt.n	800aaa0 <_strtod_l+0x528>
 800aa5c:	b10b      	cbz	r3, 800aa62 <_strtod_l+0x4ea>
 800aa5e:	4682      	mov	sl, r0
 800aa60:	468b      	mov	fp, r1
 800aa62:	4b2f      	ldr	r3, [pc, #188]	; (800ab20 <_strtod_l+0x5a8>)
 800aa64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aa68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800aa6c:	4652      	mov	r2, sl
 800aa6e:	465b      	mov	r3, fp
 800aa70:	e9d9 0100 	ldrd	r0, r1, [r9]
 800aa74:	f7f5 fde8 	bl	8000648 <__aeabi_dmul>
 800aa78:	4b2a      	ldr	r3, [pc, #168]	; (800ab24 <_strtod_l+0x5ac>)
 800aa7a:	460a      	mov	r2, r1
 800aa7c:	400b      	ands	r3, r1
 800aa7e:	492a      	ldr	r1, [pc, #168]	; (800ab28 <_strtod_l+0x5b0>)
 800aa80:	428b      	cmp	r3, r1
 800aa82:	4682      	mov	sl, r0
 800aa84:	d8bc      	bhi.n	800aa00 <_strtod_l+0x488>
 800aa86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa8a:	428b      	cmp	r3, r1
 800aa8c:	bf86      	itte	hi
 800aa8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ab2c <_strtod_l+0x5b4>
 800aa92:	f04f 3aff 	movhi.w	sl, #4294967295
 800aa96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	9304      	str	r3, [sp, #16]
 800aa9e:	e084      	b.n	800abaa <_strtod_l+0x632>
 800aaa0:	f018 0f01 	tst.w	r8, #1
 800aaa4:	d005      	beq.n	800aab2 <_strtod_l+0x53a>
 800aaa6:	9b04      	ldr	r3, [sp, #16]
 800aaa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaac:	f7f5 fdcc 	bl	8000648 <__aeabi_dmul>
 800aab0:	2301      	movs	r3, #1
 800aab2:	9a04      	ldr	r2, [sp, #16]
 800aab4:	3208      	adds	r2, #8
 800aab6:	f109 0901 	add.w	r9, r9, #1
 800aaba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aabe:	9204      	str	r2, [sp, #16]
 800aac0:	e7c9      	b.n	800aa56 <_strtod_l+0x4de>
 800aac2:	d0ea      	beq.n	800aa9a <_strtod_l+0x522>
 800aac4:	f1c8 0800 	rsb	r8, r8, #0
 800aac8:	f018 020f 	ands.w	r2, r8, #15
 800aacc:	d00a      	beq.n	800aae4 <_strtod_l+0x56c>
 800aace:	4b13      	ldr	r3, [pc, #76]	; (800ab1c <_strtod_l+0x5a4>)
 800aad0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aad4:	4650      	mov	r0, sl
 800aad6:	4659      	mov	r1, fp
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	f7f5 fede 	bl	800089c <__aeabi_ddiv>
 800aae0:	4682      	mov	sl, r0
 800aae2:	468b      	mov	fp, r1
 800aae4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aae8:	d0d7      	beq.n	800aa9a <_strtod_l+0x522>
 800aaea:	f1b8 0f1f 	cmp.w	r8, #31
 800aaee:	dd1f      	ble.n	800ab30 <_strtod_l+0x5b8>
 800aaf0:	2500      	movs	r5, #0
 800aaf2:	462e      	mov	r6, r5
 800aaf4:	9507      	str	r5, [sp, #28]
 800aaf6:	9505      	str	r5, [sp, #20]
 800aaf8:	2322      	movs	r3, #34	; 0x22
 800aafa:	f04f 0a00 	mov.w	sl, #0
 800aafe:	f04f 0b00 	mov.w	fp, #0
 800ab02:	6023      	str	r3, [r4, #0]
 800ab04:	e786      	b.n	800aa14 <_strtod_l+0x49c>
 800ab06:	bf00      	nop
 800ab08:	0800e349 	.word	0x0800e349
 800ab0c:	0800e38c 	.word	0x0800e38c
 800ab10:	0800e341 	.word	0x0800e341
 800ab14:	0800e57c 	.word	0x0800e57c
 800ab18:	0800e477 	.word	0x0800e477
 800ab1c:	0800e6f0 	.word	0x0800e6f0
 800ab20:	0800e6c8 	.word	0x0800e6c8
 800ab24:	7ff00000 	.word	0x7ff00000
 800ab28:	7ca00000 	.word	0x7ca00000
 800ab2c:	7fefffff 	.word	0x7fefffff
 800ab30:	f018 0310 	ands.w	r3, r8, #16
 800ab34:	bf18      	it	ne
 800ab36:	236a      	movne	r3, #106	; 0x6a
 800ab38:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800aee8 <_strtod_l+0x970>
 800ab3c:	9304      	str	r3, [sp, #16]
 800ab3e:	4650      	mov	r0, sl
 800ab40:	4659      	mov	r1, fp
 800ab42:	2300      	movs	r3, #0
 800ab44:	f018 0f01 	tst.w	r8, #1
 800ab48:	d004      	beq.n	800ab54 <_strtod_l+0x5dc>
 800ab4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab4e:	f7f5 fd7b 	bl	8000648 <__aeabi_dmul>
 800ab52:	2301      	movs	r3, #1
 800ab54:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ab58:	f109 0908 	add.w	r9, r9, #8
 800ab5c:	d1f2      	bne.n	800ab44 <_strtod_l+0x5cc>
 800ab5e:	b10b      	cbz	r3, 800ab64 <_strtod_l+0x5ec>
 800ab60:	4682      	mov	sl, r0
 800ab62:	468b      	mov	fp, r1
 800ab64:	9b04      	ldr	r3, [sp, #16]
 800ab66:	b1c3      	cbz	r3, 800ab9a <_strtod_l+0x622>
 800ab68:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ab6c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	4659      	mov	r1, fp
 800ab74:	dd11      	ble.n	800ab9a <_strtod_l+0x622>
 800ab76:	2b1f      	cmp	r3, #31
 800ab78:	f340 8124 	ble.w	800adc4 <_strtod_l+0x84c>
 800ab7c:	2b34      	cmp	r3, #52	; 0x34
 800ab7e:	bfde      	ittt	le
 800ab80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ab84:	f04f 33ff 	movle.w	r3, #4294967295
 800ab88:	fa03 f202 	lslle.w	r2, r3, r2
 800ab8c:	f04f 0a00 	mov.w	sl, #0
 800ab90:	bfcc      	ite	gt
 800ab92:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ab96:	ea02 0b01 	andle.w	fp, r2, r1
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	4650      	mov	r0, sl
 800aba0:	4659      	mov	r1, fp
 800aba2:	f7f5 ffb9 	bl	8000b18 <__aeabi_dcmpeq>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	d1a2      	bne.n	800aaf0 <_strtod_l+0x578>
 800abaa:	9b07      	ldr	r3, [sp, #28]
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	9908      	ldr	r1, [sp, #32]
 800abb0:	462b      	mov	r3, r5
 800abb2:	463a      	mov	r2, r7
 800abb4:	4620      	mov	r0, r4
 800abb6:	f001 ff11 	bl	800c9dc <__s2b>
 800abba:	9007      	str	r0, [sp, #28]
 800abbc:	2800      	cmp	r0, #0
 800abbe:	f43f af1f 	beq.w	800aa00 <_strtod_l+0x488>
 800abc2:	9b05      	ldr	r3, [sp, #20]
 800abc4:	1b9e      	subs	r6, r3, r6
 800abc6:	9b06      	ldr	r3, [sp, #24]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	bfb4      	ite	lt
 800abcc:	4633      	movlt	r3, r6
 800abce:	2300      	movge	r3, #0
 800abd0:	930c      	str	r3, [sp, #48]	; 0x30
 800abd2:	9b06      	ldr	r3, [sp, #24]
 800abd4:	2500      	movs	r5, #0
 800abd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800abda:	9312      	str	r3, [sp, #72]	; 0x48
 800abdc:	462e      	mov	r6, r5
 800abde:	9b07      	ldr	r3, [sp, #28]
 800abe0:	4620      	mov	r0, r4
 800abe2:	6859      	ldr	r1, [r3, #4]
 800abe4:	f001 fe52 	bl	800c88c <_Balloc>
 800abe8:	9005      	str	r0, [sp, #20]
 800abea:	2800      	cmp	r0, #0
 800abec:	f43f af0c 	beq.w	800aa08 <_strtod_l+0x490>
 800abf0:	9b07      	ldr	r3, [sp, #28]
 800abf2:	691a      	ldr	r2, [r3, #16]
 800abf4:	3202      	adds	r2, #2
 800abf6:	f103 010c 	add.w	r1, r3, #12
 800abfa:	0092      	lsls	r2, r2, #2
 800abfc:	300c      	adds	r0, #12
 800abfe:	f7fe fdd1 	bl	80097a4 <memcpy>
 800ac02:	ec4b ab10 	vmov	d0, sl, fp
 800ac06:	aa1a      	add	r2, sp, #104	; 0x68
 800ac08:	a919      	add	r1, sp, #100	; 0x64
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f002 fa2c 	bl	800d068 <__d2b>
 800ac10:	ec4b ab18 	vmov	d8, sl, fp
 800ac14:	9018      	str	r0, [sp, #96]	; 0x60
 800ac16:	2800      	cmp	r0, #0
 800ac18:	f43f aef6 	beq.w	800aa08 <_strtod_l+0x490>
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f001 ff76 	bl	800cb10 <__i2b>
 800ac24:	4606      	mov	r6, r0
 800ac26:	2800      	cmp	r0, #0
 800ac28:	f43f aeee 	beq.w	800aa08 <_strtod_l+0x490>
 800ac2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac2e:	9904      	ldr	r1, [sp, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	bfab      	itete	ge
 800ac34:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ac36:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ac38:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ac3a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ac3e:	bfac      	ite	ge
 800ac40:	eb03 0902 	addge.w	r9, r3, r2
 800ac44:	1ad7      	sublt	r7, r2, r3
 800ac46:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ac48:	eba3 0801 	sub.w	r8, r3, r1
 800ac4c:	4490      	add	r8, r2
 800ac4e:	4ba1      	ldr	r3, [pc, #644]	; (800aed4 <_strtod_l+0x95c>)
 800ac50:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac54:	4598      	cmp	r8, r3
 800ac56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac5a:	f280 80c7 	bge.w	800adec <_strtod_l+0x874>
 800ac5e:	eba3 0308 	sub.w	r3, r3, r8
 800ac62:	2b1f      	cmp	r3, #31
 800ac64:	eba2 0203 	sub.w	r2, r2, r3
 800ac68:	f04f 0101 	mov.w	r1, #1
 800ac6c:	f300 80b1 	bgt.w	800add2 <_strtod_l+0x85a>
 800ac70:	fa01 f303 	lsl.w	r3, r1, r3
 800ac74:	930d      	str	r3, [sp, #52]	; 0x34
 800ac76:	2300      	movs	r3, #0
 800ac78:	9308      	str	r3, [sp, #32]
 800ac7a:	eb09 0802 	add.w	r8, r9, r2
 800ac7e:	9b04      	ldr	r3, [sp, #16]
 800ac80:	45c1      	cmp	r9, r8
 800ac82:	4417      	add	r7, r2
 800ac84:	441f      	add	r7, r3
 800ac86:	464b      	mov	r3, r9
 800ac88:	bfa8      	it	ge
 800ac8a:	4643      	movge	r3, r8
 800ac8c:	42bb      	cmp	r3, r7
 800ac8e:	bfa8      	it	ge
 800ac90:	463b      	movge	r3, r7
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	bfc2      	ittt	gt
 800ac96:	eba8 0803 	subgt.w	r8, r8, r3
 800ac9a:	1aff      	subgt	r7, r7, r3
 800ac9c:	eba9 0903 	subgt.w	r9, r9, r3
 800aca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	dd17      	ble.n	800acd6 <_strtod_l+0x75e>
 800aca6:	4631      	mov	r1, r6
 800aca8:	461a      	mov	r2, r3
 800acaa:	4620      	mov	r0, r4
 800acac:	f001 fff0 	bl	800cc90 <__pow5mult>
 800acb0:	4606      	mov	r6, r0
 800acb2:	2800      	cmp	r0, #0
 800acb4:	f43f aea8 	beq.w	800aa08 <_strtod_l+0x490>
 800acb8:	4601      	mov	r1, r0
 800acba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800acbc:	4620      	mov	r0, r4
 800acbe:	f001 ff3d 	bl	800cb3c <__multiply>
 800acc2:	900b      	str	r0, [sp, #44]	; 0x2c
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f43f ae9f 	beq.w	800aa08 <_strtod_l+0x490>
 800acca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800accc:	4620      	mov	r0, r4
 800acce:	f001 fe1d 	bl	800c90c <_Bfree>
 800acd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acd4:	9318      	str	r3, [sp, #96]	; 0x60
 800acd6:	f1b8 0f00 	cmp.w	r8, #0
 800acda:	f300 808c 	bgt.w	800adf6 <_strtod_l+0x87e>
 800acde:	9b06      	ldr	r3, [sp, #24]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	dd08      	ble.n	800acf6 <_strtod_l+0x77e>
 800ace4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ace6:	9905      	ldr	r1, [sp, #20]
 800ace8:	4620      	mov	r0, r4
 800acea:	f001 ffd1 	bl	800cc90 <__pow5mult>
 800acee:	9005      	str	r0, [sp, #20]
 800acf0:	2800      	cmp	r0, #0
 800acf2:	f43f ae89 	beq.w	800aa08 <_strtod_l+0x490>
 800acf6:	2f00      	cmp	r7, #0
 800acf8:	dd08      	ble.n	800ad0c <_strtod_l+0x794>
 800acfa:	9905      	ldr	r1, [sp, #20]
 800acfc:	463a      	mov	r2, r7
 800acfe:	4620      	mov	r0, r4
 800ad00:	f002 f820 	bl	800cd44 <__lshift>
 800ad04:	9005      	str	r0, [sp, #20]
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f43f ae7e 	beq.w	800aa08 <_strtod_l+0x490>
 800ad0c:	f1b9 0f00 	cmp.w	r9, #0
 800ad10:	dd08      	ble.n	800ad24 <_strtod_l+0x7ac>
 800ad12:	4631      	mov	r1, r6
 800ad14:	464a      	mov	r2, r9
 800ad16:	4620      	mov	r0, r4
 800ad18:	f002 f814 	bl	800cd44 <__lshift>
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	f43f ae72 	beq.w	800aa08 <_strtod_l+0x490>
 800ad24:	9a05      	ldr	r2, [sp, #20]
 800ad26:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f002 f897 	bl	800ce5c <__mdiff>
 800ad2e:	4605      	mov	r5, r0
 800ad30:	2800      	cmp	r0, #0
 800ad32:	f43f ae69 	beq.w	800aa08 <_strtod_l+0x490>
 800ad36:	68c3      	ldr	r3, [r0, #12]
 800ad38:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60c3      	str	r3, [r0, #12]
 800ad3e:	4631      	mov	r1, r6
 800ad40:	f002 f870 	bl	800ce24 <__mcmp>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	da60      	bge.n	800ae0a <_strtod_l+0x892>
 800ad48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad4a:	ea53 030a 	orrs.w	r3, r3, sl
 800ad4e:	f040 8082 	bne.w	800ae56 <_strtod_l+0x8de>
 800ad52:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d17d      	bne.n	800ae56 <_strtod_l+0x8de>
 800ad5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad5e:	0d1b      	lsrs	r3, r3, #20
 800ad60:	051b      	lsls	r3, r3, #20
 800ad62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ad66:	d976      	bls.n	800ae56 <_strtod_l+0x8de>
 800ad68:	696b      	ldr	r3, [r5, #20]
 800ad6a:	b913      	cbnz	r3, 800ad72 <_strtod_l+0x7fa>
 800ad6c:	692b      	ldr	r3, [r5, #16]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	dd71      	ble.n	800ae56 <_strtod_l+0x8de>
 800ad72:	4629      	mov	r1, r5
 800ad74:	2201      	movs	r2, #1
 800ad76:	4620      	mov	r0, r4
 800ad78:	f001 ffe4 	bl	800cd44 <__lshift>
 800ad7c:	4631      	mov	r1, r6
 800ad7e:	4605      	mov	r5, r0
 800ad80:	f002 f850 	bl	800ce24 <__mcmp>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	dd66      	ble.n	800ae56 <_strtod_l+0x8de>
 800ad88:	9904      	ldr	r1, [sp, #16]
 800ad8a:	4a53      	ldr	r2, [pc, #332]	; (800aed8 <_strtod_l+0x960>)
 800ad8c:	465b      	mov	r3, fp
 800ad8e:	2900      	cmp	r1, #0
 800ad90:	f000 8081 	beq.w	800ae96 <_strtod_l+0x91e>
 800ad94:	ea02 010b 	and.w	r1, r2, fp
 800ad98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad9c:	dc7b      	bgt.n	800ae96 <_strtod_l+0x91e>
 800ad9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ada2:	f77f aea9 	ble.w	800aaf8 <_strtod_l+0x580>
 800ada6:	4b4d      	ldr	r3, [pc, #308]	; (800aedc <_strtod_l+0x964>)
 800ada8:	4650      	mov	r0, sl
 800adaa:	4659      	mov	r1, fp
 800adac:	2200      	movs	r2, #0
 800adae:	f7f5 fc4b 	bl	8000648 <__aeabi_dmul>
 800adb2:	460b      	mov	r3, r1
 800adb4:	4303      	orrs	r3, r0
 800adb6:	bf08      	it	eq
 800adb8:	2322      	moveq	r3, #34	; 0x22
 800adba:	4682      	mov	sl, r0
 800adbc:	468b      	mov	fp, r1
 800adbe:	bf08      	it	eq
 800adc0:	6023      	streq	r3, [r4, #0]
 800adc2:	e62b      	b.n	800aa1c <_strtod_l+0x4a4>
 800adc4:	f04f 32ff 	mov.w	r2, #4294967295
 800adc8:	fa02 f303 	lsl.w	r3, r2, r3
 800adcc:	ea03 0a0a 	and.w	sl, r3, sl
 800add0:	e6e3      	b.n	800ab9a <_strtod_l+0x622>
 800add2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800add6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800adda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800adde:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ade2:	fa01 f308 	lsl.w	r3, r1, r8
 800ade6:	9308      	str	r3, [sp, #32]
 800ade8:	910d      	str	r1, [sp, #52]	; 0x34
 800adea:	e746      	b.n	800ac7a <_strtod_l+0x702>
 800adec:	2300      	movs	r3, #0
 800adee:	9308      	str	r3, [sp, #32]
 800adf0:	2301      	movs	r3, #1
 800adf2:	930d      	str	r3, [sp, #52]	; 0x34
 800adf4:	e741      	b.n	800ac7a <_strtod_l+0x702>
 800adf6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800adf8:	4642      	mov	r2, r8
 800adfa:	4620      	mov	r0, r4
 800adfc:	f001 ffa2 	bl	800cd44 <__lshift>
 800ae00:	9018      	str	r0, [sp, #96]	; 0x60
 800ae02:	2800      	cmp	r0, #0
 800ae04:	f47f af6b 	bne.w	800acde <_strtod_l+0x766>
 800ae08:	e5fe      	b.n	800aa08 <_strtod_l+0x490>
 800ae0a:	465f      	mov	r7, fp
 800ae0c:	d16e      	bne.n	800aeec <_strtod_l+0x974>
 800ae0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae14:	b342      	cbz	r2, 800ae68 <_strtod_l+0x8f0>
 800ae16:	4a32      	ldr	r2, [pc, #200]	; (800aee0 <_strtod_l+0x968>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d128      	bne.n	800ae6e <_strtod_l+0x8f6>
 800ae1c:	9b04      	ldr	r3, [sp, #16]
 800ae1e:	4651      	mov	r1, sl
 800ae20:	b1eb      	cbz	r3, 800ae5e <_strtod_l+0x8e6>
 800ae22:	4b2d      	ldr	r3, [pc, #180]	; (800aed8 <_strtod_l+0x960>)
 800ae24:	403b      	ands	r3, r7
 800ae26:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae2e:	d819      	bhi.n	800ae64 <_strtod_l+0x8ec>
 800ae30:	0d1b      	lsrs	r3, r3, #20
 800ae32:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae36:	fa02 f303 	lsl.w	r3, r2, r3
 800ae3a:	4299      	cmp	r1, r3
 800ae3c:	d117      	bne.n	800ae6e <_strtod_l+0x8f6>
 800ae3e:	4b29      	ldr	r3, [pc, #164]	; (800aee4 <_strtod_l+0x96c>)
 800ae40:	429f      	cmp	r7, r3
 800ae42:	d102      	bne.n	800ae4a <_strtod_l+0x8d2>
 800ae44:	3101      	adds	r1, #1
 800ae46:	f43f addf 	beq.w	800aa08 <_strtod_l+0x490>
 800ae4a:	4b23      	ldr	r3, [pc, #140]	; (800aed8 <_strtod_l+0x960>)
 800ae4c:	403b      	ands	r3, r7
 800ae4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ae52:	f04f 0a00 	mov.w	sl, #0
 800ae56:	9b04      	ldr	r3, [sp, #16]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d1a4      	bne.n	800ada6 <_strtod_l+0x82e>
 800ae5c:	e5de      	b.n	800aa1c <_strtod_l+0x4a4>
 800ae5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ae62:	e7ea      	b.n	800ae3a <_strtod_l+0x8c2>
 800ae64:	4613      	mov	r3, r2
 800ae66:	e7e8      	b.n	800ae3a <_strtod_l+0x8c2>
 800ae68:	ea53 030a 	orrs.w	r3, r3, sl
 800ae6c:	d08c      	beq.n	800ad88 <_strtod_l+0x810>
 800ae6e:	9b08      	ldr	r3, [sp, #32]
 800ae70:	b1db      	cbz	r3, 800aeaa <_strtod_l+0x932>
 800ae72:	423b      	tst	r3, r7
 800ae74:	d0ef      	beq.n	800ae56 <_strtod_l+0x8de>
 800ae76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae78:	9a04      	ldr	r2, [sp, #16]
 800ae7a:	4650      	mov	r0, sl
 800ae7c:	4659      	mov	r1, fp
 800ae7e:	b1c3      	cbz	r3, 800aeb2 <_strtod_l+0x93a>
 800ae80:	f7ff fb5c 	bl	800a53c <sulp>
 800ae84:	4602      	mov	r2, r0
 800ae86:	460b      	mov	r3, r1
 800ae88:	ec51 0b18 	vmov	r0, r1, d8
 800ae8c:	f7f5 fa26 	bl	80002dc <__adddf3>
 800ae90:	4682      	mov	sl, r0
 800ae92:	468b      	mov	fp, r1
 800ae94:	e7df      	b.n	800ae56 <_strtod_l+0x8de>
 800ae96:	4013      	ands	r3, r2
 800ae98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aea0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aea4:	f04f 3aff 	mov.w	sl, #4294967295
 800aea8:	e7d5      	b.n	800ae56 <_strtod_l+0x8de>
 800aeaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeac:	ea13 0f0a 	tst.w	r3, sl
 800aeb0:	e7e0      	b.n	800ae74 <_strtod_l+0x8fc>
 800aeb2:	f7ff fb43 	bl	800a53c <sulp>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	460b      	mov	r3, r1
 800aeba:	ec51 0b18 	vmov	r0, r1, d8
 800aebe:	f7f5 fa0b 	bl	80002d8 <__aeabi_dsub>
 800aec2:	2200      	movs	r2, #0
 800aec4:	2300      	movs	r3, #0
 800aec6:	4682      	mov	sl, r0
 800aec8:	468b      	mov	fp, r1
 800aeca:	f7f5 fe25 	bl	8000b18 <__aeabi_dcmpeq>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d0c1      	beq.n	800ae56 <_strtod_l+0x8de>
 800aed2:	e611      	b.n	800aaf8 <_strtod_l+0x580>
 800aed4:	fffffc02 	.word	0xfffffc02
 800aed8:	7ff00000 	.word	0x7ff00000
 800aedc:	39500000 	.word	0x39500000
 800aee0:	000fffff 	.word	0x000fffff
 800aee4:	7fefffff 	.word	0x7fefffff
 800aee8:	0800e3a0 	.word	0x0800e3a0
 800aeec:	4631      	mov	r1, r6
 800aeee:	4628      	mov	r0, r5
 800aef0:	f002 f916 	bl	800d120 <__ratio>
 800aef4:	ec59 8b10 	vmov	r8, r9, d0
 800aef8:	ee10 0a10 	vmov	r0, s0
 800aefc:	2200      	movs	r2, #0
 800aefe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af02:	4649      	mov	r1, r9
 800af04:	f7f5 fe1c 	bl	8000b40 <__aeabi_dcmple>
 800af08:	2800      	cmp	r0, #0
 800af0a:	d07a      	beq.n	800b002 <_strtod_l+0xa8a>
 800af0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d04a      	beq.n	800afa8 <_strtod_l+0xa30>
 800af12:	4b95      	ldr	r3, [pc, #596]	; (800b168 <_strtod_l+0xbf0>)
 800af14:	2200      	movs	r2, #0
 800af16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af1a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b168 <_strtod_l+0xbf0>
 800af1e:	f04f 0800 	mov.w	r8, #0
 800af22:	4b92      	ldr	r3, [pc, #584]	; (800b16c <_strtod_l+0xbf4>)
 800af24:	403b      	ands	r3, r7
 800af26:	930d      	str	r3, [sp, #52]	; 0x34
 800af28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af2a:	4b91      	ldr	r3, [pc, #580]	; (800b170 <_strtod_l+0xbf8>)
 800af2c:	429a      	cmp	r2, r3
 800af2e:	f040 80b0 	bne.w	800b092 <_strtod_l+0xb1a>
 800af32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af36:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800af3a:	ec4b ab10 	vmov	d0, sl, fp
 800af3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af42:	f002 f815 	bl	800cf70 <__ulp>
 800af46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af4a:	ec53 2b10 	vmov	r2, r3, d0
 800af4e:	f7f5 fb7b 	bl	8000648 <__aeabi_dmul>
 800af52:	4652      	mov	r2, sl
 800af54:	465b      	mov	r3, fp
 800af56:	f7f5 f9c1 	bl	80002dc <__adddf3>
 800af5a:	460b      	mov	r3, r1
 800af5c:	4983      	ldr	r1, [pc, #524]	; (800b16c <_strtod_l+0xbf4>)
 800af5e:	4a85      	ldr	r2, [pc, #532]	; (800b174 <_strtod_l+0xbfc>)
 800af60:	4019      	ands	r1, r3
 800af62:	4291      	cmp	r1, r2
 800af64:	4682      	mov	sl, r0
 800af66:	d960      	bls.n	800b02a <_strtod_l+0xab2>
 800af68:	ee18 3a90 	vmov	r3, s17
 800af6c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800af70:	4293      	cmp	r3, r2
 800af72:	d104      	bne.n	800af7e <_strtod_l+0xa06>
 800af74:	ee18 3a10 	vmov	r3, s16
 800af78:	3301      	adds	r3, #1
 800af7a:	f43f ad45 	beq.w	800aa08 <_strtod_l+0x490>
 800af7e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b180 <_strtod_l+0xc08>
 800af82:	f04f 3aff 	mov.w	sl, #4294967295
 800af86:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af88:	4620      	mov	r0, r4
 800af8a:	f001 fcbf 	bl	800c90c <_Bfree>
 800af8e:	9905      	ldr	r1, [sp, #20]
 800af90:	4620      	mov	r0, r4
 800af92:	f001 fcbb 	bl	800c90c <_Bfree>
 800af96:	4631      	mov	r1, r6
 800af98:	4620      	mov	r0, r4
 800af9a:	f001 fcb7 	bl	800c90c <_Bfree>
 800af9e:	4629      	mov	r1, r5
 800afa0:	4620      	mov	r0, r4
 800afa2:	f001 fcb3 	bl	800c90c <_Bfree>
 800afa6:	e61a      	b.n	800abde <_strtod_l+0x666>
 800afa8:	f1ba 0f00 	cmp.w	sl, #0
 800afac:	d11b      	bne.n	800afe6 <_strtod_l+0xa6e>
 800afae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afb2:	b9f3      	cbnz	r3, 800aff2 <_strtod_l+0xa7a>
 800afb4:	4b6c      	ldr	r3, [pc, #432]	; (800b168 <_strtod_l+0xbf0>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	4640      	mov	r0, r8
 800afba:	4649      	mov	r1, r9
 800afbc:	f7f5 fdb6 	bl	8000b2c <__aeabi_dcmplt>
 800afc0:	b9d0      	cbnz	r0, 800aff8 <_strtod_l+0xa80>
 800afc2:	4640      	mov	r0, r8
 800afc4:	4649      	mov	r1, r9
 800afc6:	4b6c      	ldr	r3, [pc, #432]	; (800b178 <_strtod_l+0xc00>)
 800afc8:	2200      	movs	r2, #0
 800afca:	f7f5 fb3d 	bl	8000648 <__aeabi_dmul>
 800afce:	4680      	mov	r8, r0
 800afd0:	4689      	mov	r9, r1
 800afd2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800afd6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800afda:	9315      	str	r3, [sp, #84]	; 0x54
 800afdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800afe0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800afe4:	e79d      	b.n	800af22 <_strtod_l+0x9aa>
 800afe6:	f1ba 0f01 	cmp.w	sl, #1
 800afea:	d102      	bne.n	800aff2 <_strtod_l+0xa7a>
 800afec:	2f00      	cmp	r7, #0
 800afee:	f43f ad83 	beq.w	800aaf8 <_strtod_l+0x580>
 800aff2:	4b62      	ldr	r3, [pc, #392]	; (800b17c <_strtod_l+0xc04>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	e78e      	b.n	800af16 <_strtod_l+0x99e>
 800aff8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b178 <_strtod_l+0xc00>
 800affc:	f04f 0800 	mov.w	r8, #0
 800b000:	e7e7      	b.n	800afd2 <_strtod_l+0xa5a>
 800b002:	4b5d      	ldr	r3, [pc, #372]	; (800b178 <_strtod_l+0xc00>)
 800b004:	4640      	mov	r0, r8
 800b006:	4649      	mov	r1, r9
 800b008:	2200      	movs	r2, #0
 800b00a:	f7f5 fb1d 	bl	8000648 <__aeabi_dmul>
 800b00e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b010:	4680      	mov	r8, r0
 800b012:	4689      	mov	r9, r1
 800b014:	b933      	cbnz	r3, 800b024 <_strtod_l+0xaac>
 800b016:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b01a:	900e      	str	r0, [sp, #56]	; 0x38
 800b01c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b01e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b022:	e7dd      	b.n	800afe0 <_strtod_l+0xa68>
 800b024:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b028:	e7f9      	b.n	800b01e <_strtod_l+0xaa6>
 800b02a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b02e:	9b04      	ldr	r3, [sp, #16]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1a8      	bne.n	800af86 <_strtod_l+0xa0e>
 800b034:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b038:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b03a:	0d1b      	lsrs	r3, r3, #20
 800b03c:	051b      	lsls	r3, r3, #20
 800b03e:	429a      	cmp	r2, r3
 800b040:	d1a1      	bne.n	800af86 <_strtod_l+0xa0e>
 800b042:	4640      	mov	r0, r8
 800b044:	4649      	mov	r1, r9
 800b046:	f7f5 fe5f 	bl	8000d08 <__aeabi_d2lz>
 800b04a:	f7f5 facf 	bl	80005ec <__aeabi_l2d>
 800b04e:	4602      	mov	r2, r0
 800b050:	460b      	mov	r3, r1
 800b052:	4640      	mov	r0, r8
 800b054:	4649      	mov	r1, r9
 800b056:	f7f5 f93f 	bl	80002d8 <__aeabi_dsub>
 800b05a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b05c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b060:	ea43 030a 	orr.w	r3, r3, sl
 800b064:	4313      	orrs	r3, r2
 800b066:	4680      	mov	r8, r0
 800b068:	4689      	mov	r9, r1
 800b06a:	d055      	beq.n	800b118 <_strtod_l+0xba0>
 800b06c:	a336      	add	r3, pc, #216	; (adr r3, 800b148 <_strtod_l+0xbd0>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	f7f5 fd5b 	bl	8000b2c <__aeabi_dcmplt>
 800b076:	2800      	cmp	r0, #0
 800b078:	f47f acd0 	bne.w	800aa1c <_strtod_l+0x4a4>
 800b07c:	a334      	add	r3, pc, #208	; (adr r3, 800b150 <_strtod_l+0xbd8>)
 800b07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b082:	4640      	mov	r0, r8
 800b084:	4649      	mov	r1, r9
 800b086:	f7f5 fd6f 	bl	8000b68 <__aeabi_dcmpgt>
 800b08a:	2800      	cmp	r0, #0
 800b08c:	f43f af7b 	beq.w	800af86 <_strtod_l+0xa0e>
 800b090:	e4c4      	b.n	800aa1c <_strtod_l+0x4a4>
 800b092:	9b04      	ldr	r3, [sp, #16]
 800b094:	b333      	cbz	r3, 800b0e4 <_strtod_l+0xb6c>
 800b096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b098:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b09c:	d822      	bhi.n	800b0e4 <_strtod_l+0xb6c>
 800b09e:	a32e      	add	r3, pc, #184	; (adr r3, 800b158 <_strtod_l+0xbe0>)
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	4640      	mov	r0, r8
 800b0a6:	4649      	mov	r1, r9
 800b0a8:	f7f5 fd4a 	bl	8000b40 <__aeabi_dcmple>
 800b0ac:	b1a0      	cbz	r0, 800b0d8 <_strtod_l+0xb60>
 800b0ae:	4649      	mov	r1, r9
 800b0b0:	4640      	mov	r0, r8
 800b0b2:	f7f5 fda1 	bl	8000bf8 <__aeabi_d2uiz>
 800b0b6:	2801      	cmp	r0, #1
 800b0b8:	bf38      	it	cc
 800b0ba:	2001      	movcc	r0, #1
 800b0bc:	f7f5 fa4a 	bl	8000554 <__aeabi_ui2d>
 800b0c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0c2:	4680      	mov	r8, r0
 800b0c4:	4689      	mov	r9, r1
 800b0c6:	bb23      	cbnz	r3, 800b112 <_strtod_l+0xb9a>
 800b0c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0cc:	9010      	str	r0, [sp, #64]	; 0x40
 800b0ce:	9311      	str	r3, [sp, #68]	; 0x44
 800b0d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b0d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b0e0:	1a9b      	subs	r3, r3, r2
 800b0e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0e8:	eeb0 0a48 	vmov.f32	s0, s16
 800b0ec:	eef0 0a68 	vmov.f32	s1, s17
 800b0f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b0f4:	f001 ff3c 	bl	800cf70 <__ulp>
 800b0f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0fc:	ec53 2b10 	vmov	r2, r3, d0
 800b100:	f7f5 faa2 	bl	8000648 <__aeabi_dmul>
 800b104:	ec53 2b18 	vmov	r2, r3, d8
 800b108:	f7f5 f8e8 	bl	80002dc <__adddf3>
 800b10c:	4682      	mov	sl, r0
 800b10e:	468b      	mov	fp, r1
 800b110:	e78d      	b.n	800b02e <_strtod_l+0xab6>
 800b112:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b116:	e7db      	b.n	800b0d0 <_strtod_l+0xb58>
 800b118:	a311      	add	r3, pc, #68	; (adr r3, 800b160 <_strtod_l+0xbe8>)
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	f7f5 fd05 	bl	8000b2c <__aeabi_dcmplt>
 800b122:	e7b2      	b.n	800b08a <_strtod_l+0xb12>
 800b124:	2300      	movs	r3, #0
 800b126:	930a      	str	r3, [sp, #40]	; 0x28
 800b128:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b12a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b12c:	6013      	str	r3, [r2, #0]
 800b12e:	f7ff ba6b 	b.w	800a608 <_strtod_l+0x90>
 800b132:	2a65      	cmp	r2, #101	; 0x65
 800b134:	f43f ab5f 	beq.w	800a7f6 <_strtod_l+0x27e>
 800b138:	2a45      	cmp	r2, #69	; 0x45
 800b13a:	f43f ab5c 	beq.w	800a7f6 <_strtod_l+0x27e>
 800b13e:	2301      	movs	r3, #1
 800b140:	f7ff bb94 	b.w	800a86c <_strtod_l+0x2f4>
 800b144:	f3af 8000 	nop.w
 800b148:	94a03595 	.word	0x94a03595
 800b14c:	3fdfffff 	.word	0x3fdfffff
 800b150:	35afe535 	.word	0x35afe535
 800b154:	3fe00000 	.word	0x3fe00000
 800b158:	ffc00000 	.word	0xffc00000
 800b15c:	41dfffff 	.word	0x41dfffff
 800b160:	94a03595 	.word	0x94a03595
 800b164:	3fcfffff 	.word	0x3fcfffff
 800b168:	3ff00000 	.word	0x3ff00000
 800b16c:	7ff00000 	.word	0x7ff00000
 800b170:	7fe00000 	.word	0x7fe00000
 800b174:	7c9fffff 	.word	0x7c9fffff
 800b178:	3fe00000 	.word	0x3fe00000
 800b17c:	bff00000 	.word	0xbff00000
 800b180:	7fefffff 	.word	0x7fefffff

0800b184 <_strtod_r>:
 800b184:	4b01      	ldr	r3, [pc, #4]	; (800b18c <_strtod_r+0x8>)
 800b186:	f7ff b9f7 	b.w	800a578 <_strtod_l>
 800b18a:	bf00      	nop
 800b18c:	20000084 	.word	0x20000084

0800b190 <strtof>:
 800b190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b194:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800b244 <strtof+0xb4>
 800b198:	4b26      	ldr	r3, [pc, #152]	; (800b234 <strtof+0xa4>)
 800b19a:	460a      	mov	r2, r1
 800b19c:	ed2d 8b02 	vpush	{d8}
 800b1a0:	4601      	mov	r1, r0
 800b1a2:	f8d8 0000 	ldr.w	r0, [r8]
 800b1a6:	f7ff f9e7 	bl	800a578 <_strtod_l>
 800b1aa:	ec55 4b10 	vmov	r4, r5, d0
 800b1ae:	ee10 2a10 	vmov	r2, s0
 800b1b2:	ee10 0a10 	vmov	r0, s0
 800b1b6:	462b      	mov	r3, r5
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	f7f5 fcdf 	bl	8000b7c <__aeabi_dcmpun>
 800b1be:	b190      	cbz	r0, 800b1e6 <strtof+0x56>
 800b1c0:	2d00      	cmp	r5, #0
 800b1c2:	481d      	ldr	r0, [pc, #116]	; (800b238 <strtof+0xa8>)
 800b1c4:	da09      	bge.n	800b1da <strtof+0x4a>
 800b1c6:	f7ff f97d 	bl	800a4c4 <nanf>
 800b1ca:	eeb1 8a40 	vneg.f32	s16, s0
 800b1ce:	eeb0 0a48 	vmov.f32	s0, s16
 800b1d2:	ecbd 8b02 	vpop	{d8}
 800b1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1da:	ecbd 8b02 	vpop	{d8}
 800b1de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e2:	f7ff b96f 	b.w	800a4c4 <nanf>
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	f7f5 fd25 	bl	8000c38 <__aeabi_d2f>
 800b1ee:	ee08 0a10 	vmov	s16, r0
 800b1f2:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b23c <strtof+0xac>
 800b1f6:	eeb0 7ac8 	vabs.f32	s14, s16
 800b1fa:	eeb4 7a67 	vcmp.f32	s14, s15
 800b1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b202:	dde4      	ble.n	800b1ce <strtof+0x3e>
 800b204:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800b208:	4b0d      	ldr	r3, [pc, #52]	; (800b240 <strtof+0xb0>)
 800b20a:	f04f 32ff 	mov.w	r2, #4294967295
 800b20e:	4620      	mov	r0, r4
 800b210:	4639      	mov	r1, r7
 800b212:	f7f5 fcb3 	bl	8000b7c <__aeabi_dcmpun>
 800b216:	b940      	cbnz	r0, 800b22a <strtof+0x9a>
 800b218:	4b09      	ldr	r3, [pc, #36]	; (800b240 <strtof+0xb0>)
 800b21a:	f04f 32ff 	mov.w	r2, #4294967295
 800b21e:	4620      	mov	r0, r4
 800b220:	4639      	mov	r1, r7
 800b222:	f7f5 fc8d 	bl	8000b40 <__aeabi_dcmple>
 800b226:	2800      	cmp	r0, #0
 800b228:	d0d1      	beq.n	800b1ce <strtof+0x3e>
 800b22a:	f8d8 3000 	ldr.w	r3, [r8]
 800b22e:	2222      	movs	r2, #34	; 0x22
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	e7cc      	b.n	800b1ce <strtof+0x3e>
 800b234:	20000084 	.word	0x20000084
 800b238:	0800e477 	.word	0x0800e477
 800b23c:	7f7fffff 	.word	0x7f7fffff
 800b240:	7fefffff 	.word	0x7fefffff
 800b244:	2000001c 	.word	0x2000001c

0800b248 <strtok>:
 800b248:	4b16      	ldr	r3, [pc, #88]	; (800b2a4 <strtok+0x5c>)
 800b24a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b24c:	681e      	ldr	r6, [r3, #0]
 800b24e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b250:	4605      	mov	r5, r0
 800b252:	b9fc      	cbnz	r4, 800b294 <strtok+0x4c>
 800b254:	2050      	movs	r0, #80	; 0x50
 800b256:	9101      	str	r1, [sp, #4]
 800b258:	f001 fafe 	bl	800c858 <malloc>
 800b25c:	9901      	ldr	r1, [sp, #4]
 800b25e:	65b0      	str	r0, [r6, #88]	; 0x58
 800b260:	4602      	mov	r2, r0
 800b262:	b920      	cbnz	r0, 800b26e <strtok+0x26>
 800b264:	4b10      	ldr	r3, [pc, #64]	; (800b2a8 <strtok+0x60>)
 800b266:	4811      	ldr	r0, [pc, #68]	; (800b2ac <strtok+0x64>)
 800b268:	2157      	movs	r1, #87	; 0x57
 800b26a:	f000 f8d7 	bl	800b41c <__assert_func>
 800b26e:	e9c0 4400 	strd	r4, r4, [r0]
 800b272:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b276:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b27a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b27e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b282:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b286:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b28a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b28e:	6184      	str	r4, [r0, #24]
 800b290:	7704      	strb	r4, [r0, #28]
 800b292:	6244      	str	r4, [r0, #36]	; 0x24
 800b294:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b296:	2301      	movs	r3, #1
 800b298:	4628      	mov	r0, r5
 800b29a:	b002      	add	sp, #8
 800b29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b2a0:	f000 b806 	b.w	800b2b0 <__strtok_r>
 800b2a4:	2000001c 	.word	0x2000001c
 800b2a8:	0800e3c8 	.word	0x0800e3c8
 800b2ac:	0800e3df 	.word	0x0800e3df

0800b2b0 <__strtok_r>:
 800b2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2b2:	b908      	cbnz	r0, 800b2b8 <__strtok_r+0x8>
 800b2b4:	6810      	ldr	r0, [r2, #0]
 800b2b6:	b188      	cbz	r0, 800b2dc <__strtok_r+0x2c>
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b2c0:	460f      	mov	r7, r1
 800b2c2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b2c6:	b91e      	cbnz	r6, 800b2d0 <__strtok_r+0x20>
 800b2c8:	b965      	cbnz	r5, 800b2e4 <__strtok_r+0x34>
 800b2ca:	6015      	str	r5, [r2, #0]
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	e005      	b.n	800b2dc <__strtok_r+0x2c>
 800b2d0:	42b5      	cmp	r5, r6
 800b2d2:	d1f6      	bne.n	800b2c2 <__strtok_r+0x12>
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d1f0      	bne.n	800b2ba <__strtok_r+0xa>
 800b2d8:	6014      	str	r4, [r2, #0]
 800b2da:	7003      	strb	r3, [r0, #0]
 800b2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2de:	461c      	mov	r4, r3
 800b2e0:	e00c      	b.n	800b2fc <__strtok_r+0x4c>
 800b2e2:	b915      	cbnz	r5, 800b2ea <__strtok_r+0x3a>
 800b2e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2e8:	460e      	mov	r6, r1
 800b2ea:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b2ee:	42ab      	cmp	r3, r5
 800b2f0:	d1f7      	bne.n	800b2e2 <__strtok_r+0x32>
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d0f3      	beq.n	800b2de <__strtok_r+0x2e>
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b2fc:	6014      	str	r4, [r2, #0]
 800b2fe:	e7ed      	b.n	800b2dc <__strtok_r+0x2c>

0800b300 <_strtol_l.constprop.0>:
 800b300:	2b01      	cmp	r3, #1
 800b302:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b306:	d001      	beq.n	800b30c <_strtol_l.constprop.0+0xc>
 800b308:	2b24      	cmp	r3, #36	; 0x24
 800b30a:	d906      	bls.n	800b31a <_strtol_l.constprop.0+0x1a>
 800b30c:	f7fe fa20 	bl	8009750 <__errno>
 800b310:	2316      	movs	r3, #22
 800b312:	6003      	str	r3, [r0, #0]
 800b314:	2000      	movs	r0, #0
 800b316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b31a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b400 <_strtol_l.constprop.0+0x100>
 800b31e:	460d      	mov	r5, r1
 800b320:	462e      	mov	r6, r5
 800b322:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b326:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b32a:	f017 0708 	ands.w	r7, r7, #8
 800b32e:	d1f7      	bne.n	800b320 <_strtol_l.constprop.0+0x20>
 800b330:	2c2d      	cmp	r4, #45	; 0x2d
 800b332:	d132      	bne.n	800b39a <_strtol_l.constprop.0+0x9a>
 800b334:	782c      	ldrb	r4, [r5, #0]
 800b336:	2701      	movs	r7, #1
 800b338:	1cb5      	adds	r5, r6, #2
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d05b      	beq.n	800b3f6 <_strtol_l.constprop.0+0xf6>
 800b33e:	2b10      	cmp	r3, #16
 800b340:	d109      	bne.n	800b356 <_strtol_l.constprop.0+0x56>
 800b342:	2c30      	cmp	r4, #48	; 0x30
 800b344:	d107      	bne.n	800b356 <_strtol_l.constprop.0+0x56>
 800b346:	782c      	ldrb	r4, [r5, #0]
 800b348:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b34c:	2c58      	cmp	r4, #88	; 0x58
 800b34e:	d14d      	bne.n	800b3ec <_strtol_l.constprop.0+0xec>
 800b350:	786c      	ldrb	r4, [r5, #1]
 800b352:	2310      	movs	r3, #16
 800b354:	3502      	adds	r5, #2
 800b356:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b35a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b35e:	f04f 0c00 	mov.w	ip, #0
 800b362:	fbb8 f9f3 	udiv	r9, r8, r3
 800b366:	4666      	mov	r6, ip
 800b368:	fb03 8a19 	mls	sl, r3, r9, r8
 800b36c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b370:	f1be 0f09 	cmp.w	lr, #9
 800b374:	d816      	bhi.n	800b3a4 <_strtol_l.constprop.0+0xa4>
 800b376:	4674      	mov	r4, lr
 800b378:	42a3      	cmp	r3, r4
 800b37a:	dd24      	ble.n	800b3c6 <_strtol_l.constprop.0+0xc6>
 800b37c:	f1bc 0f00 	cmp.w	ip, #0
 800b380:	db1e      	blt.n	800b3c0 <_strtol_l.constprop.0+0xc0>
 800b382:	45b1      	cmp	r9, r6
 800b384:	d31c      	bcc.n	800b3c0 <_strtol_l.constprop.0+0xc0>
 800b386:	d101      	bne.n	800b38c <_strtol_l.constprop.0+0x8c>
 800b388:	45a2      	cmp	sl, r4
 800b38a:	db19      	blt.n	800b3c0 <_strtol_l.constprop.0+0xc0>
 800b38c:	fb06 4603 	mla	r6, r6, r3, r4
 800b390:	f04f 0c01 	mov.w	ip, #1
 800b394:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b398:	e7e8      	b.n	800b36c <_strtol_l.constprop.0+0x6c>
 800b39a:	2c2b      	cmp	r4, #43	; 0x2b
 800b39c:	bf04      	itt	eq
 800b39e:	782c      	ldrbeq	r4, [r5, #0]
 800b3a0:	1cb5      	addeq	r5, r6, #2
 800b3a2:	e7ca      	b.n	800b33a <_strtol_l.constprop.0+0x3a>
 800b3a4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b3a8:	f1be 0f19 	cmp.w	lr, #25
 800b3ac:	d801      	bhi.n	800b3b2 <_strtol_l.constprop.0+0xb2>
 800b3ae:	3c37      	subs	r4, #55	; 0x37
 800b3b0:	e7e2      	b.n	800b378 <_strtol_l.constprop.0+0x78>
 800b3b2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b3b6:	f1be 0f19 	cmp.w	lr, #25
 800b3ba:	d804      	bhi.n	800b3c6 <_strtol_l.constprop.0+0xc6>
 800b3bc:	3c57      	subs	r4, #87	; 0x57
 800b3be:	e7db      	b.n	800b378 <_strtol_l.constprop.0+0x78>
 800b3c0:	f04f 3cff 	mov.w	ip, #4294967295
 800b3c4:	e7e6      	b.n	800b394 <_strtol_l.constprop.0+0x94>
 800b3c6:	f1bc 0f00 	cmp.w	ip, #0
 800b3ca:	da05      	bge.n	800b3d8 <_strtol_l.constprop.0+0xd8>
 800b3cc:	2322      	movs	r3, #34	; 0x22
 800b3ce:	6003      	str	r3, [r0, #0]
 800b3d0:	4646      	mov	r6, r8
 800b3d2:	b942      	cbnz	r2, 800b3e6 <_strtol_l.constprop.0+0xe6>
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	e79e      	b.n	800b316 <_strtol_l.constprop.0+0x16>
 800b3d8:	b107      	cbz	r7, 800b3dc <_strtol_l.constprop.0+0xdc>
 800b3da:	4276      	negs	r6, r6
 800b3dc:	2a00      	cmp	r2, #0
 800b3de:	d0f9      	beq.n	800b3d4 <_strtol_l.constprop.0+0xd4>
 800b3e0:	f1bc 0f00 	cmp.w	ip, #0
 800b3e4:	d000      	beq.n	800b3e8 <_strtol_l.constprop.0+0xe8>
 800b3e6:	1e69      	subs	r1, r5, #1
 800b3e8:	6011      	str	r1, [r2, #0]
 800b3ea:	e7f3      	b.n	800b3d4 <_strtol_l.constprop.0+0xd4>
 800b3ec:	2430      	movs	r4, #48	; 0x30
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1b1      	bne.n	800b356 <_strtol_l.constprop.0+0x56>
 800b3f2:	2308      	movs	r3, #8
 800b3f4:	e7af      	b.n	800b356 <_strtol_l.constprop.0+0x56>
 800b3f6:	2c30      	cmp	r4, #48	; 0x30
 800b3f8:	d0a5      	beq.n	800b346 <_strtol_l.constprop.0+0x46>
 800b3fa:	230a      	movs	r3, #10
 800b3fc:	e7ab      	b.n	800b356 <_strtol_l.constprop.0+0x56>
 800b3fe:	bf00      	nop
 800b400:	0800e479 	.word	0x0800e479

0800b404 <_strtol_r>:
 800b404:	f7ff bf7c 	b.w	800b300 <_strtol_l.constprop.0>

0800b408 <strtol>:
 800b408:	4613      	mov	r3, r2
 800b40a:	460a      	mov	r2, r1
 800b40c:	4601      	mov	r1, r0
 800b40e:	4802      	ldr	r0, [pc, #8]	; (800b418 <strtol+0x10>)
 800b410:	6800      	ldr	r0, [r0, #0]
 800b412:	f7ff bf75 	b.w	800b300 <_strtol_l.constprop.0>
 800b416:	bf00      	nop
 800b418:	2000001c 	.word	0x2000001c

0800b41c <__assert_func>:
 800b41c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b41e:	4614      	mov	r4, r2
 800b420:	461a      	mov	r2, r3
 800b422:	4b09      	ldr	r3, [pc, #36]	; (800b448 <__assert_func+0x2c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4605      	mov	r5, r0
 800b428:	68d8      	ldr	r0, [r3, #12]
 800b42a:	b14c      	cbz	r4, 800b440 <__assert_func+0x24>
 800b42c:	4b07      	ldr	r3, [pc, #28]	; (800b44c <__assert_func+0x30>)
 800b42e:	9100      	str	r1, [sp, #0]
 800b430:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b434:	4906      	ldr	r1, [pc, #24]	; (800b450 <__assert_func+0x34>)
 800b436:	462b      	mov	r3, r5
 800b438:	f000 fe88 	bl	800c14c <fiprintf>
 800b43c:	f002 fb8e 	bl	800db5c <abort>
 800b440:	4b04      	ldr	r3, [pc, #16]	; (800b454 <__assert_func+0x38>)
 800b442:	461c      	mov	r4, r3
 800b444:	e7f3      	b.n	800b42e <__assert_func+0x12>
 800b446:	bf00      	nop
 800b448:	2000001c 	.word	0x2000001c
 800b44c:	0800e43c 	.word	0x0800e43c
 800b450:	0800e449 	.word	0x0800e449
 800b454:	0800e477 	.word	0x0800e477

0800b458 <quorem>:
 800b458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	6903      	ldr	r3, [r0, #16]
 800b45e:	690c      	ldr	r4, [r1, #16]
 800b460:	42a3      	cmp	r3, r4
 800b462:	4607      	mov	r7, r0
 800b464:	f2c0 8081 	blt.w	800b56a <quorem+0x112>
 800b468:	3c01      	subs	r4, #1
 800b46a:	f101 0814 	add.w	r8, r1, #20
 800b46e:	f100 0514 	add.w	r5, r0, #20
 800b472:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b476:	9301      	str	r3, [sp, #4]
 800b478:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b47c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b480:	3301      	adds	r3, #1
 800b482:	429a      	cmp	r2, r3
 800b484:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b488:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b48c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b490:	d331      	bcc.n	800b4f6 <quorem+0x9e>
 800b492:	f04f 0e00 	mov.w	lr, #0
 800b496:	4640      	mov	r0, r8
 800b498:	46ac      	mov	ip, r5
 800b49a:	46f2      	mov	sl, lr
 800b49c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b4a0:	b293      	uxth	r3, r2
 800b4a2:	fb06 e303 	mla	r3, r6, r3, lr
 800b4a6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	ebaa 0303 	sub.w	r3, sl, r3
 800b4b0:	f8dc a000 	ldr.w	sl, [ip]
 800b4b4:	0c12      	lsrs	r2, r2, #16
 800b4b6:	fa13 f38a 	uxtah	r3, r3, sl
 800b4ba:	fb06 e202 	mla	r2, r6, r2, lr
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	9b00      	ldr	r3, [sp, #0]
 800b4c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4c6:	b292      	uxth	r2, r2
 800b4c8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b4cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4d0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4d4:	4581      	cmp	r9, r0
 800b4d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4da:	f84c 3b04 	str.w	r3, [ip], #4
 800b4de:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4e2:	d2db      	bcs.n	800b49c <quorem+0x44>
 800b4e4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4e8:	b92b      	cbnz	r3, 800b4f6 <quorem+0x9e>
 800b4ea:	9b01      	ldr	r3, [sp, #4]
 800b4ec:	3b04      	subs	r3, #4
 800b4ee:	429d      	cmp	r5, r3
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	d32e      	bcc.n	800b552 <quorem+0xfa>
 800b4f4:	613c      	str	r4, [r7, #16]
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	f001 fc94 	bl	800ce24 <__mcmp>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	db24      	blt.n	800b54a <quorem+0xf2>
 800b500:	3601      	adds	r6, #1
 800b502:	4628      	mov	r0, r5
 800b504:	f04f 0c00 	mov.w	ip, #0
 800b508:	f858 2b04 	ldr.w	r2, [r8], #4
 800b50c:	f8d0 e000 	ldr.w	lr, [r0]
 800b510:	b293      	uxth	r3, r2
 800b512:	ebac 0303 	sub.w	r3, ip, r3
 800b516:	0c12      	lsrs	r2, r2, #16
 800b518:	fa13 f38e 	uxtah	r3, r3, lr
 800b51c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b520:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b524:	b29b      	uxth	r3, r3
 800b526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b52a:	45c1      	cmp	r9, r8
 800b52c:	f840 3b04 	str.w	r3, [r0], #4
 800b530:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b534:	d2e8      	bcs.n	800b508 <quorem+0xb0>
 800b536:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b53a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b53e:	b922      	cbnz	r2, 800b54a <quorem+0xf2>
 800b540:	3b04      	subs	r3, #4
 800b542:	429d      	cmp	r5, r3
 800b544:	461a      	mov	r2, r3
 800b546:	d30a      	bcc.n	800b55e <quorem+0x106>
 800b548:	613c      	str	r4, [r7, #16]
 800b54a:	4630      	mov	r0, r6
 800b54c:	b003      	add	sp, #12
 800b54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b552:	6812      	ldr	r2, [r2, #0]
 800b554:	3b04      	subs	r3, #4
 800b556:	2a00      	cmp	r2, #0
 800b558:	d1cc      	bne.n	800b4f4 <quorem+0x9c>
 800b55a:	3c01      	subs	r4, #1
 800b55c:	e7c7      	b.n	800b4ee <quorem+0x96>
 800b55e:	6812      	ldr	r2, [r2, #0]
 800b560:	3b04      	subs	r3, #4
 800b562:	2a00      	cmp	r2, #0
 800b564:	d1f0      	bne.n	800b548 <quorem+0xf0>
 800b566:	3c01      	subs	r4, #1
 800b568:	e7eb      	b.n	800b542 <quorem+0xea>
 800b56a:	2000      	movs	r0, #0
 800b56c:	e7ee      	b.n	800b54c <quorem+0xf4>
	...

0800b570 <_dtoa_r>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	ed2d 8b04 	vpush	{d8-d9}
 800b578:	ec57 6b10 	vmov	r6, r7, d0
 800b57c:	b093      	sub	sp, #76	; 0x4c
 800b57e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b580:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b584:	9106      	str	r1, [sp, #24]
 800b586:	ee10 aa10 	vmov	sl, s0
 800b58a:	4604      	mov	r4, r0
 800b58c:	9209      	str	r2, [sp, #36]	; 0x24
 800b58e:	930c      	str	r3, [sp, #48]	; 0x30
 800b590:	46bb      	mov	fp, r7
 800b592:	b975      	cbnz	r5, 800b5b2 <_dtoa_r+0x42>
 800b594:	2010      	movs	r0, #16
 800b596:	f001 f95f 	bl	800c858 <malloc>
 800b59a:	4602      	mov	r2, r0
 800b59c:	6260      	str	r0, [r4, #36]	; 0x24
 800b59e:	b920      	cbnz	r0, 800b5aa <_dtoa_r+0x3a>
 800b5a0:	4ba7      	ldr	r3, [pc, #668]	; (800b840 <_dtoa_r+0x2d0>)
 800b5a2:	21ea      	movs	r1, #234	; 0xea
 800b5a4:	48a7      	ldr	r0, [pc, #668]	; (800b844 <_dtoa_r+0x2d4>)
 800b5a6:	f7ff ff39 	bl	800b41c <__assert_func>
 800b5aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b5ae:	6005      	str	r5, [r0, #0]
 800b5b0:	60c5      	str	r5, [r0, #12]
 800b5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5b4:	6819      	ldr	r1, [r3, #0]
 800b5b6:	b151      	cbz	r1, 800b5ce <_dtoa_r+0x5e>
 800b5b8:	685a      	ldr	r2, [r3, #4]
 800b5ba:	604a      	str	r2, [r1, #4]
 800b5bc:	2301      	movs	r3, #1
 800b5be:	4093      	lsls	r3, r2
 800b5c0:	608b      	str	r3, [r1, #8]
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f001 f9a2 	bl	800c90c <_Bfree>
 800b5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	601a      	str	r2, [r3, #0]
 800b5ce:	1e3b      	subs	r3, r7, #0
 800b5d0:	bfaa      	itet	ge
 800b5d2:	2300      	movge	r3, #0
 800b5d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b5d8:	f8c8 3000 	strge.w	r3, [r8]
 800b5dc:	4b9a      	ldr	r3, [pc, #616]	; (800b848 <_dtoa_r+0x2d8>)
 800b5de:	bfbc      	itt	lt
 800b5e0:	2201      	movlt	r2, #1
 800b5e2:	f8c8 2000 	strlt.w	r2, [r8]
 800b5e6:	ea33 030b 	bics.w	r3, r3, fp
 800b5ea:	d11b      	bne.n	800b624 <_dtoa_r+0xb4>
 800b5ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5f2:	6013      	str	r3, [r2, #0]
 800b5f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5f8:	4333      	orrs	r3, r6
 800b5fa:	f000 8592 	beq.w	800c122 <_dtoa_r+0xbb2>
 800b5fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b600:	b963      	cbnz	r3, 800b61c <_dtoa_r+0xac>
 800b602:	4b92      	ldr	r3, [pc, #584]	; (800b84c <_dtoa_r+0x2dc>)
 800b604:	e022      	b.n	800b64c <_dtoa_r+0xdc>
 800b606:	4b92      	ldr	r3, [pc, #584]	; (800b850 <_dtoa_r+0x2e0>)
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	3308      	adds	r3, #8
 800b60c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b60e:	6013      	str	r3, [r2, #0]
 800b610:	9801      	ldr	r0, [sp, #4]
 800b612:	b013      	add	sp, #76	; 0x4c
 800b614:	ecbd 8b04 	vpop	{d8-d9}
 800b618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b61c:	4b8b      	ldr	r3, [pc, #556]	; (800b84c <_dtoa_r+0x2dc>)
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	3303      	adds	r3, #3
 800b622:	e7f3      	b.n	800b60c <_dtoa_r+0x9c>
 800b624:	2200      	movs	r2, #0
 800b626:	2300      	movs	r3, #0
 800b628:	4650      	mov	r0, sl
 800b62a:	4659      	mov	r1, fp
 800b62c:	f7f5 fa74 	bl	8000b18 <__aeabi_dcmpeq>
 800b630:	ec4b ab19 	vmov	d9, sl, fp
 800b634:	4680      	mov	r8, r0
 800b636:	b158      	cbz	r0, 800b650 <_dtoa_r+0xe0>
 800b638:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b63a:	2301      	movs	r3, #1
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b640:	2b00      	cmp	r3, #0
 800b642:	f000 856b 	beq.w	800c11c <_dtoa_r+0xbac>
 800b646:	4883      	ldr	r0, [pc, #524]	; (800b854 <_dtoa_r+0x2e4>)
 800b648:	6018      	str	r0, [r3, #0]
 800b64a:	1e43      	subs	r3, r0, #1
 800b64c:	9301      	str	r3, [sp, #4]
 800b64e:	e7df      	b.n	800b610 <_dtoa_r+0xa0>
 800b650:	ec4b ab10 	vmov	d0, sl, fp
 800b654:	aa10      	add	r2, sp, #64	; 0x40
 800b656:	a911      	add	r1, sp, #68	; 0x44
 800b658:	4620      	mov	r0, r4
 800b65a:	f001 fd05 	bl	800d068 <__d2b>
 800b65e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b662:	ee08 0a10 	vmov	s16, r0
 800b666:	2d00      	cmp	r5, #0
 800b668:	f000 8084 	beq.w	800b774 <_dtoa_r+0x204>
 800b66c:	ee19 3a90 	vmov	r3, s19
 800b670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b674:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b678:	4656      	mov	r6, sl
 800b67a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b67e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b682:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b686:	4b74      	ldr	r3, [pc, #464]	; (800b858 <_dtoa_r+0x2e8>)
 800b688:	2200      	movs	r2, #0
 800b68a:	4630      	mov	r0, r6
 800b68c:	4639      	mov	r1, r7
 800b68e:	f7f4 fe23 	bl	80002d8 <__aeabi_dsub>
 800b692:	a365      	add	r3, pc, #404	; (adr r3, 800b828 <_dtoa_r+0x2b8>)
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	f7f4 ffd6 	bl	8000648 <__aeabi_dmul>
 800b69c:	a364      	add	r3, pc, #400	; (adr r3, 800b830 <_dtoa_r+0x2c0>)
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	f7f4 fe1b 	bl	80002dc <__adddf3>
 800b6a6:	4606      	mov	r6, r0
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	460f      	mov	r7, r1
 800b6ac:	f7f4 ff62 	bl	8000574 <__aeabi_i2d>
 800b6b0:	a361      	add	r3, pc, #388	; (adr r3, 800b838 <_dtoa_r+0x2c8>)
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	f7f4 ffc7 	bl	8000648 <__aeabi_dmul>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	460b      	mov	r3, r1
 800b6be:	4630      	mov	r0, r6
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	f7f4 fe0b 	bl	80002dc <__adddf3>
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	460f      	mov	r7, r1
 800b6ca:	f7f5 fa6d 	bl	8000ba8 <__aeabi_d2iz>
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	9000      	str	r0, [sp, #0]
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	4639      	mov	r1, r7
 800b6d8:	f7f5 fa28 	bl	8000b2c <__aeabi_dcmplt>
 800b6dc:	b150      	cbz	r0, 800b6f4 <_dtoa_r+0x184>
 800b6de:	9800      	ldr	r0, [sp, #0]
 800b6e0:	f7f4 ff48 	bl	8000574 <__aeabi_i2d>
 800b6e4:	4632      	mov	r2, r6
 800b6e6:	463b      	mov	r3, r7
 800b6e8:	f7f5 fa16 	bl	8000b18 <__aeabi_dcmpeq>
 800b6ec:	b910      	cbnz	r0, 800b6f4 <_dtoa_r+0x184>
 800b6ee:	9b00      	ldr	r3, [sp, #0]
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	9300      	str	r3, [sp, #0]
 800b6f4:	9b00      	ldr	r3, [sp, #0]
 800b6f6:	2b16      	cmp	r3, #22
 800b6f8:	d85a      	bhi.n	800b7b0 <_dtoa_r+0x240>
 800b6fa:	9a00      	ldr	r2, [sp, #0]
 800b6fc:	4b57      	ldr	r3, [pc, #348]	; (800b85c <_dtoa_r+0x2ec>)
 800b6fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b706:	ec51 0b19 	vmov	r0, r1, d9
 800b70a:	f7f5 fa0f 	bl	8000b2c <__aeabi_dcmplt>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d050      	beq.n	800b7b4 <_dtoa_r+0x244>
 800b712:	9b00      	ldr	r3, [sp, #0]
 800b714:	3b01      	subs	r3, #1
 800b716:	9300      	str	r3, [sp, #0]
 800b718:	2300      	movs	r3, #0
 800b71a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b71c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b71e:	1b5d      	subs	r5, r3, r5
 800b720:	1e6b      	subs	r3, r5, #1
 800b722:	9305      	str	r3, [sp, #20]
 800b724:	bf45      	ittet	mi
 800b726:	f1c5 0301 	rsbmi	r3, r5, #1
 800b72a:	9304      	strmi	r3, [sp, #16]
 800b72c:	2300      	movpl	r3, #0
 800b72e:	2300      	movmi	r3, #0
 800b730:	bf4c      	ite	mi
 800b732:	9305      	strmi	r3, [sp, #20]
 800b734:	9304      	strpl	r3, [sp, #16]
 800b736:	9b00      	ldr	r3, [sp, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	db3d      	blt.n	800b7b8 <_dtoa_r+0x248>
 800b73c:	9b05      	ldr	r3, [sp, #20]
 800b73e:	9a00      	ldr	r2, [sp, #0]
 800b740:	920a      	str	r2, [sp, #40]	; 0x28
 800b742:	4413      	add	r3, r2
 800b744:	9305      	str	r3, [sp, #20]
 800b746:	2300      	movs	r3, #0
 800b748:	9307      	str	r3, [sp, #28]
 800b74a:	9b06      	ldr	r3, [sp, #24]
 800b74c:	2b09      	cmp	r3, #9
 800b74e:	f200 8089 	bhi.w	800b864 <_dtoa_r+0x2f4>
 800b752:	2b05      	cmp	r3, #5
 800b754:	bfc4      	itt	gt
 800b756:	3b04      	subgt	r3, #4
 800b758:	9306      	strgt	r3, [sp, #24]
 800b75a:	9b06      	ldr	r3, [sp, #24]
 800b75c:	f1a3 0302 	sub.w	r3, r3, #2
 800b760:	bfcc      	ite	gt
 800b762:	2500      	movgt	r5, #0
 800b764:	2501      	movle	r5, #1
 800b766:	2b03      	cmp	r3, #3
 800b768:	f200 8087 	bhi.w	800b87a <_dtoa_r+0x30a>
 800b76c:	e8df f003 	tbb	[pc, r3]
 800b770:	59383a2d 	.word	0x59383a2d
 800b774:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b778:	441d      	add	r5, r3
 800b77a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b77e:	2b20      	cmp	r3, #32
 800b780:	bfc1      	itttt	gt
 800b782:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b786:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b78a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b78e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b792:	bfda      	itte	le
 800b794:	f1c3 0320 	rsble	r3, r3, #32
 800b798:	fa06 f003 	lslle.w	r0, r6, r3
 800b79c:	4318      	orrgt	r0, r3
 800b79e:	f7f4 fed9 	bl	8000554 <__aeabi_ui2d>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b7aa:	3d01      	subs	r5, #1
 800b7ac:	930e      	str	r3, [sp, #56]	; 0x38
 800b7ae:	e76a      	b.n	800b686 <_dtoa_r+0x116>
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e7b2      	b.n	800b71a <_dtoa_r+0x1aa>
 800b7b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b7b6:	e7b1      	b.n	800b71c <_dtoa_r+0x1ac>
 800b7b8:	9b04      	ldr	r3, [sp, #16]
 800b7ba:	9a00      	ldr	r2, [sp, #0]
 800b7bc:	1a9b      	subs	r3, r3, r2
 800b7be:	9304      	str	r3, [sp, #16]
 800b7c0:	4253      	negs	r3, r2
 800b7c2:	9307      	str	r3, [sp, #28]
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	930a      	str	r3, [sp, #40]	; 0x28
 800b7c8:	e7bf      	b.n	800b74a <_dtoa_r+0x1da>
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	9308      	str	r3, [sp, #32]
 800b7ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	dc55      	bgt.n	800b880 <_dtoa_r+0x310>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	9209      	str	r2, [sp, #36]	; 0x24
 800b7de:	e00c      	b.n	800b7fa <_dtoa_r+0x28a>
 800b7e0:	2301      	movs	r3, #1
 800b7e2:	e7f3      	b.n	800b7cc <_dtoa_r+0x25c>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7e8:	9308      	str	r3, [sp, #32]
 800b7ea:	9b00      	ldr	r3, [sp, #0]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	9302      	str	r3, [sp, #8]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	9303      	str	r3, [sp, #12]
 800b7f6:	bfb8      	it	lt
 800b7f8:	2301      	movlt	r3, #1
 800b7fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	6042      	str	r2, [r0, #4]
 800b800:	2204      	movs	r2, #4
 800b802:	f102 0614 	add.w	r6, r2, #20
 800b806:	429e      	cmp	r6, r3
 800b808:	6841      	ldr	r1, [r0, #4]
 800b80a:	d93d      	bls.n	800b888 <_dtoa_r+0x318>
 800b80c:	4620      	mov	r0, r4
 800b80e:	f001 f83d 	bl	800c88c <_Balloc>
 800b812:	9001      	str	r0, [sp, #4]
 800b814:	2800      	cmp	r0, #0
 800b816:	d13b      	bne.n	800b890 <_dtoa_r+0x320>
 800b818:	4b11      	ldr	r3, [pc, #68]	; (800b860 <_dtoa_r+0x2f0>)
 800b81a:	4602      	mov	r2, r0
 800b81c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b820:	e6c0      	b.n	800b5a4 <_dtoa_r+0x34>
 800b822:	2301      	movs	r3, #1
 800b824:	e7df      	b.n	800b7e6 <_dtoa_r+0x276>
 800b826:	bf00      	nop
 800b828:	636f4361 	.word	0x636f4361
 800b82c:	3fd287a7 	.word	0x3fd287a7
 800b830:	8b60c8b3 	.word	0x8b60c8b3
 800b834:	3fc68a28 	.word	0x3fc68a28
 800b838:	509f79fb 	.word	0x509f79fb
 800b83c:	3fd34413 	.word	0x3fd34413
 800b840:	0800e3c8 	.word	0x0800e3c8
 800b844:	0800e586 	.word	0x0800e586
 800b848:	7ff00000 	.word	0x7ff00000
 800b84c:	0800e582 	.word	0x0800e582
 800b850:	0800e579 	.word	0x0800e579
 800b854:	0800e34d 	.word	0x0800e34d
 800b858:	3ff80000 	.word	0x3ff80000
 800b85c:	0800e6f0 	.word	0x0800e6f0
 800b860:	0800e5e1 	.word	0x0800e5e1
 800b864:	2501      	movs	r5, #1
 800b866:	2300      	movs	r3, #0
 800b868:	9306      	str	r3, [sp, #24]
 800b86a:	9508      	str	r5, [sp, #32]
 800b86c:	f04f 33ff 	mov.w	r3, #4294967295
 800b870:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b874:	2200      	movs	r2, #0
 800b876:	2312      	movs	r3, #18
 800b878:	e7b0      	b.n	800b7dc <_dtoa_r+0x26c>
 800b87a:	2301      	movs	r3, #1
 800b87c:	9308      	str	r3, [sp, #32]
 800b87e:	e7f5      	b.n	800b86c <_dtoa_r+0x2fc>
 800b880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b882:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b886:	e7b8      	b.n	800b7fa <_dtoa_r+0x28a>
 800b888:	3101      	adds	r1, #1
 800b88a:	6041      	str	r1, [r0, #4]
 800b88c:	0052      	lsls	r2, r2, #1
 800b88e:	e7b8      	b.n	800b802 <_dtoa_r+0x292>
 800b890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b892:	9a01      	ldr	r2, [sp, #4]
 800b894:	601a      	str	r2, [r3, #0]
 800b896:	9b03      	ldr	r3, [sp, #12]
 800b898:	2b0e      	cmp	r3, #14
 800b89a:	f200 809d 	bhi.w	800b9d8 <_dtoa_r+0x468>
 800b89e:	2d00      	cmp	r5, #0
 800b8a0:	f000 809a 	beq.w	800b9d8 <_dtoa_r+0x468>
 800b8a4:	9b00      	ldr	r3, [sp, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	dd32      	ble.n	800b910 <_dtoa_r+0x3a0>
 800b8aa:	4ab7      	ldr	r2, [pc, #732]	; (800bb88 <_dtoa_r+0x618>)
 800b8ac:	f003 030f 	and.w	r3, r3, #15
 800b8b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b8b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8b8:	9b00      	ldr	r3, [sp, #0]
 800b8ba:	05d8      	lsls	r0, r3, #23
 800b8bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b8c0:	d516      	bpl.n	800b8f0 <_dtoa_r+0x380>
 800b8c2:	4bb2      	ldr	r3, [pc, #712]	; (800bb8c <_dtoa_r+0x61c>)
 800b8c4:	ec51 0b19 	vmov	r0, r1, d9
 800b8c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8cc:	f7f4 ffe6 	bl	800089c <__aeabi_ddiv>
 800b8d0:	f007 070f 	and.w	r7, r7, #15
 800b8d4:	4682      	mov	sl, r0
 800b8d6:	468b      	mov	fp, r1
 800b8d8:	2503      	movs	r5, #3
 800b8da:	4eac      	ldr	r6, [pc, #688]	; (800bb8c <_dtoa_r+0x61c>)
 800b8dc:	b957      	cbnz	r7, 800b8f4 <_dtoa_r+0x384>
 800b8de:	4642      	mov	r2, r8
 800b8e0:	464b      	mov	r3, r9
 800b8e2:	4650      	mov	r0, sl
 800b8e4:	4659      	mov	r1, fp
 800b8e6:	f7f4 ffd9 	bl	800089c <__aeabi_ddiv>
 800b8ea:	4682      	mov	sl, r0
 800b8ec:	468b      	mov	fp, r1
 800b8ee:	e028      	b.n	800b942 <_dtoa_r+0x3d2>
 800b8f0:	2502      	movs	r5, #2
 800b8f2:	e7f2      	b.n	800b8da <_dtoa_r+0x36a>
 800b8f4:	07f9      	lsls	r1, r7, #31
 800b8f6:	d508      	bpl.n	800b90a <_dtoa_r+0x39a>
 800b8f8:	4640      	mov	r0, r8
 800b8fa:	4649      	mov	r1, r9
 800b8fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b900:	f7f4 fea2 	bl	8000648 <__aeabi_dmul>
 800b904:	3501      	adds	r5, #1
 800b906:	4680      	mov	r8, r0
 800b908:	4689      	mov	r9, r1
 800b90a:	107f      	asrs	r7, r7, #1
 800b90c:	3608      	adds	r6, #8
 800b90e:	e7e5      	b.n	800b8dc <_dtoa_r+0x36c>
 800b910:	f000 809b 	beq.w	800ba4a <_dtoa_r+0x4da>
 800b914:	9b00      	ldr	r3, [sp, #0]
 800b916:	4f9d      	ldr	r7, [pc, #628]	; (800bb8c <_dtoa_r+0x61c>)
 800b918:	425e      	negs	r6, r3
 800b91a:	4b9b      	ldr	r3, [pc, #620]	; (800bb88 <_dtoa_r+0x618>)
 800b91c:	f006 020f 	and.w	r2, r6, #15
 800b920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	ec51 0b19 	vmov	r0, r1, d9
 800b92c:	f7f4 fe8c 	bl	8000648 <__aeabi_dmul>
 800b930:	1136      	asrs	r6, r6, #4
 800b932:	4682      	mov	sl, r0
 800b934:	468b      	mov	fp, r1
 800b936:	2300      	movs	r3, #0
 800b938:	2502      	movs	r5, #2
 800b93a:	2e00      	cmp	r6, #0
 800b93c:	d17a      	bne.n	800ba34 <_dtoa_r+0x4c4>
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1d3      	bne.n	800b8ea <_dtoa_r+0x37a>
 800b942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b944:	2b00      	cmp	r3, #0
 800b946:	f000 8082 	beq.w	800ba4e <_dtoa_r+0x4de>
 800b94a:	4b91      	ldr	r3, [pc, #580]	; (800bb90 <_dtoa_r+0x620>)
 800b94c:	2200      	movs	r2, #0
 800b94e:	4650      	mov	r0, sl
 800b950:	4659      	mov	r1, fp
 800b952:	f7f5 f8eb 	bl	8000b2c <__aeabi_dcmplt>
 800b956:	2800      	cmp	r0, #0
 800b958:	d079      	beq.n	800ba4e <_dtoa_r+0x4de>
 800b95a:	9b03      	ldr	r3, [sp, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d076      	beq.n	800ba4e <_dtoa_r+0x4de>
 800b960:	9b02      	ldr	r3, [sp, #8]
 800b962:	2b00      	cmp	r3, #0
 800b964:	dd36      	ble.n	800b9d4 <_dtoa_r+0x464>
 800b966:	9b00      	ldr	r3, [sp, #0]
 800b968:	4650      	mov	r0, sl
 800b96a:	4659      	mov	r1, fp
 800b96c:	1e5f      	subs	r7, r3, #1
 800b96e:	2200      	movs	r2, #0
 800b970:	4b88      	ldr	r3, [pc, #544]	; (800bb94 <_dtoa_r+0x624>)
 800b972:	f7f4 fe69 	bl	8000648 <__aeabi_dmul>
 800b976:	9e02      	ldr	r6, [sp, #8]
 800b978:	4682      	mov	sl, r0
 800b97a:	468b      	mov	fp, r1
 800b97c:	3501      	adds	r5, #1
 800b97e:	4628      	mov	r0, r5
 800b980:	f7f4 fdf8 	bl	8000574 <__aeabi_i2d>
 800b984:	4652      	mov	r2, sl
 800b986:	465b      	mov	r3, fp
 800b988:	f7f4 fe5e 	bl	8000648 <__aeabi_dmul>
 800b98c:	4b82      	ldr	r3, [pc, #520]	; (800bb98 <_dtoa_r+0x628>)
 800b98e:	2200      	movs	r2, #0
 800b990:	f7f4 fca4 	bl	80002dc <__adddf3>
 800b994:	46d0      	mov	r8, sl
 800b996:	46d9      	mov	r9, fp
 800b998:	4682      	mov	sl, r0
 800b99a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b99e:	2e00      	cmp	r6, #0
 800b9a0:	d158      	bne.n	800ba54 <_dtoa_r+0x4e4>
 800b9a2:	4b7e      	ldr	r3, [pc, #504]	; (800bb9c <_dtoa_r+0x62c>)
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	4649      	mov	r1, r9
 800b9aa:	f7f4 fc95 	bl	80002d8 <__aeabi_dsub>
 800b9ae:	4652      	mov	r2, sl
 800b9b0:	465b      	mov	r3, fp
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	4689      	mov	r9, r1
 800b9b6:	f7f5 f8d7 	bl	8000b68 <__aeabi_dcmpgt>
 800b9ba:	2800      	cmp	r0, #0
 800b9bc:	f040 8295 	bne.w	800beea <_dtoa_r+0x97a>
 800b9c0:	4652      	mov	r2, sl
 800b9c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b9c6:	4640      	mov	r0, r8
 800b9c8:	4649      	mov	r1, r9
 800b9ca:	f7f5 f8af 	bl	8000b2c <__aeabi_dcmplt>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	f040 8289 	bne.w	800bee6 <_dtoa_r+0x976>
 800b9d4:	ec5b ab19 	vmov	sl, fp, d9
 800b9d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f2c0 8148 	blt.w	800bc70 <_dtoa_r+0x700>
 800b9e0:	9a00      	ldr	r2, [sp, #0]
 800b9e2:	2a0e      	cmp	r2, #14
 800b9e4:	f300 8144 	bgt.w	800bc70 <_dtoa_r+0x700>
 800b9e8:	4b67      	ldr	r3, [pc, #412]	; (800bb88 <_dtoa_r+0x618>)
 800b9ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f280 80d5 	bge.w	800bba4 <_dtoa_r+0x634>
 800b9fa:	9b03      	ldr	r3, [sp, #12]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f300 80d1 	bgt.w	800bba4 <_dtoa_r+0x634>
 800ba02:	f040 826f 	bne.w	800bee4 <_dtoa_r+0x974>
 800ba06:	4b65      	ldr	r3, [pc, #404]	; (800bb9c <_dtoa_r+0x62c>)
 800ba08:	2200      	movs	r2, #0
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	4649      	mov	r1, r9
 800ba0e:	f7f4 fe1b 	bl	8000648 <__aeabi_dmul>
 800ba12:	4652      	mov	r2, sl
 800ba14:	465b      	mov	r3, fp
 800ba16:	f7f5 f89d 	bl	8000b54 <__aeabi_dcmpge>
 800ba1a:	9e03      	ldr	r6, [sp, #12]
 800ba1c:	4637      	mov	r7, r6
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	f040 8245 	bne.w	800beae <_dtoa_r+0x93e>
 800ba24:	9d01      	ldr	r5, [sp, #4]
 800ba26:	2331      	movs	r3, #49	; 0x31
 800ba28:	f805 3b01 	strb.w	r3, [r5], #1
 800ba2c:	9b00      	ldr	r3, [sp, #0]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	e240      	b.n	800beb6 <_dtoa_r+0x946>
 800ba34:	07f2      	lsls	r2, r6, #31
 800ba36:	d505      	bpl.n	800ba44 <_dtoa_r+0x4d4>
 800ba38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba3c:	f7f4 fe04 	bl	8000648 <__aeabi_dmul>
 800ba40:	3501      	adds	r5, #1
 800ba42:	2301      	movs	r3, #1
 800ba44:	1076      	asrs	r6, r6, #1
 800ba46:	3708      	adds	r7, #8
 800ba48:	e777      	b.n	800b93a <_dtoa_r+0x3ca>
 800ba4a:	2502      	movs	r5, #2
 800ba4c:	e779      	b.n	800b942 <_dtoa_r+0x3d2>
 800ba4e:	9f00      	ldr	r7, [sp, #0]
 800ba50:	9e03      	ldr	r6, [sp, #12]
 800ba52:	e794      	b.n	800b97e <_dtoa_r+0x40e>
 800ba54:	9901      	ldr	r1, [sp, #4]
 800ba56:	4b4c      	ldr	r3, [pc, #304]	; (800bb88 <_dtoa_r+0x618>)
 800ba58:	4431      	add	r1, r6
 800ba5a:	910d      	str	r1, [sp, #52]	; 0x34
 800ba5c:	9908      	ldr	r1, [sp, #32]
 800ba5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba66:	2900      	cmp	r1, #0
 800ba68:	d043      	beq.n	800baf2 <_dtoa_r+0x582>
 800ba6a:	494d      	ldr	r1, [pc, #308]	; (800bba0 <_dtoa_r+0x630>)
 800ba6c:	2000      	movs	r0, #0
 800ba6e:	f7f4 ff15 	bl	800089c <__aeabi_ddiv>
 800ba72:	4652      	mov	r2, sl
 800ba74:	465b      	mov	r3, fp
 800ba76:	f7f4 fc2f 	bl	80002d8 <__aeabi_dsub>
 800ba7a:	9d01      	ldr	r5, [sp, #4]
 800ba7c:	4682      	mov	sl, r0
 800ba7e:	468b      	mov	fp, r1
 800ba80:	4649      	mov	r1, r9
 800ba82:	4640      	mov	r0, r8
 800ba84:	f7f5 f890 	bl	8000ba8 <__aeabi_d2iz>
 800ba88:	4606      	mov	r6, r0
 800ba8a:	f7f4 fd73 	bl	8000574 <__aeabi_i2d>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	460b      	mov	r3, r1
 800ba92:	4640      	mov	r0, r8
 800ba94:	4649      	mov	r1, r9
 800ba96:	f7f4 fc1f 	bl	80002d8 <__aeabi_dsub>
 800ba9a:	3630      	adds	r6, #48	; 0x30
 800ba9c:	f805 6b01 	strb.w	r6, [r5], #1
 800baa0:	4652      	mov	r2, sl
 800baa2:	465b      	mov	r3, fp
 800baa4:	4680      	mov	r8, r0
 800baa6:	4689      	mov	r9, r1
 800baa8:	f7f5 f840 	bl	8000b2c <__aeabi_dcmplt>
 800baac:	2800      	cmp	r0, #0
 800baae:	d163      	bne.n	800bb78 <_dtoa_r+0x608>
 800bab0:	4642      	mov	r2, r8
 800bab2:	464b      	mov	r3, r9
 800bab4:	4936      	ldr	r1, [pc, #216]	; (800bb90 <_dtoa_r+0x620>)
 800bab6:	2000      	movs	r0, #0
 800bab8:	f7f4 fc0e 	bl	80002d8 <__aeabi_dsub>
 800babc:	4652      	mov	r2, sl
 800babe:	465b      	mov	r3, fp
 800bac0:	f7f5 f834 	bl	8000b2c <__aeabi_dcmplt>
 800bac4:	2800      	cmp	r0, #0
 800bac6:	f040 80b5 	bne.w	800bc34 <_dtoa_r+0x6c4>
 800baca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bacc:	429d      	cmp	r5, r3
 800bace:	d081      	beq.n	800b9d4 <_dtoa_r+0x464>
 800bad0:	4b30      	ldr	r3, [pc, #192]	; (800bb94 <_dtoa_r+0x624>)
 800bad2:	2200      	movs	r2, #0
 800bad4:	4650      	mov	r0, sl
 800bad6:	4659      	mov	r1, fp
 800bad8:	f7f4 fdb6 	bl	8000648 <__aeabi_dmul>
 800badc:	4b2d      	ldr	r3, [pc, #180]	; (800bb94 <_dtoa_r+0x624>)
 800bade:	4682      	mov	sl, r0
 800bae0:	468b      	mov	fp, r1
 800bae2:	4640      	mov	r0, r8
 800bae4:	4649      	mov	r1, r9
 800bae6:	2200      	movs	r2, #0
 800bae8:	f7f4 fdae 	bl	8000648 <__aeabi_dmul>
 800baec:	4680      	mov	r8, r0
 800baee:	4689      	mov	r9, r1
 800baf0:	e7c6      	b.n	800ba80 <_dtoa_r+0x510>
 800baf2:	4650      	mov	r0, sl
 800baf4:	4659      	mov	r1, fp
 800baf6:	f7f4 fda7 	bl	8000648 <__aeabi_dmul>
 800bafa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bafc:	9d01      	ldr	r5, [sp, #4]
 800bafe:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb00:	4682      	mov	sl, r0
 800bb02:	468b      	mov	fp, r1
 800bb04:	4649      	mov	r1, r9
 800bb06:	4640      	mov	r0, r8
 800bb08:	f7f5 f84e 	bl	8000ba8 <__aeabi_d2iz>
 800bb0c:	4606      	mov	r6, r0
 800bb0e:	f7f4 fd31 	bl	8000574 <__aeabi_i2d>
 800bb12:	3630      	adds	r6, #48	; 0x30
 800bb14:	4602      	mov	r2, r0
 800bb16:	460b      	mov	r3, r1
 800bb18:	4640      	mov	r0, r8
 800bb1a:	4649      	mov	r1, r9
 800bb1c:	f7f4 fbdc 	bl	80002d8 <__aeabi_dsub>
 800bb20:	f805 6b01 	strb.w	r6, [r5], #1
 800bb24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb26:	429d      	cmp	r5, r3
 800bb28:	4680      	mov	r8, r0
 800bb2a:	4689      	mov	r9, r1
 800bb2c:	f04f 0200 	mov.w	r2, #0
 800bb30:	d124      	bne.n	800bb7c <_dtoa_r+0x60c>
 800bb32:	4b1b      	ldr	r3, [pc, #108]	; (800bba0 <_dtoa_r+0x630>)
 800bb34:	4650      	mov	r0, sl
 800bb36:	4659      	mov	r1, fp
 800bb38:	f7f4 fbd0 	bl	80002dc <__adddf3>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4640      	mov	r0, r8
 800bb42:	4649      	mov	r1, r9
 800bb44:	f7f5 f810 	bl	8000b68 <__aeabi_dcmpgt>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d173      	bne.n	800bc34 <_dtoa_r+0x6c4>
 800bb4c:	4652      	mov	r2, sl
 800bb4e:	465b      	mov	r3, fp
 800bb50:	4913      	ldr	r1, [pc, #76]	; (800bba0 <_dtoa_r+0x630>)
 800bb52:	2000      	movs	r0, #0
 800bb54:	f7f4 fbc0 	bl	80002d8 <__aeabi_dsub>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4640      	mov	r0, r8
 800bb5e:	4649      	mov	r1, r9
 800bb60:	f7f4 ffe4 	bl	8000b2c <__aeabi_dcmplt>
 800bb64:	2800      	cmp	r0, #0
 800bb66:	f43f af35 	beq.w	800b9d4 <_dtoa_r+0x464>
 800bb6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb6c:	1e6b      	subs	r3, r5, #1
 800bb6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb74:	2b30      	cmp	r3, #48	; 0x30
 800bb76:	d0f8      	beq.n	800bb6a <_dtoa_r+0x5fa>
 800bb78:	9700      	str	r7, [sp, #0]
 800bb7a:	e049      	b.n	800bc10 <_dtoa_r+0x6a0>
 800bb7c:	4b05      	ldr	r3, [pc, #20]	; (800bb94 <_dtoa_r+0x624>)
 800bb7e:	f7f4 fd63 	bl	8000648 <__aeabi_dmul>
 800bb82:	4680      	mov	r8, r0
 800bb84:	4689      	mov	r9, r1
 800bb86:	e7bd      	b.n	800bb04 <_dtoa_r+0x594>
 800bb88:	0800e6f0 	.word	0x0800e6f0
 800bb8c:	0800e6c8 	.word	0x0800e6c8
 800bb90:	3ff00000 	.word	0x3ff00000
 800bb94:	40240000 	.word	0x40240000
 800bb98:	401c0000 	.word	0x401c0000
 800bb9c:	40140000 	.word	0x40140000
 800bba0:	3fe00000 	.word	0x3fe00000
 800bba4:	9d01      	ldr	r5, [sp, #4]
 800bba6:	4656      	mov	r6, sl
 800bba8:	465f      	mov	r7, fp
 800bbaa:	4642      	mov	r2, r8
 800bbac:	464b      	mov	r3, r9
 800bbae:	4630      	mov	r0, r6
 800bbb0:	4639      	mov	r1, r7
 800bbb2:	f7f4 fe73 	bl	800089c <__aeabi_ddiv>
 800bbb6:	f7f4 fff7 	bl	8000ba8 <__aeabi_d2iz>
 800bbba:	4682      	mov	sl, r0
 800bbbc:	f7f4 fcda 	bl	8000574 <__aeabi_i2d>
 800bbc0:	4642      	mov	r2, r8
 800bbc2:	464b      	mov	r3, r9
 800bbc4:	f7f4 fd40 	bl	8000648 <__aeabi_dmul>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4630      	mov	r0, r6
 800bbce:	4639      	mov	r1, r7
 800bbd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bbd4:	f7f4 fb80 	bl	80002d8 <__aeabi_dsub>
 800bbd8:	f805 6b01 	strb.w	r6, [r5], #1
 800bbdc:	9e01      	ldr	r6, [sp, #4]
 800bbde:	9f03      	ldr	r7, [sp, #12]
 800bbe0:	1bae      	subs	r6, r5, r6
 800bbe2:	42b7      	cmp	r7, r6
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	d135      	bne.n	800bc56 <_dtoa_r+0x6e6>
 800bbea:	f7f4 fb77 	bl	80002dc <__adddf3>
 800bbee:	4642      	mov	r2, r8
 800bbf0:	464b      	mov	r3, r9
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	460f      	mov	r7, r1
 800bbf6:	f7f4 ffb7 	bl	8000b68 <__aeabi_dcmpgt>
 800bbfa:	b9d0      	cbnz	r0, 800bc32 <_dtoa_r+0x6c2>
 800bbfc:	4642      	mov	r2, r8
 800bbfe:	464b      	mov	r3, r9
 800bc00:	4630      	mov	r0, r6
 800bc02:	4639      	mov	r1, r7
 800bc04:	f7f4 ff88 	bl	8000b18 <__aeabi_dcmpeq>
 800bc08:	b110      	cbz	r0, 800bc10 <_dtoa_r+0x6a0>
 800bc0a:	f01a 0f01 	tst.w	sl, #1
 800bc0e:	d110      	bne.n	800bc32 <_dtoa_r+0x6c2>
 800bc10:	4620      	mov	r0, r4
 800bc12:	ee18 1a10 	vmov	r1, s16
 800bc16:	f000 fe79 	bl	800c90c <_Bfree>
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	9800      	ldr	r0, [sp, #0]
 800bc1e:	702b      	strb	r3, [r5, #0]
 800bc20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc22:	3001      	adds	r0, #1
 800bc24:	6018      	str	r0, [r3, #0]
 800bc26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f43f acf1 	beq.w	800b610 <_dtoa_r+0xa0>
 800bc2e:	601d      	str	r5, [r3, #0]
 800bc30:	e4ee      	b.n	800b610 <_dtoa_r+0xa0>
 800bc32:	9f00      	ldr	r7, [sp, #0]
 800bc34:	462b      	mov	r3, r5
 800bc36:	461d      	mov	r5, r3
 800bc38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc3c:	2a39      	cmp	r2, #57	; 0x39
 800bc3e:	d106      	bne.n	800bc4e <_dtoa_r+0x6de>
 800bc40:	9a01      	ldr	r2, [sp, #4]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d1f7      	bne.n	800bc36 <_dtoa_r+0x6c6>
 800bc46:	9901      	ldr	r1, [sp, #4]
 800bc48:	2230      	movs	r2, #48	; 0x30
 800bc4a:	3701      	adds	r7, #1
 800bc4c:	700a      	strb	r2, [r1, #0]
 800bc4e:	781a      	ldrb	r2, [r3, #0]
 800bc50:	3201      	adds	r2, #1
 800bc52:	701a      	strb	r2, [r3, #0]
 800bc54:	e790      	b.n	800bb78 <_dtoa_r+0x608>
 800bc56:	4ba6      	ldr	r3, [pc, #664]	; (800bef0 <_dtoa_r+0x980>)
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f7f4 fcf5 	bl	8000648 <__aeabi_dmul>
 800bc5e:	2200      	movs	r2, #0
 800bc60:	2300      	movs	r3, #0
 800bc62:	4606      	mov	r6, r0
 800bc64:	460f      	mov	r7, r1
 800bc66:	f7f4 ff57 	bl	8000b18 <__aeabi_dcmpeq>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d09d      	beq.n	800bbaa <_dtoa_r+0x63a>
 800bc6e:	e7cf      	b.n	800bc10 <_dtoa_r+0x6a0>
 800bc70:	9a08      	ldr	r2, [sp, #32]
 800bc72:	2a00      	cmp	r2, #0
 800bc74:	f000 80d7 	beq.w	800be26 <_dtoa_r+0x8b6>
 800bc78:	9a06      	ldr	r2, [sp, #24]
 800bc7a:	2a01      	cmp	r2, #1
 800bc7c:	f300 80ba 	bgt.w	800bdf4 <_dtoa_r+0x884>
 800bc80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc82:	2a00      	cmp	r2, #0
 800bc84:	f000 80b2 	beq.w	800bdec <_dtoa_r+0x87c>
 800bc88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc8c:	9e07      	ldr	r6, [sp, #28]
 800bc8e:	9d04      	ldr	r5, [sp, #16]
 800bc90:	9a04      	ldr	r2, [sp, #16]
 800bc92:	441a      	add	r2, r3
 800bc94:	9204      	str	r2, [sp, #16]
 800bc96:	9a05      	ldr	r2, [sp, #20]
 800bc98:	2101      	movs	r1, #1
 800bc9a:	441a      	add	r2, r3
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	9205      	str	r2, [sp, #20]
 800bca0:	f000 ff36 	bl	800cb10 <__i2b>
 800bca4:	4607      	mov	r7, r0
 800bca6:	2d00      	cmp	r5, #0
 800bca8:	dd0c      	ble.n	800bcc4 <_dtoa_r+0x754>
 800bcaa:	9b05      	ldr	r3, [sp, #20]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	dd09      	ble.n	800bcc4 <_dtoa_r+0x754>
 800bcb0:	42ab      	cmp	r3, r5
 800bcb2:	9a04      	ldr	r2, [sp, #16]
 800bcb4:	bfa8      	it	ge
 800bcb6:	462b      	movge	r3, r5
 800bcb8:	1ad2      	subs	r2, r2, r3
 800bcba:	9204      	str	r2, [sp, #16]
 800bcbc:	9a05      	ldr	r2, [sp, #20]
 800bcbe:	1aed      	subs	r5, r5, r3
 800bcc0:	1ad3      	subs	r3, r2, r3
 800bcc2:	9305      	str	r3, [sp, #20]
 800bcc4:	9b07      	ldr	r3, [sp, #28]
 800bcc6:	b31b      	cbz	r3, 800bd10 <_dtoa_r+0x7a0>
 800bcc8:	9b08      	ldr	r3, [sp, #32]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f000 80af 	beq.w	800be2e <_dtoa_r+0x8be>
 800bcd0:	2e00      	cmp	r6, #0
 800bcd2:	dd13      	ble.n	800bcfc <_dtoa_r+0x78c>
 800bcd4:	4639      	mov	r1, r7
 800bcd6:	4632      	mov	r2, r6
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f000 ffd9 	bl	800cc90 <__pow5mult>
 800bcde:	ee18 2a10 	vmov	r2, s16
 800bce2:	4601      	mov	r1, r0
 800bce4:	4607      	mov	r7, r0
 800bce6:	4620      	mov	r0, r4
 800bce8:	f000 ff28 	bl	800cb3c <__multiply>
 800bcec:	ee18 1a10 	vmov	r1, s16
 800bcf0:	4680      	mov	r8, r0
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f000 fe0a 	bl	800c90c <_Bfree>
 800bcf8:	ee08 8a10 	vmov	s16, r8
 800bcfc:	9b07      	ldr	r3, [sp, #28]
 800bcfe:	1b9a      	subs	r2, r3, r6
 800bd00:	d006      	beq.n	800bd10 <_dtoa_r+0x7a0>
 800bd02:	ee18 1a10 	vmov	r1, s16
 800bd06:	4620      	mov	r0, r4
 800bd08:	f000 ffc2 	bl	800cc90 <__pow5mult>
 800bd0c:	ee08 0a10 	vmov	s16, r0
 800bd10:	2101      	movs	r1, #1
 800bd12:	4620      	mov	r0, r4
 800bd14:	f000 fefc 	bl	800cb10 <__i2b>
 800bd18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	f340 8088 	ble.w	800be32 <_dtoa_r+0x8c2>
 800bd22:	461a      	mov	r2, r3
 800bd24:	4601      	mov	r1, r0
 800bd26:	4620      	mov	r0, r4
 800bd28:	f000 ffb2 	bl	800cc90 <__pow5mult>
 800bd2c:	9b06      	ldr	r3, [sp, #24]
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	4606      	mov	r6, r0
 800bd32:	f340 8081 	ble.w	800be38 <_dtoa_r+0x8c8>
 800bd36:	f04f 0800 	mov.w	r8, #0
 800bd3a:	6933      	ldr	r3, [r6, #16]
 800bd3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd40:	6918      	ldr	r0, [r3, #16]
 800bd42:	f000 fe95 	bl	800ca70 <__hi0bits>
 800bd46:	f1c0 0020 	rsb	r0, r0, #32
 800bd4a:	9b05      	ldr	r3, [sp, #20]
 800bd4c:	4418      	add	r0, r3
 800bd4e:	f010 001f 	ands.w	r0, r0, #31
 800bd52:	f000 8092 	beq.w	800be7a <_dtoa_r+0x90a>
 800bd56:	f1c0 0320 	rsb	r3, r0, #32
 800bd5a:	2b04      	cmp	r3, #4
 800bd5c:	f340 808a 	ble.w	800be74 <_dtoa_r+0x904>
 800bd60:	f1c0 001c 	rsb	r0, r0, #28
 800bd64:	9b04      	ldr	r3, [sp, #16]
 800bd66:	4403      	add	r3, r0
 800bd68:	9304      	str	r3, [sp, #16]
 800bd6a:	9b05      	ldr	r3, [sp, #20]
 800bd6c:	4403      	add	r3, r0
 800bd6e:	4405      	add	r5, r0
 800bd70:	9305      	str	r3, [sp, #20]
 800bd72:	9b04      	ldr	r3, [sp, #16]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	dd07      	ble.n	800bd88 <_dtoa_r+0x818>
 800bd78:	ee18 1a10 	vmov	r1, s16
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	4620      	mov	r0, r4
 800bd80:	f000 ffe0 	bl	800cd44 <__lshift>
 800bd84:	ee08 0a10 	vmov	s16, r0
 800bd88:	9b05      	ldr	r3, [sp, #20]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	dd05      	ble.n	800bd9a <_dtoa_r+0x82a>
 800bd8e:	4631      	mov	r1, r6
 800bd90:	461a      	mov	r2, r3
 800bd92:	4620      	mov	r0, r4
 800bd94:	f000 ffd6 	bl	800cd44 <__lshift>
 800bd98:	4606      	mov	r6, r0
 800bd9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d06e      	beq.n	800be7e <_dtoa_r+0x90e>
 800bda0:	ee18 0a10 	vmov	r0, s16
 800bda4:	4631      	mov	r1, r6
 800bda6:	f001 f83d 	bl	800ce24 <__mcmp>
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	da67      	bge.n	800be7e <_dtoa_r+0x90e>
 800bdae:	9b00      	ldr	r3, [sp, #0]
 800bdb0:	3b01      	subs	r3, #1
 800bdb2:	ee18 1a10 	vmov	r1, s16
 800bdb6:	9300      	str	r3, [sp, #0]
 800bdb8:	220a      	movs	r2, #10
 800bdba:	2300      	movs	r3, #0
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	f000 fdc7 	bl	800c950 <__multadd>
 800bdc2:	9b08      	ldr	r3, [sp, #32]
 800bdc4:	ee08 0a10 	vmov	s16, r0
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f000 81b1 	beq.w	800c130 <_dtoa_r+0xbc0>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	4639      	mov	r1, r7
 800bdd2:	220a      	movs	r2, #10
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f000 fdbb 	bl	800c950 <__multadd>
 800bdda:	9b02      	ldr	r3, [sp, #8]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	4607      	mov	r7, r0
 800bde0:	f300 808e 	bgt.w	800bf00 <_dtoa_r+0x990>
 800bde4:	9b06      	ldr	r3, [sp, #24]
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	dc51      	bgt.n	800be8e <_dtoa_r+0x91e>
 800bdea:	e089      	b.n	800bf00 <_dtoa_r+0x990>
 800bdec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bdf2:	e74b      	b.n	800bc8c <_dtoa_r+0x71c>
 800bdf4:	9b03      	ldr	r3, [sp, #12]
 800bdf6:	1e5e      	subs	r6, r3, #1
 800bdf8:	9b07      	ldr	r3, [sp, #28]
 800bdfa:	42b3      	cmp	r3, r6
 800bdfc:	bfbf      	itttt	lt
 800bdfe:	9b07      	ldrlt	r3, [sp, #28]
 800be00:	9607      	strlt	r6, [sp, #28]
 800be02:	1af2      	sublt	r2, r6, r3
 800be04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800be06:	bfb6      	itet	lt
 800be08:	189b      	addlt	r3, r3, r2
 800be0a:	1b9e      	subge	r6, r3, r6
 800be0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800be0e:	9b03      	ldr	r3, [sp, #12]
 800be10:	bfb8      	it	lt
 800be12:	2600      	movlt	r6, #0
 800be14:	2b00      	cmp	r3, #0
 800be16:	bfb7      	itett	lt
 800be18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800be1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800be20:	1a9d      	sublt	r5, r3, r2
 800be22:	2300      	movlt	r3, #0
 800be24:	e734      	b.n	800bc90 <_dtoa_r+0x720>
 800be26:	9e07      	ldr	r6, [sp, #28]
 800be28:	9d04      	ldr	r5, [sp, #16]
 800be2a:	9f08      	ldr	r7, [sp, #32]
 800be2c:	e73b      	b.n	800bca6 <_dtoa_r+0x736>
 800be2e:	9a07      	ldr	r2, [sp, #28]
 800be30:	e767      	b.n	800bd02 <_dtoa_r+0x792>
 800be32:	9b06      	ldr	r3, [sp, #24]
 800be34:	2b01      	cmp	r3, #1
 800be36:	dc18      	bgt.n	800be6a <_dtoa_r+0x8fa>
 800be38:	f1ba 0f00 	cmp.w	sl, #0
 800be3c:	d115      	bne.n	800be6a <_dtoa_r+0x8fa>
 800be3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be42:	b993      	cbnz	r3, 800be6a <_dtoa_r+0x8fa>
 800be44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be48:	0d1b      	lsrs	r3, r3, #20
 800be4a:	051b      	lsls	r3, r3, #20
 800be4c:	b183      	cbz	r3, 800be70 <_dtoa_r+0x900>
 800be4e:	9b04      	ldr	r3, [sp, #16]
 800be50:	3301      	adds	r3, #1
 800be52:	9304      	str	r3, [sp, #16]
 800be54:	9b05      	ldr	r3, [sp, #20]
 800be56:	3301      	adds	r3, #1
 800be58:	9305      	str	r3, [sp, #20]
 800be5a:	f04f 0801 	mov.w	r8, #1
 800be5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be60:	2b00      	cmp	r3, #0
 800be62:	f47f af6a 	bne.w	800bd3a <_dtoa_r+0x7ca>
 800be66:	2001      	movs	r0, #1
 800be68:	e76f      	b.n	800bd4a <_dtoa_r+0x7da>
 800be6a:	f04f 0800 	mov.w	r8, #0
 800be6e:	e7f6      	b.n	800be5e <_dtoa_r+0x8ee>
 800be70:	4698      	mov	r8, r3
 800be72:	e7f4      	b.n	800be5e <_dtoa_r+0x8ee>
 800be74:	f43f af7d 	beq.w	800bd72 <_dtoa_r+0x802>
 800be78:	4618      	mov	r0, r3
 800be7a:	301c      	adds	r0, #28
 800be7c:	e772      	b.n	800bd64 <_dtoa_r+0x7f4>
 800be7e:	9b03      	ldr	r3, [sp, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	dc37      	bgt.n	800bef4 <_dtoa_r+0x984>
 800be84:	9b06      	ldr	r3, [sp, #24]
 800be86:	2b02      	cmp	r3, #2
 800be88:	dd34      	ble.n	800bef4 <_dtoa_r+0x984>
 800be8a:	9b03      	ldr	r3, [sp, #12]
 800be8c:	9302      	str	r3, [sp, #8]
 800be8e:	9b02      	ldr	r3, [sp, #8]
 800be90:	b96b      	cbnz	r3, 800beae <_dtoa_r+0x93e>
 800be92:	4631      	mov	r1, r6
 800be94:	2205      	movs	r2, #5
 800be96:	4620      	mov	r0, r4
 800be98:	f000 fd5a 	bl	800c950 <__multadd>
 800be9c:	4601      	mov	r1, r0
 800be9e:	4606      	mov	r6, r0
 800bea0:	ee18 0a10 	vmov	r0, s16
 800bea4:	f000 ffbe 	bl	800ce24 <__mcmp>
 800bea8:	2800      	cmp	r0, #0
 800beaa:	f73f adbb 	bgt.w	800ba24 <_dtoa_r+0x4b4>
 800beae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb0:	9d01      	ldr	r5, [sp, #4]
 800beb2:	43db      	mvns	r3, r3
 800beb4:	9300      	str	r3, [sp, #0]
 800beb6:	f04f 0800 	mov.w	r8, #0
 800beba:	4631      	mov	r1, r6
 800bebc:	4620      	mov	r0, r4
 800bebe:	f000 fd25 	bl	800c90c <_Bfree>
 800bec2:	2f00      	cmp	r7, #0
 800bec4:	f43f aea4 	beq.w	800bc10 <_dtoa_r+0x6a0>
 800bec8:	f1b8 0f00 	cmp.w	r8, #0
 800becc:	d005      	beq.n	800beda <_dtoa_r+0x96a>
 800bece:	45b8      	cmp	r8, r7
 800bed0:	d003      	beq.n	800beda <_dtoa_r+0x96a>
 800bed2:	4641      	mov	r1, r8
 800bed4:	4620      	mov	r0, r4
 800bed6:	f000 fd19 	bl	800c90c <_Bfree>
 800beda:	4639      	mov	r1, r7
 800bedc:	4620      	mov	r0, r4
 800bede:	f000 fd15 	bl	800c90c <_Bfree>
 800bee2:	e695      	b.n	800bc10 <_dtoa_r+0x6a0>
 800bee4:	2600      	movs	r6, #0
 800bee6:	4637      	mov	r7, r6
 800bee8:	e7e1      	b.n	800beae <_dtoa_r+0x93e>
 800beea:	9700      	str	r7, [sp, #0]
 800beec:	4637      	mov	r7, r6
 800beee:	e599      	b.n	800ba24 <_dtoa_r+0x4b4>
 800bef0:	40240000 	.word	0x40240000
 800bef4:	9b08      	ldr	r3, [sp, #32]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 80ca 	beq.w	800c090 <_dtoa_r+0xb20>
 800befc:	9b03      	ldr	r3, [sp, #12]
 800befe:	9302      	str	r3, [sp, #8]
 800bf00:	2d00      	cmp	r5, #0
 800bf02:	dd05      	ble.n	800bf10 <_dtoa_r+0x9a0>
 800bf04:	4639      	mov	r1, r7
 800bf06:	462a      	mov	r2, r5
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f000 ff1b 	bl	800cd44 <__lshift>
 800bf0e:	4607      	mov	r7, r0
 800bf10:	f1b8 0f00 	cmp.w	r8, #0
 800bf14:	d05b      	beq.n	800bfce <_dtoa_r+0xa5e>
 800bf16:	6879      	ldr	r1, [r7, #4]
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f000 fcb7 	bl	800c88c <_Balloc>
 800bf1e:	4605      	mov	r5, r0
 800bf20:	b928      	cbnz	r0, 800bf2e <_dtoa_r+0x9be>
 800bf22:	4b87      	ldr	r3, [pc, #540]	; (800c140 <_dtoa_r+0xbd0>)
 800bf24:	4602      	mov	r2, r0
 800bf26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf2a:	f7ff bb3b 	b.w	800b5a4 <_dtoa_r+0x34>
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	3202      	adds	r2, #2
 800bf32:	0092      	lsls	r2, r2, #2
 800bf34:	f107 010c 	add.w	r1, r7, #12
 800bf38:	300c      	adds	r0, #12
 800bf3a:	f7fd fc33 	bl	80097a4 <memcpy>
 800bf3e:	2201      	movs	r2, #1
 800bf40:	4629      	mov	r1, r5
 800bf42:	4620      	mov	r0, r4
 800bf44:	f000 fefe 	bl	800cd44 <__lshift>
 800bf48:	9b01      	ldr	r3, [sp, #4]
 800bf4a:	f103 0901 	add.w	r9, r3, #1
 800bf4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bf52:	4413      	add	r3, r2
 800bf54:	9305      	str	r3, [sp, #20]
 800bf56:	f00a 0301 	and.w	r3, sl, #1
 800bf5a:	46b8      	mov	r8, r7
 800bf5c:	9304      	str	r3, [sp, #16]
 800bf5e:	4607      	mov	r7, r0
 800bf60:	4631      	mov	r1, r6
 800bf62:	ee18 0a10 	vmov	r0, s16
 800bf66:	f7ff fa77 	bl	800b458 <quorem>
 800bf6a:	4641      	mov	r1, r8
 800bf6c:	9002      	str	r0, [sp, #8]
 800bf6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bf72:	ee18 0a10 	vmov	r0, s16
 800bf76:	f000 ff55 	bl	800ce24 <__mcmp>
 800bf7a:	463a      	mov	r2, r7
 800bf7c:	9003      	str	r0, [sp, #12]
 800bf7e:	4631      	mov	r1, r6
 800bf80:	4620      	mov	r0, r4
 800bf82:	f000 ff6b 	bl	800ce5c <__mdiff>
 800bf86:	68c2      	ldr	r2, [r0, #12]
 800bf88:	f109 3bff 	add.w	fp, r9, #4294967295
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	bb02      	cbnz	r2, 800bfd2 <_dtoa_r+0xa62>
 800bf90:	4601      	mov	r1, r0
 800bf92:	ee18 0a10 	vmov	r0, s16
 800bf96:	f000 ff45 	bl	800ce24 <__mcmp>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	9207      	str	r2, [sp, #28]
 800bfa2:	f000 fcb3 	bl	800c90c <_Bfree>
 800bfa6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bfaa:	ea43 0102 	orr.w	r1, r3, r2
 800bfae:	9b04      	ldr	r3, [sp, #16]
 800bfb0:	430b      	orrs	r3, r1
 800bfb2:	464d      	mov	r5, r9
 800bfb4:	d10f      	bne.n	800bfd6 <_dtoa_r+0xa66>
 800bfb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bfba:	d02a      	beq.n	800c012 <_dtoa_r+0xaa2>
 800bfbc:	9b03      	ldr	r3, [sp, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	dd02      	ble.n	800bfc8 <_dtoa_r+0xa58>
 800bfc2:	9b02      	ldr	r3, [sp, #8]
 800bfc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bfc8:	f88b a000 	strb.w	sl, [fp]
 800bfcc:	e775      	b.n	800beba <_dtoa_r+0x94a>
 800bfce:	4638      	mov	r0, r7
 800bfd0:	e7ba      	b.n	800bf48 <_dtoa_r+0x9d8>
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	e7e2      	b.n	800bf9c <_dtoa_r+0xa2c>
 800bfd6:	9b03      	ldr	r3, [sp, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	db04      	blt.n	800bfe6 <_dtoa_r+0xa76>
 800bfdc:	9906      	ldr	r1, [sp, #24]
 800bfde:	430b      	orrs	r3, r1
 800bfe0:	9904      	ldr	r1, [sp, #16]
 800bfe2:	430b      	orrs	r3, r1
 800bfe4:	d122      	bne.n	800c02c <_dtoa_r+0xabc>
 800bfe6:	2a00      	cmp	r2, #0
 800bfe8:	ddee      	ble.n	800bfc8 <_dtoa_r+0xa58>
 800bfea:	ee18 1a10 	vmov	r1, s16
 800bfee:	2201      	movs	r2, #1
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 fea7 	bl	800cd44 <__lshift>
 800bff6:	4631      	mov	r1, r6
 800bff8:	ee08 0a10 	vmov	s16, r0
 800bffc:	f000 ff12 	bl	800ce24 <__mcmp>
 800c000:	2800      	cmp	r0, #0
 800c002:	dc03      	bgt.n	800c00c <_dtoa_r+0xa9c>
 800c004:	d1e0      	bne.n	800bfc8 <_dtoa_r+0xa58>
 800c006:	f01a 0f01 	tst.w	sl, #1
 800c00a:	d0dd      	beq.n	800bfc8 <_dtoa_r+0xa58>
 800c00c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c010:	d1d7      	bne.n	800bfc2 <_dtoa_r+0xa52>
 800c012:	2339      	movs	r3, #57	; 0x39
 800c014:	f88b 3000 	strb.w	r3, [fp]
 800c018:	462b      	mov	r3, r5
 800c01a:	461d      	mov	r5, r3
 800c01c:	3b01      	subs	r3, #1
 800c01e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c022:	2a39      	cmp	r2, #57	; 0x39
 800c024:	d071      	beq.n	800c10a <_dtoa_r+0xb9a>
 800c026:	3201      	adds	r2, #1
 800c028:	701a      	strb	r2, [r3, #0]
 800c02a:	e746      	b.n	800beba <_dtoa_r+0x94a>
 800c02c:	2a00      	cmp	r2, #0
 800c02e:	dd07      	ble.n	800c040 <_dtoa_r+0xad0>
 800c030:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c034:	d0ed      	beq.n	800c012 <_dtoa_r+0xaa2>
 800c036:	f10a 0301 	add.w	r3, sl, #1
 800c03a:	f88b 3000 	strb.w	r3, [fp]
 800c03e:	e73c      	b.n	800beba <_dtoa_r+0x94a>
 800c040:	9b05      	ldr	r3, [sp, #20]
 800c042:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c046:	4599      	cmp	r9, r3
 800c048:	d047      	beq.n	800c0da <_dtoa_r+0xb6a>
 800c04a:	ee18 1a10 	vmov	r1, s16
 800c04e:	2300      	movs	r3, #0
 800c050:	220a      	movs	r2, #10
 800c052:	4620      	mov	r0, r4
 800c054:	f000 fc7c 	bl	800c950 <__multadd>
 800c058:	45b8      	cmp	r8, r7
 800c05a:	ee08 0a10 	vmov	s16, r0
 800c05e:	f04f 0300 	mov.w	r3, #0
 800c062:	f04f 020a 	mov.w	r2, #10
 800c066:	4641      	mov	r1, r8
 800c068:	4620      	mov	r0, r4
 800c06a:	d106      	bne.n	800c07a <_dtoa_r+0xb0a>
 800c06c:	f000 fc70 	bl	800c950 <__multadd>
 800c070:	4680      	mov	r8, r0
 800c072:	4607      	mov	r7, r0
 800c074:	f109 0901 	add.w	r9, r9, #1
 800c078:	e772      	b.n	800bf60 <_dtoa_r+0x9f0>
 800c07a:	f000 fc69 	bl	800c950 <__multadd>
 800c07e:	4639      	mov	r1, r7
 800c080:	4680      	mov	r8, r0
 800c082:	2300      	movs	r3, #0
 800c084:	220a      	movs	r2, #10
 800c086:	4620      	mov	r0, r4
 800c088:	f000 fc62 	bl	800c950 <__multadd>
 800c08c:	4607      	mov	r7, r0
 800c08e:	e7f1      	b.n	800c074 <_dtoa_r+0xb04>
 800c090:	9b03      	ldr	r3, [sp, #12]
 800c092:	9302      	str	r3, [sp, #8]
 800c094:	9d01      	ldr	r5, [sp, #4]
 800c096:	ee18 0a10 	vmov	r0, s16
 800c09a:	4631      	mov	r1, r6
 800c09c:	f7ff f9dc 	bl	800b458 <quorem>
 800c0a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c0a4:	9b01      	ldr	r3, [sp, #4]
 800c0a6:	f805 ab01 	strb.w	sl, [r5], #1
 800c0aa:	1aea      	subs	r2, r5, r3
 800c0ac:	9b02      	ldr	r3, [sp, #8]
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	dd09      	ble.n	800c0c6 <_dtoa_r+0xb56>
 800c0b2:	ee18 1a10 	vmov	r1, s16
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	220a      	movs	r2, #10
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f000 fc48 	bl	800c950 <__multadd>
 800c0c0:	ee08 0a10 	vmov	s16, r0
 800c0c4:	e7e7      	b.n	800c096 <_dtoa_r+0xb26>
 800c0c6:	9b02      	ldr	r3, [sp, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	bfc8      	it	gt
 800c0cc:	461d      	movgt	r5, r3
 800c0ce:	9b01      	ldr	r3, [sp, #4]
 800c0d0:	bfd8      	it	le
 800c0d2:	2501      	movle	r5, #1
 800c0d4:	441d      	add	r5, r3
 800c0d6:	f04f 0800 	mov.w	r8, #0
 800c0da:	ee18 1a10 	vmov	r1, s16
 800c0de:	2201      	movs	r2, #1
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f000 fe2f 	bl	800cd44 <__lshift>
 800c0e6:	4631      	mov	r1, r6
 800c0e8:	ee08 0a10 	vmov	s16, r0
 800c0ec:	f000 fe9a 	bl	800ce24 <__mcmp>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	dc91      	bgt.n	800c018 <_dtoa_r+0xaa8>
 800c0f4:	d102      	bne.n	800c0fc <_dtoa_r+0xb8c>
 800c0f6:	f01a 0f01 	tst.w	sl, #1
 800c0fa:	d18d      	bne.n	800c018 <_dtoa_r+0xaa8>
 800c0fc:	462b      	mov	r3, r5
 800c0fe:	461d      	mov	r5, r3
 800c100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c104:	2a30      	cmp	r2, #48	; 0x30
 800c106:	d0fa      	beq.n	800c0fe <_dtoa_r+0xb8e>
 800c108:	e6d7      	b.n	800beba <_dtoa_r+0x94a>
 800c10a:	9a01      	ldr	r2, [sp, #4]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d184      	bne.n	800c01a <_dtoa_r+0xaaa>
 800c110:	9b00      	ldr	r3, [sp, #0]
 800c112:	3301      	adds	r3, #1
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	2331      	movs	r3, #49	; 0x31
 800c118:	7013      	strb	r3, [r2, #0]
 800c11a:	e6ce      	b.n	800beba <_dtoa_r+0x94a>
 800c11c:	4b09      	ldr	r3, [pc, #36]	; (800c144 <_dtoa_r+0xbd4>)
 800c11e:	f7ff ba95 	b.w	800b64c <_dtoa_r+0xdc>
 800c122:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c124:	2b00      	cmp	r3, #0
 800c126:	f47f aa6e 	bne.w	800b606 <_dtoa_r+0x96>
 800c12a:	4b07      	ldr	r3, [pc, #28]	; (800c148 <_dtoa_r+0xbd8>)
 800c12c:	f7ff ba8e 	b.w	800b64c <_dtoa_r+0xdc>
 800c130:	9b02      	ldr	r3, [sp, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	dcae      	bgt.n	800c094 <_dtoa_r+0xb24>
 800c136:	9b06      	ldr	r3, [sp, #24]
 800c138:	2b02      	cmp	r3, #2
 800c13a:	f73f aea8 	bgt.w	800be8e <_dtoa_r+0x91e>
 800c13e:	e7a9      	b.n	800c094 <_dtoa_r+0xb24>
 800c140:	0800e5e1 	.word	0x0800e5e1
 800c144:	0800e34c 	.word	0x0800e34c
 800c148:	0800e579 	.word	0x0800e579

0800c14c <fiprintf>:
 800c14c:	b40e      	push	{r1, r2, r3}
 800c14e:	b503      	push	{r0, r1, lr}
 800c150:	4601      	mov	r1, r0
 800c152:	ab03      	add	r3, sp, #12
 800c154:	4805      	ldr	r0, [pc, #20]	; (800c16c <fiprintf+0x20>)
 800c156:	f853 2b04 	ldr.w	r2, [r3], #4
 800c15a:	6800      	ldr	r0, [r0, #0]
 800c15c:	9301      	str	r3, [sp, #4]
 800c15e:	f001 fad3 	bl	800d708 <_vfiprintf_r>
 800c162:	b002      	add	sp, #8
 800c164:	f85d eb04 	ldr.w	lr, [sp], #4
 800c168:	b003      	add	sp, #12
 800c16a:	4770      	bx	lr
 800c16c:	2000001c 	.word	0x2000001c

0800c170 <rshift>:
 800c170:	6903      	ldr	r3, [r0, #16]
 800c172:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c176:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c17a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c17e:	f100 0414 	add.w	r4, r0, #20
 800c182:	dd45      	ble.n	800c210 <rshift+0xa0>
 800c184:	f011 011f 	ands.w	r1, r1, #31
 800c188:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c18c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c190:	d10c      	bne.n	800c1ac <rshift+0x3c>
 800c192:	f100 0710 	add.w	r7, r0, #16
 800c196:	4629      	mov	r1, r5
 800c198:	42b1      	cmp	r1, r6
 800c19a:	d334      	bcc.n	800c206 <rshift+0x96>
 800c19c:	1a9b      	subs	r3, r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	1eea      	subs	r2, r5, #3
 800c1a2:	4296      	cmp	r6, r2
 800c1a4:	bf38      	it	cc
 800c1a6:	2300      	movcc	r3, #0
 800c1a8:	4423      	add	r3, r4
 800c1aa:	e015      	b.n	800c1d8 <rshift+0x68>
 800c1ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c1b0:	f1c1 0820 	rsb	r8, r1, #32
 800c1b4:	40cf      	lsrs	r7, r1
 800c1b6:	f105 0e04 	add.w	lr, r5, #4
 800c1ba:	46a1      	mov	r9, r4
 800c1bc:	4576      	cmp	r6, lr
 800c1be:	46f4      	mov	ip, lr
 800c1c0:	d815      	bhi.n	800c1ee <rshift+0x7e>
 800c1c2:	1a9a      	subs	r2, r3, r2
 800c1c4:	0092      	lsls	r2, r2, #2
 800c1c6:	3a04      	subs	r2, #4
 800c1c8:	3501      	adds	r5, #1
 800c1ca:	42ae      	cmp	r6, r5
 800c1cc:	bf38      	it	cc
 800c1ce:	2200      	movcc	r2, #0
 800c1d0:	18a3      	adds	r3, r4, r2
 800c1d2:	50a7      	str	r7, [r4, r2]
 800c1d4:	b107      	cbz	r7, 800c1d8 <rshift+0x68>
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	1b1a      	subs	r2, r3, r4
 800c1da:	42a3      	cmp	r3, r4
 800c1dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c1e0:	bf08      	it	eq
 800c1e2:	2300      	moveq	r3, #0
 800c1e4:	6102      	str	r2, [r0, #16]
 800c1e6:	bf08      	it	eq
 800c1e8:	6143      	streq	r3, [r0, #20]
 800c1ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1ee:	f8dc c000 	ldr.w	ip, [ip]
 800c1f2:	fa0c fc08 	lsl.w	ip, ip, r8
 800c1f6:	ea4c 0707 	orr.w	r7, ip, r7
 800c1fa:	f849 7b04 	str.w	r7, [r9], #4
 800c1fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c202:	40cf      	lsrs	r7, r1
 800c204:	e7da      	b.n	800c1bc <rshift+0x4c>
 800c206:	f851 cb04 	ldr.w	ip, [r1], #4
 800c20a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c20e:	e7c3      	b.n	800c198 <rshift+0x28>
 800c210:	4623      	mov	r3, r4
 800c212:	e7e1      	b.n	800c1d8 <rshift+0x68>

0800c214 <__hexdig_fun>:
 800c214:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c218:	2b09      	cmp	r3, #9
 800c21a:	d802      	bhi.n	800c222 <__hexdig_fun+0xe>
 800c21c:	3820      	subs	r0, #32
 800c21e:	b2c0      	uxtb	r0, r0
 800c220:	4770      	bx	lr
 800c222:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c226:	2b05      	cmp	r3, #5
 800c228:	d801      	bhi.n	800c22e <__hexdig_fun+0x1a>
 800c22a:	3847      	subs	r0, #71	; 0x47
 800c22c:	e7f7      	b.n	800c21e <__hexdig_fun+0xa>
 800c22e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c232:	2b05      	cmp	r3, #5
 800c234:	d801      	bhi.n	800c23a <__hexdig_fun+0x26>
 800c236:	3827      	subs	r0, #39	; 0x27
 800c238:	e7f1      	b.n	800c21e <__hexdig_fun+0xa>
 800c23a:	2000      	movs	r0, #0
 800c23c:	4770      	bx	lr
	...

0800c240 <__gethex>:
 800c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c244:	ed2d 8b02 	vpush	{d8}
 800c248:	b089      	sub	sp, #36	; 0x24
 800c24a:	ee08 0a10 	vmov	s16, r0
 800c24e:	9304      	str	r3, [sp, #16]
 800c250:	4bb4      	ldr	r3, [pc, #720]	; (800c524 <__gethex+0x2e4>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	9301      	str	r3, [sp, #4]
 800c256:	4618      	mov	r0, r3
 800c258:	468b      	mov	fp, r1
 800c25a:	4690      	mov	r8, r2
 800c25c:	f7f3 ffe0 	bl	8000220 <strlen>
 800c260:	9b01      	ldr	r3, [sp, #4]
 800c262:	f8db 2000 	ldr.w	r2, [fp]
 800c266:	4403      	add	r3, r0
 800c268:	4682      	mov	sl, r0
 800c26a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c26e:	9305      	str	r3, [sp, #20]
 800c270:	1c93      	adds	r3, r2, #2
 800c272:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c276:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c27a:	32fe      	adds	r2, #254	; 0xfe
 800c27c:	18d1      	adds	r1, r2, r3
 800c27e:	461f      	mov	r7, r3
 800c280:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c284:	9100      	str	r1, [sp, #0]
 800c286:	2830      	cmp	r0, #48	; 0x30
 800c288:	d0f8      	beq.n	800c27c <__gethex+0x3c>
 800c28a:	f7ff ffc3 	bl	800c214 <__hexdig_fun>
 800c28e:	4604      	mov	r4, r0
 800c290:	2800      	cmp	r0, #0
 800c292:	d13a      	bne.n	800c30a <__gethex+0xca>
 800c294:	9901      	ldr	r1, [sp, #4]
 800c296:	4652      	mov	r2, sl
 800c298:	4638      	mov	r0, r7
 800c29a:	f001 fb7d 	bl	800d998 <strncmp>
 800c29e:	4605      	mov	r5, r0
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d168      	bne.n	800c376 <__gethex+0x136>
 800c2a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c2a8:	eb07 060a 	add.w	r6, r7, sl
 800c2ac:	f7ff ffb2 	bl	800c214 <__hexdig_fun>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d062      	beq.n	800c37a <__gethex+0x13a>
 800c2b4:	4633      	mov	r3, r6
 800c2b6:	7818      	ldrb	r0, [r3, #0]
 800c2b8:	2830      	cmp	r0, #48	; 0x30
 800c2ba:	461f      	mov	r7, r3
 800c2bc:	f103 0301 	add.w	r3, r3, #1
 800c2c0:	d0f9      	beq.n	800c2b6 <__gethex+0x76>
 800c2c2:	f7ff ffa7 	bl	800c214 <__hexdig_fun>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	fab0 f480 	clz	r4, r0
 800c2cc:	0964      	lsrs	r4, r4, #5
 800c2ce:	4635      	mov	r5, r6
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	463a      	mov	r2, r7
 800c2d4:	4616      	mov	r6, r2
 800c2d6:	3201      	adds	r2, #1
 800c2d8:	7830      	ldrb	r0, [r6, #0]
 800c2da:	f7ff ff9b 	bl	800c214 <__hexdig_fun>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d1f8      	bne.n	800c2d4 <__gethex+0x94>
 800c2e2:	9901      	ldr	r1, [sp, #4]
 800c2e4:	4652      	mov	r2, sl
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	f001 fb56 	bl	800d998 <strncmp>
 800c2ec:	b980      	cbnz	r0, 800c310 <__gethex+0xd0>
 800c2ee:	b94d      	cbnz	r5, 800c304 <__gethex+0xc4>
 800c2f0:	eb06 050a 	add.w	r5, r6, sl
 800c2f4:	462a      	mov	r2, r5
 800c2f6:	4616      	mov	r6, r2
 800c2f8:	3201      	adds	r2, #1
 800c2fa:	7830      	ldrb	r0, [r6, #0]
 800c2fc:	f7ff ff8a 	bl	800c214 <__hexdig_fun>
 800c300:	2800      	cmp	r0, #0
 800c302:	d1f8      	bne.n	800c2f6 <__gethex+0xb6>
 800c304:	1bad      	subs	r5, r5, r6
 800c306:	00ad      	lsls	r5, r5, #2
 800c308:	e004      	b.n	800c314 <__gethex+0xd4>
 800c30a:	2400      	movs	r4, #0
 800c30c:	4625      	mov	r5, r4
 800c30e:	e7e0      	b.n	800c2d2 <__gethex+0x92>
 800c310:	2d00      	cmp	r5, #0
 800c312:	d1f7      	bne.n	800c304 <__gethex+0xc4>
 800c314:	7833      	ldrb	r3, [r6, #0]
 800c316:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c31a:	2b50      	cmp	r3, #80	; 0x50
 800c31c:	d13b      	bne.n	800c396 <__gethex+0x156>
 800c31e:	7873      	ldrb	r3, [r6, #1]
 800c320:	2b2b      	cmp	r3, #43	; 0x2b
 800c322:	d02c      	beq.n	800c37e <__gethex+0x13e>
 800c324:	2b2d      	cmp	r3, #45	; 0x2d
 800c326:	d02e      	beq.n	800c386 <__gethex+0x146>
 800c328:	1c71      	adds	r1, r6, #1
 800c32a:	f04f 0900 	mov.w	r9, #0
 800c32e:	7808      	ldrb	r0, [r1, #0]
 800c330:	f7ff ff70 	bl	800c214 <__hexdig_fun>
 800c334:	1e43      	subs	r3, r0, #1
 800c336:	b2db      	uxtb	r3, r3
 800c338:	2b18      	cmp	r3, #24
 800c33a:	d82c      	bhi.n	800c396 <__gethex+0x156>
 800c33c:	f1a0 0210 	sub.w	r2, r0, #16
 800c340:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c344:	f7ff ff66 	bl	800c214 <__hexdig_fun>
 800c348:	1e43      	subs	r3, r0, #1
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	2b18      	cmp	r3, #24
 800c34e:	d91d      	bls.n	800c38c <__gethex+0x14c>
 800c350:	f1b9 0f00 	cmp.w	r9, #0
 800c354:	d000      	beq.n	800c358 <__gethex+0x118>
 800c356:	4252      	negs	r2, r2
 800c358:	4415      	add	r5, r2
 800c35a:	f8cb 1000 	str.w	r1, [fp]
 800c35e:	b1e4      	cbz	r4, 800c39a <__gethex+0x15a>
 800c360:	9b00      	ldr	r3, [sp, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	bf14      	ite	ne
 800c366:	2700      	movne	r7, #0
 800c368:	2706      	moveq	r7, #6
 800c36a:	4638      	mov	r0, r7
 800c36c:	b009      	add	sp, #36	; 0x24
 800c36e:	ecbd 8b02 	vpop	{d8}
 800c372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c376:	463e      	mov	r6, r7
 800c378:	4625      	mov	r5, r4
 800c37a:	2401      	movs	r4, #1
 800c37c:	e7ca      	b.n	800c314 <__gethex+0xd4>
 800c37e:	f04f 0900 	mov.w	r9, #0
 800c382:	1cb1      	adds	r1, r6, #2
 800c384:	e7d3      	b.n	800c32e <__gethex+0xee>
 800c386:	f04f 0901 	mov.w	r9, #1
 800c38a:	e7fa      	b.n	800c382 <__gethex+0x142>
 800c38c:	230a      	movs	r3, #10
 800c38e:	fb03 0202 	mla	r2, r3, r2, r0
 800c392:	3a10      	subs	r2, #16
 800c394:	e7d4      	b.n	800c340 <__gethex+0x100>
 800c396:	4631      	mov	r1, r6
 800c398:	e7df      	b.n	800c35a <__gethex+0x11a>
 800c39a:	1bf3      	subs	r3, r6, r7
 800c39c:	3b01      	subs	r3, #1
 800c39e:	4621      	mov	r1, r4
 800c3a0:	2b07      	cmp	r3, #7
 800c3a2:	dc0b      	bgt.n	800c3bc <__gethex+0x17c>
 800c3a4:	ee18 0a10 	vmov	r0, s16
 800c3a8:	f000 fa70 	bl	800c88c <_Balloc>
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	b940      	cbnz	r0, 800c3c2 <__gethex+0x182>
 800c3b0:	4b5d      	ldr	r3, [pc, #372]	; (800c528 <__gethex+0x2e8>)
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	21de      	movs	r1, #222	; 0xde
 800c3b6:	485d      	ldr	r0, [pc, #372]	; (800c52c <__gethex+0x2ec>)
 800c3b8:	f7ff f830 	bl	800b41c <__assert_func>
 800c3bc:	3101      	adds	r1, #1
 800c3be:	105b      	asrs	r3, r3, #1
 800c3c0:	e7ee      	b.n	800c3a0 <__gethex+0x160>
 800c3c2:	f100 0914 	add.w	r9, r0, #20
 800c3c6:	f04f 0b00 	mov.w	fp, #0
 800c3ca:	f1ca 0301 	rsb	r3, sl, #1
 800c3ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800c3d2:	f8cd b000 	str.w	fp, [sp]
 800c3d6:	9306      	str	r3, [sp, #24]
 800c3d8:	42b7      	cmp	r7, r6
 800c3da:	d340      	bcc.n	800c45e <__gethex+0x21e>
 800c3dc:	9802      	ldr	r0, [sp, #8]
 800c3de:	9b00      	ldr	r3, [sp, #0]
 800c3e0:	f840 3b04 	str.w	r3, [r0], #4
 800c3e4:	eba0 0009 	sub.w	r0, r0, r9
 800c3e8:	1080      	asrs	r0, r0, #2
 800c3ea:	0146      	lsls	r6, r0, #5
 800c3ec:	6120      	str	r0, [r4, #16]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 fb3e 	bl	800ca70 <__hi0bits>
 800c3f4:	1a30      	subs	r0, r6, r0
 800c3f6:	f8d8 6000 	ldr.w	r6, [r8]
 800c3fa:	42b0      	cmp	r0, r6
 800c3fc:	dd63      	ble.n	800c4c6 <__gethex+0x286>
 800c3fe:	1b87      	subs	r7, r0, r6
 800c400:	4639      	mov	r1, r7
 800c402:	4620      	mov	r0, r4
 800c404:	f000 fee2 	bl	800d1cc <__any_on>
 800c408:	4682      	mov	sl, r0
 800c40a:	b1a8      	cbz	r0, 800c438 <__gethex+0x1f8>
 800c40c:	1e7b      	subs	r3, r7, #1
 800c40e:	1159      	asrs	r1, r3, #5
 800c410:	f003 021f 	and.w	r2, r3, #31
 800c414:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c418:	f04f 0a01 	mov.w	sl, #1
 800c41c:	fa0a f202 	lsl.w	r2, sl, r2
 800c420:	420a      	tst	r2, r1
 800c422:	d009      	beq.n	800c438 <__gethex+0x1f8>
 800c424:	4553      	cmp	r3, sl
 800c426:	dd05      	ble.n	800c434 <__gethex+0x1f4>
 800c428:	1eb9      	subs	r1, r7, #2
 800c42a:	4620      	mov	r0, r4
 800c42c:	f000 fece 	bl	800d1cc <__any_on>
 800c430:	2800      	cmp	r0, #0
 800c432:	d145      	bne.n	800c4c0 <__gethex+0x280>
 800c434:	f04f 0a02 	mov.w	sl, #2
 800c438:	4639      	mov	r1, r7
 800c43a:	4620      	mov	r0, r4
 800c43c:	f7ff fe98 	bl	800c170 <rshift>
 800c440:	443d      	add	r5, r7
 800c442:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c446:	42ab      	cmp	r3, r5
 800c448:	da4c      	bge.n	800c4e4 <__gethex+0x2a4>
 800c44a:	ee18 0a10 	vmov	r0, s16
 800c44e:	4621      	mov	r1, r4
 800c450:	f000 fa5c 	bl	800c90c <_Bfree>
 800c454:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c456:	2300      	movs	r3, #0
 800c458:	6013      	str	r3, [r2, #0]
 800c45a:	27a3      	movs	r7, #163	; 0xa3
 800c45c:	e785      	b.n	800c36a <__gethex+0x12a>
 800c45e:	1e73      	subs	r3, r6, #1
 800c460:	9a05      	ldr	r2, [sp, #20]
 800c462:	9303      	str	r3, [sp, #12]
 800c464:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c468:	4293      	cmp	r3, r2
 800c46a:	d019      	beq.n	800c4a0 <__gethex+0x260>
 800c46c:	f1bb 0f20 	cmp.w	fp, #32
 800c470:	d107      	bne.n	800c482 <__gethex+0x242>
 800c472:	9b02      	ldr	r3, [sp, #8]
 800c474:	9a00      	ldr	r2, [sp, #0]
 800c476:	f843 2b04 	str.w	r2, [r3], #4
 800c47a:	9302      	str	r3, [sp, #8]
 800c47c:	2300      	movs	r3, #0
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	469b      	mov	fp, r3
 800c482:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c486:	f7ff fec5 	bl	800c214 <__hexdig_fun>
 800c48a:	9b00      	ldr	r3, [sp, #0]
 800c48c:	f000 000f 	and.w	r0, r0, #15
 800c490:	fa00 f00b 	lsl.w	r0, r0, fp
 800c494:	4303      	orrs	r3, r0
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	f10b 0b04 	add.w	fp, fp, #4
 800c49c:	9b03      	ldr	r3, [sp, #12]
 800c49e:	e00d      	b.n	800c4bc <__gethex+0x27c>
 800c4a0:	9b03      	ldr	r3, [sp, #12]
 800c4a2:	9a06      	ldr	r2, [sp, #24]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	42bb      	cmp	r3, r7
 800c4a8:	d3e0      	bcc.n	800c46c <__gethex+0x22c>
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	9901      	ldr	r1, [sp, #4]
 800c4ae:	9307      	str	r3, [sp, #28]
 800c4b0:	4652      	mov	r2, sl
 800c4b2:	f001 fa71 	bl	800d998 <strncmp>
 800c4b6:	9b07      	ldr	r3, [sp, #28]
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d1d7      	bne.n	800c46c <__gethex+0x22c>
 800c4bc:	461e      	mov	r6, r3
 800c4be:	e78b      	b.n	800c3d8 <__gethex+0x198>
 800c4c0:	f04f 0a03 	mov.w	sl, #3
 800c4c4:	e7b8      	b.n	800c438 <__gethex+0x1f8>
 800c4c6:	da0a      	bge.n	800c4de <__gethex+0x29e>
 800c4c8:	1a37      	subs	r7, r6, r0
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	ee18 0a10 	vmov	r0, s16
 800c4d0:	463a      	mov	r2, r7
 800c4d2:	f000 fc37 	bl	800cd44 <__lshift>
 800c4d6:	1bed      	subs	r5, r5, r7
 800c4d8:	4604      	mov	r4, r0
 800c4da:	f100 0914 	add.w	r9, r0, #20
 800c4de:	f04f 0a00 	mov.w	sl, #0
 800c4e2:	e7ae      	b.n	800c442 <__gethex+0x202>
 800c4e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c4e8:	42a8      	cmp	r0, r5
 800c4ea:	dd72      	ble.n	800c5d2 <__gethex+0x392>
 800c4ec:	1b45      	subs	r5, r0, r5
 800c4ee:	42ae      	cmp	r6, r5
 800c4f0:	dc36      	bgt.n	800c560 <__gethex+0x320>
 800c4f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	d02a      	beq.n	800c550 <__gethex+0x310>
 800c4fa:	2b03      	cmp	r3, #3
 800c4fc:	d02c      	beq.n	800c558 <__gethex+0x318>
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d11c      	bne.n	800c53c <__gethex+0x2fc>
 800c502:	42ae      	cmp	r6, r5
 800c504:	d11a      	bne.n	800c53c <__gethex+0x2fc>
 800c506:	2e01      	cmp	r6, #1
 800c508:	d112      	bne.n	800c530 <__gethex+0x2f0>
 800c50a:	9a04      	ldr	r2, [sp, #16]
 800c50c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c510:	6013      	str	r3, [r2, #0]
 800c512:	2301      	movs	r3, #1
 800c514:	6123      	str	r3, [r4, #16]
 800c516:	f8c9 3000 	str.w	r3, [r9]
 800c51a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c51c:	2762      	movs	r7, #98	; 0x62
 800c51e:	601c      	str	r4, [r3, #0]
 800c520:	e723      	b.n	800c36a <__gethex+0x12a>
 800c522:	bf00      	nop
 800c524:	0800e658 	.word	0x0800e658
 800c528:	0800e5e1 	.word	0x0800e5e1
 800c52c:	0800e5f2 	.word	0x0800e5f2
 800c530:	1e71      	subs	r1, r6, #1
 800c532:	4620      	mov	r0, r4
 800c534:	f000 fe4a 	bl	800d1cc <__any_on>
 800c538:	2800      	cmp	r0, #0
 800c53a:	d1e6      	bne.n	800c50a <__gethex+0x2ca>
 800c53c:	ee18 0a10 	vmov	r0, s16
 800c540:	4621      	mov	r1, r4
 800c542:	f000 f9e3 	bl	800c90c <_Bfree>
 800c546:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c548:	2300      	movs	r3, #0
 800c54a:	6013      	str	r3, [r2, #0]
 800c54c:	2750      	movs	r7, #80	; 0x50
 800c54e:	e70c      	b.n	800c36a <__gethex+0x12a>
 800c550:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1f2      	bne.n	800c53c <__gethex+0x2fc>
 800c556:	e7d8      	b.n	800c50a <__gethex+0x2ca>
 800c558:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1d5      	bne.n	800c50a <__gethex+0x2ca>
 800c55e:	e7ed      	b.n	800c53c <__gethex+0x2fc>
 800c560:	1e6f      	subs	r7, r5, #1
 800c562:	f1ba 0f00 	cmp.w	sl, #0
 800c566:	d131      	bne.n	800c5cc <__gethex+0x38c>
 800c568:	b127      	cbz	r7, 800c574 <__gethex+0x334>
 800c56a:	4639      	mov	r1, r7
 800c56c:	4620      	mov	r0, r4
 800c56e:	f000 fe2d 	bl	800d1cc <__any_on>
 800c572:	4682      	mov	sl, r0
 800c574:	117b      	asrs	r3, r7, #5
 800c576:	2101      	movs	r1, #1
 800c578:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c57c:	f007 071f 	and.w	r7, r7, #31
 800c580:	fa01 f707 	lsl.w	r7, r1, r7
 800c584:	421f      	tst	r7, r3
 800c586:	4629      	mov	r1, r5
 800c588:	4620      	mov	r0, r4
 800c58a:	bf18      	it	ne
 800c58c:	f04a 0a02 	orrne.w	sl, sl, #2
 800c590:	1b76      	subs	r6, r6, r5
 800c592:	f7ff fded 	bl	800c170 <rshift>
 800c596:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c59a:	2702      	movs	r7, #2
 800c59c:	f1ba 0f00 	cmp.w	sl, #0
 800c5a0:	d048      	beq.n	800c634 <__gethex+0x3f4>
 800c5a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	d015      	beq.n	800c5d6 <__gethex+0x396>
 800c5aa:	2b03      	cmp	r3, #3
 800c5ac:	d017      	beq.n	800c5de <__gethex+0x39e>
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d109      	bne.n	800c5c6 <__gethex+0x386>
 800c5b2:	f01a 0f02 	tst.w	sl, #2
 800c5b6:	d006      	beq.n	800c5c6 <__gethex+0x386>
 800c5b8:	f8d9 0000 	ldr.w	r0, [r9]
 800c5bc:	ea4a 0a00 	orr.w	sl, sl, r0
 800c5c0:	f01a 0f01 	tst.w	sl, #1
 800c5c4:	d10e      	bne.n	800c5e4 <__gethex+0x3a4>
 800c5c6:	f047 0710 	orr.w	r7, r7, #16
 800c5ca:	e033      	b.n	800c634 <__gethex+0x3f4>
 800c5cc:	f04f 0a01 	mov.w	sl, #1
 800c5d0:	e7d0      	b.n	800c574 <__gethex+0x334>
 800c5d2:	2701      	movs	r7, #1
 800c5d4:	e7e2      	b.n	800c59c <__gethex+0x35c>
 800c5d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5d8:	f1c3 0301 	rsb	r3, r3, #1
 800c5dc:	9315      	str	r3, [sp, #84]	; 0x54
 800c5de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d0f0      	beq.n	800c5c6 <__gethex+0x386>
 800c5e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c5e8:	f104 0314 	add.w	r3, r4, #20
 800c5ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c5f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c5f4:	f04f 0c00 	mov.w	ip, #0
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c602:	d01c      	beq.n	800c63e <__gethex+0x3fe>
 800c604:	3201      	adds	r2, #1
 800c606:	6002      	str	r2, [r0, #0]
 800c608:	2f02      	cmp	r7, #2
 800c60a:	f104 0314 	add.w	r3, r4, #20
 800c60e:	d13f      	bne.n	800c690 <__gethex+0x450>
 800c610:	f8d8 2000 	ldr.w	r2, [r8]
 800c614:	3a01      	subs	r2, #1
 800c616:	42b2      	cmp	r2, r6
 800c618:	d10a      	bne.n	800c630 <__gethex+0x3f0>
 800c61a:	1171      	asrs	r1, r6, #5
 800c61c:	2201      	movs	r2, #1
 800c61e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c622:	f006 061f 	and.w	r6, r6, #31
 800c626:	fa02 f606 	lsl.w	r6, r2, r6
 800c62a:	421e      	tst	r6, r3
 800c62c:	bf18      	it	ne
 800c62e:	4617      	movne	r7, r2
 800c630:	f047 0720 	orr.w	r7, r7, #32
 800c634:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c636:	601c      	str	r4, [r3, #0]
 800c638:	9b04      	ldr	r3, [sp, #16]
 800c63a:	601d      	str	r5, [r3, #0]
 800c63c:	e695      	b.n	800c36a <__gethex+0x12a>
 800c63e:	4299      	cmp	r1, r3
 800c640:	f843 cc04 	str.w	ip, [r3, #-4]
 800c644:	d8d8      	bhi.n	800c5f8 <__gethex+0x3b8>
 800c646:	68a3      	ldr	r3, [r4, #8]
 800c648:	459b      	cmp	fp, r3
 800c64a:	db19      	blt.n	800c680 <__gethex+0x440>
 800c64c:	6861      	ldr	r1, [r4, #4]
 800c64e:	ee18 0a10 	vmov	r0, s16
 800c652:	3101      	adds	r1, #1
 800c654:	f000 f91a 	bl	800c88c <_Balloc>
 800c658:	4681      	mov	r9, r0
 800c65a:	b918      	cbnz	r0, 800c664 <__gethex+0x424>
 800c65c:	4b1a      	ldr	r3, [pc, #104]	; (800c6c8 <__gethex+0x488>)
 800c65e:	4602      	mov	r2, r0
 800c660:	2184      	movs	r1, #132	; 0x84
 800c662:	e6a8      	b.n	800c3b6 <__gethex+0x176>
 800c664:	6922      	ldr	r2, [r4, #16]
 800c666:	3202      	adds	r2, #2
 800c668:	f104 010c 	add.w	r1, r4, #12
 800c66c:	0092      	lsls	r2, r2, #2
 800c66e:	300c      	adds	r0, #12
 800c670:	f7fd f898 	bl	80097a4 <memcpy>
 800c674:	4621      	mov	r1, r4
 800c676:	ee18 0a10 	vmov	r0, s16
 800c67a:	f000 f947 	bl	800c90c <_Bfree>
 800c67e:	464c      	mov	r4, r9
 800c680:	6923      	ldr	r3, [r4, #16]
 800c682:	1c5a      	adds	r2, r3, #1
 800c684:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c688:	6122      	str	r2, [r4, #16]
 800c68a:	2201      	movs	r2, #1
 800c68c:	615a      	str	r2, [r3, #20]
 800c68e:	e7bb      	b.n	800c608 <__gethex+0x3c8>
 800c690:	6922      	ldr	r2, [r4, #16]
 800c692:	455a      	cmp	r2, fp
 800c694:	dd0b      	ble.n	800c6ae <__gethex+0x46e>
 800c696:	2101      	movs	r1, #1
 800c698:	4620      	mov	r0, r4
 800c69a:	f7ff fd69 	bl	800c170 <rshift>
 800c69e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6a2:	3501      	adds	r5, #1
 800c6a4:	42ab      	cmp	r3, r5
 800c6a6:	f6ff aed0 	blt.w	800c44a <__gethex+0x20a>
 800c6aa:	2701      	movs	r7, #1
 800c6ac:	e7c0      	b.n	800c630 <__gethex+0x3f0>
 800c6ae:	f016 061f 	ands.w	r6, r6, #31
 800c6b2:	d0fa      	beq.n	800c6aa <__gethex+0x46a>
 800c6b4:	4453      	add	r3, sl
 800c6b6:	f1c6 0620 	rsb	r6, r6, #32
 800c6ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c6be:	f000 f9d7 	bl	800ca70 <__hi0bits>
 800c6c2:	42b0      	cmp	r0, r6
 800c6c4:	dbe7      	blt.n	800c696 <__gethex+0x456>
 800c6c6:	e7f0      	b.n	800c6aa <__gethex+0x46a>
 800c6c8:	0800e5e1 	.word	0x0800e5e1

0800c6cc <L_shift>:
 800c6cc:	f1c2 0208 	rsb	r2, r2, #8
 800c6d0:	0092      	lsls	r2, r2, #2
 800c6d2:	b570      	push	{r4, r5, r6, lr}
 800c6d4:	f1c2 0620 	rsb	r6, r2, #32
 800c6d8:	6843      	ldr	r3, [r0, #4]
 800c6da:	6804      	ldr	r4, [r0, #0]
 800c6dc:	fa03 f506 	lsl.w	r5, r3, r6
 800c6e0:	432c      	orrs	r4, r5
 800c6e2:	40d3      	lsrs	r3, r2
 800c6e4:	6004      	str	r4, [r0, #0]
 800c6e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c6ea:	4288      	cmp	r0, r1
 800c6ec:	d3f4      	bcc.n	800c6d8 <L_shift+0xc>
 800c6ee:	bd70      	pop	{r4, r5, r6, pc}

0800c6f0 <__match>:
 800c6f0:	b530      	push	{r4, r5, lr}
 800c6f2:	6803      	ldr	r3, [r0, #0]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6fa:	b914      	cbnz	r4, 800c702 <__match+0x12>
 800c6fc:	6003      	str	r3, [r0, #0]
 800c6fe:	2001      	movs	r0, #1
 800c700:	bd30      	pop	{r4, r5, pc}
 800c702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c706:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c70a:	2d19      	cmp	r5, #25
 800c70c:	bf98      	it	ls
 800c70e:	3220      	addls	r2, #32
 800c710:	42a2      	cmp	r2, r4
 800c712:	d0f0      	beq.n	800c6f6 <__match+0x6>
 800c714:	2000      	movs	r0, #0
 800c716:	e7f3      	b.n	800c700 <__match+0x10>

0800c718 <__hexnan>:
 800c718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71c:	680b      	ldr	r3, [r1, #0]
 800c71e:	115e      	asrs	r6, r3, #5
 800c720:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c724:	f013 031f 	ands.w	r3, r3, #31
 800c728:	b087      	sub	sp, #28
 800c72a:	bf18      	it	ne
 800c72c:	3604      	addne	r6, #4
 800c72e:	2500      	movs	r5, #0
 800c730:	1f37      	subs	r7, r6, #4
 800c732:	4690      	mov	r8, r2
 800c734:	6802      	ldr	r2, [r0, #0]
 800c736:	9301      	str	r3, [sp, #4]
 800c738:	4682      	mov	sl, r0
 800c73a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c73e:	46b9      	mov	r9, r7
 800c740:	463c      	mov	r4, r7
 800c742:	9502      	str	r5, [sp, #8]
 800c744:	46ab      	mov	fp, r5
 800c746:	7851      	ldrb	r1, [r2, #1]
 800c748:	1c53      	adds	r3, r2, #1
 800c74a:	9303      	str	r3, [sp, #12]
 800c74c:	b341      	cbz	r1, 800c7a0 <__hexnan+0x88>
 800c74e:	4608      	mov	r0, r1
 800c750:	9205      	str	r2, [sp, #20]
 800c752:	9104      	str	r1, [sp, #16]
 800c754:	f7ff fd5e 	bl	800c214 <__hexdig_fun>
 800c758:	2800      	cmp	r0, #0
 800c75a:	d14f      	bne.n	800c7fc <__hexnan+0xe4>
 800c75c:	9904      	ldr	r1, [sp, #16]
 800c75e:	9a05      	ldr	r2, [sp, #20]
 800c760:	2920      	cmp	r1, #32
 800c762:	d818      	bhi.n	800c796 <__hexnan+0x7e>
 800c764:	9b02      	ldr	r3, [sp, #8]
 800c766:	459b      	cmp	fp, r3
 800c768:	dd13      	ble.n	800c792 <__hexnan+0x7a>
 800c76a:	454c      	cmp	r4, r9
 800c76c:	d206      	bcs.n	800c77c <__hexnan+0x64>
 800c76e:	2d07      	cmp	r5, #7
 800c770:	dc04      	bgt.n	800c77c <__hexnan+0x64>
 800c772:	462a      	mov	r2, r5
 800c774:	4649      	mov	r1, r9
 800c776:	4620      	mov	r0, r4
 800c778:	f7ff ffa8 	bl	800c6cc <L_shift>
 800c77c:	4544      	cmp	r4, r8
 800c77e:	d950      	bls.n	800c822 <__hexnan+0x10a>
 800c780:	2300      	movs	r3, #0
 800c782:	f1a4 0904 	sub.w	r9, r4, #4
 800c786:	f844 3c04 	str.w	r3, [r4, #-4]
 800c78a:	f8cd b008 	str.w	fp, [sp, #8]
 800c78e:	464c      	mov	r4, r9
 800c790:	461d      	mov	r5, r3
 800c792:	9a03      	ldr	r2, [sp, #12]
 800c794:	e7d7      	b.n	800c746 <__hexnan+0x2e>
 800c796:	2929      	cmp	r1, #41	; 0x29
 800c798:	d156      	bne.n	800c848 <__hexnan+0x130>
 800c79a:	3202      	adds	r2, #2
 800c79c:	f8ca 2000 	str.w	r2, [sl]
 800c7a0:	f1bb 0f00 	cmp.w	fp, #0
 800c7a4:	d050      	beq.n	800c848 <__hexnan+0x130>
 800c7a6:	454c      	cmp	r4, r9
 800c7a8:	d206      	bcs.n	800c7b8 <__hexnan+0xa0>
 800c7aa:	2d07      	cmp	r5, #7
 800c7ac:	dc04      	bgt.n	800c7b8 <__hexnan+0xa0>
 800c7ae:	462a      	mov	r2, r5
 800c7b0:	4649      	mov	r1, r9
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f7ff ff8a 	bl	800c6cc <L_shift>
 800c7b8:	4544      	cmp	r4, r8
 800c7ba:	d934      	bls.n	800c826 <__hexnan+0x10e>
 800c7bc:	f1a8 0204 	sub.w	r2, r8, #4
 800c7c0:	4623      	mov	r3, r4
 800c7c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c7c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c7ca:	429f      	cmp	r7, r3
 800c7cc:	d2f9      	bcs.n	800c7c2 <__hexnan+0xaa>
 800c7ce:	1b3b      	subs	r3, r7, r4
 800c7d0:	f023 0303 	bic.w	r3, r3, #3
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	3401      	adds	r4, #1
 800c7d8:	3e03      	subs	r6, #3
 800c7da:	42b4      	cmp	r4, r6
 800c7dc:	bf88      	it	hi
 800c7de:	2304      	movhi	r3, #4
 800c7e0:	4443      	add	r3, r8
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f843 2b04 	str.w	r2, [r3], #4
 800c7e8:	429f      	cmp	r7, r3
 800c7ea:	d2fb      	bcs.n	800c7e4 <__hexnan+0xcc>
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	b91b      	cbnz	r3, 800c7f8 <__hexnan+0xe0>
 800c7f0:	4547      	cmp	r7, r8
 800c7f2:	d127      	bne.n	800c844 <__hexnan+0x12c>
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	603b      	str	r3, [r7, #0]
 800c7f8:	2005      	movs	r0, #5
 800c7fa:	e026      	b.n	800c84a <__hexnan+0x132>
 800c7fc:	3501      	adds	r5, #1
 800c7fe:	2d08      	cmp	r5, #8
 800c800:	f10b 0b01 	add.w	fp, fp, #1
 800c804:	dd06      	ble.n	800c814 <__hexnan+0xfc>
 800c806:	4544      	cmp	r4, r8
 800c808:	d9c3      	bls.n	800c792 <__hexnan+0x7a>
 800c80a:	2300      	movs	r3, #0
 800c80c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c810:	2501      	movs	r5, #1
 800c812:	3c04      	subs	r4, #4
 800c814:	6822      	ldr	r2, [r4, #0]
 800c816:	f000 000f 	and.w	r0, r0, #15
 800c81a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c81e:	6022      	str	r2, [r4, #0]
 800c820:	e7b7      	b.n	800c792 <__hexnan+0x7a>
 800c822:	2508      	movs	r5, #8
 800c824:	e7b5      	b.n	800c792 <__hexnan+0x7a>
 800c826:	9b01      	ldr	r3, [sp, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d0df      	beq.n	800c7ec <__hexnan+0xd4>
 800c82c:	f04f 32ff 	mov.w	r2, #4294967295
 800c830:	f1c3 0320 	rsb	r3, r3, #32
 800c834:	fa22 f303 	lsr.w	r3, r2, r3
 800c838:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c83c:	401a      	ands	r2, r3
 800c83e:	f846 2c04 	str.w	r2, [r6, #-4]
 800c842:	e7d3      	b.n	800c7ec <__hexnan+0xd4>
 800c844:	3f04      	subs	r7, #4
 800c846:	e7d1      	b.n	800c7ec <__hexnan+0xd4>
 800c848:	2004      	movs	r0, #4
 800c84a:	b007      	add	sp, #28
 800c84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c850 <_localeconv_r>:
 800c850:	4800      	ldr	r0, [pc, #0]	; (800c854 <_localeconv_r+0x4>)
 800c852:	4770      	bx	lr
 800c854:	20000174 	.word	0x20000174

0800c858 <malloc>:
 800c858:	4b02      	ldr	r3, [pc, #8]	; (800c864 <malloc+0xc>)
 800c85a:	4601      	mov	r1, r0
 800c85c:	6818      	ldr	r0, [r3, #0]
 800c85e:	f000 bd59 	b.w	800d314 <_malloc_r>
 800c862:	bf00      	nop
 800c864:	2000001c 	.word	0x2000001c

0800c868 <__ascii_mbtowc>:
 800c868:	b082      	sub	sp, #8
 800c86a:	b901      	cbnz	r1, 800c86e <__ascii_mbtowc+0x6>
 800c86c:	a901      	add	r1, sp, #4
 800c86e:	b142      	cbz	r2, 800c882 <__ascii_mbtowc+0x1a>
 800c870:	b14b      	cbz	r3, 800c886 <__ascii_mbtowc+0x1e>
 800c872:	7813      	ldrb	r3, [r2, #0]
 800c874:	600b      	str	r3, [r1, #0]
 800c876:	7812      	ldrb	r2, [r2, #0]
 800c878:	1e10      	subs	r0, r2, #0
 800c87a:	bf18      	it	ne
 800c87c:	2001      	movne	r0, #1
 800c87e:	b002      	add	sp, #8
 800c880:	4770      	bx	lr
 800c882:	4610      	mov	r0, r2
 800c884:	e7fb      	b.n	800c87e <__ascii_mbtowc+0x16>
 800c886:	f06f 0001 	mvn.w	r0, #1
 800c88a:	e7f8      	b.n	800c87e <__ascii_mbtowc+0x16>

0800c88c <_Balloc>:
 800c88c:	b570      	push	{r4, r5, r6, lr}
 800c88e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c890:	4604      	mov	r4, r0
 800c892:	460d      	mov	r5, r1
 800c894:	b976      	cbnz	r6, 800c8b4 <_Balloc+0x28>
 800c896:	2010      	movs	r0, #16
 800c898:	f7ff ffde 	bl	800c858 <malloc>
 800c89c:	4602      	mov	r2, r0
 800c89e:	6260      	str	r0, [r4, #36]	; 0x24
 800c8a0:	b920      	cbnz	r0, 800c8ac <_Balloc+0x20>
 800c8a2:	4b18      	ldr	r3, [pc, #96]	; (800c904 <_Balloc+0x78>)
 800c8a4:	4818      	ldr	r0, [pc, #96]	; (800c908 <_Balloc+0x7c>)
 800c8a6:	2166      	movs	r1, #102	; 0x66
 800c8a8:	f7fe fdb8 	bl	800b41c <__assert_func>
 800c8ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8b0:	6006      	str	r6, [r0, #0]
 800c8b2:	60c6      	str	r6, [r0, #12]
 800c8b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c8b6:	68f3      	ldr	r3, [r6, #12]
 800c8b8:	b183      	cbz	r3, 800c8dc <_Balloc+0x50>
 800c8ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c8c2:	b9b8      	cbnz	r0, 800c8f4 <_Balloc+0x68>
 800c8c4:	2101      	movs	r1, #1
 800c8c6:	fa01 f605 	lsl.w	r6, r1, r5
 800c8ca:	1d72      	adds	r2, r6, #5
 800c8cc:	0092      	lsls	r2, r2, #2
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f000 fc9d 	bl	800d20e <_calloc_r>
 800c8d4:	b160      	cbz	r0, 800c8f0 <_Balloc+0x64>
 800c8d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c8da:	e00e      	b.n	800c8fa <_Balloc+0x6e>
 800c8dc:	2221      	movs	r2, #33	; 0x21
 800c8de:	2104      	movs	r1, #4
 800c8e0:	4620      	mov	r0, r4
 800c8e2:	f000 fc94 	bl	800d20e <_calloc_r>
 800c8e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8e8:	60f0      	str	r0, [r6, #12]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d1e4      	bne.n	800c8ba <_Balloc+0x2e>
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	bd70      	pop	{r4, r5, r6, pc}
 800c8f4:	6802      	ldr	r2, [r0, #0]
 800c8f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c900:	e7f7      	b.n	800c8f2 <_Balloc+0x66>
 800c902:	bf00      	nop
 800c904:	0800e3c8 	.word	0x0800e3c8
 800c908:	0800e66c 	.word	0x0800e66c

0800c90c <_Bfree>:
 800c90c:	b570      	push	{r4, r5, r6, lr}
 800c90e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c910:	4605      	mov	r5, r0
 800c912:	460c      	mov	r4, r1
 800c914:	b976      	cbnz	r6, 800c934 <_Bfree+0x28>
 800c916:	2010      	movs	r0, #16
 800c918:	f7ff ff9e 	bl	800c858 <malloc>
 800c91c:	4602      	mov	r2, r0
 800c91e:	6268      	str	r0, [r5, #36]	; 0x24
 800c920:	b920      	cbnz	r0, 800c92c <_Bfree+0x20>
 800c922:	4b09      	ldr	r3, [pc, #36]	; (800c948 <_Bfree+0x3c>)
 800c924:	4809      	ldr	r0, [pc, #36]	; (800c94c <_Bfree+0x40>)
 800c926:	218a      	movs	r1, #138	; 0x8a
 800c928:	f7fe fd78 	bl	800b41c <__assert_func>
 800c92c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c930:	6006      	str	r6, [r0, #0]
 800c932:	60c6      	str	r6, [r0, #12]
 800c934:	b13c      	cbz	r4, 800c946 <_Bfree+0x3a>
 800c936:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c938:	6862      	ldr	r2, [r4, #4]
 800c93a:	68db      	ldr	r3, [r3, #12]
 800c93c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c940:	6021      	str	r1, [r4, #0]
 800c942:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c946:	bd70      	pop	{r4, r5, r6, pc}
 800c948:	0800e3c8 	.word	0x0800e3c8
 800c94c:	0800e66c 	.word	0x0800e66c

0800c950 <__multadd>:
 800c950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c954:	690d      	ldr	r5, [r1, #16]
 800c956:	4607      	mov	r7, r0
 800c958:	460c      	mov	r4, r1
 800c95a:	461e      	mov	r6, r3
 800c95c:	f101 0c14 	add.w	ip, r1, #20
 800c960:	2000      	movs	r0, #0
 800c962:	f8dc 3000 	ldr.w	r3, [ip]
 800c966:	b299      	uxth	r1, r3
 800c968:	fb02 6101 	mla	r1, r2, r1, r6
 800c96c:	0c1e      	lsrs	r6, r3, #16
 800c96e:	0c0b      	lsrs	r3, r1, #16
 800c970:	fb02 3306 	mla	r3, r2, r6, r3
 800c974:	b289      	uxth	r1, r1
 800c976:	3001      	adds	r0, #1
 800c978:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c97c:	4285      	cmp	r5, r0
 800c97e:	f84c 1b04 	str.w	r1, [ip], #4
 800c982:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c986:	dcec      	bgt.n	800c962 <__multadd+0x12>
 800c988:	b30e      	cbz	r6, 800c9ce <__multadd+0x7e>
 800c98a:	68a3      	ldr	r3, [r4, #8]
 800c98c:	42ab      	cmp	r3, r5
 800c98e:	dc19      	bgt.n	800c9c4 <__multadd+0x74>
 800c990:	6861      	ldr	r1, [r4, #4]
 800c992:	4638      	mov	r0, r7
 800c994:	3101      	adds	r1, #1
 800c996:	f7ff ff79 	bl	800c88c <_Balloc>
 800c99a:	4680      	mov	r8, r0
 800c99c:	b928      	cbnz	r0, 800c9aa <__multadd+0x5a>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	4b0c      	ldr	r3, [pc, #48]	; (800c9d4 <__multadd+0x84>)
 800c9a2:	480d      	ldr	r0, [pc, #52]	; (800c9d8 <__multadd+0x88>)
 800c9a4:	21b5      	movs	r1, #181	; 0xb5
 800c9a6:	f7fe fd39 	bl	800b41c <__assert_func>
 800c9aa:	6922      	ldr	r2, [r4, #16]
 800c9ac:	3202      	adds	r2, #2
 800c9ae:	f104 010c 	add.w	r1, r4, #12
 800c9b2:	0092      	lsls	r2, r2, #2
 800c9b4:	300c      	adds	r0, #12
 800c9b6:	f7fc fef5 	bl	80097a4 <memcpy>
 800c9ba:	4621      	mov	r1, r4
 800c9bc:	4638      	mov	r0, r7
 800c9be:	f7ff ffa5 	bl	800c90c <_Bfree>
 800c9c2:	4644      	mov	r4, r8
 800c9c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c9c8:	3501      	adds	r5, #1
 800c9ca:	615e      	str	r6, [r3, #20]
 800c9cc:	6125      	str	r5, [r4, #16]
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9d4:	0800e5e1 	.word	0x0800e5e1
 800c9d8:	0800e66c 	.word	0x0800e66c

0800c9dc <__s2b>:
 800c9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9e0:	460c      	mov	r4, r1
 800c9e2:	4615      	mov	r5, r2
 800c9e4:	461f      	mov	r7, r3
 800c9e6:	2209      	movs	r2, #9
 800c9e8:	3308      	adds	r3, #8
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9f0:	2100      	movs	r1, #0
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	db09      	blt.n	800ca0c <__s2b+0x30>
 800c9f8:	4630      	mov	r0, r6
 800c9fa:	f7ff ff47 	bl	800c88c <_Balloc>
 800c9fe:	b940      	cbnz	r0, 800ca12 <__s2b+0x36>
 800ca00:	4602      	mov	r2, r0
 800ca02:	4b19      	ldr	r3, [pc, #100]	; (800ca68 <__s2b+0x8c>)
 800ca04:	4819      	ldr	r0, [pc, #100]	; (800ca6c <__s2b+0x90>)
 800ca06:	21ce      	movs	r1, #206	; 0xce
 800ca08:	f7fe fd08 	bl	800b41c <__assert_func>
 800ca0c:	0052      	lsls	r2, r2, #1
 800ca0e:	3101      	adds	r1, #1
 800ca10:	e7f0      	b.n	800c9f4 <__s2b+0x18>
 800ca12:	9b08      	ldr	r3, [sp, #32]
 800ca14:	6143      	str	r3, [r0, #20]
 800ca16:	2d09      	cmp	r5, #9
 800ca18:	f04f 0301 	mov.w	r3, #1
 800ca1c:	6103      	str	r3, [r0, #16]
 800ca1e:	dd16      	ble.n	800ca4e <__s2b+0x72>
 800ca20:	f104 0909 	add.w	r9, r4, #9
 800ca24:	46c8      	mov	r8, r9
 800ca26:	442c      	add	r4, r5
 800ca28:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ca2c:	4601      	mov	r1, r0
 800ca2e:	3b30      	subs	r3, #48	; 0x30
 800ca30:	220a      	movs	r2, #10
 800ca32:	4630      	mov	r0, r6
 800ca34:	f7ff ff8c 	bl	800c950 <__multadd>
 800ca38:	45a0      	cmp	r8, r4
 800ca3a:	d1f5      	bne.n	800ca28 <__s2b+0x4c>
 800ca3c:	f1a5 0408 	sub.w	r4, r5, #8
 800ca40:	444c      	add	r4, r9
 800ca42:	1b2d      	subs	r5, r5, r4
 800ca44:	1963      	adds	r3, r4, r5
 800ca46:	42bb      	cmp	r3, r7
 800ca48:	db04      	blt.n	800ca54 <__s2b+0x78>
 800ca4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca4e:	340a      	adds	r4, #10
 800ca50:	2509      	movs	r5, #9
 800ca52:	e7f6      	b.n	800ca42 <__s2b+0x66>
 800ca54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ca58:	4601      	mov	r1, r0
 800ca5a:	3b30      	subs	r3, #48	; 0x30
 800ca5c:	220a      	movs	r2, #10
 800ca5e:	4630      	mov	r0, r6
 800ca60:	f7ff ff76 	bl	800c950 <__multadd>
 800ca64:	e7ee      	b.n	800ca44 <__s2b+0x68>
 800ca66:	bf00      	nop
 800ca68:	0800e5e1 	.word	0x0800e5e1
 800ca6c:	0800e66c 	.word	0x0800e66c

0800ca70 <__hi0bits>:
 800ca70:	0c03      	lsrs	r3, r0, #16
 800ca72:	041b      	lsls	r3, r3, #16
 800ca74:	b9d3      	cbnz	r3, 800caac <__hi0bits+0x3c>
 800ca76:	0400      	lsls	r0, r0, #16
 800ca78:	2310      	movs	r3, #16
 800ca7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ca7e:	bf04      	itt	eq
 800ca80:	0200      	lsleq	r0, r0, #8
 800ca82:	3308      	addeq	r3, #8
 800ca84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ca88:	bf04      	itt	eq
 800ca8a:	0100      	lsleq	r0, r0, #4
 800ca8c:	3304      	addeq	r3, #4
 800ca8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ca92:	bf04      	itt	eq
 800ca94:	0080      	lsleq	r0, r0, #2
 800ca96:	3302      	addeq	r3, #2
 800ca98:	2800      	cmp	r0, #0
 800ca9a:	db05      	blt.n	800caa8 <__hi0bits+0x38>
 800ca9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800caa0:	f103 0301 	add.w	r3, r3, #1
 800caa4:	bf08      	it	eq
 800caa6:	2320      	moveq	r3, #32
 800caa8:	4618      	mov	r0, r3
 800caaa:	4770      	bx	lr
 800caac:	2300      	movs	r3, #0
 800caae:	e7e4      	b.n	800ca7a <__hi0bits+0xa>

0800cab0 <__lo0bits>:
 800cab0:	6803      	ldr	r3, [r0, #0]
 800cab2:	f013 0207 	ands.w	r2, r3, #7
 800cab6:	4601      	mov	r1, r0
 800cab8:	d00b      	beq.n	800cad2 <__lo0bits+0x22>
 800caba:	07da      	lsls	r2, r3, #31
 800cabc:	d423      	bmi.n	800cb06 <__lo0bits+0x56>
 800cabe:	0798      	lsls	r0, r3, #30
 800cac0:	bf49      	itett	mi
 800cac2:	085b      	lsrmi	r3, r3, #1
 800cac4:	089b      	lsrpl	r3, r3, #2
 800cac6:	2001      	movmi	r0, #1
 800cac8:	600b      	strmi	r3, [r1, #0]
 800caca:	bf5c      	itt	pl
 800cacc:	600b      	strpl	r3, [r1, #0]
 800cace:	2002      	movpl	r0, #2
 800cad0:	4770      	bx	lr
 800cad2:	b298      	uxth	r0, r3
 800cad4:	b9a8      	cbnz	r0, 800cb02 <__lo0bits+0x52>
 800cad6:	0c1b      	lsrs	r3, r3, #16
 800cad8:	2010      	movs	r0, #16
 800cada:	b2da      	uxtb	r2, r3
 800cadc:	b90a      	cbnz	r2, 800cae2 <__lo0bits+0x32>
 800cade:	3008      	adds	r0, #8
 800cae0:	0a1b      	lsrs	r3, r3, #8
 800cae2:	071a      	lsls	r2, r3, #28
 800cae4:	bf04      	itt	eq
 800cae6:	091b      	lsreq	r3, r3, #4
 800cae8:	3004      	addeq	r0, #4
 800caea:	079a      	lsls	r2, r3, #30
 800caec:	bf04      	itt	eq
 800caee:	089b      	lsreq	r3, r3, #2
 800caf0:	3002      	addeq	r0, #2
 800caf2:	07da      	lsls	r2, r3, #31
 800caf4:	d403      	bmi.n	800cafe <__lo0bits+0x4e>
 800caf6:	085b      	lsrs	r3, r3, #1
 800caf8:	f100 0001 	add.w	r0, r0, #1
 800cafc:	d005      	beq.n	800cb0a <__lo0bits+0x5a>
 800cafe:	600b      	str	r3, [r1, #0]
 800cb00:	4770      	bx	lr
 800cb02:	4610      	mov	r0, r2
 800cb04:	e7e9      	b.n	800cada <__lo0bits+0x2a>
 800cb06:	2000      	movs	r0, #0
 800cb08:	4770      	bx	lr
 800cb0a:	2020      	movs	r0, #32
 800cb0c:	4770      	bx	lr
	...

0800cb10 <__i2b>:
 800cb10:	b510      	push	{r4, lr}
 800cb12:	460c      	mov	r4, r1
 800cb14:	2101      	movs	r1, #1
 800cb16:	f7ff feb9 	bl	800c88c <_Balloc>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	b928      	cbnz	r0, 800cb2a <__i2b+0x1a>
 800cb1e:	4b05      	ldr	r3, [pc, #20]	; (800cb34 <__i2b+0x24>)
 800cb20:	4805      	ldr	r0, [pc, #20]	; (800cb38 <__i2b+0x28>)
 800cb22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb26:	f7fe fc79 	bl	800b41c <__assert_func>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	6144      	str	r4, [r0, #20]
 800cb2e:	6103      	str	r3, [r0, #16]
 800cb30:	bd10      	pop	{r4, pc}
 800cb32:	bf00      	nop
 800cb34:	0800e5e1 	.word	0x0800e5e1
 800cb38:	0800e66c 	.word	0x0800e66c

0800cb3c <__multiply>:
 800cb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb40:	4691      	mov	r9, r2
 800cb42:	690a      	ldr	r2, [r1, #16]
 800cb44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	bfb8      	it	lt
 800cb4c:	460b      	movlt	r3, r1
 800cb4e:	460c      	mov	r4, r1
 800cb50:	bfbc      	itt	lt
 800cb52:	464c      	movlt	r4, r9
 800cb54:	4699      	movlt	r9, r3
 800cb56:	6927      	ldr	r7, [r4, #16]
 800cb58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cb5c:	68a3      	ldr	r3, [r4, #8]
 800cb5e:	6861      	ldr	r1, [r4, #4]
 800cb60:	eb07 060a 	add.w	r6, r7, sl
 800cb64:	42b3      	cmp	r3, r6
 800cb66:	b085      	sub	sp, #20
 800cb68:	bfb8      	it	lt
 800cb6a:	3101      	addlt	r1, #1
 800cb6c:	f7ff fe8e 	bl	800c88c <_Balloc>
 800cb70:	b930      	cbnz	r0, 800cb80 <__multiply+0x44>
 800cb72:	4602      	mov	r2, r0
 800cb74:	4b44      	ldr	r3, [pc, #272]	; (800cc88 <__multiply+0x14c>)
 800cb76:	4845      	ldr	r0, [pc, #276]	; (800cc8c <__multiply+0x150>)
 800cb78:	f240 115d 	movw	r1, #349	; 0x15d
 800cb7c:	f7fe fc4e 	bl	800b41c <__assert_func>
 800cb80:	f100 0514 	add.w	r5, r0, #20
 800cb84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cb88:	462b      	mov	r3, r5
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	4543      	cmp	r3, r8
 800cb8e:	d321      	bcc.n	800cbd4 <__multiply+0x98>
 800cb90:	f104 0314 	add.w	r3, r4, #20
 800cb94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cb98:	f109 0314 	add.w	r3, r9, #20
 800cb9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cba0:	9202      	str	r2, [sp, #8]
 800cba2:	1b3a      	subs	r2, r7, r4
 800cba4:	3a15      	subs	r2, #21
 800cba6:	f022 0203 	bic.w	r2, r2, #3
 800cbaa:	3204      	adds	r2, #4
 800cbac:	f104 0115 	add.w	r1, r4, #21
 800cbb0:	428f      	cmp	r7, r1
 800cbb2:	bf38      	it	cc
 800cbb4:	2204      	movcc	r2, #4
 800cbb6:	9201      	str	r2, [sp, #4]
 800cbb8:	9a02      	ldr	r2, [sp, #8]
 800cbba:	9303      	str	r3, [sp, #12]
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d80c      	bhi.n	800cbda <__multiply+0x9e>
 800cbc0:	2e00      	cmp	r6, #0
 800cbc2:	dd03      	ble.n	800cbcc <__multiply+0x90>
 800cbc4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d05a      	beq.n	800cc82 <__multiply+0x146>
 800cbcc:	6106      	str	r6, [r0, #16]
 800cbce:	b005      	add	sp, #20
 800cbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd4:	f843 2b04 	str.w	r2, [r3], #4
 800cbd8:	e7d8      	b.n	800cb8c <__multiply+0x50>
 800cbda:	f8b3 a000 	ldrh.w	sl, [r3]
 800cbde:	f1ba 0f00 	cmp.w	sl, #0
 800cbe2:	d024      	beq.n	800cc2e <__multiply+0xf2>
 800cbe4:	f104 0e14 	add.w	lr, r4, #20
 800cbe8:	46a9      	mov	r9, r5
 800cbea:	f04f 0c00 	mov.w	ip, #0
 800cbee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cbf2:	f8d9 1000 	ldr.w	r1, [r9]
 800cbf6:	fa1f fb82 	uxth.w	fp, r2
 800cbfa:	b289      	uxth	r1, r1
 800cbfc:	fb0a 110b 	mla	r1, sl, fp, r1
 800cc00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cc04:	f8d9 2000 	ldr.w	r2, [r9]
 800cc08:	4461      	add	r1, ip
 800cc0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc0e:	fb0a c20b 	mla	r2, sl, fp, ip
 800cc12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc16:	b289      	uxth	r1, r1
 800cc18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cc1c:	4577      	cmp	r7, lr
 800cc1e:	f849 1b04 	str.w	r1, [r9], #4
 800cc22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc26:	d8e2      	bhi.n	800cbee <__multiply+0xb2>
 800cc28:	9a01      	ldr	r2, [sp, #4]
 800cc2a:	f845 c002 	str.w	ip, [r5, r2]
 800cc2e:	9a03      	ldr	r2, [sp, #12]
 800cc30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc34:	3304      	adds	r3, #4
 800cc36:	f1b9 0f00 	cmp.w	r9, #0
 800cc3a:	d020      	beq.n	800cc7e <__multiply+0x142>
 800cc3c:	6829      	ldr	r1, [r5, #0]
 800cc3e:	f104 0c14 	add.w	ip, r4, #20
 800cc42:	46ae      	mov	lr, r5
 800cc44:	f04f 0a00 	mov.w	sl, #0
 800cc48:	f8bc b000 	ldrh.w	fp, [ip]
 800cc4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cc50:	fb09 220b 	mla	r2, r9, fp, r2
 800cc54:	4492      	add	sl, r2
 800cc56:	b289      	uxth	r1, r1
 800cc58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cc5c:	f84e 1b04 	str.w	r1, [lr], #4
 800cc60:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cc64:	f8be 1000 	ldrh.w	r1, [lr]
 800cc68:	0c12      	lsrs	r2, r2, #16
 800cc6a:	fb09 1102 	mla	r1, r9, r2, r1
 800cc6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cc72:	4567      	cmp	r7, ip
 800cc74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cc78:	d8e6      	bhi.n	800cc48 <__multiply+0x10c>
 800cc7a:	9a01      	ldr	r2, [sp, #4]
 800cc7c:	50a9      	str	r1, [r5, r2]
 800cc7e:	3504      	adds	r5, #4
 800cc80:	e79a      	b.n	800cbb8 <__multiply+0x7c>
 800cc82:	3e01      	subs	r6, #1
 800cc84:	e79c      	b.n	800cbc0 <__multiply+0x84>
 800cc86:	bf00      	nop
 800cc88:	0800e5e1 	.word	0x0800e5e1
 800cc8c:	0800e66c 	.word	0x0800e66c

0800cc90 <__pow5mult>:
 800cc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc94:	4615      	mov	r5, r2
 800cc96:	f012 0203 	ands.w	r2, r2, #3
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	460f      	mov	r7, r1
 800cc9e:	d007      	beq.n	800ccb0 <__pow5mult+0x20>
 800cca0:	4c25      	ldr	r4, [pc, #148]	; (800cd38 <__pow5mult+0xa8>)
 800cca2:	3a01      	subs	r2, #1
 800cca4:	2300      	movs	r3, #0
 800cca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccaa:	f7ff fe51 	bl	800c950 <__multadd>
 800ccae:	4607      	mov	r7, r0
 800ccb0:	10ad      	asrs	r5, r5, #2
 800ccb2:	d03d      	beq.n	800cd30 <__pow5mult+0xa0>
 800ccb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ccb6:	b97c      	cbnz	r4, 800ccd8 <__pow5mult+0x48>
 800ccb8:	2010      	movs	r0, #16
 800ccba:	f7ff fdcd 	bl	800c858 <malloc>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	6270      	str	r0, [r6, #36]	; 0x24
 800ccc2:	b928      	cbnz	r0, 800ccd0 <__pow5mult+0x40>
 800ccc4:	4b1d      	ldr	r3, [pc, #116]	; (800cd3c <__pow5mult+0xac>)
 800ccc6:	481e      	ldr	r0, [pc, #120]	; (800cd40 <__pow5mult+0xb0>)
 800ccc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cccc:	f7fe fba6 	bl	800b41c <__assert_func>
 800ccd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ccd4:	6004      	str	r4, [r0, #0]
 800ccd6:	60c4      	str	r4, [r0, #12]
 800ccd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ccdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cce0:	b94c      	cbnz	r4, 800ccf6 <__pow5mult+0x66>
 800cce2:	f240 2171 	movw	r1, #625	; 0x271
 800cce6:	4630      	mov	r0, r6
 800cce8:	f7ff ff12 	bl	800cb10 <__i2b>
 800ccec:	2300      	movs	r3, #0
 800ccee:	f8c8 0008 	str.w	r0, [r8, #8]
 800ccf2:	4604      	mov	r4, r0
 800ccf4:	6003      	str	r3, [r0, #0]
 800ccf6:	f04f 0900 	mov.w	r9, #0
 800ccfa:	07eb      	lsls	r3, r5, #31
 800ccfc:	d50a      	bpl.n	800cd14 <__pow5mult+0x84>
 800ccfe:	4639      	mov	r1, r7
 800cd00:	4622      	mov	r2, r4
 800cd02:	4630      	mov	r0, r6
 800cd04:	f7ff ff1a 	bl	800cb3c <__multiply>
 800cd08:	4639      	mov	r1, r7
 800cd0a:	4680      	mov	r8, r0
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	f7ff fdfd 	bl	800c90c <_Bfree>
 800cd12:	4647      	mov	r7, r8
 800cd14:	106d      	asrs	r5, r5, #1
 800cd16:	d00b      	beq.n	800cd30 <__pow5mult+0xa0>
 800cd18:	6820      	ldr	r0, [r4, #0]
 800cd1a:	b938      	cbnz	r0, 800cd2c <__pow5mult+0x9c>
 800cd1c:	4622      	mov	r2, r4
 800cd1e:	4621      	mov	r1, r4
 800cd20:	4630      	mov	r0, r6
 800cd22:	f7ff ff0b 	bl	800cb3c <__multiply>
 800cd26:	6020      	str	r0, [r4, #0]
 800cd28:	f8c0 9000 	str.w	r9, [r0]
 800cd2c:	4604      	mov	r4, r0
 800cd2e:	e7e4      	b.n	800ccfa <__pow5mult+0x6a>
 800cd30:	4638      	mov	r0, r7
 800cd32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd36:	bf00      	nop
 800cd38:	0800e7b8 	.word	0x0800e7b8
 800cd3c:	0800e3c8 	.word	0x0800e3c8
 800cd40:	0800e66c 	.word	0x0800e66c

0800cd44 <__lshift>:
 800cd44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd48:	460c      	mov	r4, r1
 800cd4a:	6849      	ldr	r1, [r1, #4]
 800cd4c:	6923      	ldr	r3, [r4, #16]
 800cd4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd52:	68a3      	ldr	r3, [r4, #8]
 800cd54:	4607      	mov	r7, r0
 800cd56:	4691      	mov	r9, r2
 800cd58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd5c:	f108 0601 	add.w	r6, r8, #1
 800cd60:	42b3      	cmp	r3, r6
 800cd62:	db0b      	blt.n	800cd7c <__lshift+0x38>
 800cd64:	4638      	mov	r0, r7
 800cd66:	f7ff fd91 	bl	800c88c <_Balloc>
 800cd6a:	4605      	mov	r5, r0
 800cd6c:	b948      	cbnz	r0, 800cd82 <__lshift+0x3e>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	4b2a      	ldr	r3, [pc, #168]	; (800ce1c <__lshift+0xd8>)
 800cd72:	482b      	ldr	r0, [pc, #172]	; (800ce20 <__lshift+0xdc>)
 800cd74:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cd78:	f7fe fb50 	bl	800b41c <__assert_func>
 800cd7c:	3101      	adds	r1, #1
 800cd7e:	005b      	lsls	r3, r3, #1
 800cd80:	e7ee      	b.n	800cd60 <__lshift+0x1c>
 800cd82:	2300      	movs	r3, #0
 800cd84:	f100 0114 	add.w	r1, r0, #20
 800cd88:	f100 0210 	add.w	r2, r0, #16
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	4553      	cmp	r3, sl
 800cd90:	db37      	blt.n	800ce02 <__lshift+0xbe>
 800cd92:	6920      	ldr	r0, [r4, #16]
 800cd94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd98:	f104 0314 	add.w	r3, r4, #20
 800cd9c:	f019 091f 	ands.w	r9, r9, #31
 800cda0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cda4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cda8:	d02f      	beq.n	800ce0a <__lshift+0xc6>
 800cdaa:	f1c9 0e20 	rsb	lr, r9, #32
 800cdae:	468a      	mov	sl, r1
 800cdb0:	f04f 0c00 	mov.w	ip, #0
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	fa02 f209 	lsl.w	r2, r2, r9
 800cdba:	ea42 020c 	orr.w	r2, r2, ip
 800cdbe:	f84a 2b04 	str.w	r2, [sl], #4
 800cdc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdc6:	4298      	cmp	r0, r3
 800cdc8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cdcc:	d8f2      	bhi.n	800cdb4 <__lshift+0x70>
 800cdce:	1b03      	subs	r3, r0, r4
 800cdd0:	3b15      	subs	r3, #21
 800cdd2:	f023 0303 	bic.w	r3, r3, #3
 800cdd6:	3304      	adds	r3, #4
 800cdd8:	f104 0215 	add.w	r2, r4, #21
 800cddc:	4290      	cmp	r0, r2
 800cdde:	bf38      	it	cc
 800cde0:	2304      	movcc	r3, #4
 800cde2:	f841 c003 	str.w	ip, [r1, r3]
 800cde6:	f1bc 0f00 	cmp.w	ip, #0
 800cdea:	d001      	beq.n	800cdf0 <__lshift+0xac>
 800cdec:	f108 0602 	add.w	r6, r8, #2
 800cdf0:	3e01      	subs	r6, #1
 800cdf2:	4638      	mov	r0, r7
 800cdf4:	612e      	str	r6, [r5, #16]
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	f7ff fd88 	bl	800c90c <_Bfree>
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce02:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce06:	3301      	adds	r3, #1
 800ce08:	e7c1      	b.n	800cd8e <__lshift+0x4a>
 800ce0a:	3904      	subs	r1, #4
 800ce0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce10:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce14:	4298      	cmp	r0, r3
 800ce16:	d8f9      	bhi.n	800ce0c <__lshift+0xc8>
 800ce18:	e7ea      	b.n	800cdf0 <__lshift+0xac>
 800ce1a:	bf00      	nop
 800ce1c:	0800e5e1 	.word	0x0800e5e1
 800ce20:	0800e66c 	.word	0x0800e66c

0800ce24 <__mcmp>:
 800ce24:	b530      	push	{r4, r5, lr}
 800ce26:	6902      	ldr	r2, [r0, #16]
 800ce28:	690c      	ldr	r4, [r1, #16]
 800ce2a:	1b12      	subs	r2, r2, r4
 800ce2c:	d10e      	bne.n	800ce4c <__mcmp+0x28>
 800ce2e:	f100 0314 	add.w	r3, r0, #20
 800ce32:	3114      	adds	r1, #20
 800ce34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ce38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ce3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ce40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ce44:	42a5      	cmp	r5, r4
 800ce46:	d003      	beq.n	800ce50 <__mcmp+0x2c>
 800ce48:	d305      	bcc.n	800ce56 <__mcmp+0x32>
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	4610      	mov	r0, r2
 800ce4e:	bd30      	pop	{r4, r5, pc}
 800ce50:	4283      	cmp	r3, r0
 800ce52:	d3f3      	bcc.n	800ce3c <__mcmp+0x18>
 800ce54:	e7fa      	b.n	800ce4c <__mcmp+0x28>
 800ce56:	f04f 32ff 	mov.w	r2, #4294967295
 800ce5a:	e7f7      	b.n	800ce4c <__mcmp+0x28>

0800ce5c <__mdiff>:
 800ce5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce60:	460c      	mov	r4, r1
 800ce62:	4606      	mov	r6, r0
 800ce64:	4611      	mov	r1, r2
 800ce66:	4620      	mov	r0, r4
 800ce68:	4690      	mov	r8, r2
 800ce6a:	f7ff ffdb 	bl	800ce24 <__mcmp>
 800ce6e:	1e05      	subs	r5, r0, #0
 800ce70:	d110      	bne.n	800ce94 <__mdiff+0x38>
 800ce72:	4629      	mov	r1, r5
 800ce74:	4630      	mov	r0, r6
 800ce76:	f7ff fd09 	bl	800c88c <_Balloc>
 800ce7a:	b930      	cbnz	r0, 800ce8a <__mdiff+0x2e>
 800ce7c:	4b3a      	ldr	r3, [pc, #232]	; (800cf68 <__mdiff+0x10c>)
 800ce7e:	4602      	mov	r2, r0
 800ce80:	f240 2132 	movw	r1, #562	; 0x232
 800ce84:	4839      	ldr	r0, [pc, #228]	; (800cf6c <__mdiff+0x110>)
 800ce86:	f7fe fac9 	bl	800b41c <__assert_func>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ce90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce94:	bfa4      	itt	ge
 800ce96:	4643      	movge	r3, r8
 800ce98:	46a0      	movge	r8, r4
 800ce9a:	4630      	mov	r0, r6
 800ce9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cea0:	bfa6      	itte	ge
 800cea2:	461c      	movge	r4, r3
 800cea4:	2500      	movge	r5, #0
 800cea6:	2501      	movlt	r5, #1
 800cea8:	f7ff fcf0 	bl	800c88c <_Balloc>
 800ceac:	b920      	cbnz	r0, 800ceb8 <__mdiff+0x5c>
 800ceae:	4b2e      	ldr	r3, [pc, #184]	; (800cf68 <__mdiff+0x10c>)
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ceb6:	e7e5      	b.n	800ce84 <__mdiff+0x28>
 800ceb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cebc:	6926      	ldr	r6, [r4, #16]
 800cebe:	60c5      	str	r5, [r0, #12]
 800cec0:	f104 0914 	add.w	r9, r4, #20
 800cec4:	f108 0514 	add.w	r5, r8, #20
 800cec8:	f100 0e14 	add.w	lr, r0, #20
 800cecc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ced0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ced4:	f108 0210 	add.w	r2, r8, #16
 800ced8:	46f2      	mov	sl, lr
 800ceda:	2100      	movs	r1, #0
 800cedc:	f859 3b04 	ldr.w	r3, [r9], #4
 800cee0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cee4:	fa1f f883 	uxth.w	r8, r3
 800cee8:	fa11 f18b 	uxtah	r1, r1, fp
 800ceec:	0c1b      	lsrs	r3, r3, #16
 800ceee:	eba1 0808 	sub.w	r8, r1, r8
 800cef2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cef6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cefa:	fa1f f888 	uxth.w	r8, r8
 800cefe:	1419      	asrs	r1, r3, #16
 800cf00:	454e      	cmp	r6, r9
 800cf02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf06:	f84a 3b04 	str.w	r3, [sl], #4
 800cf0a:	d8e7      	bhi.n	800cedc <__mdiff+0x80>
 800cf0c:	1b33      	subs	r3, r6, r4
 800cf0e:	3b15      	subs	r3, #21
 800cf10:	f023 0303 	bic.w	r3, r3, #3
 800cf14:	3304      	adds	r3, #4
 800cf16:	3415      	adds	r4, #21
 800cf18:	42a6      	cmp	r6, r4
 800cf1a:	bf38      	it	cc
 800cf1c:	2304      	movcc	r3, #4
 800cf1e:	441d      	add	r5, r3
 800cf20:	4473      	add	r3, lr
 800cf22:	469e      	mov	lr, r3
 800cf24:	462e      	mov	r6, r5
 800cf26:	4566      	cmp	r6, ip
 800cf28:	d30e      	bcc.n	800cf48 <__mdiff+0xec>
 800cf2a:	f10c 0203 	add.w	r2, ip, #3
 800cf2e:	1b52      	subs	r2, r2, r5
 800cf30:	f022 0203 	bic.w	r2, r2, #3
 800cf34:	3d03      	subs	r5, #3
 800cf36:	45ac      	cmp	ip, r5
 800cf38:	bf38      	it	cc
 800cf3a:	2200      	movcc	r2, #0
 800cf3c:	441a      	add	r2, r3
 800cf3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cf42:	b17b      	cbz	r3, 800cf64 <__mdiff+0x108>
 800cf44:	6107      	str	r7, [r0, #16]
 800cf46:	e7a3      	b.n	800ce90 <__mdiff+0x34>
 800cf48:	f856 8b04 	ldr.w	r8, [r6], #4
 800cf4c:	fa11 f288 	uxtah	r2, r1, r8
 800cf50:	1414      	asrs	r4, r2, #16
 800cf52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cf56:	b292      	uxth	r2, r2
 800cf58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cf5c:	f84e 2b04 	str.w	r2, [lr], #4
 800cf60:	1421      	asrs	r1, r4, #16
 800cf62:	e7e0      	b.n	800cf26 <__mdiff+0xca>
 800cf64:	3f01      	subs	r7, #1
 800cf66:	e7ea      	b.n	800cf3e <__mdiff+0xe2>
 800cf68:	0800e5e1 	.word	0x0800e5e1
 800cf6c:	0800e66c 	.word	0x0800e66c

0800cf70 <__ulp>:
 800cf70:	b082      	sub	sp, #8
 800cf72:	ed8d 0b00 	vstr	d0, [sp]
 800cf76:	9b01      	ldr	r3, [sp, #4]
 800cf78:	4912      	ldr	r1, [pc, #72]	; (800cfc4 <__ulp+0x54>)
 800cf7a:	4019      	ands	r1, r3
 800cf7c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cf80:	2900      	cmp	r1, #0
 800cf82:	dd05      	ble.n	800cf90 <__ulp+0x20>
 800cf84:	2200      	movs	r2, #0
 800cf86:	460b      	mov	r3, r1
 800cf88:	ec43 2b10 	vmov	d0, r2, r3
 800cf8c:	b002      	add	sp, #8
 800cf8e:	4770      	bx	lr
 800cf90:	4249      	negs	r1, r1
 800cf92:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cf96:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cf9a:	f04f 0200 	mov.w	r2, #0
 800cf9e:	f04f 0300 	mov.w	r3, #0
 800cfa2:	da04      	bge.n	800cfae <__ulp+0x3e>
 800cfa4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cfa8:	fa41 f300 	asr.w	r3, r1, r0
 800cfac:	e7ec      	b.n	800cf88 <__ulp+0x18>
 800cfae:	f1a0 0114 	sub.w	r1, r0, #20
 800cfb2:	291e      	cmp	r1, #30
 800cfb4:	bfda      	itte	le
 800cfb6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cfba:	fa20 f101 	lsrle.w	r1, r0, r1
 800cfbe:	2101      	movgt	r1, #1
 800cfc0:	460a      	mov	r2, r1
 800cfc2:	e7e1      	b.n	800cf88 <__ulp+0x18>
 800cfc4:	7ff00000 	.word	0x7ff00000

0800cfc8 <__b2d>:
 800cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfca:	6905      	ldr	r5, [r0, #16]
 800cfcc:	f100 0714 	add.w	r7, r0, #20
 800cfd0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cfd4:	1f2e      	subs	r6, r5, #4
 800cfd6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f7ff fd48 	bl	800ca70 <__hi0bits>
 800cfe0:	f1c0 0320 	rsb	r3, r0, #32
 800cfe4:	280a      	cmp	r0, #10
 800cfe6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d064 <__b2d+0x9c>
 800cfea:	600b      	str	r3, [r1, #0]
 800cfec:	dc14      	bgt.n	800d018 <__b2d+0x50>
 800cfee:	f1c0 0e0b 	rsb	lr, r0, #11
 800cff2:	fa24 f10e 	lsr.w	r1, r4, lr
 800cff6:	42b7      	cmp	r7, r6
 800cff8:	ea41 030c 	orr.w	r3, r1, ip
 800cffc:	bf34      	ite	cc
 800cffe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d002:	2100      	movcs	r1, #0
 800d004:	3015      	adds	r0, #21
 800d006:	fa04 f000 	lsl.w	r0, r4, r0
 800d00a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d00e:	ea40 0201 	orr.w	r2, r0, r1
 800d012:	ec43 2b10 	vmov	d0, r2, r3
 800d016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d018:	42b7      	cmp	r7, r6
 800d01a:	bf3a      	itte	cc
 800d01c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d020:	f1a5 0608 	subcc.w	r6, r5, #8
 800d024:	2100      	movcs	r1, #0
 800d026:	380b      	subs	r0, #11
 800d028:	d017      	beq.n	800d05a <__b2d+0x92>
 800d02a:	f1c0 0c20 	rsb	ip, r0, #32
 800d02e:	fa04 f500 	lsl.w	r5, r4, r0
 800d032:	42be      	cmp	r6, r7
 800d034:	fa21 f40c 	lsr.w	r4, r1, ip
 800d038:	ea45 0504 	orr.w	r5, r5, r4
 800d03c:	bf8c      	ite	hi
 800d03e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d042:	2400      	movls	r4, #0
 800d044:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d048:	fa01 f000 	lsl.w	r0, r1, r0
 800d04c:	fa24 f40c 	lsr.w	r4, r4, ip
 800d050:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d054:	ea40 0204 	orr.w	r2, r0, r4
 800d058:	e7db      	b.n	800d012 <__b2d+0x4a>
 800d05a:	ea44 030c 	orr.w	r3, r4, ip
 800d05e:	460a      	mov	r2, r1
 800d060:	e7d7      	b.n	800d012 <__b2d+0x4a>
 800d062:	bf00      	nop
 800d064:	3ff00000 	.word	0x3ff00000

0800d068 <__d2b>:
 800d068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d06c:	4689      	mov	r9, r1
 800d06e:	2101      	movs	r1, #1
 800d070:	ec57 6b10 	vmov	r6, r7, d0
 800d074:	4690      	mov	r8, r2
 800d076:	f7ff fc09 	bl	800c88c <_Balloc>
 800d07a:	4604      	mov	r4, r0
 800d07c:	b930      	cbnz	r0, 800d08c <__d2b+0x24>
 800d07e:	4602      	mov	r2, r0
 800d080:	4b25      	ldr	r3, [pc, #148]	; (800d118 <__d2b+0xb0>)
 800d082:	4826      	ldr	r0, [pc, #152]	; (800d11c <__d2b+0xb4>)
 800d084:	f240 310a 	movw	r1, #778	; 0x30a
 800d088:	f7fe f9c8 	bl	800b41c <__assert_func>
 800d08c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d094:	bb35      	cbnz	r5, 800d0e4 <__d2b+0x7c>
 800d096:	2e00      	cmp	r6, #0
 800d098:	9301      	str	r3, [sp, #4]
 800d09a:	d028      	beq.n	800d0ee <__d2b+0x86>
 800d09c:	4668      	mov	r0, sp
 800d09e:	9600      	str	r6, [sp, #0]
 800d0a0:	f7ff fd06 	bl	800cab0 <__lo0bits>
 800d0a4:	9900      	ldr	r1, [sp, #0]
 800d0a6:	b300      	cbz	r0, 800d0ea <__d2b+0x82>
 800d0a8:	9a01      	ldr	r2, [sp, #4]
 800d0aa:	f1c0 0320 	rsb	r3, r0, #32
 800d0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b2:	430b      	orrs	r3, r1
 800d0b4:	40c2      	lsrs	r2, r0
 800d0b6:	6163      	str	r3, [r4, #20]
 800d0b8:	9201      	str	r2, [sp, #4]
 800d0ba:	9b01      	ldr	r3, [sp, #4]
 800d0bc:	61a3      	str	r3, [r4, #24]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	bf14      	ite	ne
 800d0c2:	2202      	movne	r2, #2
 800d0c4:	2201      	moveq	r2, #1
 800d0c6:	6122      	str	r2, [r4, #16]
 800d0c8:	b1d5      	cbz	r5, 800d100 <__d2b+0x98>
 800d0ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d0ce:	4405      	add	r5, r0
 800d0d0:	f8c9 5000 	str.w	r5, [r9]
 800d0d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d0d8:	f8c8 0000 	str.w	r0, [r8]
 800d0dc:	4620      	mov	r0, r4
 800d0de:	b003      	add	sp, #12
 800d0e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0e8:	e7d5      	b.n	800d096 <__d2b+0x2e>
 800d0ea:	6161      	str	r1, [r4, #20]
 800d0ec:	e7e5      	b.n	800d0ba <__d2b+0x52>
 800d0ee:	a801      	add	r0, sp, #4
 800d0f0:	f7ff fcde 	bl	800cab0 <__lo0bits>
 800d0f4:	9b01      	ldr	r3, [sp, #4]
 800d0f6:	6163      	str	r3, [r4, #20]
 800d0f8:	2201      	movs	r2, #1
 800d0fa:	6122      	str	r2, [r4, #16]
 800d0fc:	3020      	adds	r0, #32
 800d0fe:	e7e3      	b.n	800d0c8 <__d2b+0x60>
 800d100:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d104:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d108:	f8c9 0000 	str.w	r0, [r9]
 800d10c:	6918      	ldr	r0, [r3, #16]
 800d10e:	f7ff fcaf 	bl	800ca70 <__hi0bits>
 800d112:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d116:	e7df      	b.n	800d0d8 <__d2b+0x70>
 800d118:	0800e5e1 	.word	0x0800e5e1
 800d11c:	0800e66c 	.word	0x0800e66c

0800d120 <__ratio>:
 800d120:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d124:	4688      	mov	r8, r1
 800d126:	4669      	mov	r1, sp
 800d128:	4681      	mov	r9, r0
 800d12a:	f7ff ff4d 	bl	800cfc8 <__b2d>
 800d12e:	a901      	add	r1, sp, #4
 800d130:	4640      	mov	r0, r8
 800d132:	ec55 4b10 	vmov	r4, r5, d0
 800d136:	f7ff ff47 	bl	800cfc8 <__b2d>
 800d13a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d13e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d142:	eba3 0c02 	sub.w	ip, r3, r2
 800d146:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d14a:	1a9b      	subs	r3, r3, r2
 800d14c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d150:	ec51 0b10 	vmov	r0, r1, d0
 800d154:	2b00      	cmp	r3, #0
 800d156:	bfd6      	itet	le
 800d158:	460a      	movle	r2, r1
 800d15a:	462a      	movgt	r2, r5
 800d15c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d160:	468b      	mov	fp, r1
 800d162:	462f      	mov	r7, r5
 800d164:	bfd4      	ite	le
 800d166:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d16a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d16e:	4620      	mov	r0, r4
 800d170:	ee10 2a10 	vmov	r2, s0
 800d174:	465b      	mov	r3, fp
 800d176:	4639      	mov	r1, r7
 800d178:	f7f3 fb90 	bl	800089c <__aeabi_ddiv>
 800d17c:	ec41 0b10 	vmov	d0, r0, r1
 800d180:	b003      	add	sp, #12
 800d182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d186 <__copybits>:
 800d186:	3901      	subs	r1, #1
 800d188:	b570      	push	{r4, r5, r6, lr}
 800d18a:	1149      	asrs	r1, r1, #5
 800d18c:	6914      	ldr	r4, [r2, #16]
 800d18e:	3101      	adds	r1, #1
 800d190:	f102 0314 	add.w	r3, r2, #20
 800d194:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d198:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d19c:	1f05      	subs	r5, r0, #4
 800d19e:	42a3      	cmp	r3, r4
 800d1a0:	d30c      	bcc.n	800d1bc <__copybits+0x36>
 800d1a2:	1aa3      	subs	r3, r4, r2
 800d1a4:	3b11      	subs	r3, #17
 800d1a6:	f023 0303 	bic.w	r3, r3, #3
 800d1aa:	3211      	adds	r2, #17
 800d1ac:	42a2      	cmp	r2, r4
 800d1ae:	bf88      	it	hi
 800d1b0:	2300      	movhi	r3, #0
 800d1b2:	4418      	add	r0, r3
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	4288      	cmp	r0, r1
 800d1b8:	d305      	bcc.n	800d1c6 <__copybits+0x40>
 800d1ba:	bd70      	pop	{r4, r5, r6, pc}
 800d1bc:	f853 6b04 	ldr.w	r6, [r3], #4
 800d1c0:	f845 6f04 	str.w	r6, [r5, #4]!
 800d1c4:	e7eb      	b.n	800d19e <__copybits+0x18>
 800d1c6:	f840 3b04 	str.w	r3, [r0], #4
 800d1ca:	e7f4      	b.n	800d1b6 <__copybits+0x30>

0800d1cc <__any_on>:
 800d1cc:	f100 0214 	add.w	r2, r0, #20
 800d1d0:	6900      	ldr	r0, [r0, #16]
 800d1d2:	114b      	asrs	r3, r1, #5
 800d1d4:	4298      	cmp	r0, r3
 800d1d6:	b510      	push	{r4, lr}
 800d1d8:	db11      	blt.n	800d1fe <__any_on+0x32>
 800d1da:	dd0a      	ble.n	800d1f2 <__any_on+0x26>
 800d1dc:	f011 011f 	ands.w	r1, r1, #31
 800d1e0:	d007      	beq.n	800d1f2 <__any_on+0x26>
 800d1e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d1e6:	fa24 f001 	lsr.w	r0, r4, r1
 800d1ea:	fa00 f101 	lsl.w	r1, r0, r1
 800d1ee:	428c      	cmp	r4, r1
 800d1f0:	d10b      	bne.n	800d20a <__any_on+0x3e>
 800d1f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d803      	bhi.n	800d202 <__any_on+0x36>
 800d1fa:	2000      	movs	r0, #0
 800d1fc:	bd10      	pop	{r4, pc}
 800d1fe:	4603      	mov	r3, r0
 800d200:	e7f7      	b.n	800d1f2 <__any_on+0x26>
 800d202:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d206:	2900      	cmp	r1, #0
 800d208:	d0f5      	beq.n	800d1f6 <__any_on+0x2a>
 800d20a:	2001      	movs	r0, #1
 800d20c:	e7f6      	b.n	800d1fc <__any_on+0x30>

0800d20e <_calloc_r>:
 800d20e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d210:	fba1 2402 	umull	r2, r4, r1, r2
 800d214:	b94c      	cbnz	r4, 800d22a <_calloc_r+0x1c>
 800d216:	4611      	mov	r1, r2
 800d218:	9201      	str	r2, [sp, #4]
 800d21a:	f000 f87b 	bl	800d314 <_malloc_r>
 800d21e:	9a01      	ldr	r2, [sp, #4]
 800d220:	4605      	mov	r5, r0
 800d222:	b930      	cbnz	r0, 800d232 <_calloc_r+0x24>
 800d224:	4628      	mov	r0, r5
 800d226:	b003      	add	sp, #12
 800d228:	bd30      	pop	{r4, r5, pc}
 800d22a:	220c      	movs	r2, #12
 800d22c:	6002      	str	r2, [r0, #0]
 800d22e:	2500      	movs	r5, #0
 800d230:	e7f8      	b.n	800d224 <_calloc_r+0x16>
 800d232:	4621      	mov	r1, r4
 800d234:	f7fc fac4 	bl	80097c0 <memset>
 800d238:	e7f4      	b.n	800d224 <_calloc_r+0x16>
	...

0800d23c <_free_r>:
 800d23c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d23e:	2900      	cmp	r1, #0
 800d240:	d044      	beq.n	800d2cc <_free_r+0x90>
 800d242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d246:	9001      	str	r0, [sp, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f1a1 0404 	sub.w	r4, r1, #4
 800d24e:	bfb8      	it	lt
 800d250:	18e4      	addlt	r4, r4, r3
 800d252:	f000 fec5 	bl	800dfe0 <__malloc_lock>
 800d256:	4a1e      	ldr	r2, [pc, #120]	; (800d2d0 <_free_r+0x94>)
 800d258:	9801      	ldr	r0, [sp, #4]
 800d25a:	6813      	ldr	r3, [r2, #0]
 800d25c:	b933      	cbnz	r3, 800d26c <_free_r+0x30>
 800d25e:	6063      	str	r3, [r4, #4]
 800d260:	6014      	str	r4, [r2, #0]
 800d262:	b003      	add	sp, #12
 800d264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d268:	f000 bec0 	b.w	800dfec <__malloc_unlock>
 800d26c:	42a3      	cmp	r3, r4
 800d26e:	d908      	bls.n	800d282 <_free_r+0x46>
 800d270:	6825      	ldr	r5, [r4, #0]
 800d272:	1961      	adds	r1, r4, r5
 800d274:	428b      	cmp	r3, r1
 800d276:	bf01      	itttt	eq
 800d278:	6819      	ldreq	r1, [r3, #0]
 800d27a:	685b      	ldreq	r3, [r3, #4]
 800d27c:	1949      	addeq	r1, r1, r5
 800d27e:	6021      	streq	r1, [r4, #0]
 800d280:	e7ed      	b.n	800d25e <_free_r+0x22>
 800d282:	461a      	mov	r2, r3
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	b10b      	cbz	r3, 800d28c <_free_r+0x50>
 800d288:	42a3      	cmp	r3, r4
 800d28a:	d9fa      	bls.n	800d282 <_free_r+0x46>
 800d28c:	6811      	ldr	r1, [r2, #0]
 800d28e:	1855      	adds	r5, r2, r1
 800d290:	42a5      	cmp	r5, r4
 800d292:	d10b      	bne.n	800d2ac <_free_r+0x70>
 800d294:	6824      	ldr	r4, [r4, #0]
 800d296:	4421      	add	r1, r4
 800d298:	1854      	adds	r4, r2, r1
 800d29a:	42a3      	cmp	r3, r4
 800d29c:	6011      	str	r1, [r2, #0]
 800d29e:	d1e0      	bne.n	800d262 <_free_r+0x26>
 800d2a0:	681c      	ldr	r4, [r3, #0]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	6053      	str	r3, [r2, #4]
 800d2a6:	4421      	add	r1, r4
 800d2a8:	6011      	str	r1, [r2, #0]
 800d2aa:	e7da      	b.n	800d262 <_free_r+0x26>
 800d2ac:	d902      	bls.n	800d2b4 <_free_r+0x78>
 800d2ae:	230c      	movs	r3, #12
 800d2b0:	6003      	str	r3, [r0, #0]
 800d2b2:	e7d6      	b.n	800d262 <_free_r+0x26>
 800d2b4:	6825      	ldr	r5, [r4, #0]
 800d2b6:	1961      	adds	r1, r4, r5
 800d2b8:	428b      	cmp	r3, r1
 800d2ba:	bf04      	itt	eq
 800d2bc:	6819      	ldreq	r1, [r3, #0]
 800d2be:	685b      	ldreq	r3, [r3, #4]
 800d2c0:	6063      	str	r3, [r4, #4]
 800d2c2:	bf04      	itt	eq
 800d2c4:	1949      	addeq	r1, r1, r5
 800d2c6:	6021      	streq	r1, [r4, #0]
 800d2c8:	6054      	str	r4, [r2, #4]
 800d2ca:	e7ca      	b.n	800d262 <_free_r+0x26>
 800d2cc:	b003      	add	sp, #12
 800d2ce:	bd30      	pop	{r4, r5, pc}
 800d2d0:	200004c4 	.word	0x200004c4

0800d2d4 <sbrk_aligned>:
 800d2d4:	b570      	push	{r4, r5, r6, lr}
 800d2d6:	4e0e      	ldr	r6, [pc, #56]	; (800d310 <sbrk_aligned+0x3c>)
 800d2d8:	460c      	mov	r4, r1
 800d2da:	6831      	ldr	r1, [r6, #0]
 800d2dc:	4605      	mov	r5, r0
 800d2de:	b911      	cbnz	r1, 800d2e6 <sbrk_aligned+0x12>
 800d2e0:	f000 fb4a 	bl	800d978 <_sbrk_r>
 800d2e4:	6030      	str	r0, [r6, #0]
 800d2e6:	4621      	mov	r1, r4
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	f000 fb45 	bl	800d978 <_sbrk_r>
 800d2ee:	1c43      	adds	r3, r0, #1
 800d2f0:	d00a      	beq.n	800d308 <sbrk_aligned+0x34>
 800d2f2:	1cc4      	adds	r4, r0, #3
 800d2f4:	f024 0403 	bic.w	r4, r4, #3
 800d2f8:	42a0      	cmp	r0, r4
 800d2fa:	d007      	beq.n	800d30c <sbrk_aligned+0x38>
 800d2fc:	1a21      	subs	r1, r4, r0
 800d2fe:	4628      	mov	r0, r5
 800d300:	f000 fb3a 	bl	800d978 <_sbrk_r>
 800d304:	3001      	adds	r0, #1
 800d306:	d101      	bne.n	800d30c <sbrk_aligned+0x38>
 800d308:	f04f 34ff 	mov.w	r4, #4294967295
 800d30c:	4620      	mov	r0, r4
 800d30e:	bd70      	pop	{r4, r5, r6, pc}
 800d310:	200004c8 	.word	0x200004c8

0800d314 <_malloc_r>:
 800d314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d318:	1ccd      	adds	r5, r1, #3
 800d31a:	f025 0503 	bic.w	r5, r5, #3
 800d31e:	3508      	adds	r5, #8
 800d320:	2d0c      	cmp	r5, #12
 800d322:	bf38      	it	cc
 800d324:	250c      	movcc	r5, #12
 800d326:	2d00      	cmp	r5, #0
 800d328:	4607      	mov	r7, r0
 800d32a:	db01      	blt.n	800d330 <_malloc_r+0x1c>
 800d32c:	42a9      	cmp	r1, r5
 800d32e:	d905      	bls.n	800d33c <_malloc_r+0x28>
 800d330:	230c      	movs	r3, #12
 800d332:	603b      	str	r3, [r7, #0]
 800d334:	2600      	movs	r6, #0
 800d336:	4630      	mov	r0, r6
 800d338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d33c:	4e2e      	ldr	r6, [pc, #184]	; (800d3f8 <_malloc_r+0xe4>)
 800d33e:	f000 fe4f 	bl	800dfe0 <__malloc_lock>
 800d342:	6833      	ldr	r3, [r6, #0]
 800d344:	461c      	mov	r4, r3
 800d346:	bb34      	cbnz	r4, 800d396 <_malloc_r+0x82>
 800d348:	4629      	mov	r1, r5
 800d34a:	4638      	mov	r0, r7
 800d34c:	f7ff ffc2 	bl	800d2d4 <sbrk_aligned>
 800d350:	1c43      	adds	r3, r0, #1
 800d352:	4604      	mov	r4, r0
 800d354:	d14d      	bne.n	800d3f2 <_malloc_r+0xde>
 800d356:	6834      	ldr	r4, [r6, #0]
 800d358:	4626      	mov	r6, r4
 800d35a:	2e00      	cmp	r6, #0
 800d35c:	d140      	bne.n	800d3e0 <_malloc_r+0xcc>
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	4631      	mov	r1, r6
 800d362:	4638      	mov	r0, r7
 800d364:	eb04 0803 	add.w	r8, r4, r3
 800d368:	f000 fb06 	bl	800d978 <_sbrk_r>
 800d36c:	4580      	cmp	r8, r0
 800d36e:	d13a      	bne.n	800d3e6 <_malloc_r+0xd2>
 800d370:	6821      	ldr	r1, [r4, #0]
 800d372:	3503      	adds	r5, #3
 800d374:	1a6d      	subs	r5, r5, r1
 800d376:	f025 0503 	bic.w	r5, r5, #3
 800d37a:	3508      	adds	r5, #8
 800d37c:	2d0c      	cmp	r5, #12
 800d37e:	bf38      	it	cc
 800d380:	250c      	movcc	r5, #12
 800d382:	4629      	mov	r1, r5
 800d384:	4638      	mov	r0, r7
 800d386:	f7ff ffa5 	bl	800d2d4 <sbrk_aligned>
 800d38a:	3001      	adds	r0, #1
 800d38c:	d02b      	beq.n	800d3e6 <_malloc_r+0xd2>
 800d38e:	6823      	ldr	r3, [r4, #0]
 800d390:	442b      	add	r3, r5
 800d392:	6023      	str	r3, [r4, #0]
 800d394:	e00e      	b.n	800d3b4 <_malloc_r+0xa0>
 800d396:	6822      	ldr	r2, [r4, #0]
 800d398:	1b52      	subs	r2, r2, r5
 800d39a:	d41e      	bmi.n	800d3da <_malloc_r+0xc6>
 800d39c:	2a0b      	cmp	r2, #11
 800d39e:	d916      	bls.n	800d3ce <_malloc_r+0xba>
 800d3a0:	1961      	adds	r1, r4, r5
 800d3a2:	42a3      	cmp	r3, r4
 800d3a4:	6025      	str	r5, [r4, #0]
 800d3a6:	bf18      	it	ne
 800d3a8:	6059      	strne	r1, [r3, #4]
 800d3aa:	6863      	ldr	r3, [r4, #4]
 800d3ac:	bf08      	it	eq
 800d3ae:	6031      	streq	r1, [r6, #0]
 800d3b0:	5162      	str	r2, [r4, r5]
 800d3b2:	604b      	str	r3, [r1, #4]
 800d3b4:	4638      	mov	r0, r7
 800d3b6:	f104 060b 	add.w	r6, r4, #11
 800d3ba:	f000 fe17 	bl	800dfec <__malloc_unlock>
 800d3be:	f026 0607 	bic.w	r6, r6, #7
 800d3c2:	1d23      	adds	r3, r4, #4
 800d3c4:	1af2      	subs	r2, r6, r3
 800d3c6:	d0b6      	beq.n	800d336 <_malloc_r+0x22>
 800d3c8:	1b9b      	subs	r3, r3, r6
 800d3ca:	50a3      	str	r3, [r4, r2]
 800d3cc:	e7b3      	b.n	800d336 <_malloc_r+0x22>
 800d3ce:	6862      	ldr	r2, [r4, #4]
 800d3d0:	42a3      	cmp	r3, r4
 800d3d2:	bf0c      	ite	eq
 800d3d4:	6032      	streq	r2, [r6, #0]
 800d3d6:	605a      	strne	r2, [r3, #4]
 800d3d8:	e7ec      	b.n	800d3b4 <_malloc_r+0xa0>
 800d3da:	4623      	mov	r3, r4
 800d3dc:	6864      	ldr	r4, [r4, #4]
 800d3de:	e7b2      	b.n	800d346 <_malloc_r+0x32>
 800d3e0:	4634      	mov	r4, r6
 800d3e2:	6876      	ldr	r6, [r6, #4]
 800d3e4:	e7b9      	b.n	800d35a <_malloc_r+0x46>
 800d3e6:	230c      	movs	r3, #12
 800d3e8:	603b      	str	r3, [r7, #0]
 800d3ea:	4638      	mov	r0, r7
 800d3ec:	f000 fdfe 	bl	800dfec <__malloc_unlock>
 800d3f0:	e7a1      	b.n	800d336 <_malloc_r+0x22>
 800d3f2:	6025      	str	r5, [r4, #0]
 800d3f4:	e7de      	b.n	800d3b4 <_malloc_r+0xa0>
 800d3f6:	bf00      	nop
 800d3f8:	200004c4 	.word	0x200004c4

0800d3fc <__ssputs_r>:
 800d3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d400:	688e      	ldr	r6, [r1, #8]
 800d402:	429e      	cmp	r6, r3
 800d404:	4682      	mov	sl, r0
 800d406:	460c      	mov	r4, r1
 800d408:	4690      	mov	r8, r2
 800d40a:	461f      	mov	r7, r3
 800d40c:	d838      	bhi.n	800d480 <__ssputs_r+0x84>
 800d40e:	898a      	ldrh	r2, [r1, #12]
 800d410:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d414:	d032      	beq.n	800d47c <__ssputs_r+0x80>
 800d416:	6825      	ldr	r5, [r4, #0]
 800d418:	6909      	ldr	r1, [r1, #16]
 800d41a:	eba5 0901 	sub.w	r9, r5, r1
 800d41e:	6965      	ldr	r5, [r4, #20]
 800d420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d428:	3301      	adds	r3, #1
 800d42a:	444b      	add	r3, r9
 800d42c:	106d      	asrs	r5, r5, #1
 800d42e:	429d      	cmp	r5, r3
 800d430:	bf38      	it	cc
 800d432:	461d      	movcc	r5, r3
 800d434:	0553      	lsls	r3, r2, #21
 800d436:	d531      	bpl.n	800d49c <__ssputs_r+0xa0>
 800d438:	4629      	mov	r1, r5
 800d43a:	f7ff ff6b 	bl	800d314 <_malloc_r>
 800d43e:	4606      	mov	r6, r0
 800d440:	b950      	cbnz	r0, 800d458 <__ssputs_r+0x5c>
 800d442:	230c      	movs	r3, #12
 800d444:	f8ca 3000 	str.w	r3, [sl]
 800d448:	89a3      	ldrh	r3, [r4, #12]
 800d44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d44e:	81a3      	strh	r3, [r4, #12]
 800d450:	f04f 30ff 	mov.w	r0, #4294967295
 800d454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d458:	6921      	ldr	r1, [r4, #16]
 800d45a:	464a      	mov	r2, r9
 800d45c:	f7fc f9a2 	bl	80097a4 <memcpy>
 800d460:	89a3      	ldrh	r3, [r4, #12]
 800d462:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d46a:	81a3      	strh	r3, [r4, #12]
 800d46c:	6126      	str	r6, [r4, #16]
 800d46e:	6165      	str	r5, [r4, #20]
 800d470:	444e      	add	r6, r9
 800d472:	eba5 0509 	sub.w	r5, r5, r9
 800d476:	6026      	str	r6, [r4, #0]
 800d478:	60a5      	str	r5, [r4, #8]
 800d47a:	463e      	mov	r6, r7
 800d47c:	42be      	cmp	r6, r7
 800d47e:	d900      	bls.n	800d482 <__ssputs_r+0x86>
 800d480:	463e      	mov	r6, r7
 800d482:	6820      	ldr	r0, [r4, #0]
 800d484:	4632      	mov	r2, r6
 800d486:	4641      	mov	r1, r8
 800d488:	f000 fd90 	bl	800dfac <memmove>
 800d48c:	68a3      	ldr	r3, [r4, #8]
 800d48e:	1b9b      	subs	r3, r3, r6
 800d490:	60a3      	str	r3, [r4, #8]
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	4433      	add	r3, r6
 800d496:	6023      	str	r3, [r4, #0]
 800d498:	2000      	movs	r0, #0
 800d49a:	e7db      	b.n	800d454 <__ssputs_r+0x58>
 800d49c:	462a      	mov	r2, r5
 800d49e:	f000 fdab 	bl	800dff8 <_realloc_r>
 800d4a2:	4606      	mov	r6, r0
 800d4a4:	2800      	cmp	r0, #0
 800d4a6:	d1e1      	bne.n	800d46c <__ssputs_r+0x70>
 800d4a8:	6921      	ldr	r1, [r4, #16]
 800d4aa:	4650      	mov	r0, sl
 800d4ac:	f7ff fec6 	bl	800d23c <_free_r>
 800d4b0:	e7c7      	b.n	800d442 <__ssputs_r+0x46>
	...

0800d4b4 <_svfiprintf_r>:
 800d4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b8:	4698      	mov	r8, r3
 800d4ba:	898b      	ldrh	r3, [r1, #12]
 800d4bc:	061b      	lsls	r3, r3, #24
 800d4be:	b09d      	sub	sp, #116	; 0x74
 800d4c0:	4607      	mov	r7, r0
 800d4c2:	460d      	mov	r5, r1
 800d4c4:	4614      	mov	r4, r2
 800d4c6:	d50e      	bpl.n	800d4e6 <_svfiprintf_r+0x32>
 800d4c8:	690b      	ldr	r3, [r1, #16]
 800d4ca:	b963      	cbnz	r3, 800d4e6 <_svfiprintf_r+0x32>
 800d4cc:	2140      	movs	r1, #64	; 0x40
 800d4ce:	f7ff ff21 	bl	800d314 <_malloc_r>
 800d4d2:	6028      	str	r0, [r5, #0]
 800d4d4:	6128      	str	r0, [r5, #16]
 800d4d6:	b920      	cbnz	r0, 800d4e2 <_svfiprintf_r+0x2e>
 800d4d8:	230c      	movs	r3, #12
 800d4da:	603b      	str	r3, [r7, #0]
 800d4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e0:	e0d1      	b.n	800d686 <_svfiprintf_r+0x1d2>
 800d4e2:	2340      	movs	r3, #64	; 0x40
 800d4e4:	616b      	str	r3, [r5, #20]
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ea:	2320      	movs	r3, #32
 800d4ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4f4:	2330      	movs	r3, #48	; 0x30
 800d4f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d6a0 <_svfiprintf_r+0x1ec>
 800d4fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4fe:	f04f 0901 	mov.w	r9, #1
 800d502:	4623      	mov	r3, r4
 800d504:	469a      	mov	sl, r3
 800d506:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d50a:	b10a      	cbz	r2, 800d510 <_svfiprintf_r+0x5c>
 800d50c:	2a25      	cmp	r2, #37	; 0x25
 800d50e:	d1f9      	bne.n	800d504 <_svfiprintf_r+0x50>
 800d510:	ebba 0b04 	subs.w	fp, sl, r4
 800d514:	d00b      	beq.n	800d52e <_svfiprintf_r+0x7a>
 800d516:	465b      	mov	r3, fp
 800d518:	4622      	mov	r2, r4
 800d51a:	4629      	mov	r1, r5
 800d51c:	4638      	mov	r0, r7
 800d51e:	f7ff ff6d 	bl	800d3fc <__ssputs_r>
 800d522:	3001      	adds	r0, #1
 800d524:	f000 80aa 	beq.w	800d67c <_svfiprintf_r+0x1c8>
 800d528:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d52a:	445a      	add	r2, fp
 800d52c:	9209      	str	r2, [sp, #36]	; 0x24
 800d52e:	f89a 3000 	ldrb.w	r3, [sl]
 800d532:	2b00      	cmp	r3, #0
 800d534:	f000 80a2 	beq.w	800d67c <_svfiprintf_r+0x1c8>
 800d538:	2300      	movs	r3, #0
 800d53a:	f04f 32ff 	mov.w	r2, #4294967295
 800d53e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d542:	f10a 0a01 	add.w	sl, sl, #1
 800d546:	9304      	str	r3, [sp, #16]
 800d548:	9307      	str	r3, [sp, #28]
 800d54a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d54e:	931a      	str	r3, [sp, #104]	; 0x68
 800d550:	4654      	mov	r4, sl
 800d552:	2205      	movs	r2, #5
 800d554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d558:	4851      	ldr	r0, [pc, #324]	; (800d6a0 <_svfiprintf_r+0x1ec>)
 800d55a:	f7f2 fe69 	bl	8000230 <memchr>
 800d55e:	9a04      	ldr	r2, [sp, #16]
 800d560:	b9d8      	cbnz	r0, 800d59a <_svfiprintf_r+0xe6>
 800d562:	06d0      	lsls	r0, r2, #27
 800d564:	bf44      	itt	mi
 800d566:	2320      	movmi	r3, #32
 800d568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d56c:	0711      	lsls	r1, r2, #28
 800d56e:	bf44      	itt	mi
 800d570:	232b      	movmi	r3, #43	; 0x2b
 800d572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d576:	f89a 3000 	ldrb.w	r3, [sl]
 800d57a:	2b2a      	cmp	r3, #42	; 0x2a
 800d57c:	d015      	beq.n	800d5aa <_svfiprintf_r+0xf6>
 800d57e:	9a07      	ldr	r2, [sp, #28]
 800d580:	4654      	mov	r4, sl
 800d582:	2000      	movs	r0, #0
 800d584:	f04f 0c0a 	mov.w	ip, #10
 800d588:	4621      	mov	r1, r4
 800d58a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d58e:	3b30      	subs	r3, #48	; 0x30
 800d590:	2b09      	cmp	r3, #9
 800d592:	d94e      	bls.n	800d632 <_svfiprintf_r+0x17e>
 800d594:	b1b0      	cbz	r0, 800d5c4 <_svfiprintf_r+0x110>
 800d596:	9207      	str	r2, [sp, #28]
 800d598:	e014      	b.n	800d5c4 <_svfiprintf_r+0x110>
 800d59a:	eba0 0308 	sub.w	r3, r0, r8
 800d59e:	fa09 f303 	lsl.w	r3, r9, r3
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	9304      	str	r3, [sp, #16]
 800d5a6:	46a2      	mov	sl, r4
 800d5a8:	e7d2      	b.n	800d550 <_svfiprintf_r+0x9c>
 800d5aa:	9b03      	ldr	r3, [sp, #12]
 800d5ac:	1d19      	adds	r1, r3, #4
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	9103      	str	r1, [sp, #12]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	bfbb      	ittet	lt
 800d5b6:	425b      	neglt	r3, r3
 800d5b8:	f042 0202 	orrlt.w	r2, r2, #2
 800d5bc:	9307      	strge	r3, [sp, #28]
 800d5be:	9307      	strlt	r3, [sp, #28]
 800d5c0:	bfb8      	it	lt
 800d5c2:	9204      	strlt	r2, [sp, #16]
 800d5c4:	7823      	ldrb	r3, [r4, #0]
 800d5c6:	2b2e      	cmp	r3, #46	; 0x2e
 800d5c8:	d10c      	bne.n	800d5e4 <_svfiprintf_r+0x130>
 800d5ca:	7863      	ldrb	r3, [r4, #1]
 800d5cc:	2b2a      	cmp	r3, #42	; 0x2a
 800d5ce:	d135      	bne.n	800d63c <_svfiprintf_r+0x188>
 800d5d0:	9b03      	ldr	r3, [sp, #12]
 800d5d2:	1d1a      	adds	r2, r3, #4
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	9203      	str	r2, [sp, #12]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	bfb8      	it	lt
 800d5dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5e0:	3402      	adds	r4, #2
 800d5e2:	9305      	str	r3, [sp, #20]
 800d5e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d6b0 <_svfiprintf_r+0x1fc>
 800d5e8:	7821      	ldrb	r1, [r4, #0]
 800d5ea:	2203      	movs	r2, #3
 800d5ec:	4650      	mov	r0, sl
 800d5ee:	f7f2 fe1f 	bl	8000230 <memchr>
 800d5f2:	b140      	cbz	r0, 800d606 <_svfiprintf_r+0x152>
 800d5f4:	2340      	movs	r3, #64	; 0x40
 800d5f6:	eba0 000a 	sub.w	r0, r0, sl
 800d5fa:	fa03 f000 	lsl.w	r0, r3, r0
 800d5fe:	9b04      	ldr	r3, [sp, #16]
 800d600:	4303      	orrs	r3, r0
 800d602:	3401      	adds	r4, #1
 800d604:	9304      	str	r3, [sp, #16]
 800d606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d60a:	4826      	ldr	r0, [pc, #152]	; (800d6a4 <_svfiprintf_r+0x1f0>)
 800d60c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d610:	2206      	movs	r2, #6
 800d612:	f7f2 fe0d 	bl	8000230 <memchr>
 800d616:	2800      	cmp	r0, #0
 800d618:	d038      	beq.n	800d68c <_svfiprintf_r+0x1d8>
 800d61a:	4b23      	ldr	r3, [pc, #140]	; (800d6a8 <_svfiprintf_r+0x1f4>)
 800d61c:	bb1b      	cbnz	r3, 800d666 <_svfiprintf_r+0x1b2>
 800d61e:	9b03      	ldr	r3, [sp, #12]
 800d620:	3307      	adds	r3, #7
 800d622:	f023 0307 	bic.w	r3, r3, #7
 800d626:	3308      	adds	r3, #8
 800d628:	9303      	str	r3, [sp, #12]
 800d62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d62c:	4433      	add	r3, r6
 800d62e:	9309      	str	r3, [sp, #36]	; 0x24
 800d630:	e767      	b.n	800d502 <_svfiprintf_r+0x4e>
 800d632:	fb0c 3202 	mla	r2, ip, r2, r3
 800d636:	460c      	mov	r4, r1
 800d638:	2001      	movs	r0, #1
 800d63a:	e7a5      	b.n	800d588 <_svfiprintf_r+0xd4>
 800d63c:	2300      	movs	r3, #0
 800d63e:	3401      	adds	r4, #1
 800d640:	9305      	str	r3, [sp, #20]
 800d642:	4619      	mov	r1, r3
 800d644:	f04f 0c0a 	mov.w	ip, #10
 800d648:	4620      	mov	r0, r4
 800d64a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d64e:	3a30      	subs	r2, #48	; 0x30
 800d650:	2a09      	cmp	r2, #9
 800d652:	d903      	bls.n	800d65c <_svfiprintf_r+0x1a8>
 800d654:	2b00      	cmp	r3, #0
 800d656:	d0c5      	beq.n	800d5e4 <_svfiprintf_r+0x130>
 800d658:	9105      	str	r1, [sp, #20]
 800d65a:	e7c3      	b.n	800d5e4 <_svfiprintf_r+0x130>
 800d65c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d660:	4604      	mov	r4, r0
 800d662:	2301      	movs	r3, #1
 800d664:	e7f0      	b.n	800d648 <_svfiprintf_r+0x194>
 800d666:	ab03      	add	r3, sp, #12
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	462a      	mov	r2, r5
 800d66c:	4b0f      	ldr	r3, [pc, #60]	; (800d6ac <_svfiprintf_r+0x1f8>)
 800d66e:	a904      	add	r1, sp, #16
 800d670:	4638      	mov	r0, r7
 800d672:	f7fc f94d 	bl	8009910 <_printf_float>
 800d676:	1c42      	adds	r2, r0, #1
 800d678:	4606      	mov	r6, r0
 800d67a:	d1d6      	bne.n	800d62a <_svfiprintf_r+0x176>
 800d67c:	89ab      	ldrh	r3, [r5, #12]
 800d67e:	065b      	lsls	r3, r3, #25
 800d680:	f53f af2c 	bmi.w	800d4dc <_svfiprintf_r+0x28>
 800d684:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d686:	b01d      	add	sp, #116	; 0x74
 800d688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68c:	ab03      	add	r3, sp, #12
 800d68e:	9300      	str	r3, [sp, #0]
 800d690:	462a      	mov	r2, r5
 800d692:	4b06      	ldr	r3, [pc, #24]	; (800d6ac <_svfiprintf_r+0x1f8>)
 800d694:	a904      	add	r1, sp, #16
 800d696:	4638      	mov	r0, r7
 800d698:	f7fc fbde 	bl	8009e58 <_printf_i>
 800d69c:	e7eb      	b.n	800d676 <_svfiprintf_r+0x1c2>
 800d69e:	bf00      	nop
 800d6a0:	0800e7c4 	.word	0x0800e7c4
 800d6a4:	0800e7ce 	.word	0x0800e7ce
 800d6a8:	08009911 	.word	0x08009911
 800d6ac:	0800d3fd 	.word	0x0800d3fd
 800d6b0:	0800e7ca 	.word	0x0800e7ca

0800d6b4 <__sfputc_r>:
 800d6b4:	6893      	ldr	r3, [r2, #8]
 800d6b6:	3b01      	subs	r3, #1
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	b410      	push	{r4}
 800d6bc:	6093      	str	r3, [r2, #8]
 800d6be:	da08      	bge.n	800d6d2 <__sfputc_r+0x1e>
 800d6c0:	6994      	ldr	r4, [r2, #24]
 800d6c2:	42a3      	cmp	r3, r4
 800d6c4:	db01      	blt.n	800d6ca <__sfputc_r+0x16>
 800d6c6:	290a      	cmp	r1, #10
 800d6c8:	d103      	bne.n	800d6d2 <__sfputc_r+0x1e>
 800d6ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6ce:	f000 b977 	b.w	800d9c0 <__swbuf_r>
 800d6d2:	6813      	ldr	r3, [r2, #0]
 800d6d4:	1c58      	adds	r0, r3, #1
 800d6d6:	6010      	str	r0, [r2, #0]
 800d6d8:	7019      	strb	r1, [r3, #0]
 800d6da:	4608      	mov	r0, r1
 800d6dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6e0:	4770      	bx	lr

0800d6e2 <__sfputs_r>:
 800d6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6e4:	4606      	mov	r6, r0
 800d6e6:	460f      	mov	r7, r1
 800d6e8:	4614      	mov	r4, r2
 800d6ea:	18d5      	adds	r5, r2, r3
 800d6ec:	42ac      	cmp	r4, r5
 800d6ee:	d101      	bne.n	800d6f4 <__sfputs_r+0x12>
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	e007      	b.n	800d704 <__sfputs_r+0x22>
 800d6f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f8:	463a      	mov	r2, r7
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f7ff ffda 	bl	800d6b4 <__sfputc_r>
 800d700:	1c43      	adds	r3, r0, #1
 800d702:	d1f3      	bne.n	800d6ec <__sfputs_r+0xa>
 800d704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d708 <_vfiprintf_r>:
 800d708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d70c:	460d      	mov	r5, r1
 800d70e:	b09d      	sub	sp, #116	; 0x74
 800d710:	4614      	mov	r4, r2
 800d712:	4698      	mov	r8, r3
 800d714:	4606      	mov	r6, r0
 800d716:	b118      	cbz	r0, 800d720 <_vfiprintf_r+0x18>
 800d718:	6983      	ldr	r3, [r0, #24]
 800d71a:	b90b      	cbnz	r3, 800d720 <_vfiprintf_r+0x18>
 800d71c:	f000 fb40 	bl	800dda0 <__sinit>
 800d720:	4b89      	ldr	r3, [pc, #548]	; (800d948 <_vfiprintf_r+0x240>)
 800d722:	429d      	cmp	r5, r3
 800d724:	d11b      	bne.n	800d75e <_vfiprintf_r+0x56>
 800d726:	6875      	ldr	r5, [r6, #4]
 800d728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d72a:	07d9      	lsls	r1, r3, #31
 800d72c:	d405      	bmi.n	800d73a <_vfiprintf_r+0x32>
 800d72e:	89ab      	ldrh	r3, [r5, #12]
 800d730:	059a      	lsls	r2, r3, #22
 800d732:	d402      	bmi.n	800d73a <_vfiprintf_r+0x32>
 800d734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d736:	f000 fbd1 	bl	800dedc <__retarget_lock_acquire_recursive>
 800d73a:	89ab      	ldrh	r3, [r5, #12]
 800d73c:	071b      	lsls	r3, r3, #28
 800d73e:	d501      	bpl.n	800d744 <_vfiprintf_r+0x3c>
 800d740:	692b      	ldr	r3, [r5, #16]
 800d742:	b9eb      	cbnz	r3, 800d780 <_vfiprintf_r+0x78>
 800d744:	4629      	mov	r1, r5
 800d746:	4630      	mov	r0, r6
 800d748:	f000 f99a 	bl	800da80 <__swsetup_r>
 800d74c:	b1c0      	cbz	r0, 800d780 <_vfiprintf_r+0x78>
 800d74e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d750:	07dc      	lsls	r4, r3, #31
 800d752:	d50e      	bpl.n	800d772 <_vfiprintf_r+0x6a>
 800d754:	f04f 30ff 	mov.w	r0, #4294967295
 800d758:	b01d      	add	sp, #116	; 0x74
 800d75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d75e:	4b7b      	ldr	r3, [pc, #492]	; (800d94c <_vfiprintf_r+0x244>)
 800d760:	429d      	cmp	r5, r3
 800d762:	d101      	bne.n	800d768 <_vfiprintf_r+0x60>
 800d764:	68b5      	ldr	r5, [r6, #8]
 800d766:	e7df      	b.n	800d728 <_vfiprintf_r+0x20>
 800d768:	4b79      	ldr	r3, [pc, #484]	; (800d950 <_vfiprintf_r+0x248>)
 800d76a:	429d      	cmp	r5, r3
 800d76c:	bf08      	it	eq
 800d76e:	68f5      	ldreq	r5, [r6, #12]
 800d770:	e7da      	b.n	800d728 <_vfiprintf_r+0x20>
 800d772:	89ab      	ldrh	r3, [r5, #12]
 800d774:	0598      	lsls	r0, r3, #22
 800d776:	d4ed      	bmi.n	800d754 <_vfiprintf_r+0x4c>
 800d778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d77a:	f000 fbb0 	bl	800dede <__retarget_lock_release_recursive>
 800d77e:	e7e9      	b.n	800d754 <_vfiprintf_r+0x4c>
 800d780:	2300      	movs	r3, #0
 800d782:	9309      	str	r3, [sp, #36]	; 0x24
 800d784:	2320      	movs	r3, #32
 800d786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d78a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d78e:	2330      	movs	r3, #48	; 0x30
 800d790:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d954 <_vfiprintf_r+0x24c>
 800d794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d798:	f04f 0901 	mov.w	r9, #1
 800d79c:	4623      	mov	r3, r4
 800d79e:	469a      	mov	sl, r3
 800d7a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7a4:	b10a      	cbz	r2, 800d7aa <_vfiprintf_r+0xa2>
 800d7a6:	2a25      	cmp	r2, #37	; 0x25
 800d7a8:	d1f9      	bne.n	800d79e <_vfiprintf_r+0x96>
 800d7aa:	ebba 0b04 	subs.w	fp, sl, r4
 800d7ae:	d00b      	beq.n	800d7c8 <_vfiprintf_r+0xc0>
 800d7b0:	465b      	mov	r3, fp
 800d7b2:	4622      	mov	r2, r4
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	f7ff ff93 	bl	800d6e2 <__sfputs_r>
 800d7bc:	3001      	adds	r0, #1
 800d7be:	f000 80aa 	beq.w	800d916 <_vfiprintf_r+0x20e>
 800d7c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d7c4:	445a      	add	r2, fp
 800d7c6:	9209      	str	r2, [sp, #36]	; 0x24
 800d7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f000 80a2 	beq.w	800d916 <_vfiprintf_r+0x20e>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7dc:	f10a 0a01 	add.w	sl, sl, #1
 800d7e0:	9304      	str	r3, [sp, #16]
 800d7e2:	9307      	str	r3, [sp, #28]
 800d7e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7e8:	931a      	str	r3, [sp, #104]	; 0x68
 800d7ea:	4654      	mov	r4, sl
 800d7ec:	2205      	movs	r2, #5
 800d7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f2:	4858      	ldr	r0, [pc, #352]	; (800d954 <_vfiprintf_r+0x24c>)
 800d7f4:	f7f2 fd1c 	bl	8000230 <memchr>
 800d7f8:	9a04      	ldr	r2, [sp, #16]
 800d7fa:	b9d8      	cbnz	r0, 800d834 <_vfiprintf_r+0x12c>
 800d7fc:	06d1      	lsls	r1, r2, #27
 800d7fe:	bf44      	itt	mi
 800d800:	2320      	movmi	r3, #32
 800d802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d806:	0713      	lsls	r3, r2, #28
 800d808:	bf44      	itt	mi
 800d80a:	232b      	movmi	r3, #43	; 0x2b
 800d80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d810:	f89a 3000 	ldrb.w	r3, [sl]
 800d814:	2b2a      	cmp	r3, #42	; 0x2a
 800d816:	d015      	beq.n	800d844 <_vfiprintf_r+0x13c>
 800d818:	9a07      	ldr	r2, [sp, #28]
 800d81a:	4654      	mov	r4, sl
 800d81c:	2000      	movs	r0, #0
 800d81e:	f04f 0c0a 	mov.w	ip, #10
 800d822:	4621      	mov	r1, r4
 800d824:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d828:	3b30      	subs	r3, #48	; 0x30
 800d82a:	2b09      	cmp	r3, #9
 800d82c:	d94e      	bls.n	800d8cc <_vfiprintf_r+0x1c4>
 800d82e:	b1b0      	cbz	r0, 800d85e <_vfiprintf_r+0x156>
 800d830:	9207      	str	r2, [sp, #28]
 800d832:	e014      	b.n	800d85e <_vfiprintf_r+0x156>
 800d834:	eba0 0308 	sub.w	r3, r0, r8
 800d838:	fa09 f303 	lsl.w	r3, r9, r3
 800d83c:	4313      	orrs	r3, r2
 800d83e:	9304      	str	r3, [sp, #16]
 800d840:	46a2      	mov	sl, r4
 800d842:	e7d2      	b.n	800d7ea <_vfiprintf_r+0xe2>
 800d844:	9b03      	ldr	r3, [sp, #12]
 800d846:	1d19      	adds	r1, r3, #4
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	9103      	str	r1, [sp, #12]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	bfbb      	ittet	lt
 800d850:	425b      	neglt	r3, r3
 800d852:	f042 0202 	orrlt.w	r2, r2, #2
 800d856:	9307      	strge	r3, [sp, #28]
 800d858:	9307      	strlt	r3, [sp, #28]
 800d85a:	bfb8      	it	lt
 800d85c:	9204      	strlt	r2, [sp, #16]
 800d85e:	7823      	ldrb	r3, [r4, #0]
 800d860:	2b2e      	cmp	r3, #46	; 0x2e
 800d862:	d10c      	bne.n	800d87e <_vfiprintf_r+0x176>
 800d864:	7863      	ldrb	r3, [r4, #1]
 800d866:	2b2a      	cmp	r3, #42	; 0x2a
 800d868:	d135      	bne.n	800d8d6 <_vfiprintf_r+0x1ce>
 800d86a:	9b03      	ldr	r3, [sp, #12]
 800d86c:	1d1a      	adds	r2, r3, #4
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	9203      	str	r2, [sp, #12]
 800d872:	2b00      	cmp	r3, #0
 800d874:	bfb8      	it	lt
 800d876:	f04f 33ff 	movlt.w	r3, #4294967295
 800d87a:	3402      	adds	r4, #2
 800d87c:	9305      	str	r3, [sp, #20]
 800d87e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d964 <_vfiprintf_r+0x25c>
 800d882:	7821      	ldrb	r1, [r4, #0]
 800d884:	2203      	movs	r2, #3
 800d886:	4650      	mov	r0, sl
 800d888:	f7f2 fcd2 	bl	8000230 <memchr>
 800d88c:	b140      	cbz	r0, 800d8a0 <_vfiprintf_r+0x198>
 800d88e:	2340      	movs	r3, #64	; 0x40
 800d890:	eba0 000a 	sub.w	r0, r0, sl
 800d894:	fa03 f000 	lsl.w	r0, r3, r0
 800d898:	9b04      	ldr	r3, [sp, #16]
 800d89a:	4303      	orrs	r3, r0
 800d89c:	3401      	adds	r4, #1
 800d89e:	9304      	str	r3, [sp, #16]
 800d8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8a4:	482c      	ldr	r0, [pc, #176]	; (800d958 <_vfiprintf_r+0x250>)
 800d8a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d8aa:	2206      	movs	r2, #6
 800d8ac:	f7f2 fcc0 	bl	8000230 <memchr>
 800d8b0:	2800      	cmp	r0, #0
 800d8b2:	d03f      	beq.n	800d934 <_vfiprintf_r+0x22c>
 800d8b4:	4b29      	ldr	r3, [pc, #164]	; (800d95c <_vfiprintf_r+0x254>)
 800d8b6:	bb1b      	cbnz	r3, 800d900 <_vfiprintf_r+0x1f8>
 800d8b8:	9b03      	ldr	r3, [sp, #12]
 800d8ba:	3307      	adds	r3, #7
 800d8bc:	f023 0307 	bic.w	r3, r3, #7
 800d8c0:	3308      	adds	r3, #8
 800d8c2:	9303      	str	r3, [sp, #12]
 800d8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8c6:	443b      	add	r3, r7
 800d8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ca:	e767      	b.n	800d79c <_vfiprintf_r+0x94>
 800d8cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8d0:	460c      	mov	r4, r1
 800d8d2:	2001      	movs	r0, #1
 800d8d4:	e7a5      	b.n	800d822 <_vfiprintf_r+0x11a>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	3401      	adds	r4, #1
 800d8da:	9305      	str	r3, [sp, #20]
 800d8dc:	4619      	mov	r1, r3
 800d8de:	f04f 0c0a 	mov.w	ip, #10
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8e8:	3a30      	subs	r2, #48	; 0x30
 800d8ea:	2a09      	cmp	r2, #9
 800d8ec:	d903      	bls.n	800d8f6 <_vfiprintf_r+0x1ee>
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d0c5      	beq.n	800d87e <_vfiprintf_r+0x176>
 800d8f2:	9105      	str	r1, [sp, #20]
 800d8f4:	e7c3      	b.n	800d87e <_vfiprintf_r+0x176>
 800d8f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	e7f0      	b.n	800d8e2 <_vfiprintf_r+0x1da>
 800d900:	ab03      	add	r3, sp, #12
 800d902:	9300      	str	r3, [sp, #0]
 800d904:	462a      	mov	r2, r5
 800d906:	4b16      	ldr	r3, [pc, #88]	; (800d960 <_vfiprintf_r+0x258>)
 800d908:	a904      	add	r1, sp, #16
 800d90a:	4630      	mov	r0, r6
 800d90c:	f7fc f800 	bl	8009910 <_printf_float>
 800d910:	4607      	mov	r7, r0
 800d912:	1c78      	adds	r0, r7, #1
 800d914:	d1d6      	bne.n	800d8c4 <_vfiprintf_r+0x1bc>
 800d916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d918:	07d9      	lsls	r1, r3, #31
 800d91a:	d405      	bmi.n	800d928 <_vfiprintf_r+0x220>
 800d91c:	89ab      	ldrh	r3, [r5, #12]
 800d91e:	059a      	lsls	r2, r3, #22
 800d920:	d402      	bmi.n	800d928 <_vfiprintf_r+0x220>
 800d922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d924:	f000 fadb 	bl	800dede <__retarget_lock_release_recursive>
 800d928:	89ab      	ldrh	r3, [r5, #12]
 800d92a:	065b      	lsls	r3, r3, #25
 800d92c:	f53f af12 	bmi.w	800d754 <_vfiprintf_r+0x4c>
 800d930:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d932:	e711      	b.n	800d758 <_vfiprintf_r+0x50>
 800d934:	ab03      	add	r3, sp, #12
 800d936:	9300      	str	r3, [sp, #0]
 800d938:	462a      	mov	r2, r5
 800d93a:	4b09      	ldr	r3, [pc, #36]	; (800d960 <_vfiprintf_r+0x258>)
 800d93c:	a904      	add	r1, sp, #16
 800d93e:	4630      	mov	r0, r6
 800d940:	f7fc fa8a 	bl	8009e58 <_printf_i>
 800d944:	e7e4      	b.n	800d910 <_vfiprintf_r+0x208>
 800d946:	bf00      	nop
 800d948:	0800e7f8 	.word	0x0800e7f8
 800d94c:	0800e818 	.word	0x0800e818
 800d950:	0800e7d8 	.word	0x0800e7d8
 800d954:	0800e7c4 	.word	0x0800e7c4
 800d958:	0800e7ce 	.word	0x0800e7ce
 800d95c:	08009911 	.word	0x08009911
 800d960:	0800d6e3 	.word	0x0800d6e3
 800d964:	0800e7ca 	.word	0x0800e7ca

0800d968 <nan>:
 800d968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d970 <nan+0x8>
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	00000000 	.word	0x00000000
 800d974:	7ff80000 	.word	0x7ff80000

0800d978 <_sbrk_r>:
 800d978:	b538      	push	{r3, r4, r5, lr}
 800d97a:	4d06      	ldr	r5, [pc, #24]	; (800d994 <_sbrk_r+0x1c>)
 800d97c:	2300      	movs	r3, #0
 800d97e:	4604      	mov	r4, r0
 800d980:	4608      	mov	r0, r1
 800d982:	602b      	str	r3, [r5, #0]
 800d984:	f7f4 f9ea 	bl	8001d5c <_sbrk>
 800d988:	1c43      	adds	r3, r0, #1
 800d98a:	d102      	bne.n	800d992 <_sbrk_r+0x1a>
 800d98c:	682b      	ldr	r3, [r5, #0]
 800d98e:	b103      	cbz	r3, 800d992 <_sbrk_r+0x1a>
 800d990:	6023      	str	r3, [r4, #0]
 800d992:	bd38      	pop	{r3, r4, r5, pc}
 800d994:	200004d0 	.word	0x200004d0

0800d998 <strncmp>:
 800d998:	b510      	push	{r4, lr}
 800d99a:	b17a      	cbz	r2, 800d9bc <strncmp+0x24>
 800d99c:	4603      	mov	r3, r0
 800d99e:	3901      	subs	r1, #1
 800d9a0:	1884      	adds	r4, r0, r2
 800d9a2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d9a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d9aa:	4290      	cmp	r0, r2
 800d9ac:	d101      	bne.n	800d9b2 <strncmp+0x1a>
 800d9ae:	42a3      	cmp	r3, r4
 800d9b0:	d101      	bne.n	800d9b6 <strncmp+0x1e>
 800d9b2:	1a80      	subs	r0, r0, r2
 800d9b4:	bd10      	pop	{r4, pc}
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	d1f3      	bne.n	800d9a2 <strncmp+0xa>
 800d9ba:	e7fa      	b.n	800d9b2 <strncmp+0x1a>
 800d9bc:	4610      	mov	r0, r2
 800d9be:	e7f9      	b.n	800d9b4 <strncmp+0x1c>

0800d9c0 <__swbuf_r>:
 800d9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c2:	460e      	mov	r6, r1
 800d9c4:	4614      	mov	r4, r2
 800d9c6:	4605      	mov	r5, r0
 800d9c8:	b118      	cbz	r0, 800d9d2 <__swbuf_r+0x12>
 800d9ca:	6983      	ldr	r3, [r0, #24]
 800d9cc:	b90b      	cbnz	r3, 800d9d2 <__swbuf_r+0x12>
 800d9ce:	f000 f9e7 	bl	800dda0 <__sinit>
 800d9d2:	4b21      	ldr	r3, [pc, #132]	; (800da58 <__swbuf_r+0x98>)
 800d9d4:	429c      	cmp	r4, r3
 800d9d6:	d12b      	bne.n	800da30 <__swbuf_r+0x70>
 800d9d8:	686c      	ldr	r4, [r5, #4]
 800d9da:	69a3      	ldr	r3, [r4, #24]
 800d9dc:	60a3      	str	r3, [r4, #8]
 800d9de:	89a3      	ldrh	r3, [r4, #12]
 800d9e0:	071a      	lsls	r2, r3, #28
 800d9e2:	d52f      	bpl.n	800da44 <__swbuf_r+0x84>
 800d9e4:	6923      	ldr	r3, [r4, #16]
 800d9e6:	b36b      	cbz	r3, 800da44 <__swbuf_r+0x84>
 800d9e8:	6923      	ldr	r3, [r4, #16]
 800d9ea:	6820      	ldr	r0, [r4, #0]
 800d9ec:	1ac0      	subs	r0, r0, r3
 800d9ee:	6963      	ldr	r3, [r4, #20]
 800d9f0:	b2f6      	uxtb	r6, r6
 800d9f2:	4283      	cmp	r3, r0
 800d9f4:	4637      	mov	r7, r6
 800d9f6:	dc04      	bgt.n	800da02 <__swbuf_r+0x42>
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	f000 f93c 	bl	800dc78 <_fflush_r>
 800da00:	bb30      	cbnz	r0, 800da50 <__swbuf_r+0x90>
 800da02:	68a3      	ldr	r3, [r4, #8]
 800da04:	3b01      	subs	r3, #1
 800da06:	60a3      	str	r3, [r4, #8]
 800da08:	6823      	ldr	r3, [r4, #0]
 800da0a:	1c5a      	adds	r2, r3, #1
 800da0c:	6022      	str	r2, [r4, #0]
 800da0e:	701e      	strb	r6, [r3, #0]
 800da10:	6963      	ldr	r3, [r4, #20]
 800da12:	3001      	adds	r0, #1
 800da14:	4283      	cmp	r3, r0
 800da16:	d004      	beq.n	800da22 <__swbuf_r+0x62>
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	07db      	lsls	r3, r3, #31
 800da1c:	d506      	bpl.n	800da2c <__swbuf_r+0x6c>
 800da1e:	2e0a      	cmp	r6, #10
 800da20:	d104      	bne.n	800da2c <__swbuf_r+0x6c>
 800da22:	4621      	mov	r1, r4
 800da24:	4628      	mov	r0, r5
 800da26:	f000 f927 	bl	800dc78 <_fflush_r>
 800da2a:	b988      	cbnz	r0, 800da50 <__swbuf_r+0x90>
 800da2c:	4638      	mov	r0, r7
 800da2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da30:	4b0a      	ldr	r3, [pc, #40]	; (800da5c <__swbuf_r+0x9c>)
 800da32:	429c      	cmp	r4, r3
 800da34:	d101      	bne.n	800da3a <__swbuf_r+0x7a>
 800da36:	68ac      	ldr	r4, [r5, #8]
 800da38:	e7cf      	b.n	800d9da <__swbuf_r+0x1a>
 800da3a:	4b09      	ldr	r3, [pc, #36]	; (800da60 <__swbuf_r+0xa0>)
 800da3c:	429c      	cmp	r4, r3
 800da3e:	bf08      	it	eq
 800da40:	68ec      	ldreq	r4, [r5, #12]
 800da42:	e7ca      	b.n	800d9da <__swbuf_r+0x1a>
 800da44:	4621      	mov	r1, r4
 800da46:	4628      	mov	r0, r5
 800da48:	f000 f81a 	bl	800da80 <__swsetup_r>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d0cb      	beq.n	800d9e8 <__swbuf_r+0x28>
 800da50:	f04f 37ff 	mov.w	r7, #4294967295
 800da54:	e7ea      	b.n	800da2c <__swbuf_r+0x6c>
 800da56:	bf00      	nop
 800da58:	0800e7f8 	.word	0x0800e7f8
 800da5c:	0800e818 	.word	0x0800e818
 800da60:	0800e7d8 	.word	0x0800e7d8

0800da64 <__ascii_wctomb>:
 800da64:	b149      	cbz	r1, 800da7a <__ascii_wctomb+0x16>
 800da66:	2aff      	cmp	r2, #255	; 0xff
 800da68:	bf85      	ittet	hi
 800da6a:	238a      	movhi	r3, #138	; 0x8a
 800da6c:	6003      	strhi	r3, [r0, #0]
 800da6e:	700a      	strbls	r2, [r1, #0]
 800da70:	f04f 30ff 	movhi.w	r0, #4294967295
 800da74:	bf98      	it	ls
 800da76:	2001      	movls	r0, #1
 800da78:	4770      	bx	lr
 800da7a:	4608      	mov	r0, r1
 800da7c:	4770      	bx	lr
	...

0800da80 <__swsetup_r>:
 800da80:	4b32      	ldr	r3, [pc, #200]	; (800db4c <__swsetup_r+0xcc>)
 800da82:	b570      	push	{r4, r5, r6, lr}
 800da84:	681d      	ldr	r5, [r3, #0]
 800da86:	4606      	mov	r6, r0
 800da88:	460c      	mov	r4, r1
 800da8a:	b125      	cbz	r5, 800da96 <__swsetup_r+0x16>
 800da8c:	69ab      	ldr	r3, [r5, #24]
 800da8e:	b913      	cbnz	r3, 800da96 <__swsetup_r+0x16>
 800da90:	4628      	mov	r0, r5
 800da92:	f000 f985 	bl	800dda0 <__sinit>
 800da96:	4b2e      	ldr	r3, [pc, #184]	; (800db50 <__swsetup_r+0xd0>)
 800da98:	429c      	cmp	r4, r3
 800da9a:	d10f      	bne.n	800dabc <__swsetup_r+0x3c>
 800da9c:	686c      	ldr	r4, [r5, #4]
 800da9e:	89a3      	ldrh	r3, [r4, #12]
 800daa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800daa4:	0719      	lsls	r1, r3, #28
 800daa6:	d42c      	bmi.n	800db02 <__swsetup_r+0x82>
 800daa8:	06dd      	lsls	r5, r3, #27
 800daaa:	d411      	bmi.n	800dad0 <__swsetup_r+0x50>
 800daac:	2309      	movs	r3, #9
 800daae:	6033      	str	r3, [r6, #0]
 800dab0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dab4:	81a3      	strh	r3, [r4, #12]
 800dab6:	f04f 30ff 	mov.w	r0, #4294967295
 800daba:	e03e      	b.n	800db3a <__swsetup_r+0xba>
 800dabc:	4b25      	ldr	r3, [pc, #148]	; (800db54 <__swsetup_r+0xd4>)
 800dabe:	429c      	cmp	r4, r3
 800dac0:	d101      	bne.n	800dac6 <__swsetup_r+0x46>
 800dac2:	68ac      	ldr	r4, [r5, #8]
 800dac4:	e7eb      	b.n	800da9e <__swsetup_r+0x1e>
 800dac6:	4b24      	ldr	r3, [pc, #144]	; (800db58 <__swsetup_r+0xd8>)
 800dac8:	429c      	cmp	r4, r3
 800daca:	bf08      	it	eq
 800dacc:	68ec      	ldreq	r4, [r5, #12]
 800dace:	e7e6      	b.n	800da9e <__swsetup_r+0x1e>
 800dad0:	0758      	lsls	r0, r3, #29
 800dad2:	d512      	bpl.n	800dafa <__swsetup_r+0x7a>
 800dad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dad6:	b141      	cbz	r1, 800daea <__swsetup_r+0x6a>
 800dad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dadc:	4299      	cmp	r1, r3
 800dade:	d002      	beq.n	800dae6 <__swsetup_r+0x66>
 800dae0:	4630      	mov	r0, r6
 800dae2:	f7ff fbab 	bl	800d23c <_free_r>
 800dae6:	2300      	movs	r3, #0
 800dae8:	6363      	str	r3, [r4, #52]	; 0x34
 800daea:	89a3      	ldrh	r3, [r4, #12]
 800daec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800daf0:	81a3      	strh	r3, [r4, #12]
 800daf2:	2300      	movs	r3, #0
 800daf4:	6063      	str	r3, [r4, #4]
 800daf6:	6923      	ldr	r3, [r4, #16]
 800daf8:	6023      	str	r3, [r4, #0]
 800dafa:	89a3      	ldrh	r3, [r4, #12]
 800dafc:	f043 0308 	orr.w	r3, r3, #8
 800db00:	81a3      	strh	r3, [r4, #12]
 800db02:	6923      	ldr	r3, [r4, #16]
 800db04:	b94b      	cbnz	r3, 800db1a <__swsetup_r+0x9a>
 800db06:	89a3      	ldrh	r3, [r4, #12]
 800db08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db10:	d003      	beq.n	800db1a <__swsetup_r+0x9a>
 800db12:	4621      	mov	r1, r4
 800db14:	4630      	mov	r0, r6
 800db16:	f000 fa09 	bl	800df2c <__smakebuf_r>
 800db1a:	89a0      	ldrh	r0, [r4, #12]
 800db1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db20:	f010 0301 	ands.w	r3, r0, #1
 800db24:	d00a      	beq.n	800db3c <__swsetup_r+0xbc>
 800db26:	2300      	movs	r3, #0
 800db28:	60a3      	str	r3, [r4, #8]
 800db2a:	6963      	ldr	r3, [r4, #20]
 800db2c:	425b      	negs	r3, r3
 800db2e:	61a3      	str	r3, [r4, #24]
 800db30:	6923      	ldr	r3, [r4, #16]
 800db32:	b943      	cbnz	r3, 800db46 <__swsetup_r+0xc6>
 800db34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db38:	d1ba      	bne.n	800dab0 <__swsetup_r+0x30>
 800db3a:	bd70      	pop	{r4, r5, r6, pc}
 800db3c:	0781      	lsls	r1, r0, #30
 800db3e:	bf58      	it	pl
 800db40:	6963      	ldrpl	r3, [r4, #20]
 800db42:	60a3      	str	r3, [r4, #8]
 800db44:	e7f4      	b.n	800db30 <__swsetup_r+0xb0>
 800db46:	2000      	movs	r0, #0
 800db48:	e7f7      	b.n	800db3a <__swsetup_r+0xba>
 800db4a:	bf00      	nop
 800db4c:	2000001c 	.word	0x2000001c
 800db50:	0800e7f8 	.word	0x0800e7f8
 800db54:	0800e818 	.word	0x0800e818
 800db58:	0800e7d8 	.word	0x0800e7d8

0800db5c <abort>:
 800db5c:	b508      	push	{r3, lr}
 800db5e:	2006      	movs	r0, #6
 800db60:	f000 faa2 	bl	800e0a8 <raise>
 800db64:	2001      	movs	r0, #1
 800db66:	f7f4 f881 	bl	8001c6c <_exit>
	...

0800db6c <__sflush_r>:
 800db6c:	898a      	ldrh	r2, [r1, #12]
 800db6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db72:	4605      	mov	r5, r0
 800db74:	0710      	lsls	r0, r2, #28
 800db76:	460c      	mov	r4, r1
 800db78:	d458      	bmi.n	800dc2c <__sflush_r+0xc0>
 800db7a:	684b      	ldr	r3, [r1, #4]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	dc05      	bgt.n	800db8c <__sflush_r+0x20>
 800db80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db82:	2b00      	cmp	r3, #0
 800db84:	dc02      	bgt.n	800db8c <__sflush_r+0x20>
 800db86:	2000      	movs	r0, #0
 800db88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db8e:	2e00      	cmp	r6, #0
 800db90:	d0f9      	beq.n	800db86 <__sflush_r+0x1a>
 800db92:	2300      	movs	r3, #0
 800db94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db98:	682f      	ldr	r7, [r5, #0]
 800db9a:	602b      	str	r3, [r5, #0]
 800db9c:	d032      	beq.n	800dc04 <__sflush_r+0x98>
 800db9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dba0:	89a3      	ldrh	r3, [r4, #12]
 800dba2:	075a      	lsls	r2, r3, #29
 800dba4:	d505      	bpl.n	800dbb2 <__sflush_r+0x46>
 800dba6:	6863      	ldr	r3, [r4, #4]
 800dba8:	1ac0      	subs	r0, r0, r3
 800dbaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbac:	b10b      	cbz	r3, 800dbb2 <__sflush_r+0x46>
 800dbae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dbb0:	1ac0      	subs	r0, r0, r3
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbb8:	6a21      	ldr	r1, [r4, #32]
 800dbba:	4628      	mov	r0, r5
 800dbbc:	47b0      	blx	r6
 800dbbe:	1c43      	adds	r3, r0, #1
 800dbc0:	89a3      	ldrh	r3, [r4, #12]
 800dbc2:	d106      	bne.n	800dbd2 <__sflush_r+0x66>
 800dbc4:	6829      	ldr	r1, [r5, #0]
 800dbc6:	291d      	cmp	r1, #29
 800dbc8:	d82c      	bhi.n	800dc24 <__sflush_r+0xb8>
 800dbca:	4a2a      	ldr	r2, [pc, #168]	; (800dc74 <__sflush_r+0x108>)
 800dbcc:	40ca      	lsrs	r2, r1
 800dbce:	07d6      	lsls	r6, r2, #31
 800dbd0:	d528      	bpl.n	800dc24 <__sflush_r+0xb8>
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	6062      	str	r2, [r4, #4]
 800dbd6:	04d9      	lsls	r1, r3, #19
 800dbd8:	6922      	ldr	r2, [r4, #16]
 800dbda:	6022      	str	r2, [r4, #0]
 800dbdc:	d504      	bpl.n	800dbe8 <__sflush_r+0x7c>
 800dbde:	1c42      	adds	r2, r0, #1
 800dbe0:	d101      	bne.n	800dbe6 <__sflush_r+0x7a>
 800dbe2:	682b      	ldr	r3, [r5, #0]
 800dbe4:	b903      	cbnz	r3, 800dbe8 <__sflush_r+0x7c>
 800dbe6:	6560      	str	r0, [r4, #84]	; 0x54
 800dbe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbea:	602f      	str	r7, [r5, #0]
 800dbec:	2900      	cmp	r1, #0
 800dbee:	d0ca      	beq.n	800db86 <__sflush_r+0x1a>
 800dbf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbf4:	4299      	cmp	r1, r3
 800dbf6:	d002      	beq.n	800dbfe <__sflush_r+0x92>
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	f7ff fb1f 	bl	800d23c <_free_r>
 800dbfe:	2000      	movs	r0, #0
 800dc00:	6360      	str	r0, [r4, #52]	; 0x34
 800dc02:	e7c1      	b.n	800db88 <__sflush_r+0x1c>
 800dc04:	6a21      	ldr	r1, [r4, #32]
 800dc06:	2301      	movs	r3, #1
 800dc08:	4628      	mov	r0, r5
 800dc0a:	47b0      	blx	r6
 800dc0c:	1c41      	adds	r1, r0, #1
 800dc0e:	d1c7      	bne.n	800dba0 <__sflush_r+0x34>
 800dc10:	682b      	ldr	r3, [r5, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d0c4      	beq.n	800dba0 <__sflush_r+0x34>
 800dc16:	2b1d      	cmp	r3, #29
 800dc18:	d001      	beq.n	800dc1e <__sflush_r+0xb2>
 800dc1a:	2b16      	cmp	r3, #22
 800dc1c:	d101      	bne.n	800dc22 <__sflush_r+0xb6>
 800dc1e:	602f      	str	r7, [r5, #0]
 800dc20:	e7b1      	b.n	800db86 <__sflush_r+0x1a>
 800dc22:	89a3      	ldrh	r3, [r4, #12]
 800dc24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc28:	81a3      	strh	r3, [r4, #12]
 800dc2a:	e7ad      	b.n	800db88 <__sflush_r+0x1c>
 800dc2c:	690f      	ldr	r7, [r1, #16]
 800dc2e:	2f00      	cmp	r7, #0
 800dc30:	d0a9      	beq.n	800db86 <__sflush_r+0x1a>
 800dc32:	0793      	lsls	r3, r2, #30
 800dc34:	680e      	ldr	r6, [r1, #0]
 800dc36:	bf08      	it	eq
 800dc38:	694b      	ldreq	r3, [r1, #20]
 800dc3a:	600f      	str	r7, [r1, #0]
 800dc3c:	bf18      	it	ne
 800dc3e:	2300      	movne	r3, #0
 800dc40:	eba6 0807 	sub.w	r8, r6, r7
 800dc44:	608b      	str	r3, [r1, #8]
 800dc46:	f1b8 0f00 	cmp.w	r8, #0
 800dc4a:	dd9c      	ble.n	800db86 <__sflush_r+0x1a>
 800dc4c:	6a21      	ldr	r1, [r4, #32]
 800dc4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc50:	4643      	mov	r3, r8
 800dc52:	463a      	mov	r2, r7
 800dc54:	4628      	mov	r0, r5
 800dc56:	47b0      	blx	r6
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	dc06      	bgt.n	800dc6a <__sflush_r+0xfe>
 800dc5c:	89a3      	ldrh	r3, [r4, #12]
 800dc5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc62:	81a3      	strh	r3, [r4, #12]
 800dc64:	f04f 30ff 	mov.w	r0, #4294967295
 800dc68:	e78e      	b.n	800db88 <__sflush_r+0x1c>
 800dc6a:	4407      	add	r7, r0
 800dc6c:	eba8 0800 	sub.w	r8, r8, r0
 800dc70:	e7e9      	b.n	800dc46 <__sflush_r+0xda>
 800dc72:	bf00      	nop
 800dc74:	20400001 	.word	0x20400001

0800dc78 <_fflush_r>:
 800dc78:	b538      	push	{r3, r4, r5, lr}
 800dc7a:	690b      	ldr	r3, [r1, #16]
 800dc7c:	4605      	mov	r5, r0
 800dc7e:	460c      	mov	r4, r1
 800dc80:	b913      	cbnz	r3, 800dc88 <_fflush_r+0x10>
 800dc82:	2500      	movs	r5, #0
 800dc84:	4628      	mov	r0, r5
 800dc86:	bd38      	pop	{r3, r4, r5, pc}
 800dc88:	b118      	cbz	r0, 800dc92 <_fflush_r+0x1a>
 800dc8a:	6983      	ldr	r3, [r0, #24]
 800dc8c:	b90b      	cbnz	r3, 800dc92 <_fflush_r+0x1a>
 800dc8e:	f000 f887 	bl	800dda0 <__sinit>
 800dc92:	4b14      	ldr	r3, [pc, #80]	; (800dce4 <_fflush_r+0x6c>)
 800dc94:	429c      	cmp	r4, r3
 800dc96:	d11b      	bne.n	800dcd0 <_fflush_r+0x58>
 800dc98:	686c      	ldr	r4, [r5, #4]
 800dc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d0ef      	beq.n	800dc82 <_fflush_r+0xa>
 800dca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dca4:	07d0      	lsls	r0, r2, #31
 800dca6:	d404      	bmi.n	800dcb2 <_fflush_r+0x3a>
 800dca8:	0599      	lsls	r1, r3, #22
 800dcaa:	d402      	bmi.n	800dcb2 <_fflush_r+0x3a>
 800dcac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcae:	f000 f915 	bl	800dedc <__retarget_lock_acquire_recursive>
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	f7ff ff59 	bl	800db6c <__sflush_r>
 800dcba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcbc:	07da      	lsls	r2, r3, #31
 800dcbe:	4605      	mov	r5, r0
 800dcc0:	d4e0      	bmi.n	800dc84 <_fflush_r+0xc>
 800dcc2:	89a3      	ldrh	r3, [r4, #12]
 800dcc4:	059b      	lsls	r3, r3, #22
 800dcc6:	d4dd      	bmi.n	800dc84 <_fflush_r+0xc>
 800dcc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcca:	f000 f908 	bl	800dede <__retarget_lock_release_recursive>
 800dcce:	e7d9      	b.n	800dc84 <_fflush_r+0xc>
 800dcd0:	4b05      	ldr	r3, [pc, #20]	; (800dce8 <_fflush_r+0x70>)
 800dcd2:	429c      	cmp	r4, r3
 800dcd4:	d101      	bne.n	800dcda <_fflush_r+0x62>
 800dcd6:	68ac      	ldr	r4, [r5, #8]
 800dcd8:	e7df      	b.n	800dc9a <_fflush_r+0x22>
 800dcda:	4b04      	ldr	r3, [pc, #16]	; (800dcec <_fflush_r+0x74>)
 800dcdc:	429c      	cmp	r4, r3
 800dcde:	bf08      	it	eq
 800dce0:	68ec      	ldreq	r4, [r5, #12]
 800dce2:	e7da      	b.n	800dc9a <_fflush_r+0x22>
 800dce4:	0800e7f8 	.word	0x0800e7f8
 800dce8:	0800e818 	.word	0x0800e818
 800dcec:	0800e7d8 	.word	0x0800e7d8

0800dcf0 <std>:
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	b510      	push	{r4, lr}
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	e9c0 3300 	strd	r3, r3, [r0]
 800dcfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcfe:	6083      	str	r3, [r0, #8]
 800dd00:	8181      	strh	r1, [r0, #12]
 800dd02:	6643      	str	r3, [r0, #100]	; 0x64
 800dd04:	81c2      	strh	r2, [r0, #14]
 800dd06:	6183      	str	r3, [r0, #24]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	2208      	movs	r2, #8
 800dd0c:	305c      	adds	r0, #92	; 0x5c
 800dd0e:	f7fb fd57 	bl	80097c0 <memset>
 800dd12:	4b05      	ldr	r3, [pc, #20]	; (800dd28 <std+0x38>)
 800dd14:	6263      	str	r3, [r4, #36]	; 0x24
 800dd16:	4b05      	ldr	r3, [pc, #20]	; (800dd2c <std+0x3c>)
 800dd18:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd1a:	4b05      	ldr	r3, [pc, #20]	; (800dd30 <std+0x40>)
 800dd1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dd1e:	4b05      	ldr	r3, [pc, #20]	; (800dd34 <std+0x44>)
 800dd20:	6224      	str	r4, [r4, #32]
 800dd22:	6323      	str	r3, [r4, #48]	; 0x30
 800dd24:	bd10      	pop	{r4, pc}
 800dd26:	bf00      	nop
 800dd28:	0800e0e1 	.word	0x0800e0e1
 800dd2c:	0800e103 	.word	0x0800e103
 800dd30:	0800e13b 	.word	0x0800e13b
 800dd34:	0800e15f 	.word	0x0800e15f

0800dd38 <_cleanup_r>:
 800dd38:	4901      	ldr	r1, [pc, #4]	; (800dd40 <_cleanup_r+0x8>)
 800dd3a:	f000 b8af 	b.w	800de9c <_fwalk_reent>
 800dd3e:	bf00      	nop
 800dd40:	0800dc79 	.word	0x0800dc79

0800dd44 <__sfmoreglue>:
 800dd44:	b570      	push	{r4, r5, r6, lr}
 800dd46:	2268      	movs	r2, #104	; 0x68
 800dd48:	1e4d      	subs	r5, r1, #1
 800dd4a:	4355      	muls	r5, r2
 800dd4c:	460e      	mov	r6, r1
 800dd4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dd52:	f7ff fadf 	bl	800d314 <_malloc_r>
 800dd56:	4604      	mov	r4, r0
 800dd58:	b140      	cbz	r0, 800dd6c <__sfmoreglue+0x28>
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	e9c0 1600 	strd	r1, r6, [r0]
 800dd60:	300c      	adds	r0, #12
 800dd62:	60a0      	str	r0, [r4, #8]
 800dd64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd68:	f7fb fd2a 	bl	80097c0 <memset>
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	bd70      	pop	{r4, r5, r6, pc}

0800dd70 <__sfp_lock_acquire>:
 800dd70:	4801      	ldr	r0, [pc, #4]	; (800dd78 <__sfp_lock_acquire+0x8>)
 800dd72:	f000 b8b3 	b.w	800dedc <__retarget_lock_acquire_recursive>
 800dd76:	bf00      	nop
 800dd78:	200004cd 	.word	0x200004cd

0800dd7c <__sfp_lock_release>:
 800dd7c:	4801      	ldr	r0, [pc, #4]	; (800dd84 <__sfp_lock_release+0x8>)
 800dd7e:	f000 b8ae 	b.w	800dede <__retarget_lock_release_recursive>
 800dd82:	bf00      	nop
 800dd84:	200004cd 	.word	0x200004cd

0800dd88 <__sinit_lock_acquire>:
 800dd88:	4801      	ldr	r0, [pc, #4]	; (800dd90 <__sinit_lock_acquire+0x8>)
 800dd8a:	f000 b8a7 	b.w	800dedc <__retarget_lock_acquire_recursive>
 800dd8e:	bf00      	nop
 800dd90:	200004ce 	.word	0x200004ce

0800dd94 <__sinit_lock_release>:
 800dd94:	4801      	ldr	r0, [pc, #4]	; (800dd9c <__sinit_lock_release+0x8>)
 800dd96:	f000 b8a2 	b.w	800dede <__retarget_lock_release_recursive>
 800dd9a:	bf00      	nop
 800dd9c:	200004ce 	.word	0x200004ce

0800dda0 <__sinit>:
 800dda0:	b510      	push	{r4, lr}
 800dda2:	4604      	mov	r4, r0
 800dda4:	f7ff fff0 	bl	800dd88 <__sinit_lock_acquire>
 800dda8:	69a3      	ldr	r3, [r4, #24]
 800ddaa:	b11b      	cbz	r3, 800ddb4 <__sinit+0x14>
 800ddac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddb0:	f7ff bff0 	b.w	800dd94 <__sinit_lock_release>
 800ddb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ddb8:	6523      	str	r3, [r4, #80]	; 0x50
 800ddba:	4b13      	ldr	r3, [pc, #76]	; (800de08 <__sinit+0x68>)
 800ddbc:	4a13      	ldr	r2, [pc, #76]	; (800de0c <__sinit+0x6c>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ddc2:	42a3      	cmp	r3, r4
 800ddc4:	bf04      	itt	eq
 800ddc6:	2301      	moveq	r3, #1
 800ddc8:	61a3      	streq	r3, [r4, #24]
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f000 f820 	bl	800de10 <__sfp>
 800ddd0:	6060      	str	r0, [r4, #4]
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f000 f81c 	bl	800de10 <__sfp>
 800ddd8:	60a0      	str	r0, [r4, #8]
 800ddda:	4620      	mov	r0, r4
 800dddc:	f000 f818 	bl	800de10 <__sfp>
 800dde0:	2200      	movs	r2, #0
 800dde2:	60e0      	str	r0, [r4, #12]
 800dde4:	2104      	movs	r1, #4
 800dde6:	6860      	ldr	r0, [r4, #4]
 800dde8:	f7ff ff82 	bl	800dcf0 <std>
 800ddec:	68a0      	ldr	r0, [r4, #8]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	2109      	movs	r1, #9
 800ddf2:	f7ff ff7d 	bl	800dcf0 <std>
 800ddf6:	68e0      	ldr	r0, [r4, #12]
 800ddf8:	2202      	movs	r2, #2
 800ddfa:	2112      	movs	r1, #18
 800ddfc:	f7ff ff78 	bl	800dcf0 <std>
 800de00:	2301      	movs	r3, #1
 800de02:	61a3      	str	r3, [r4, #24]
 800de04:	e7d2      	b.n	800ddac <__sinit+0xc>
 800de06:	bf00      	nop
 800de08:	0800e338 	.word	0x0800e338
 800de0c:	0800dd39 	.word	0x0800dd39

0800de10 <__sfp>:
 800de10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de12:	4607      	mov	r7, r0
 800de14:	f7ff ffac 	bl	800dd70 <__sfp_lock_acquire>
 800de18:	4b1e      	ldr	r3, [pc, #120]	; (800de94 <__sfp+0x84>)
 800de1a:	681e      	ldr	r6, [r3, #0]
 800de1c:	69b3      	ldr	r3, [r6, #24]
 800de1e:	b913      	cbnz	r3, 800de26 <__sfp+0x16>
 800de20:	4630      	mov	r0, r6
 800de22:	f7ff ffbd 	bl	800dda0 <__sinit>
 800de26:	3648      	adds	r6, #72	; 0x48
 800de28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800de2c:	3b01      	subs	r3, #1
 800de2e:	d503      	bpl.n	800de38 <__sfp+0x28>
 800de30:	6833      	ldr	r3, [r6, #0]
 800de32:	b30b      	cbz	r3, 800de78 <__sfp+0x68>
 800de34:	6836      	ldr	r6, [r6, #0]
 800de36:	e7f7      	b.n	800de28 <__sfp+0x18>
 800de38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800de3c:	b9d5      	cbnz	r5, 800de74 <__sfp+0x64>
 800de3e:	4b16      	ldr	r3, [pc, #88]	; (800de98 <__sfp+0x88>)
 800de40:	60e3      	str	r3, [r4, #12]
 800de42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800de46:	6665      	str	r5, [r4, #100]	; 0x64
 800de48:	f000 f847 	bl	800deda <__retarget_lock_init_recursive>
 800de4c:	f7ff ff96 	bl	800dd7c <__sfp_lock_release>
 800de50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800de54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800de58:	6025      	str	r5, [r4, #0]
 800de5a:	61a5      	str	r5, [r4, #24]
 800de5c:	2208      	movs	r2, #8
 800de5e:	4629      	mov	r1, r5
 800de60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800de64:	f7fb fcac 	bl	80097c0 <memset>
 800de68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de70:	4620      	mov	r0, r4
 800de72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de74:	3468      	adds	r4, #104	; 0x68
 800de76:	e7d9      	b.n	800de2c <__sfp+0x1c>
 800de78:	2104      	movs	r1, #4
 800de7a:	4638      	mov	r0, r7
 800de7c:	f7ff ff62 	bl	800dd44 <__sfmoreglue>
 800de80:	4604      	mov	r4, r0
 800de82:	6030      	str	r0, [r6, #0]
 800de84:	2800      	cmp	r0, #0
 800de86:	d1d5      	bne.n	800de34 <__sfp+0x24>
 800de88:	f7ff ff78 	bl	800dd7c <__sfp_lock_release>
 800de8c:	230c      	movs	r3, #12
 800de8e:	603b      	str	r3, [r7, #0]
 800de90:	e7ee      	b.n	800de70 <__sfp+0x60>
 800de92:	bf00      	nop
 800de94:	0800e338 	.word	0x0800e338
 800de98:	ffff0001 	.word	0xffff0001

0800de9c <_fwalk_reent>:
 800de9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dea0:	4606      	mov	r6, r0
 800dea2:	4688      	mov	r8, r1
 800dea4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dea8:	2700      	movs	r7, #0
 800deaa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800deae:	f1b9 0901 	subs.w	r9, r9, #1
 800deb2:	d505      	bpl.n	800dec0 <_fwalk_reent+0x24>
 800deb4:	6824      	ldr	r4, [r4, #0]
 800deb6:	2c00      	cmp	r4, #0
 800deb8:	d1f7      	bne.n	800deaa <_fwalk_reent+0xe>
 800deba:	4638      	mov	r0, r7
 800debc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dec0:	89ab      	ldrh	r3, [r5, #12]
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d907      	bls.n	800ded6 <_fwalk_reent+0x3a>
 800dec6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800deca:	3301      	adds	r3, #1
 800decc:	d003      	beq.n	800ded6 <_fwalk_reent+0x3a>
 800dece:	4629      	mov	r1, r5
 800ded0:	4630      	mov	r0, r6
 800ded2:	47c0      	blx	r8
 800ded4:	4307      	orrs	r7, r0
 800ded6:	3568      	adds	r5, #104	; 0x68
 800ded8:	e7e9      	b.n	800deae <_fwalk_reent+0x12>

0800deda <__retarget_lock_init_recursive>:
 800deda:	4770      	bx	lr

0800dedc <__retarget_lock_acquire_recursive>:
 800dedc:	4770      	bx	lr

0800dede <__retarget_lock_release_recursive>:
 800dede:	4770      	bx	lr

0800dee0 <__swhatbuf_r>:
 800dee0:	b570      	push	{r4, r5, r6, lr}
 800dee2:	460e      	mov	r6, r1
 800dee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dee8:	2900      	cmp	r1, #0
 800deea:	b096      	sub	sp, #88	; 0x58
 800deec:	4614      	mov	r4, r2
 800deee:	461d      	mov	r5, r3
 800def0:	da08      	bge.n	800df04 <__swhatbuf_r+0x24>
 800def2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800def6:	2200      	movs	r2, #0
 800def8:	602a      	str	r2, [r5, #0]
 800defa:	061a      	lsls	r2, r3, #24
 800defc:	d410      	bmi.n	800df20 <__swhatbuf_r+0x40>
 800defe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df02:	e00e      	b.n	800df22 <__swhatbuf_r+0x42>
 800df04:	466a      	mov	r2, sp
 800df06:	f000 f951 	bl	800e1ac <_fstat_r>
 800df0a:	2800      	cmp	r0, #0
 800df0c:	dbf1      	blt.n	800def2 <__swhatbuf_r+0x12>
 800df0e:	9a01      	ldr	r2, [sp, #4]
 800df10:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df14:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df18:	425a      	negs	r2, r3
 800df1a:	415a      	adcs	r2, r3
 800df1c:	602a      	str	r2, [r5, #0]
 800df1e:	e7ee      	b.n	800defe <__swhatbuf_r+0x1e>
 800df20:	2340      	movs	r3, #64	; 0x40
 800df22:	2000      	movs	r0, #0
 800df24:	6023      	str	r3, [r4, #0]
 800df26:	b016      	add	sp, #88	; 0x58
 800df28:	bd70      	pop	{r4, r5, r6, pc}
	...

0800df2c <__smakebuf_r>:
 800df2c:	898b      	ldrh	r3, [r1, #12]
 800df2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df30:	079d      	lsls	r5, r3, #30
 800df32:	4606      	mov	r6, r0
 800df34:	460c      	mov	r4, r1
 800df36:	d507      	bpl.n	800df48 <__smakebuf_r+0x1c>
 800df38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df3c:	6023      	str	r3, [r4, #0]
 800df3e:	6123      	str	r3, [r4, #16]
 800df40:	2301      	movs	r3, #1
 800df42:	6163      	str	r3, [r4, #20]
 800df44:	b002      	add	sp, #8
 800df46:	bd70      	pop	{r4, r5, r6, pc}
 800df48:	ab01      	add	r3, sp, #4
 800df4a:	466a      	mov	r2, sp
 800df4c:	f7ff ffc8 	bl	800dee0 <__swhatbuf_r>
 800df50:	9900      	ldr	r1, [sp, #0]
 800df52:	4605      	mov	r5, r0
 800df54:	4630      	mov	r0, r6
 800df56:	f7ff f9dd 	bl	800d314 <_malloc_r>
 800df5a:	b948      	cbnz	r0, 800df70 <__smakebuf_r+0x44>
 800df5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df60:	059a      	lsls	r2, r3, #22
 800df62:	d4ef      	bmi.n	800df44 <__smakebuf_r+0x18>
 800df64:	f023 0303 	bic.w	r3, r3, #3
 800df68:	f043 0302 	orr.w	r3, r3, #2
 800df6c:	81a3      	strh	r3, [r4, #12]
 800df6e:	e7e3      	b.n	800df38 <__smakebuf_r+0xc>
 800df70:	4b0d      	ldr	r3, [pc, #52]	; (800dfa8 <__smakebuf_r+0x7c>)
 800df72:	62b3      	str	r3, [r6, #40]	; 0x28
 800df74:	89a3      	ldrh	r3, [r4, #12]
 800df76:	6020      	str	r0, [r4, #0]
 800df78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df7c:	81a3      	strh	r3, [r4, #12]
 800df7e:	9b00      	ldr	r3, [sp, #0]
 800df80:	6163      	str	r3, [r4, #20]
 800df82:	9b01      	ldr	r3, [sp, #4]
 800df84:	6120      	str	r0, [r4, #16]
 800df86:	b15b      	cbz	r3, 800dfa0 <__smakebuf_r+0x74>
 800df88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df8c:	4630      	mov	r0, r6
 800df8e:	f000 f91f 	bl	800e1d0 <_isatty_r>
 800df92:	b128      	cbz	r0, 800dfa0 <__smakebuf_r+0x74>
 800df94:	89a3      	ldrh	r3, [r4, #12]
 800df96:	f023 0303 	bic.w	r3, r3, #3
 800df9a:	f043 0301 	orr.w	r3, r3, #1
 800df9e:	81a3      	strh	r3, [r4, #12]
 800dfa0:	89a0      	ldrh	r0, [r4, #12]
 800dfa2:	4305      	orrs	r5, r0
 800dfa4:	81a5      	strh	r5, [r4, #12]
 800dfa6:	e7cd      	b.n	800df44 <__smakebuf_r+0x18>
 800dfa8:	0800dd39 	.word	0x0800dd39

0800dfac <memmove>:
 800dfac:	4288      	cmp	r0, r1
 800dfae:	b510      	push	{r4, lr}
 800dfb0:	eb01 0402 	add.w	r4, r1, r2
 800dfb4:	d902      	bls.n	800dfbc <memmove+0x10>
 800dfb6:	4284      	cmp	r4, r0
 800dfb8:	4623      	mov	r3, r4
 800dfba:	d807      	bhi.n	800dfcc <memmove+0x20>
 800dfbc:	1e43      	subs	r3, r0, #1
 800dfbe:	42a1      	cmp	r1, r4
 800dfc0:	d008      	beq.n	800dfd4 <memmove+0x28>
 800dfc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dfca:	e7f8      	b.n	800dfbe <memmove+0x12>
 800dfcc:	4402      	add	r2, r0
 800dfce:	4601      	mov	r1, r0
 800dfd0:	428a      	cmp	r2, r1
 800dfd2:	d100      	bne.n	800dfd6 <memmove+0x2a>
 800dfd4:	bd10      	pop	{r4, pc}
 800dfd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dfde:	e7f7      	b.n	800dfd0 <memmove+0x24>

0800dfe0 <__malloc_lock>:
 800dfe0:	4801      	ldr	r0, [pc, #4]	; (800dfe8 <__malloc_lock+0x8>)
 800dfe2:	f7ff bf7b 	b.w	800dedc <__retarget_lock_acquire_recursive>
 800dfe6:	bf00      	nop
 800dfe8:	200004cc 	.word	0x200004cc

0800dfec <__malloc_unlock>:
 800dfec:	4801      	ldr	r0, [pc, #4]	; (800dff4 <__malloc_unlock+0x8>)
 800dfee:	f7ff bf76 	b.w	800dede <__retarget_lock_release_recursive>
 800dff2:	bf00      	nop
 800dff4:	200004cc 	.word	0x200004cc

0800dff8 <_realloc_r>:
 800dff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dffc:	4680      	mov	r8, r0
 800dffe:	4614      	mov	r4, r2
 800e000:	460e      	mov	r6, r1
 800e002:	b921      	cbnz	r1, 800e00e <_realloc_r+0x16>
 800e004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e008:	4611      	mov	r1, r2
 800e00a:	f7ff b983 	b.w	800d314 <_malloc_r>
 800e00e:	b92a      	cbnz	r2, 800e01c <_realloc_r+0x24>
 800e010:	f7ff f914 	bl	800d23c <_free_r>
 800e014:	4625      	mov	r5, r4
 800e016:	4628      	mov	r0, r5
 800e018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e01c:	f000 f8fa 	bl	800e214 <_malloc_usable_size_r>
 800e020:	4284      	cmp	r4, r0
 800e022:	4607      	mov	r7, r0
 800e024:	d802      	bhi.n	800e02c <_realloc_r+0x34>
 800e026:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e02a:	d812      	bhi.n	800e052 <_realloc_r+0x5a>
 800e02c:	4621      	mov	r1, r4
 800e02e:	4640      	mov	r0, r8
 800e030:	f7ff f970 	bl	800d314 <_malloc_r>
 800e034:	4605      	mov	r5, r0
 800e036:	2800      	cmp	r0, #0
 800e038:	d0ed      	beq.n	800e016 <_realloc_r+0x1e>
 800e03a:	42bc      	cmp	r4, r7
 800e03c:	4622      	mov	r2, r4
 800e03e:	4631      	mov	r1, r6
 800e040:	bf28      	it	cs
 800e042:	463a      	movcs	r2, r7
 800e044:	f7fb fbae 	bl	80097a4 <memcpy>
 800e048:	4631      	mov	r1, r6
 800e04a:	4640      	mov	r0, r8
 800e04c:	f7ff f8f6 	bl	800d23c <_free_r>
 800e050:	e7e1      	b.n	800e016 <_realloc_r+0x1e>
 800e052:	4635      	mov	r5, r6
 800e054:	e7df      	b.n	800e016 <_realloc_r+0x1e>

0800e056 <_raise_r>:
 800e056:	291f      	cmp	r1, #31
 800e058:	b538      	push	{r3, r4, r5, lr}
 800e05a:	4604      	mov	r4, r0
 800e05c:	460d      	mov	r5, r1
 800e05e:	d904      	bls.n	800e06a <_raise_r+0x14>
 800e060:	2316      	movs	r3, #22
 800e062:	6003      	str	r3, [r0, #0]
 800e064:	f04f 30ff 	mov.w	r0, #4294967295
 800e068:	bd38      	pop	{r3, r4, r5, pc}
 800e06a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e06c:	b112      	cbz	r2, 800e074 <_raise_r+0x1e>
 800e06e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e072:	b94b      	cbnz	r3, 800e088 <_raise_r+0x32>
 800e074:	4620      	mov	r0, r4
 800e076:	f000 f831 	bl	800e0dc <_getpid_r>
 800e07a:	462a      	mov	r2, r5
 800e07c:	4601      	mov	r1, r0
 800e07e:	4620      	mov	r0, r4
 800e080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e084:	f000 b818 	b.w	800e0b8 <_kill_r>
 800e088:	2b01      	cmp	r3, #1
 800e08a:	d00a      	beq.n	800e0a2 <_raise_r+0x4c>
 800e08c:	1c59      	adds	r1, r3, #1
 800e08e:	d103      	bne.n	800e098 <_raise_r+0x42>
 800e090:	2316      	movs	r3, #22
 800e092:	6003      	str	r3, [r0, #0]
 800e094:	2001      	movs	r0, #1
 800e096:	e7e7      	b.n	800e068 <_raise_r+0x12>
 800e098:	2400      	movs	r4, #0
 800e09a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e09e:	4628      	mov	r0, r5
 800e0a0:	4798      	blx	r3
 800e0a2:	2000      	movs	r0, #0
 800e0a4:	e7e0      	b.n	800e068 <_raise_r+0x12>
	...

0800e0a8 <raise>:
 800e0a8:	4b02      	ldr	r3, [pc, #8]	; (800e0b4 <raise+0xc>)
 800e0aa:	4601      	mov	r1, r0
 800e0ac:	6818      	ldr	r0, [r3, #0]
 800e0ae:	f7ff bfd2 	b.w	800e056 <_raise_r>
 800e0b2:	bf00      	nop
 800e0b4:	2000001c 	.word	0x2000001c

0800e0b8 <_kill_r>:
 800e0b8:	b538      	push	{r3, r4, r5, lr}
 800e0ba:	4d07      	ldr	r5, [pc, #28]	; (800e0d8 <_kill_r+0x20>)
 800e0bc:	2300      	movs	r3, #0
 800e0be:	4604      	mov	r4, r0
 800e0c0:	4608      	mov	r0, r1
 800e0c2:	4611      	mov	r1, r2
 800e0c4:	602b      	str	r3, [r5, #0]
 800e0c6:	f7f3 fdc1 	bl	8001c4c <_kill>
 800e0ca:	1c43      	adds	r3, r0, #1
 800e0cc:	d102      	bne.n	800e0d4 <_kill_r+0x1c>
 800e0ce:	682b      	ldr	r3, [r5, #0]
 800e0d0:	b103      	cbz	r3, 800e0d4 <_kill_r+0x1c>
 800e0d2:	6023      	str	r3, [r4, #0]
 800e0d4:	bd38      	pop	{r3, r4, r5, pc}
 800e0d6:	bf00      	nop
 800e0d8:	200004d0 	.word	0x200004d0

0800e0dc <_getpid_r>:
 800e0dc:	f7f3 bdae 	b.w	8001c3c <_getpid>

0800e0e0 <__sread>:
 800e0e0:	b510      	push	{r4, lr}
 800e0e2:	460c      	mov	r4, r1
 800e0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e8:	f000 f89c 	bl	800e224 <_read_r>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	bfab      	itete	ge
 800e0f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e0f2:	89a3      	ldrhlt	r3, [r4, #12]
 800e0f4:	181b      	addge	r3, r3, r0
 800e0f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e0fa:	bfac      	ite	ge
 800e0fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800e0fe:	81a3      	strhlt	r3, [r4, #12]
 800e100:	bd10      	pop	{r4, pc}

0800e102 <__swrite>:
 800e102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e106:	461f      	mov	r7, r3
 800e108:	898b      	ldrh	r3, [r1, #12]
 800e10a:	05db      	lsls	r3, r3, #23
 800e10c:	4605      	mov	r5, r0
 800e10e:	460c      	mov	r4, r1
 800e110:	4616      	mov	r6, r2
 800e112:	d505      	bpl.n	800e120 <__swrite+0x1e>
 800e114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e118:	2302      	movs	r3, #2
 800e11a:	2200      	movs	r2, #0
 800e11c:	f000 f868 	bl	800e1f0 <_lseek_r>
 800e120:	89a3      	ldrh	r3, [r4, #12]
 800e122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e12a:	81a3      	strh	r3, [r4, #12]
 800e12c:	4632      	mov	r2, r6
 800e12e:	463b      	mov	r3, r7
 800e130:	4628      	mov	r0, r5
 800e132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e136:	f000 b817 	b.w	800e168 <_write_r>

0800e13a <__sseek>:
 800e13a:	b510      	push	{r4, lr}
 800e13c:	460c      	mov	r4, r1
 800e13e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e142:	f000 f855 	bl	800e1f0 <_lseek_r>
 800e146:	1c43      	adds	r3, r0, #1
 800e148:	89a3      	ldrh	r3, [r4, #12]
 800e14a:	bf15      	itete	ne
 800e14c:	6560      	strne	r0, [r4, #84]	; 0x54
 800e14e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e152:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e156:	81a3      	strheq	r3, [r4, #12]
 800e158:	bf18      	it	ne
 800e15a:	81a3      	strhne	r3, [r4, #12]
 800e15c:	bd10      	pop	{r4, pc}

0800e15e <__sclose>:
 800e15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e162:	f000 b813 	b.w	800e18c <_close_r>
	...

0800e168 <_write_r>:
 800e168:	b538      	push	{r3, r4, r5, lr}
 800e16a:	4d07      	ldr	r5, [pc, #28]	; (800e188 <_write_r+0x20>)
 800e16c:	4604      	mov	r4, r0
 800e16e:	4608      	mov	r0, r1
 800e170:	4611      	mov	r1, r2
 800e172:	2200      	movs	r2, #0
 800e174:	602a      	str	r2, [r5, #0]
 800e176:	461a      	mov	r2, r3
 800e178:	f7f3 fd9f 	bl	8001cba <_write>
 800e17c:	1c43      	adds	r3, r0, #1
 800e17e:	d102      	bne.n	800e186 <_write_r+0x1e>
 800e180:	682b      	ldr	r3, [r5, #0]
 800e182:	b103      	cbz	r3, 800e186 <_write_r+0x1e>
 800e184:	6023      	str	r3, [r4, #0]
 800e186:	bd38      	pop	{r3, r4, r5, pc}
 800e188:	200004d0 	.word	0x200004d0

0800e18c <_close_r>:
 800e18c:	b538      	push	{r3, r4, r5, lr}
 800e18e:	4d06      	ldr	r5, [pc, #24]	; (800e1a8 <_close_r+0x1c>)
 800e190:	2300      	movs	r3, #0
 800e192:	4604      	mov	r4, r0
 800e194:	4608      	mov	r0, r1
 800e196:	602b      	str	r3, [r5, #0]
 800e198:	f7f3 fdab 	bl	8001cf2 <_close>
 800e19c:	1c43      	adds	r3, r0, #1
 800e19e:	d102      	bne.n	800e1a6 <_close_r+0x1a>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	b103      	cbz	r3, 800e1a6 <_close_r+0x1a>
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	200004d0 	.word	0x200004d0

0800e1ac <_fstat_r>:
 800e1ac:	b538      	push	{r3, r4, r5, lr}
 800e1ae:	4d07      	ldr	r5, [pc, #28]	; (800e1cc <_fstat_r+0x20>)
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	4608      	mov	r0, r1
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	602b      	str	r3, [r5, #0]
 800e1ba:	f7f3 fda6 	bl	8001d0a <_fstat>
 800e1be:	1c43      	adds	r3, r0, #1
 800e1c0:	d102      	bne.n	800e1c8 <_fstat_r+0x1c>
 800e1c2:	682b      	ldr	r3, [r5, #0]
 800e1c4:	b103      	cbz	r3, 800e1c8 <_fstat_r+0x1c>
 800e1c6:	6023      	str	r3, [r4, #0]
 800e1c8:	bd38      	pop	{r3, r4, r5, pc}
 800e1ca:	bf00      	nop
 800e1cc:	200004d0 	.word	0x200004d0

0800e1d0 <_isatty_r>:
 800e1d0:	b538      	push	{r3, r4, r5, lr}
 800e1d2:	4d06      	ldr	r5, [pc, #24]	; (800e1ec <_isatty_r+0x1c>)
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	4608      	mov	r0, r1
 800e1da:	602b      	str	r3, [r5, #0]
 800e1dc:	f7f3 fda5 	bl	8001d2a <_isatty>
 800e1e0:	1c43      	adds	r3, r0, #1
 800e1e2:	d102      	bne.n	800e1ea <_isatty_r+0x1a>
 800e1e4:	682b      	ldr	r3, [r5, #0]
 800e1e6:	b103      	cbz	r3, 800e1ea <_isatty_r+0x1a>
 800e1e8:	6023      	str	r3, [r4, #0]
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	200004d0 	.word	0x200004d0

0800e1f0 <_lseek_r>:
 800e1f0:	b538      	push	{r3, r4, r5, lr}
 800e1f2:	4d07      	ldr	r5, [pc, #28]	; (800e210 <_lseek_r+0x20>)
 800e1f4:	4604      	mov	r4, r0
 800e1f6:	4608      	mov	r0, r1
 800e1f8:	4611      	mov	r1, r2
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	602a      	str	r2, [r5, #0]
 800e1fe:	461a      	mov	r2, r3
 800e200:	f7f3 fd9e 	bl	8001d40 <_lseek>
 800e204:	1c43      	adds	r3, r0, #1
 800e206:	d102      	bne.n	800e20e <_lseek_r+0x1e>
 800e208:	682b      	ldr	r3, [r5, #0]
 800e20a:	b103      	cbz	r3, 800e20e <_lseek_r+0x1e>
 800e20c:	6023      	str	r3, [r4, #0]
 800e20e:	bd38      	pop	{r3, r4, r5, pc}
 800e210:	200004d0 	.word	0x200004d0

0800e214 <_malloc_usable_size_r>:
 800e214:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e218:	1f18      	subs	r0, r3, #4
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	bfbc      	itt	lt
 800e21e:	580b      	ldrlt	r3, [r1, r0]
 800e220:	18c0      	addlt	r0, r0, r3
 800e222:	4770      	bx	lr

0800e224 <_read_r>:
 800e224:	b538      	push	{r3, r4, r5, lr}
 800e226:	4d07      	ldr	r5, [pc, #28]	; (800e244 <_read_r+0x20>)
 800e228:	4604      	mov	r4, r0
 800e22a:	4608      	mov	r0, r1
 800e22c:	4611      	mov	r1, r2
 800e22e:	2200      	movs	r2, #0
 800e230:	602a      	str	r2, [r5, #0]
 800e232:	461a      	mov	r2, r3
 800e234:	f7f3 fd24 	bl	8001c80 <_read>
 800e238:	1c43      	adds	r3, r0, #1
 800e23a:	d102      	bne.n	800e242 <_read_r+0x1e>
 800e23c:	682b      	ldr	r3, [r5, #0]
 800e23e:	b103      	cbz	r3, 800e242 <_read_r+0x1e>
 800e240:	6023      	str	r3, [r4, #0]
 800e242:	bd38      	pop	{r3, r4, r5, pc}
 800e244:	200004d0 	.word	0x200004d0

0800e248 <_init>:
 800e248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e24a:	bf00      	nop
 800e24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e24e:	bc08      	pop	{r3}
 800e250:	469e      	mov	lr, r3
 800e252:	4770      	bx	lr

0800e254 <_fini>:
 800e254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e256:	bf00      	nop
 800e258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e25a:	bc08      	pop	{r3}
 800e25c:	469e      	mov	lr, r3
 800e25e:	4770      	bx	lr

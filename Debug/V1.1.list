
V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e018  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800e1f8  0800e1f8  0001e1f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e7d0  0800e7d0  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e7d0  0800e7d0  0001e7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e7d8  0800e7d8  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e7d8  0800e7d8  0001e7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e7dc  0800e7dc  0001e7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e7e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001f0  0800e9d0  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800e9d0  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a947  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003105  00000000  00000000  0003ab67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  0003dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001498  00000000  00000000  0003f240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a170  00000000  00000000  000406d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001973a  00000000  00000000  0006a848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001147e2  00000000  00000000  00083f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00198764  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007424  00000000  00000000  001987b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e1e0 	.word	0x0800e1e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800e1e0 	.word	0x0800e1e0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	b08d      	sub	sp, #52	; 0x34
 800104c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f000 feee 	bl	8001e2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001052:	f000 f921 	bl	8001298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001056:	f000 fbcf 	bl	80017f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800105a:	f000 fa8d 	bl	8001578 <MX_TIM2_Init>
  MX_ADC1_Init();
 800105e:	f000 f967 	bl	8001330 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001062:	f000 f9df 	bl	8001424 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001066:	f000 faf9 	bl	800165c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800106a:	f000 fb79 	bl	8001760 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  USER_CALLBACK_init();
 800106e:	f008 f951 	bl	8009314 <USER_CALLBACK_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*When receive the data from USART2, it will implement here */
	  if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETTIMER) !=NULL))
 8001072:	4b7b      	ldr	r3, [pc, #492]	; (8001260 <main+0x218>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d13a      	bne.n	80010f0 <main+0xa8>
 800107a:	497a      	ldr	r1, [pc, #488]	; (8001264 <main+0x21c>)
 800107c:	487a      	ldr	r0, [pc, #488]	; (8001268 <main+0x220>)
 800107e:	f009 fa13 	bl	800a4a8 <strstr>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d033      	beq.n	80010f0 <main+0xa8>
	  {
		  PWM_Variable = USER_TIMER_handleString(Rx_Buffer);
 8001088:	4c78      	ldr	r4, [pc, #480]	; (800126c <main+0x224>)
 800108a:	463b      	mov	r3, r7
 800108c:	4976      	ldr	r1, [pc, #472]	; (8001268 <main+0x220>)
 800108e:	4618      	mov	r0, r3
 8001090:	f008 fa76 	bl	8009580 <USER_TIMER_handleString>
 8001094:	463b      	mov	r3, r7
 8001096:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  USER_TIMER_setValueOfPWM(PWM_Variable);
 800109c:	4b73      	ldr	r3, [pc, #460]	; (800126c <main+0x224>)
 800109e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010a0:	f008 f9d8 	bl	8009454 <USER_TIMER_setValueOfPWM>
		  USER_CALLBACK_clearRxBuffer();
 80010a4:	f008 f9aa 	bl	80093fc <USER_CALLBACK_clearRxBuffer>
		  USER_CALLBACK_clearRxData();
 80010a8:	f008 f9b8 	bl	800941c <USER_CALLBACK_clearRxData>
		  CheckFlagUSART = 0;
 80010ac:	4b6c      	ldr	r3, [pc, #432]	; (8001260 <main+0x218>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG_MAIN
	sprintf(Tx_Buffer,"The Timer: %u, The Channel: %u, The value of CCR = %lu The value of ARR = %lu\r\n",PWM_Variable.NumberOfTimer,PWM_Variable.Channel,USER_TIMER_getValueCCR(),USER_TIMER_getValueARR());
 80010b2:	4b6e      	ldr	r3, [pc, #440]	; (800126c <main+0x224>)
 80010b4:	889b      	ldrh	r3, [r3, #4]
 80010b6:	461e      	mov	r6, r3
 80010b8:	4b6c      	ldr	r3, [pc, #432]	; (800126c <main+0x224>)
 80010ba:	689c      	ldr	r4, [r3, #8]
 80010bc:	f008 fac6 	bl	800964c <USER_TIMER_getValueCCR>
 80010c0:	4605      	mov	r5, r0
 80010c2:	f008 fab7 	bl	8009634 <USER_TIMER_getValueARR>
 80010c6:	4603      	mov	r3, r0
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	9500      	str	r5, [sp, #0]
 80010cc:	4623      	mov	r3, r4
 80010ce:	4632      	mov	r2, r6
 80010d0:	4967      	ldr	r1, [pc, #412]	; (8001270 <main+0x228>)
 80010d2:	4868      	ldr	r0, [pc, #416]	; (8001274 <main+0x22c>)
 80010d4:	f009 f9c8 	bl	800a468 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Tx_Buffer,strlen(Tx_Buffer),1000);
 80010d8:	4866      	ldr	r0, [pc, #408]	; (8001274 <main+0x22c>)
 80010da:	f7ff f8a1 	bl	8000220 <strlen>
 80010de:	4603      	mov	r3, r0
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	4963      	ldr	r1, [pc, #396]	; (8001274 <main+0x22c>)
 80010e8:	4863      	ldr	r0, [pc, #396]	; (8001278 <main+0x230>)
 80010ea:	f006 f873 	bl	80071d4 <HAL_UART_Transmit>
 80010ee:	e090      	b.n	8001212 <main+0x1ca>
#endif
	  }
	  else if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETADC) !=NULL))
 80010f0:	4b5b      	ldr	r3, [pc, #364]	; (8001260 <main+0x218>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d168      	bne.n	80011ca <main+0x182>
 80010f8:	4960      	ldr	r1, [pc, #384]	; (800127c <main+0x234>)
 80010fa:	485b      	ldr	r0, [pc, #364]	; (8001268 <main+0x220>)
 80010fc:	f009 f9d4 	bl	800a4a8 <strstr>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d061      	beq.n	80011ca <main+0x182>
	  {
		  ADCFilter_Variable = USER_ADC_handleString(Rx_Buffer);
 8001106:	4858      	ldr	r0, [pc, #352]	; (8001268 <main+0x220>)
 8001108:	f008 f8a6 	bl	8009258 <USER_ADC_handleString>
 800110c:	eef0 6a40 	vmov.f32	s13, s0
 8001110:	eeb0 7a60 	vmov.f32	s14, s1
 8001114:	eef0 7a41 	vmov.f32	s15, s2
 8001118:	4b59      	ldr	r3, [pc, #356]	; (8001280 <main+0x238>)
 800111a:	edc3 6a00 	vstr	s13, [r3]
 800111e:	ed83 7a01 	vstr	s14, [r3, #4]
 8001122:	edc3 7a02 	vstr	s15, [r3, #8]
		  USER_ADC_ConfigFilter(ADCFilter_Variable);
 8001126:	4b56      	ldr	r3, [pc, #344]	; (8001280 <main+0x238>)
 8001128:	edd3 6a00 	vldr	s13, [r3]
 800112c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001130:	edd3 7a02 	vldr	s15, [r3, #8]
 8001134:	eeb0 0a66 	vmov.f32	s0, s13
 8001138:	eef0 0a47 	vmov.f32	s1, s14
 800113c:	eeb0 1a67 	vmov.f32	s2, s15
 8001140:	f008 f86e 	bl	8009220 <USER_ADC_ConfigFilter>
		  USER_CALLBACK_clearRxBuffer();
 8001144:	f008 f95a 	bl	80093fc <USER_CALLBACK_clearRxBuffer>
		  USER_CALLBACK_clearRxData();
 8001148:	f008 f968 	bl	800941c <USER_CALLBACK_clearRxData>
		  CheckFlagUSART = 0;
 800114c:	4b44      	ldr	r3, [pc, #272]	; (8001260 <main+0x218>)
 800114e:	2200      	movs	r2, #0
 8001150:	701a      	strb	r2, [r3, #0]
#ifdef DEBUG_MAIN
	sprintf(Tx_Buffer,"The Cutoff: %f, The sampleFrequency: %f",USER_ADC_GetInforFilter().cutoffFreq,USER_ADC_GetInforFilter().sampleTime);
 8001152:	f008 f8bf 	bl	80092d4 <USER_ADC_GetInforFilter>
 8001156:	eef0 6a40 	vmov.f32	s13, s0
 800115a:	eeb0 7a60 	vmov.f32	s14, s1
 800115e:	eef0 7a41 	vmov.f32	s15, s2
 8001162:	edc7 6a04 	vstr	s13, [r7, #16]
 8001166:	ed87 7a05 	vstr	s14, [r7, #20]
 800116a:	edc7 7a06 	vstr	s15, [r7, #24]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fa11 	bl	8000598 <__aeabi_f2d>
 8001176:	4604      	mov	r4, r0
 8001178:	460d      	mov	r5, r1
 800117a:	f008 f8ab 	bl	80092d4 <USER_ADC_GetInforFilter>
 800117e:	eef0 6a40 	vmov.f32	s13, s0
 8001182:	eeb0 7a60 	vmov.f32	s14, s1
 8001186:	eef0 7a41 	vmov.f32	s15, s2
 800118a:	edc7 6a07 	vstr	s13, [r7, #28]
 800118e:	ed87 7a08 	vstr	s14, [r7, #32]
 8001192:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9fd 	bl	8000598 <__aeabi_f2d>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	e9cd 2300 	strd	r2, r3, [sp]
 80011a6:	4622      	mov	r2, r4
 80011a8:	462b      	mov	r3, r5
 80011aa:	4936      	ldr	r1, [pc, #216]	; (8001284 <main+0x23c>)
 80011ac:	4831      	ldr	r0, [pc, #196]	; (8001274 <main+0x22c>)
 80011ae:	f009 f95b 	bl	800a468 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)Tx_Buffer,strlen(Tx_Buffer),1000);
 80011b2:	4830      	ldr	r0, [pc, #192]	; (8001274 <main+0x22c>)
 80011b4:	f7ff f834 	bl	8000220 <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c0:	492c      	ldr	r1, [pc, #176]	; (8001274 <main+0x22c>)
 80011c2:	482d      	ldr	r0, [pc, #180]	; (8001278 <main+0x230>)
 80011c4:	f006 f806 	bl	80071d4 <HAL_UART_Transmit>
 80011c8:	e023      	b.n	8001212 <main+0x1ca>
#endif
	  }
	  else if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETPWMWITHADC) !=NULL))
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <main+0x218>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d11f      	bne.n	8001212 <main+0x1ca>
 80011d2:	492d      	ldr	r1, [pc, #180]	; (8001288 <main+0x240>)
 80011d4:	4824      	ldr	r0, [pc, #144]	; (8001268 <main+0x220>)
 80011d6:	f009 f967 	bl	800a4a8 <strstr>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d018      	beq.n	8001212 <main+0x1ca>
	  {
		  PWM_Variable.Duty = USER_TIMER_ConvertADCValueToDutyCycle(ADC_Variable[2]);
 80011e0:	4b2a      	ldr	r3, [pc, #168]	; (800128c <main+0x244>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	f008 fa3a 	bl	8009668 <USER_TIMER_ConvertADCValueToDutyCycle>
 80011f4:	eef0 7a40 	vmov.f32	s15, s0
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <main+0x224>)
 80011fa:	edc3 7a00 	vstr	s15, [r3]
		  PWM_Variable.NumberOfTimer = 2;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <main+0x224>)
 8001200:	2202      	movs	r2, #2
 8001202:	809a      	strh	r2, [r3, #4]
		  PWM_Variable.Channel = 2;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <main+0x224>)
 8001206:	2202      	movs	r2, #2
 8001208:	609a      	str	r2, [r3, #8]
		  USER_TIMER_setValueOfPWM(PWM_Variable);
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <main+0x224>)
 800120c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800120e:	f008 f921 	bl	8009454 <USER_TIMER_setValueOfPWM>
	  }

//	  /*When the ADC trigger, it will run here */
	  if(CheckFlagADC == 1)
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <main+0x248>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b01      	cmp	r3, #1
 8001218:	f47f af2b 	bne.w	8001072 <main+0x2a>
	  {
		  HAL_GPIO_TogglePin(TEST_ADC_GPIO_Port,TEST_ADC_Pin);
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001222:	f003 fe19 	bl	8004e58 <HAL_GPIO_TogglePin>
//		  ADC_Variable[0] = USER_ADC_GetADCFilterValue(1); /*Get value from channel 1*/
//		  ADC_Variable[1] = USER_ADC_GetADCFilterValue(5); /*Get value from channel 5*/
//		  ADC_Variable[2] = USER_ADC_GetADCFilterValue(12); /*Get value from channel 12 - PB0*/
		  ADC_Variable[0] = HAL_ADC_GetValue(&hadc3);
 8001226:	481b      	ldr	r0, [pc, #108]	; (8001294 <main+0x24c>)
 8001228:	f001 fbd4 	bl	80029d4 <HAL_ADC_GetValue>
 800122c:	4603      	mov	r3, r0
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <main+0x244>)
 8001230:	6013      	str	r3, [r2, #0]
		  ADC_Variable[1] = hadc3.Instance->JDR1;
 8001232:	4b18      	ldr	r3, [pc, #96]	; (8001294 <main+0x24c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <main+0x244>)
 800123c:	6053      	str	r3, [r2, #4]
		  if((hadc3.Instance->ISR & ADC_ISR_JEOC) == ADC_ISR_JEOC)
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <main+0x24c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0320 	and.w	r3, r3, #32
 8001248:	2b20      	cmp	r3, #32
 800124a:	d105      	bne.n	8001258 <main+0x210>
		  {

			  ADC_Variable[1] = hadc3.Instance->JDR2;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <main+0x24c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <main+0x244>)
 8001256:	6053      	str	r3, [r2, #4]
		  }

		  CheckFlagADC = 0;
 8001258:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <main+0x248>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
	  if((CheckFlagUSART == 1) && (strstr(Rx_Buffer,SETTIMER) !=NULL))
 800125e:	e708      	b.n	8001072 <main+0x2a>
 8001260:	200004ba 	.word	0x200004ba
 8001264:	0800e1f8 	.word	0x0800e1f8
 8001268:	200004a4 	.word	0x200004a4
 800126c:	2000040c 	.word	0x2000040c
 8001270:	0800e200 	.word	0x0800e200
 8001274:	20000434 	.word	0x20000434
 8001278:	2000037c 	.word	0x2000037c
 800127c:	0800e250 	.word	0x0800e250
 8001280:	2000041c 	.word	0x2000041c
 8001284:	0800e254 	.word	0x0800e254
 8001288:	0800e27c 	.word	0x0800e27c
 800128c:	20000428 	.word	0x20000428
 8001290:	200004b9 	.word	0x200004b9
 8001294:	20000278 	.word	0x20000278

08001298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b094      	sub	sp, #80	; 0x50
 800129c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	2238      	movs	r2, #56	; 0x38
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f008 fa56 	bl	8009758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012be:	f003 fde5 	bl	8004e8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012cc:	2340      	movs	r3, #64	; 0x40
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d0:	2302      	movs	r3, #2
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012d4:	2302      	movs	r3, #2
 80012d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80012d8:	2304      	movs	r3, #4
 80012da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 80012dc:	234b      	movs	r3, #75	; 0x4b
 80012de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e0:	2302      	movs	r3, #2
 80012e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012e4:	2302      	movs	r3, #2
 80012e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ec:	f107 0318 	add.w	r3, r7, #24
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fe7f 	bl	8004ff4 <HAL_RCC_OscConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80012fc:	f000 faba 	bl	8001874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001300:	230f      	movs	r3, #15
 8001302:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001304:	2303      	movs	r3, #3
 8001306:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001310:	2300      	movs	r3, #0
 8001312:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2104      	movs	r1, #4
 8001318:	4618      	mov	r0, r3
 800131a:	f004 f983 	bl	8005624 <HAL_RCC_ClockConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001324:	f000 faa6 	bl	8001874 <Error_Handler>
  }
}
 8001328:	bf00      	nop
 800132a:	3750      	adds	r7, #80	; 0x50
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2220      	movs	r2, #32
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f008 fa05 	bl	8009758 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <MX_ADC1_Init+0xec>)
 8001350:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001354:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <MX_ADC1_Init+0xec>)
 8001358:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800135c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <MX_ADC1_Init+0xec>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_ADC1_Init+0xec>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800136a:	4b2c      	ldr	r3, [pc, #176]	; (800141c <MX_ADC1_Init+0xec>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_ADC1_Init+0xec>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <MX_ADC1_Init+0xec>)
 8001378:	2204      	movs	r2, #4
 800137a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <MX_ADC1_Init+0xec>)
 800137e:	2200      	movs	r2, #0
 8001380:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <MX_ADC1_Init+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <MX_ADC1_Init+0xec>)
 800138a:	2201      	movs	r2, #1
 800138c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800138e:	4b23      	ldr	r3, [pc, #140]	; (800141c <MX_ADC1_Init+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_CC2;
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <MX_ADC1_Init+0xec>)
 8001398:	f44f 628c 	mov.w	r2, #1120	; 0x460
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800139e:	4b1f      	ldr	r3, [pc, #124]	; (800141c <MX_ADC1_Init+0xec>)
 80013a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_ADC1_Init+0xec>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_ADC1_Init+0xec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <MX_ADC1_Init+0xec>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013bc:	4817      	ldr	r0, [pc, #92]	; (800141c <MX_ADC1_Init+0xec>)
 80013be:	f000 ffeb 	bl	8002398 <HAL_ADC_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80013c8:	f000 fa54 	bl	8001874 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80013d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d4:	4619      	mov	r1, r3
 80013d6:	4811      	ldr	r0, [pc, #68]	; (800141c <MX_ADC1_Init+0xec>)
 80013d8:	f003 f8cc 	bl	8004574 <HAL_ADCEx_MultiModeConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80013e2:	f000 fa47 	bl	8001874 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <MX_ADC1_Init+0xf0>)
 80013e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ea:	2306      	movs	r3, #6
 80013ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013f2:	237f      	movs	r3, #127	; 0x7f
 80013f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013f6:	2304      	movs	r3, #4
 80013f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <MX_ADC1_Init+0xec>)
 8001404:	f001 fd68 	bl	8002ed8 <HAL_ADC_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800140e:	f000 fa31 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	; 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000020c 	.word	0x2000020c
 8001420:	04300002 	.word	0x04300002

08001424 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09a      	sub	sp, #104	; 0x68
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800142a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001436:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800143a:	2220      	movs	r2, #32
 800143c:	2100      	movs	r1, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f008 f98a 	bl	8009758 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001444:	463b      	mov	r3, r7
 8001446:	223c      	movs	r2, #60	; 0x3c
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f008 f984 	bl	8009758 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001450:	4b45      	ldr	r3, [pc, #276]	; (8001568 <MX_ADC3_Init+0x144>)
 8001452:	4a46      	ldr	r2, [pc, #280]	; (800156c <MX_ADC3_Init+0x148>)
 8001454:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8001456:	4b44      	ldr	r3, [pc, #272]	; (8001568 <MX_ADC3_Init+0x144>)
 8001458:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800145c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800145e:	4b42      	ldr	r3, [pc, #264]	; (8001568 <MX_ADC3_Init+0x144>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001464:	4b40      	ldr	r3, [pc, #256]	; (8001568 <MX_ADC3_Init+0x144>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800146a:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <MX_ADC3_Init+0x144>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <MX_ADC3_Init+0x144>)
 8001472:	2200      	movs	r2, #0
 8001474:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001476:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <MX_ADC3_Init+0x144>)
 8001478:	2204      	movs	r2, #4
 800147a:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800147c:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <MX_ADC3_Init+0x144>)
 800147e:	2200      	movs	r2, #0
 8001480:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001482:	4b39      	ldr	r3, [pc, #228]	; (8001568 <MX_ADC3_Init+0x144>)
 8001484:	2201      	movs	r2, #1
 8001486:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001488:	4b37      	ldr	r3, [pc, #220]	; (8001568 <MX_ADC3_Init+0x144>)
 800148a:	2201      	movs	r2, #1
 800148c:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <MX_ADC3_Init+0x144>)
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001496:	4b34      	ldr	r3, [pc, #208]	; (8001568 <MX_ADC3_Init+0x144>)
 8001498:	2200      	movs	r2, #0
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <MX_ADC3_Init+0x144>)
 800149e:	2200      	movs	r2, #0
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <MX_ADC3_Init+0x144>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <MX_ADC3_Init+0x144>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <MX_ADC3_Init+0x144>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014b8:	482b      	ldr	r0, [pc, #172]	; (8001568 <MX_ADC3_Init+0x144>)
 80014ba:	f000 ff6d 	bl	8002398 <HAL_ADC_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80014c4:	f000 f9d6 	bl	8001874 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80014cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014d0:	4619      	mov	r1, r3
 80014d2:	4825      	ldr	r0, [pc, #148]	; (8001568 <MX_ADC3_Init+0x144>)
 80014d4:	f003 f84e 	bl	8004574 <HAL_ADCEx_MultiModeConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 80014de:	f000 f9c9 	bl	8001874 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <MX_ADC3_Init+0x14c>)
 80014e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014e6:	2306      	movs	r3, #6
 80014e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80014ea:	2307      	movs	r3, #7
 80014ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014ee:	237f      	movs	r3, #127	; 0x7f
 80014f0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014f2:	2304      	movs	r3, #4
 80014f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014fe:	4619      	mov	r1, r3
 8001500:	4819      	ldr	r0, [pc, #100]	; (8001568 <MX_ADC3_Init+0x144>)
 8001502:	f001 fce9 	bl	8002ed8 <HAL_ADC_ConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 800150c:	f000 f9b2 	bl	8001874 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8001510:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_ADC3_Init+0x150>)
 8001512:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001514:	2309      	movs	r3, #9
 8001516:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800151c:	237f      	movs	r3, #127	; 0x7f
 800151e:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001520:	2304      	movs	r3, #4
 8001522:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001528:	2301      	movs	r3, #1
 800152a:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = ENABLE;
 8001532:	2301      	movs	r3, #1
 8001534:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800153e:	2300      	movs	r3, #0
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800154c:	463b      	mov	r3, r7
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_ADC3_Init+0x144>)
 8001552:	f002 fae3 	bl	8003b1c <HAL_ADCEx_InjectedConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 800155c:	f000 f98a 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3768      	adds	r7, #104	; 0x68
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000278 	.word	0x20000278
 800156c:	50000400 	.word	0x50000400
 8001570:	04300002 	.word	0x04300002
 8001574:	32601000 	.word	0x32601000

08001578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	; 0x38
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015aa:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <MX_TIM2_Init+0xe0>)
 80015ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <MX_TIM2_Init+0xe0>)
 80015b4:	2209      	movs	r2, #9
 80015b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <MX_TIM2_Init+0xe0>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 149;
 80015be:	4b26      	ldr	r3, [pc, #152]	; (8001658 <MX_TIM2_Init+0xe0>)
 80015c0:	2295      	movs	r2, #149	; 0x95
 80015c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <MX_TIM2_Init+0xe0>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <MX_TIM2_Init+0xe0>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015d0:	4821      	ldr	r0, [pc, #132]	; (8001658 <MX_TIM2_Init+0xe0>)
 80015d2:	f004 fc91 	bl	8005ef8 <HAL_TIM_Base_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80015dc:	f000 f94a 	bl	8001874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ea:	4619      	mov	r1, r3
 80015ec:	481a      	ldr	r0, [pc, #104]	; (8001658 <MX_TIM2_Init+0xe0>)
 80015ee:	f004 ff61 	bl	80064b4 <HAL_TIM_ConfigClockSource>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80015f8:	f000 f93c 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015fc:	4816      	ldr	r0, [pc, #88]	; (8001658 <MX_TIM2_Init+0xe0>)
 80015fe:	f004 fcd2 	bl	8005fa6 <HAL_TIM_PWM_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001608:	f000 f934 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800160c:	2320      	movs	r3, #32
 800160e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4619      	mov	r1, r3
 800161a:	480f      	ldr	r0, [pc, #60]	; (8001658 <MX_TIM2_Init+0xe0>)
 800161c:	f005 fcf4 	bl	8007008 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001626:	f000 f925 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162a:	2360      	movs	r3, #96	; 0x60
 800162c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800163a:	463b      	mov	r3, r7
 800163c:	2204      	movs	r2, #4
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_TIM2_Init+0xe0>)
 8001642:	f004 fe23 	bl	800628c <HAL_TIM_PWM_ConfigChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800164c:	f000 f912 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	3738      	adds	r7, #56	; 0x38
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200002e4 	.word	0x200002e4

0800165c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08e      	sub	sp, #56	; 0x38
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]
 800166c:	609a      	str	r2, [r3, #8]
 800166e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167c:	463b      	mov	r3, r7
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]
 800168a:	615a      	str	r2, [r3, #20]
 800168c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800168e:	4b32      	ldr	r3, [pc, #200]	; (8001758 <MX_TIM3_Init+0xfc>)
 8001690:	4a32      	ldr	r2, [pc, #200]	; (800175c <MX_TIM3_Init+0x100>)
 8001692:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001694:	4b30      	ldr	r3, [pc, #192]	; (8001758 <MX_TIM3_Init+0xfc>)
 8001696:	2209      	movs	r2, #9
 8001698:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <MX_TIM3_Init+0xfc>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 149;
 80016a0:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <MX_TIM3_Init+0xfc>)
 80016a2:	2295      	movs	r2, #149	; 0x95
 80016a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a6:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <MX_TIM3_Init+0xfc>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <MX_TIM3_Init+0xfc>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016b2:	4829      	ldr	r0, [pc, #164]	; (8001758 <MX_TIM3_Init+0xfc>)
 80016b4:	f004 fc20 	bl	8005ef8 <HAL_TIM_Base_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016be:	f000 f8d9 	bl	8001874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016cc:	4619      	mov	r1, r3
 80016ce:	4822      	ldr	r0, [pc, #136]	; (8001758 <MX_TIM3_Init+0xfc>)
 80016d0:	f004 fef0 	bl	80064b4 <HAL_TIM_ConfigClockSource>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016da:	f000 f8cb 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016de:	481e      	ldr	r0, [pc, #120]	; (8001758 <MX_TIM3_Init+0xfc>)
 80016e0:	f004 fc61 	bl	8005fa6 <HAL_TIM_PWM_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016ea:	f000 f8c3 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016ee:	2320      	movs	r3, #32
 80016f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	4816      	ldr	r0, [pc, #88]	; (8001758 <MX_TIM3_Init+0xfc>)
 80016fe:	f005 fc83 	bl	8007008 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001708:	f000 f8b4 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170c:	2360      	movs	r3, #96	; 0x60
 800170e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800171c:	463b      	mov	r3, r7
 800171e:	2200      	movs	r2, #0
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_TIM3_Init+0xfc>)
 8001724:	f004 fdb2 	bl	800628c <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800172e:	f000 f8a1 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	2204      	movs	r2, #4
 8001736:	4619      	mov	r1, r3
 8001738:	4807      	ldr	r0, [pc, #28]	; (8001758 <MX_TIM3_Init+0xfc>)
 800173a:	f004 fda7 	bl	800628c <HAL_TIM_PWM_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001744:	f000 f896 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001748:	4803      	ldr	r0, [pc, #12]	; (8001758 <MX_TIM3_Init+0xfc>)
 800174a:	f000 f991 	bl	8001a70 <HAL_TIM_MspPostInit>

}
 800174e:	bf00      	nop
 8001750:	3738      	adds	r7, #56	; 0x38
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000330 	.word	0x20000330
 800175c:	40000400 	.word	0x40000400

08001760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 8001766:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <MX_USART2_UART_Init+0x94>)
 8001768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017a8:	4811      	ldr	r0, [pc, #68]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 80017aa:	f005 fcc3 	bl	8007134 <HAL_UART_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017b4:	f000 f85e 	bl	8001874 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b8:	2100      	movs	r1, #0
 80017ba:	480d      	ldr	r0, [pc, #52]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 80017bc:	f007 fc65 	bl	800908a <HAL_UARTEx_SetTxFifoThreshold>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017c6:	f000 f855 	bl	8001874 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 80017ce:	f007 fc9a 	bl	8009106 <HAL_UARTEx_SetRxFifoThreshold>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017d8:	f000 f84c 	bl	8001874 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_USART2_UART_Init+0x90>)
 80017de:	f007 fc1b 	bl	8009018 <HAL_UARTEx_DisableFifoMode>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017e8:	f000 f844 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000037c 	.word	0x2000037c
 80017f4:	40004400 	.word	0x40004400

080017f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800180e:	4b18      	ldr	r3, [pc, #96]	; (8001870 <MX_GPIO_Init+0x78>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	4a17      	ldr	r2, [pc, #92]	; (8001870 <MX_GPIO_Init+0x78>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_GPIO_Init+0x78>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <MX_GPIO_Init+0x78>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <MX_GPIO_Init+0x78>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_GPIO_Init+0x78>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_ADC_GPIO_Port, TEST_ADC_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001846:	f003 faef 	bl	8004e28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_ADC_Pin */
  GPIO_InitStruct.Pin = TEST_ADC_Pin;
 800184a:	2380      	movs	r3, #128	; 0x80
 800184c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST_ADC_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001864:	f003 f95e 	bl	8004b24 <HAL_GPIO_Init>

}
 8001868:	bf00      	nop
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000

08001874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001878:	b672      	cpsid	i
}
 800187a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800187c:	e7fe      	b.n	800187c <Error_Handler+0x8>
	...

08001880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_MspInit+0x44>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188a:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <HAL_MspInit+0x44>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6613      	str	r3, [r2, #96]	; 0x60
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_MspInit+0x44>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_MspInit+0x44>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_MspInit+0x44>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6593      	str	r3, [r2, #88]	; 0x58
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_MspInit+0x44>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018b6:	f003 fb8d 	bl	8004fd4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b0a0      	sub	sp, #128	; 0x80
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	2254      	movs	r2, #84	; 0x54
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f007 ff35 	bl	8009758 <memset>
  if(hadc->Instance==ADC1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f6:	d13d      	bne.n	8001974 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80018f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80018fe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001902:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001904:	f107 0318 	add.w	r3, r7, #24
 8001908:	4618      	mov	r0, r3
 800190a:	f004 f8a7 	bl	8005a5c <HAL_RCCEx_PeriphCLKConfig>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001914:	f7ff ffae 	bl	8001874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001918:	4b39      	ldr	r3, [pc, #228]	; (8001a00 <HAL_ADC_MspInit+0x138>)
 800191a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191c:	4a38      	ldr	r2, [pc, #224]	; (8001a00 <HAL_ADC_MspInit+0x138>)
 800191e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001924:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_ADC_MspInit+0x138>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001930:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <HAL_ADC_MspInit+0x138>)
 8001932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001934:	4a32      	ldr	r2, [pc, #200]	; (8001a00 <HAL_ADC_MspInit+0x138>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <HAL_ADC_MspInit+0x138>)
 800193e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001948:	2301      	movs	r3, #1
 800194a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194c:	2303      	movs	r3, #3
 800194e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001958:	4619      	mov	r1, r3
 800195a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195e:	f003 f8e1 	bl	8004b24 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	2012      	movs	r0, #18
 8001968:	f002 ffe7 	bl	800493a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800196c:	2012      	movs	r0, #18
 800196e:	f002 fffe 	bl	800496e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001972:	e041      	b.n	80019f8 <HAL_ADC_MspInit+0x130>
  else if(hadc->Instance==ADC3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a22      	ldr	r2, [pc, #136]	; (8001a04 <HAL_ADC_MspInit+0x13c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d13c      	bne.n	80019f8 <HAL_ADC_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800197e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001982:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001988:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800198a:	f107 0318 	add.w	r3, r7, #24
 800198e:	4618      	mov	r0, r3
 8001990:	f004 f864 	bl	8005a5c <HAL_RCCEx_PeriphCLKConfig>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 800199a:	f7ff ff6b 	bl	8001874 <Error_Handler>
    __HAL_RCC_ADC345_CLK_ENABLE();
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_ADC_MspInit+0x138>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <HAL_ADC_MspInit+0x138>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <HAL_ADC_MspInit+0x138>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_ADC_MspInit+0x138>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_ADC_MspInit+0x138>)
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_ADC_MspInit+0x138>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 80019ce:	f242 0303 	movw	r3, #8195	; 0x2003
 80019d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d4:	2303      	movs	r3, #3
 80019d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019e0:	4619      	mov	r1, r3
 80019e2:	4809      	ldr	r0, [pc, #36]	; (8001a08 <HAL_ADC_MspInit+0x140>)
 80019e4:	f003 f89e 	bl	8004b24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2100      	movs	r1, #0
 80019ec:	202f      	movs	r0, #47	; 0x2f
 80019ee:	f002 ffa4 	bl	800493a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80019f2:	202f      	movs	r0, #47	; 0x2f
 80019f4:	f002 ffbb 	bl	800496e <HAL_NVIC_EnableIRQ>
}
 80019f8:	bf00      	nop
 80019fa:	3780      	adds	r7, #128	; 0x80
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	50000400 	.word	0x50000400
 8001a08:	48000400 	.word	0x48000400

08001a0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1c:	d10c      	bne.n	8001a38 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_TIM_Base_MspInit+0x5c>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <HAL_TIM_Base_MspInit+0x5c>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <HAL_TIM_Base_MspInit+0x5c>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a36:	e010      	b.n	8001a5a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <HAL_TIM_Base_MspInit+0x60>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10b      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <HAL_TIM_Base_MspInit+0x5c>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	4a08      	ldr	r2, [pc, #32]	; (8001a68 <HAL_TIM_Base_MspInit+0x5c>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a4e:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_TIM_Base_MspInit+0x5c>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40000400 	.word	0x40000400

08001a70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_TIM_MspPostInit+0x64>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d11c      	bne.n	8001acc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_TIM_MspPostInit+0x68>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_TIM_MspPostInit+0x68>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_TIM_MspPostInit+0x68>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001aaa:	2350      	movs	r3, #80	; 0x50
 8001aac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	f107 030c 	add.w	r3, r7, #12
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ac8:	f003 f82c 	bl	8004b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001acc:	bf00      	nop
 8001ace:	3720      	adds	r7, #32
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40000400 	.word	0x40000400
 8001ad8:	40021000 	.word	0x40021000

08001adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b09e      	sub	sp, #120	; 0x78
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	2254      	movs	r2, #84	; 0x54
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f007 fe2b 	bl	8009758 <memset>
  if(huart->Instance==USART2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a23      	ldr	r2, [pc, #140]	; (8001b94 <HAL_UART_MspInit+0xb8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d13e      	bne.n	8001b8a <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 ff9f 	bl	8005a5c <HAL_RCCEx_PeriphCLKConfig>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b24:	f7ff fea6 	bl	8001874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_UART_MspInit+0xbc>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2c:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <HAL_UART_MspInit+0xbc>)
 8001b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b32:	6593      	str	r3, [r2, #88]	; 0x58
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <HAL_UART_MspInit+0xbc>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_UART_MspInit+0xbc>)
 8001b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <HAL_UART_MspInit+0xbc>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_UART_MspInit+0xbc>)
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b58:	230c      	movs	r3, #12
 8001b5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b64:	2300      	movs	r3, #0
 8001b66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b68:	2307      	movs	r3, #7
 8001b6a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b70:	4619      	mov	r1, r3
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b76:	f002 ffd5 	bl	8004b24 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2026      	movs	r0, #38	; 0x26
 8001b80:	f002 fedb 	bl	800493a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b84:	2026      	movs	r0, #38	; 0x26
 8001b86:	f002 fef2 	bl	800496e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3778      	adds	r7, #120	; 0x78
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40004400 	.word	0x40004400
 8001b98:	40021000 	.word	0x40021000

08001b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <NMI_Handler+0x4>

08001ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <MemManage_Handler+0x4>

08001bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <BusFault_Handler+0x4>

08001bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <UsageFault_Handler+0x4>

08001bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001be8:	f000 f974 	bl	8001ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <ADC1_2_IRQHandler+0x10>)
 8001bf6:	f000 fefb 	bl	80029f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000020c 	.word	0x2000020c

08001c04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <USART2_IRQHandler+0x10>)
 8001c0a:	f005 fbcf 	bl	80073ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000037c 	.word	0x2000037c

08001c18 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8001c1c:	4802      	ldr	r0, [pc, #8]	; (8001c28 <ADC3_IRQHandler+0x10>)
 8001c1e:	f000 fee7 	bl	80029f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000278 	.word	0x20000278

08001c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
	return 1;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_kill>:

int _kill(int pid, int sig)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c46:	f007 fd4f 	bl	80096e8 <__errno>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2216      	movs	r2, #22
 8001c4e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_exit>:

void _exit (int status)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ffe7 	bl	8001c3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c6e:	e7fe      	b.n	8001c6e <_exit+0x12>

08001c70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e00a      	b.n	8001c98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c82:	f3af 8000 	nop.w
 8001c86:	4601      	mov	r1, r0
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	60ba      	str	r2, [r7, #8]
 8001c8e:	b2ca      	uxtb	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dbf0      	blt.n	8001c82 <_read+0x12>
	}

return len;
 8001ca0:	687b      	ldr	r3, [r7, #4]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3718      	adds	r7, #24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e009      	b.n	8001cd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	60ba      	str	r2, [r7, #8]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697a      	ldr	r2, [r7, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	dbf1      	blt.n	8001cbc <_write+0x12>
	}
	return len;
 8001cd8:	687b      	ldr	r3, [r7, #4]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_close>:

int _close(int file)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
	return -1;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d0a:	605a      	str	r2, [r3, #4]
	return 0;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <_isatty>:

int _isatty(int file)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
	return 1;
 8001d22:	2301      	movs	r3, #1
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	; (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f007 fcb4 	bl	80096e8 <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20020000 	.word	0x20020000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	20000498 	.word	0x20000498
 8001db4:	200004d8 	.word	0x200004d8

08001db8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ddc:	480d      	ldr	r0, [pc, #52]	; (8001e14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dde:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de0:	480d      	ldr	r0, [pc, #52]	; (8001e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001de2:	490e      	ldr	r1, [pc, #56]	; (8001e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de4:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <LoopForever+0xe>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001de8:	e002      	b.n	8001df0 <LoopCopyDataInit>

08001dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dee:	3304      	adds	r3, #4

08001df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df4:	d3f9      	bcc.n	8001dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001df8:	4c0b      	ldr	r4, [pc, #44]	; (8001e28 <LoopForever+0x16>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dfc:	e001      	b.n	8001e02 <LoopFillZerobss>

08001dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e00:	3204      	adds	r2, #4

08001e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e04:	d3fb      	bcc.n	8001dfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e06:	f7ff ffd7 	bl	8001db8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f007 fc73 	bl	80096f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e0e:	f7ff f91b 	bl	8001048 <main>

08001e12 <LoopForever>:

LoopForever:
    b LoopForever
 8001e12:	e7fe      	b.n	8001e12 <LoopForever>
  ldr   r0, =_estack
 8001e14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001e20:	0800e7e0 	.word	0x0800e7e0
  ldr r2, =_sbss
 8001e24:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001e28:	200004d4 	.word	0x200004d4

08001e2c <ADC4_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC4_IRQHandler>

08001e2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e38:	2003      	movs	r0, #3
 8001e3a:	f002 fd73 	bl	8004924 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e3e:	200f      	movs	r0, #15
 8001e40:	f000 f80e 	bl	8001e60 <HAL_InitTick>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	71fb      	strb	r3, [r7, #7]
 8001e4e:	e001      	b.n	8001e54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e50:	f7ff fd16 	bl	8001880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e54:	79fb      	ldrb	r3, [r7, #7]

}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <HAL_InitTick+0x68>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d022      	beq.n	8001eba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_InitTick+0x6c>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_InitTick+0x68>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f002 fd7e 	bl	800498a <HAL_SYSTICK_Config>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10f      	bne.n	8001eb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	d809      	bhi.n	8001eae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea2:	f002 fd4a 	bl	800493a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <HAL_InitTick+0x70>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	e007      	b.n	8001ebe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	73fb      	strb	r3, [r7, #15]
 8001eb2:	e004      	b.n	8001ebe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]
 8001eb8:	e001      	b.n	8001ebe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	20000000 	.word	0x20000000
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ed8:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_IncTick+0x1c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_IncTick+0x20>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a03      	ldr	r2, [pc, #12]	; (8001ef0 <HAL_IncTick+0x1c>)
 8001ee4:	6013      	str	r3, [r2, #0]
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	2000049c 	.word	0x2000049c
 8001ef4:	20000008 	.word	0x20000008

08001ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return uwTick;
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <HAL_GetTick+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	2000049c 	.word	0x2000049c

08001f10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	609a      	str	r2, [r3, #8]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3360      	adds	r3, #96	; 0x60
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <LL_ADC_SetOffset+0x44>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fb0:	bf00      	nop
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	03fff000 	.word	0x03fff000

08001fc0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3360      	adds	r3, #96	; 0x60
 8001fce:	461a      	mov	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3360      	adds	r3, #96	; 0x60
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	431a      	orrs	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002016:	bf00      	nop
 8002018:	371c      	adds	r7, #28
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002022:	b480      	push	{r7}
 8002024:	b087      	sub	sp, #28
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3360      	adds	r3, #96	; 0x60
 8002032:	461a      	mov	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	431a      	orrs	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800204c:	bf00      	nop
 800204e:	371c      	adds	r7, #28
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	3360      	adds	r3, #96	; 0x60
 8002068:	461a      	mov	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	431a      	orrs	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	615a      	str	r2, [r3, #20]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020c8:	2301      	movs	r3, #1
 80020ca:	e000      	b.n	80020ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020da:	b480      	push	{r7}
 80020dc:	b087      	sub	sp, #28
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	3330      	adds	r3, #48	; 0x30
 80020ea:	461a      	mov	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	4413      	add	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f003 031f 	and.w	r3, r3, #31
 8002104:	211f      	movs	r1, #31
 8002106:	fa01 f303 	lsl.w	r3, r1, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	401a      	ands	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	f003 011f 	and.w	r1, r3, #31
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	431a      	orrs	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002126:	bf00      	nop
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002158:	b480      	push	{r7}
 800215a:	b087      	sub	sp, #28
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3314      	adds	r3, #20
 8002168:	461a      	mov	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	0e5b      	lsrs	r3, r3, #25
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	4413      	add	r3, r2
 8002176:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	0d1b      	lsrs	r3, r3, #20
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	2107      	movs	r1, #7
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	401a      	ands	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	0d1b      	lsrs	r3, r3, #20
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	431a      	orrs	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021a2:	bf00      	nop
 80021a4:	371c      	adds	r7, #28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <LL_ADC_SetChannelSingleDiff+0x4c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d10a      	bne.n	80021da <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80021d8:	e00a      	b.n	80021f0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e6:	43db      	mvns	r3, r3
 80021e8:	401a      	ands	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	407f0000 	.word	0x407f0000

08002200 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 031f 	and.w	r3, r3, #31
}
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002248:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6093      	str	r3, [r2, #8]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800226c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002270:	d101      	bne.n	8002276 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002294:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002298:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <LL_ADC_IsEnabled+0x18>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <LL_ADC_IsEnabled+0x1a>
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002332:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002336:	f043 0204 	orr.w	r2, r3, #4
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b04      	cmp	r3, #4
 800235c:	d101      	bne.n	8002362 <LL_ADC_REG_IsConversionOngoing+0x18>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b08      	cmp	r3, #8
 8002382:	d101      	bne.n	8002388 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e1af      	b.n	8002712 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff fa81 	bl	80018c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff3f 	bl	800225c <LL_ADC_IsDeepPowerDownEnabled>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff25 	bl	8002238 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff5a 	bl	80022ac <LL_ADC_IsInternalRegulatorEnabled>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d115      	bne.n	800242a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff3e 	bl	8002284 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002408:	4b9f      	ldr	r3, [pc, #636]	; (8002688 <HAL_ADC_Init+0x2f0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	4a9f      	ldr	r2, [pc, #636]	; (800268c <HAL_ADC_Init+0x2f4>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	3301      	adds	r3, #1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800241c:	e002      	b.n	8002424 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3b01      	subs	r3, #1
 8002422:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f9      	bne.n	800241e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff3c 	bl	80022ac <LL_ADC_IsInternalRegulatorEnabled>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10d      	bne.n	8002456 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243e:	f043 0210 	orr.w	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff75 	bl	800234a <LL_ADC_REG_IsConversionOngoing>
 8002460:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 8148 	bne.w	8002700 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 8144 	bne.w	8002700 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002480:	f043 0202 	orr.w	r2, r3, #2
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff35 	bl	80022fc <LL_ADC_IsEnabled>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d141      	bne.n	800251c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a0:	d004      	beq.n	80024ac <HAL_ADC_Init+0x114>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a7a      	ldr	r2, [pc, #488]	; (8002690 <HAL_ADC_Init+0x2f8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d10f      	bne.n	80024cc <HAL_ADC_Init+0x134>
 80024ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80024b0:	f7ff ff24 	bl	80022fc <LL_ADC_IsEnabled>
 80024b4:	4604      	mov	r4, r0
 80024b6:	4876      	ldr	r0, [pc, #472]	; (8002690 <HAL_ADC_Init+0x2f8>)
 80024b8:	f7ff ff20 	bl	80022fc <LL_ADC_IsEnabled>
 80024bc:	4603      	mov	r3, r0
 80024be:	4323      	orrs	r3, r4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	bf0c      	ite	eq
 80024c4:	2301      	moveq	r3, #1
 80024c6:	2300      	movne	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	e012      	b.n	80024f2 <HAL_ADC_Init+0x15a>
 80024cc:	4871      	ldr	r0, [pc, #452]	; (8002694 <HAL_ADC_Init+0x2fc>)
 80024ce:	f7ff ff15 	bl	80022fc <LL_ADC_IsEnabled>
 80024d2:	4604      	mov	r4, r0
 80024d4:	4870      	ldr	r0, [pc, #448]	; (8002698 <HAL_ADC_Init+0x300>)
 80024d6:	f7ff ff11 	bl	80022fc <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	431c      	orrs	r4, r3
 80024de:	486f      	ldr	r0, [pc, #444]	; (800269c <HAL_ADC_Init+0x304>)
 80024e0:	f7ff ff0c 	bl	80022fc <LL_ADC_IsEnabled>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4323      	orrs	r3, r4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d012      	beq.n	800251c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024fe:	d004      	beq.n	800250a <HAL_ADC_Init+0x172>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a62      	ldr	r2, [pc, #392]	; (8002690 <HAL_ADC_Init+0x2f8>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_ADC_Init+0x176>
 800250a:	4a65      	ldr	r2, [pc, #404]	; (80026a0 <HAL_ADC_Init+0x308>)
 800250c:	e000      	b.n	8002510 <HAL_ADC_Init+0x178>
 800250e:	4a65      	ldr	r2, [pc, #404]	; (80026a4 <HAL_ADC_Init+0x30c>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4619      	mov	r1, r3
 8002516:	4610      	mov	r0, r2
 8002518:	f7ff fcfa 	bl	8001f10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	7f5b      	ldrb	r3, [r3, #29]
 8002520:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002526:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800252c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002532:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800253a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002546:	2b01      	cmp	r3, #1
 8002548:	d106      	bne.n	8002558 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	3b01      	subs	r3, #1
 8002550:	045b      	lsls	r3, r3, #17
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <HAL_ADC_Init+0x310>)
 800257c:	4013      	ands	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	69b9      	ldr	r1, [r7, #24]
 8002584:	430b      	orrs	r3, r1
 8002586:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fed1 	bl	800234a <LL_ADC_REG_IsConversionOngoing>
 80025a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fede 	bl	8002370 <LL_ADC_INJ_IsConversionOngoing>
 80025b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d17f      	bne.n	80026bc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d17c      	bne.n	80026bc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025c6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ce:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025de:	f023 0302 	bic.w	r3, r3, #2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	69b9      	ldr	r1, [r7, #24]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d017      	beq.n	8002624 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002602:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800260c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002610:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6911      	ldr	r1, [r2, #16]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	430b      	orrs	r3, r1
 800261e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002622:	e013      	b.n	800264c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002632:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002644:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002648:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002652:	2b01      	cmp	r3, #1
 8002654:	d12a      	bne.n	80026ac <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002660:	f023 0304 	bic.w	r3, r3, #4
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800266c:	4311      	orrs	r1, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002672:	4311      	orrs	r1, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002678:	430a      	orrs	r2, r1
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	611a      	str	r2, [r3, #16]
 8002686:	e019      	b.n	80026bc <HAL_ADC_Init+0x324>
 8002688:	20000000 	.word	0x20000000
 800268c:	053e2d63 	.word	0x053e2d63
 8002690:	50000100 	.word	0x50000100
 8002694:	50000400 	.word	0x50000400
 8002698:	50000500 	.word	0x50000500
 800269c:	50000600 	.word	0x50000600
 80026a0:	50000300 	.word	0x50000300
 80026a4:	50000700 	.word	0x50000700
 80026a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0201 	bic.w	r2, r2, #1
 80026ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d10c      	bne.n	80026de <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f023 010f 	bic.w	r1, r3, #15
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	1e5a      	subs	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
 80026dc:	e007      	b.n	80026ee <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 020f 	bic.w	r2, r2, #15
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	f023 0303 	bic.w	r3, r3, #3
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	65da      	str	r2, [r3, #92]	; 0x5c
 80026fe:	e007      	b.n	8002710 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	f043 0210 	orr.w	r2, r3, #16
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002710:	7ffb      	ldrb	r3, [r7, #31]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	; 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop

0800271c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800272c:	d004      	beq.n	8002738 <HAL_ADC_Start_IT+0x1c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a93      	ldr	r2, [pc, #588]	; (8002980 <HAL_ADC_Start_IT+0x264>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d101      	bne.n	800273c <HAL_ADC_Start_IT+0x20>
 8002738:	4b92      	ldr	r3, [pc, #584]	; (8002984 <HAL_ADC_Start_IT+0x268>)
 800273a:	e000      	b.n	800273e <HAL_ADC_Start_IT+0x22>
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <HAL_ADC_Start_IT+0x26c>)
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fd5e 	bl	8002200 <LL_ADC_GetMultimode>
 8002744:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fdfd 	bl	800234a <LL_ADC_REG_IsConversionOngoing>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 8134 	bne.w	80029c0 <HAL_ADC_Start_IT+0x2a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <HAL_ADC_Start_IT+0x4a>
 8002762:	2302      	movs	r3, #2
 8002764:	e131      	b.n	80029ca <HAL_ADC_Start_IT+0x2ae>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fff2 	bl	8003758 <ADC_Enable>
 8002774:	4603      	mov	r3, r0
 8002776:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 811b 	bne.w	80029b6 <HAL_ADC_Start_IT+0x29a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a79      	ldr	r2, [pc, #484]	; (8002980 <HAL_ADC_Start_IT+0x264>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d009      	beq.n	80027b2 <HAL_ADC_Start_IT+0x96>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a7a      	ldr	r2, [pc, #488]	; (800298c <HAL_ADC_Start_IT+0x270>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d002      	beq.n	80027ae <HAL_ADC_Start_IT+0x92>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_Start_IT+0x9a>
 80027ae:	4b78      	ldr	r3, [pc, #480]	; (8002990 <HAL_ADC_Start_IT+0x274>)
 80027b0:	e001      	b.n	80027b6 <HAL_ADC_Start_IT+0x9a>
 80027b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d002      	beq.n	80027c4 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d105      	bne.n	80027d0 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e0:	f023 0206 	bic.w	r2, r3, #6
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	661a      	str	r2, [r3, #96]	; 0x60
 80027e8:	e002      	b.n	80027f0 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	221c      	movs	r2, #28
 80027f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 021c 	bic.w	r2, r2, #28
 800280e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d108      	bne.n	800282a <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0208 	orr.w	r2, r2, #8
 8002826:	605a      	str	r2, [r3, #4]
          break;
 8002828:	e008      	b.n	800283c <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	685a      	ldr	r2, [r3, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0204 	orr.w	r2, r2, #4
 8002838:	605a      	str	r2, [r3, #4]
          break;
 800283a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d107      	bne.n	8002854 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0210 	orr.w	r2, r2, #16
 8002852:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a49      	ldr	r2, [pc, #292]	; (8002980 <HAL_ADC_Start_IT+0x264>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_ADC_Start_IT+0x156>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_ADC_Start_IT+0x270>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d002      	beq.n	800286e <HAL_ADC_Start_IT+0x152>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	e003      	b.n	8002876 <HAL_ADC_Start_IT+0x15a>
 800286e:	4b48      	ldr	r3, [pc, #288]	; (8002990 <HAL_ADC_Start_IT+0x274>)
 8002870:	e001      	b.n	8002876 <HAL_ADC_Start_IT+0x15a>
 8002872:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	4293      	cmp	r3, r2
 800287c:	d008      	beq.n	8002890 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	2b05      	cmp	r3, #5
 8002888:	d002      	beq.n	8002890 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	2b09      	cmp	r3, #9
 800288e:	d13b      	bne.n	8002908 <HAL_ADC_Start_IT+0x1ec>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d02d      	beq.n	80028fa <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d110      	bne.n	80028d8 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0220 	bic.w	r2, r2, #32
 80028c4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028d4:	605a      	str	r2, [r3, #4]
              break;
 80028d6:	e011      	b.n	80028fc <HAL_ADC_Start_IT+0x1e0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028e6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0220 	orr.w	r2, r2, #32
 80028f6:	605a      	str	r2, [r3, #4]
              break;
 80028f8:	e000      	b.n	80028fc <HAL_ADC_Start_IT+0x1e0>
          }
        }
 80028fa:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fd0e 	bl	8002322 <LL_ADC_REG_StartConversion>
 8002906:	e05f      	b.n	80029c8 <HAL_ADC_Start_IT+0x2ac>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a19      	ldr	r2, [pc, #100]	; (8002980 <HAL_ADC_Start_IT+0x264>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_ADC_Start_IT+0x216>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1a      	ldr	r2, [pc, #104]	; (800298c <HAL_ADC_Start_IT+0x270>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d002      	beq.n	800292e <HAL_ADC_Start_IT+0x212>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	e003      	b.n	8002936 <HAL_ADC_Start_IT+0x21a>
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_ADC_Start_IT+0x274>)
 8002930:	e001      	b.n	8002936 <HAL_ADC_Start_IT+0x21a>
 8002932:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002936:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d040      	beq.n	80029c6 <HAL_ADC_Start_IT+0x2aa>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002948:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800294c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b08      	cmp	r3, #8
 800295a:	d11b      	bne.n	8002994 <HAL_ADC_Start_IT+0x278>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0220 	bic.w	r2, r2, #32
 800296a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800297a:	605a      	str	r2, [r3, #4]
              break;
 800297c:	e024      	b.n	80029c8 <HAL_ADC_Start_IT+0x2ac>
 800297e:	bf00      	nop
 8002980:	50000100 	.word	0x50000100
 8002984:	50000300 	.word	0x50000300
 8002988:	50000700 	.word	0x50000700
 800298c:	50000500 	.word	0x50000500
 8002990:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029a2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0220 	orr.w	r2, r2, #32
 80029b2:	605a      	str	r2, [r3, #4]
              break;
 80029b4:	e008      	b.n	80029c8 <HAL_ADC_Start_IT+0x2ac>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80029be:	e003      	b.n	80029c8 <HAL_ADC_Start_IT+0x2ac>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029c0:	2302      	movs	r3, #2
 80029c2:	75fb      	strb	r3, [r7, #23]
 80029c4:	e000      	b.n	80029c8 <HAL_ADC_Start_IT+0x2ac>
        }
 80029c6:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop

080029d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a14:	d004      	beq.n	8002a20 <HAL_ADC_IRQHandler+0x30>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a8e      	ldr	r2, [pc, #568]	; (8002c54 <HAL_ADC_IRQHandler+0x264>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_IRQHandler+0x34>
 8002a20:	4b8d      	ldr	r3, [pc, #564]	; (8002c58 <HAL_ADC_IRQHandler+0x268>)
 8002a22:	e000      	b.n	8002a26 <HAL_ADC_IRQHandler+0x36>
 8002a24:	4b8d      	ldr	r3, [pc, #564]	; (8002c5c <HAL_ADC_IRQHandler+0x26c>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fbea 	bl	8002200 <LL_ADC_GetMultimode>
 8002a2c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d017      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x78>
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d012      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f001 f853 	bl	8003b06 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2202      	movs	r2, #2
 8002a66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d004      	beq.n	8002a7c <HAL_ADC_IRQHandler+0x8c>
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10b      	bne.n	8002a94 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8094 	beq.w	8002bb0 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 808e 	beq.w	8002bb0 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff faff 	bl	80020b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d072      	beq.n	8002ba2 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a64      	ldr	r2, [pc, #400]	; (8002c54 <HAL_ADC_IRQHandler+0x264>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d009      	beq.n	8002ada <HAL_ADC_IRQHandler+0xea>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a65      	ldr	r2, [pc, #404]	; (8002c60 <HAL_ADC_IRQHandler+0x270>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d002      	beq.n	8002ad6 <HAL_ADC_IRQHandler+0xe6>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	e003      	b.n	8002ade <HAL_ADC_IRQHandler+0xee>
 8002ad6:	4b63      	ldr	r3, [pc, #396]	; (8002c64 <HAL_ADC_IRQHandler+0x274>)
 8002ad8:	e001      	b.n	8002ade <HAL_ADC_IRQHandler+0xee>
 8002ada:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d008      	beq.n	8002af8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d002      	beq.n	8002af8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b09      	cmp	r3, #9
 8002af6:	d104      	bne.n	8002b02 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	623b      	str	r3, [r7, #32]
 8002b00:	e014      	b.n	8002b2c <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a53      	ldr	r2, [pc, #332]	; (8002c54 <HAL_ADC_IRQHandler+0x264>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d009      	beq.n	8002b20 <HAL_ADC_IRQHandler+0x130>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a53      	ldr	r2, [pc, #332]	; (8002c60 <HAL_ADC_IRQHandler+0x270>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d002      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x12c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	e003      	b.n	8002b24 <HAL_ADC_IRQHandler+0x134>
 8002b1c:	4b51      	ldr	r3, [pc, #324]	; (8002c64 <HAL_ADC_IRQHandler+0x274>)
 8002b1e:	e001      	b.n	8002b24 <HAL_ADC_IRQHandler+0x134>
 8002b20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b24:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d135      	bne.n	8002ba2 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d12e      	bne.n	8002ba2 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fbfe 	bl	800234a <LL_ADC_REG_IsConversionOngoing>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11a      	bne.n	8002b8a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 020c 	bic.w	r2, r2, #12
 8002b62:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d112      	bne.n	8002ba2 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	f043 0201 	orr.w	r2, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b88:	e00b      	b.n	8002ba2 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	f043 0210 	orr.w	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f006 fc08 	bl	80093b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	220c      	movs	r2, #12
 8002bae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d004      	beq.n	8002bc4 <HAL_ADC_IRQHandler+0x1d4>
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10b      	bne.n	8002bdc <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80b3 	beq.w	8002d36 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80ad 	beq.w	8002d36 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d105      	bne.n	8002bf4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fa9a 	bl	8002132 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002bfe:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fa55 	bl	80020b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c0a:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a10      	ldr	r2, [pc, #64]	; (8002c54 <HAL_ADC_IRQHandler+0x264>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d009      	beq.n	8002c2a <HAL_ADC_IRQHandler+0x23a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a11      	ldr	r2, [pc, #68]	; (8002c60 <HAL_ADC_IRQHandler+0x270>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d002      	beq.n	8002c26 <HAL_ADC_IRQHandler+0x236>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	e003      	b.n	8002c2e <HAL_ADC_IRQHandler+0x23e>
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_ADC_IRQHandler+0x274>)
 8002c28:	e001      	b.n	8002c2e <HAL_ADC_IRQHandler+0x23e>
 8002c2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d008      	beq.n	8002c48 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d002      	beq.n	8002c48 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b07      	cmp	r3, #7
 8002c46:	d10f      	bne.n	8002c68 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	623b      	str	r3, [r7, #32]
 8002c50:	e01f      	b.n	8002c92 <HAL_ADC_IRQHandler+0x2a2>
 8002c52:	bf00      	nop
 8002c54:	50000100 	.word	0x50000100
 8002c58:	50000300 	.word	0x50000300
 8002c5c:	50000700 	.word	0x50000700
 8002c60:	50000500 	.word	0x50000500
 8002c64:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a8b      	ldr	r2, [pc, #556]	; (8002e9c <HAL_ADC_IRQHandler+0x4ac>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_ADC_IRQHandler+0x296>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a8a      	ldr	r2, [pc, #552]	; (8002ea0 <HAL_ADC_IRQHandler+0x4b0>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d002      	beq.n	8002c82 <HAL_ADC_IRQHandler+0x292>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	e003      	b.n	8002c8a <HAL_ADC_IRQHandler+0x29a>
 8002c82:	4b88      	ldr	r3, [pc, #544]	; (8002ea4 <HAL_ADC_IRQHandler+0x4b4>)
 8002c84:	e001      	b.n	8002c8a <HAL_ADC_IRQHandler+0x29a>
 8002c86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c8a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d047      	beq.n	8002d28 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_ADC_IRQHandler+0x2c2>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d03f      	beq.n	8002d28 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d13a      	bne.n	8002d28 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b40      	cmp	r3, #64	; 0x40
 8002cbe:	d133      	bne.n	8002d28 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d12e      	bne.n	8002d28 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fb4e 	bl	8002370 <LL_ADC_INJ_IsConversionOngoing>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d11a      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ce8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d112      	bne.n	8002d28 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d06:	f043 0201 	orr.w	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d0e:	e00b      	b.n	8002d28 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	f043 0210 	orr.w	r2, r3, #16
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fec4 	bl	8003ab6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2260      	movs	r2, #96	; 0x60
 8002d34:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d011      	beq.n	8002d64 <HAL_ADC_IRQHandler+0x374>
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00c      	beq.n	8002d64 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f8aa 	bl	8002eb0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2280      	movs	r2, #128	; 0x80
 8002d62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d012      	beq.n	8002d94 <HAL_ADC_IRQHandler+0x3a4>
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00d      	beq.n	8002d94 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 feaa 	bl	8003ade <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <HAL_ADC_IRQHandler+0x3d4>
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00d      	beq.n	8002dc4 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fe9c 	bl	8003af2 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d043      	beq.n	8002e56 <HAL_ADC_IRQHandler+0x466>
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	f003 0310 	and.w	r3, r3, #16
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d03e      	beq.n	8002e56 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d102      	bne.n	8002de6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002de0:	2301      	movs	r3, #1
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
 8002de4:	e021      	b.n	8002e2a <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d015      	beq.n	8002e18 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df4:	d004      	beq.n	8002e00 <HAL_ADC_IRQHandler+0x410>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a28      	ldr	r2, [pc, #160]	; (8002e9c <HAL_ADC_IRQHandler+0x4ac>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_IRQHandler+0x414>
 8002e00:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <HAL_ADC_IRQHandler+0x4b8>)
 8002e02:	e000      	b.n	8002e06 <HAL_ADC_IRQHandler+0x416>
 8002e04:	4b29      	ldr	r3, [pc, #164]	; (8002eac <HAL_ADC_IRQHandler+0x4bc>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fa08 	bl	800221c <LL_ADC_GetMultiDMATransfer>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002e12:	2301      	movs	r3, #1
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24
 8002e16:	e008      	b.n	8002e2a <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002e26:	2301      	movs	r3, #1
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d10e      	bne.n	8002e4e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e40:	f043 0202 	orr.w	r2, r3, #2
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f83b 	bl	8002ec4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2210      	movs	r2, #16
 8002e54:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d018      	beq.n	8002e92 <HAL_ADC_IRQHandler+0x4a2>
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d013      	beq.n	8002e92 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7a:	f043 0208 	orr.w	r2, r3, #8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fe1c 	bl	8003aca <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002e92:	bf00      	nop
 8002e94:	3728      	adds	r7, #40	; 0x28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	50000100 	.word	0x50000100
 8002ea0:	50000500 	.word	0x50000500
 8002ea4:	50000400 	.word	0x50000400
 8002ea8:	50000300 	.word	0x50000300
 8002eac:	50000700 	.word	0x50000700

08002eb0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b0b6      	sub	sp, #216	; 0xd8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d102      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x24>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	f000 bc13 	b.w	8003722 <HAL_ADC_ConfigChannel+0x84a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fa1e 	bl	800234a <LL_ADC_REG_IsConversionOngoing>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f040 83f3 	bne.w	80036fc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6859      	ldr	r1, [r3, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	f7ff f8d9 	bl	80020da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fa0c 	bl	800234a <LL_ADC_REG_IsConversionOngoing>
 8002f32:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fa18 	bl	8002370 <LL_ADC_INJ_IsConversionOngoing>
 8002f40:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f040 81d9 	bne.w	8003300 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f040 81d4 	bne.w	8003300 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f60:	d10f      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	f7ff f8f3 	bl	8002158 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff f887 	bl	800208e <LL_ADC_SetSamplingTimeCommonConfig>
 8002f80:	e00e      	b.n	8002fa0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6819      	ldr	r1, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f7ff f8e2 	bl	8002158 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff f877 	bl	800208e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	08db      	lsrs	r3, r3, #3
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d022      	beq.n	8003008 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6818      	ldr	r0, [r3, #0]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	6919      	ldr	r1, [r3, #16]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fd2:	f7fe ffd1 	bl	8001f78 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6919      	ldr	r1, [r3, #16]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	f7ff f81d 	bl	8002022 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6919      	ldr	r1, [r3, #16]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	7f1b      	ldrb	r3, [r3, #28]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d102      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x126>
 8002ff8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ffc:	e000      	b.n	8003000 <HAL_ADC_ConfigChannel+0x128>
 8002ffe:	2300      	movs	r3, #0
 8003000:	461a      	mov	r2, r3
 8003002:	f7ff f829 	bl	8002058 <LL_ADC_SetOffsetSaturation>
 8003006:	e17b      	b.n	8003300 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2100      	movs	r1, #0
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe ffd6 	bl	8001fc0 <LL_ADC_GetOffsetChannel>
 8003014:	4603      	mov	r3, r0
 8003016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x15c>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2100      	movs	r1, #0
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe ffcb 	bl	8001fc0 <LL_ADC_GetOffsetChannel>
 800302a:	4603      	mov	r3, r0
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	f003 021f 	and.w	r2, r3, #31
 8003032:	e01e      	b.n	8003072 <HAL_ADC_ConfigChannel+0x19a>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2100      	movs	r1, #0
 800303a:	4618      	mov	r0, r3
 800303c:	f7fe ffc0 	bl	8001fc0 <LL_ADC_GetOffsetChannel>
 8003040:	4603      	mov	r3, r0
 8003042:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800304a:	fa93 f3a3 	rbit	r3, r3
 800304e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003052:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003056:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800305a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003062:	2320      	movs	r3, #32
 8003064:	e004      	b.n	8003070 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800306a:	fab3 f383 	clz	r3, r3
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307a:	2b00      	cmp	r3, #0
 800307c:	d105      	bne.n	800308a <HAL_ADC_ConfigChannel+0x1b2>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	0e9b      	lsrs	r3, r3, #26
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	e018      	b.n	80030bc <HAL_ADC_ConfigChannel+0x1e4>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003096:	fa93 f3a3 	rbit	r3, r3
 800309a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800309e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80030a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80030ae:	2320      	movs	r3, #32
 80030b0:	e004      	b.n	80030bc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80030b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030bc:	429a      	cmp	r2, r3
 80030be:	d106      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2200      	movs	r2, #0
 80030c6:	2100      	movs	r1, #0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe ff8f 	bl	8001fec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2101      	movs	r1, #1
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe ff73 	bl	8001fc0 <LL_ADC_GetOffsetChannel>
 80030da:	4603      	mov	r3, r0
 80030dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <HAL_ADC_ConfigChannel+0x222>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2101      	movs	r1, #1
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe ff68 	bl	8001fc0 <LL_ADC_GetOffsetChannel>
 80030f0:	4603      	mov	r3, r0
 80030f2:	0e9b      	lsrs	r3, r3, #26
 80030f4:	f003 021f 	and.w	r2, r3, #31
 80030f8:	e01e      	b.n	8003138 <HAL_ADC_ConfigChannel+0x260>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2101      	movs	r1, #1
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe ff5d 	bl	8001fc0 <LL_ADC_GetOffsetChannel>
 8003106:	4603      	mov	r3, r0
 8003108:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003118:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800311c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003128:	2320      	movs	r3, #32
 800312a:	e004      	b.n	8003136 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800312c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x278>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	0e9b      	lsrs	r3, r3, #26
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	e018      	b.n	8003182 <HAL_ADC_ConfigChannel+0x2aa>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003164:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003168:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800316c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003174:	2320      	movs	r3, #32
 8003176:	e004      	b.n	8003182 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800317c:	fab3 f383 	clz	r3, r3
 8003180:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003182:	429a      	cmp	r2, r3
 8003184:	d106      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2200      	movs	r2, #0
 800318c:	2101      	movs	r1, #1
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe ff2c 	bl	8001fec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2102      	movs	r1, #2
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe ff10 	bl	8001fc0 <LL_ADC_GetOffsetChannel>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x2e8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2102      	movs	r1, #2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe ff05 	bl	8001fc0 <LL_ADC_GetOffsetChannel>
 80031b6:	4603      	mov	r3, r0
 80031b8:	0e9b      	lsrs	r3, r3, #26
 80031ba:	f003 021f 	and.w	r2, r3, #31
 80031be:	e01e      	b.n	80031fe <HAL_ADC_ConfigChannel+0x326>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2102      	movs	r1, #2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fefa 	bl	8001fc0 <LL_ADC_GetOffsetChannel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80031de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80031e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80031ee:	2320      	movs	r3, #32
 80031f0:	e004      	b.n	80031fc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80031f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031f6:	fab3 f383 	clz	r3, r3
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003206:	2b00      	cmp	r3, #0
 8003208:	d105      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x33e>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0e9b      	lsrs	r3, r3, #26
 8003210:	f003 031f 	and.w	r3, r3, #31
 8003214:	e016      	b.n	8003244 <HAL_ADC_ConfigChannel+0x36c>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003228:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800322a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800322e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003236:	2320      	movs	r3, #32
 8003238:	e004      	b.n	8003244 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800323a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003244:	429a      	cmp	r2, r3
 8003246:	d106      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2200      	movs	r2, #0
 800324e:	2102      	movs	r1, #2
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fecb 	bl	8001fec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2103      	movs	r1, #3
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe feaf 	bl	8001fc0 <LL_ADC_GetOffsetChannel>
 8003262:	4603      	mov	r3, r0
 8003264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x3aa>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2103      	movs	r1, #3
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fea4 	bl	8001fc0 <LL_ADC_GetOffsetChannel>
 8003278:	4603      	mov	r3, r0
 800327a:	0e9b      	lsrs	r3, r3, #26
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	e017      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x3da>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2103      	movs	r1, #3
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fe99 	bl	8001fc0 <LL_ADC_GetOffsetChannel>
 800328e:	4603      	mov	r3, r0
 8003290:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003292:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800329a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800329e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80032a4:	2320      	movs	r3, #32
 80032a6:	e003      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80032a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d105      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x3f2>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	0e9b      	lsrs	r3, r3, #26
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	e011      	b.n	80032ee <HAL_ADC_ConfigChannel+0x416>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032d2:	fa93 f3a3 	rbit	r3, r3
 80032d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80032dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80032e2:	2320      	movs	r3, #32
 80032e4:	e003      	b.n	80032ee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80032e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d106      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2200      	movs	r2, #0
 80032f8:	2103      	movs	r1, #3
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fe76 	bl	8001fec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe fff9 	bl	80022fc <LL_ADC_IsEnabled>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 813d 	bne.w	800358c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6819      	ldr	r1, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	461a      	mov	r2, r3
 8003320:	f7fe ff46 	bl	80021b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4aa2      	ldr	r2, [pc, #648]	; (80035b4 <HAL_ADC_ConfigChannel+0x6dc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	f040 812e 	bne.w	800358c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x480>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	0e9b      	lsrs	r3, r3, #26
 8003346:	3301      	adds	r3, #1
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2b09      	cmp	r3, #9
 800334e:	bf94      	ite	ls
 8003350:	2301      	movls	r3, #1
 8003352:	2300      	movhi	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	e019      	b.n	800338c <HAL_ADC_ConfigChannel+0x4b4>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003360:	fa93 f3a3 	rbit	r3, r3
 8003364:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003368:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800336a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003370:	2320      	movs	r3, #32
 8003372:	e003      	b.n	800337c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003374:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3301      	adds	r3, #1
 800337e:	f003 031f 	and.w	r3, r3, #31
 8003382:	2b09      	cmp	r3, #9
 8003384:	bf94      	ite	ls
 8003386:	2301      	movls	r3, #1
 8003388:	2300      	movhi	r3, #0
 800338a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800338c:	2b00      	cmp	r3, #0
 800338e:	d079      	beq.n	8003484 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003398:	2b00      	cmp	r3, #0
 800339a:	d107      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x4d4>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	0e9b      	lsrs	r3, r3, #26
 80033a2:	3301      	adds	r3, #1
 80033a4:	069b      	lsls	r3, r3, #26
 80033a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033aa:	e015      	b.n	80033d8 <HAL_ADC_ConfigChannel+0x500>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80033ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80033be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	e003      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80033c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	3301      	adds	r3, #1
 80033d2:	069b      	lsls	r3, r3, #26
 80033d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d109      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x520>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	3301      	adds	r3, #1
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2101      	movs	r1, #1
 80033f2:	fa01 f303 	lsl.w	r3, r1, r3
 80033f6:	e017      	b.n	8003428 <HAL_ADC_ConfigChannel+0x550>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003400:	fa93 f3a3 	rbit	r3, r3
 8003404:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003408:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800340a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003410:	2320      	movs	r3, #32
 8003412:	e003      	b.n	800341c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	3301      	adds	r3, #1
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	2101      	movs	r1, #1
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	ea42 0103 	orr.w	r1, r2, r3
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10a      	bne.n	800344e <HAL_ADC_ConfigChannel+0x576>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	0e9b      	lsrs	r3, r3, #26
 800343e:	3301      	adds	r3, #1
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	051b      	lsls	r3, r3, #20
 800344c:	e018      	b.n	8003480 <HAL_ADC_ConfigChannel+0x5a8>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003456:	fa93 f3a3 	rbit	r3, r3
 800345a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003466:	2320      	movs	r3, #32
 8003468:	e003      	b.n	8003472 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800346a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346c:	fab3 f383 	clz	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	3301      	adds	r3, #1
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4613      	mov	r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	4413      	add	r3, r2
 800347e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003480:	430b      	orrs	r3, r1
 8003482:	e07e      	b.n	8003582 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348c:	2b00      	cmp	r3, #0
 800348e:	d107      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x5c8>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	0e9b      	lsrs	r3, r3, #26
 8003496:	3301      	adds	r3, #1
 8003498:	069b      	lsls	r3, r3, #26
 800349a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800349e:	e015      	b.n	80034cc <HAL_ADC_ConfigChannel+0x5f4>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80034b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80034b8:	2320      	movs	r3, #32
 80034ba:	e003      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	fab3 f383 	clz	r3, r3
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	069b      	lsls	r3, r3, #26
 80034c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d109      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x614>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0e9b      	lsrs	r3, r3, #26
 80034de:	3301      	adds	r3, #1
 80034e0:	f003 031f 	and.w	r3, r3, #31
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	e017      	b.n	800351c <HAL_ADC_ConfigChannel+0x644>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	61fb      	str	r3, [r7, #28]
  return result;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003504:	2320      	movs	r3, #32
 8003506:	e003      	b.n	8003510 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	3301      	adds	r3, #1
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f303 	lsl.w	r3, r1, r3
 800351c:	ea42 0103 	orr.w	r1, r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10d      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x670>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0e9b      	lsrs	r3, r3, #26
 8003532:	3301      	adds	r3, #1
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4613      	mov	r3, r2
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	4413      	add	r3, r2
 800353e:	3b1e      	subs	r3, #30
 8003540:	051b      	lsls	r3, r3, #20
 8003542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003546:	e01b      	b.n	8003580 <HAL_ADC_ConfigChannel+0x6a8>
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	fa93 f3a3 	rbit	r3, r3
 8003554:	613b      	str	r3, [r7, #16]
  return result;
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003560:	2320      	movs	r3, #32
 8003562:	e003      	b.n	800356c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	3301      	adds	r3, #1
 800356e:	f003 021f 	and.w	r2, r3, #31
 8003572:	4613      	mov	r3, r2
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	4413      	add	r3, r2
 8003578:	3b1e      	subs	r3, #30
 800357a:	051b      	lsls	r3, r3, #20
 800357c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003580:	430b      	orrs	r3, r1
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	6892      	ldr	r2, [r2, #8]
 8003586:	4619      	mov	r1, r3
 8003588:	f7fe fde6 	bl	8002158 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_ADC_ConfigChannel+0x6e0>)
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80be 	beq.w	8003716 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035a2:	d004      	beq.n	80035ae <HAL_ADC_ConfigChannel+0x6d6>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a04      	ldr	r2, [pc, #16]	; (80035bc <HAL_ADC_ConfigChannel+0x6e4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d10a      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x6ec>
 80035ae:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <HAL_ADC_ConfigChannel+0x6e8>)
 80035b0:	e009      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x6ee>
 80035b2:	bf00      	nop
 80035b4:	407f0000 	.word	0x407f0000
 80035b8:	80080000 	.word	0x80080000
 80035bc:	50000100 	.word	0x50000100
 80035c0:	50000300 	.word	0x50000300
 80035c4:	4b59      	ldr	r3, [pc, #356]	; (800372c <HAL_ADC_ConfigChannel+0x854>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fcc8 	bl	8001f5c <LL_ADC_GetCommonPathInternalCh>
 80035cc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a56      	ldr	r2, [pc, #344]	; (8003730 <HAL_ADC_ConfigChannel+0x858>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d004      	beq.n	80035e4 <HAL_ADC_ConfigChannel+0x70c>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a55      	ldr	r2, [pc, #340]	; (8003734 <HAL_ADC_ConfigChannel+0x85c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d13a      	bne.n	800365a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d134      	bne.n	800365a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035f8:	d005      	beq.n	8003606 <HAL_ADC_ConfigChannel+0x72e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a4e      	ldr	r2, [pc, #312]	; (8003738 <HAL_ADC_ConfigChannel+0x860>)
 8003600:	4293      	cmp	r3, r2
 8003602:	f040 8085 	bne.w	8003710 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800360e:	d004      	beq.n	800361a <HAL_ADC_ConfigChannel+0x742>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a49      	ldr	r2, [pc, #292]	; (800373c <HAL_ADC_ConfigChannel+0x864>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <HAL_ADC_ConfigChannel+0x746>
 800361a:	4a49      	ldr	r2, [pc, #292]	; (8003740 <HAL_ADC_ConfigChannel+0x868>)
 800361c:	e000      	b.n	8003620 <HAL_ADC_ConfigChannel+0x748>
 800361e:	4a43      	ldr	r2, [pc, #268]	; (800372c <HAL_ADC_ConfigChannel+0x854>)
 8003620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003624:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003628:	4619      	mov	r1, r3
 800362a:	4610      	mov	r0, r2
 800362c:	f7fe fc83 	bl	8001f36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003630:	4b44      	ldr	r3, [pc, #272]	; (8003744 <HAL_ADC_ConfigChannel+0x86c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	099b      	lsrs	r3, r3, #6
 8003636:	4a44      	ldr	r2, [pc, #272]	; (8003748 <HAL_ADC_ConfigChannel+0x870>)
 8003638:	fba2 2303 	umull	r2, r3, r2, r3
 800363c:	099b      	lsrs	r3, r3, #6
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800364a:	e002      	b.n	8003652 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3b01      	subs	r3, #1
 8003650:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f9      	bne.n	800364c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003658:	e05a      	b.n	8003710 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a3b      	ldr	r2, [pc, #236]	; (800374c <HAL_ADC_ConfigChannel+0x874>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d125      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x7d8>
 8003664:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d11f      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a31      	ldr	r2, [pc, #196]	; (800373c <HAL_ADC_ConfigChannel+0x864>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d104      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x7ac>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a34      	ldr	r2, [pc, #208]	; (8003750 <HAL_ADC_ConfigChannel+0x878>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d047      	beq.n	8003714 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800368c:	d004      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x7c0>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a2a      	ldr	r2, [pc, #168]	; (800373c <HAL_ADC_ConfigChannel+0x864>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d101      	bne.n	800369c <HAL_ADC_ConfigChannel+0x7c4>
 8003698:	4a29      	ldr	r2, [pc, #164]	; (8003740 <HAL_ADC_ConfigChannel+0x868>)
 800369a:	e000      	b.n	800369e <HAL_ADC_ConfigChannel+0x7c6>
 800369c:	4a23      	ldr	r2, [pc, #140]	; (800372c <HAL_ADC_ConfigChannel+0x854>)
 800369e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a6:	4619      	mov	r1, r3
 80036a8:	4610      	mov	r0, r2
 80036aa:	f7fe fc44 	bl	8001f36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036ae:	e031      	b.n	8003714 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a27      	ldr	r2, [pc, #156]	; (8003754 <HAL_ADC_ConfigChannel+0x87c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d12d      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d127      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1c      	ldr	r2, [pc, #112]	; (800373c <HAL_ADC_ConfigChannel+0x864>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d022      	beq.n	8003716 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036d8:	d004      	beq.n	80036e4 <HAL_ADC_ConfigChannel+0x80c>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a17      	ldr	r2, [pc, #92]	; (800373c <HAL_ADC_ConfigChannel+0x864>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d101      	bne.n	80036e8 <HAL_ADC_ConfigChannel+0x810>
 80036e4:	4a16      	ldr	r2, [pc, #88]	; (8003740 <HAL_ADC_ConfigChannel+0x868>)
 80036e6:	e000      	b.n	80036ea <HAL_ADC_ConfigChannel+0x812>
 80036e8:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_ADC_ConfigChannel+0x854>)
 80036ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036f2:	4619      	mov	r1, r3
 80036f4:	4610      	mov	r0, r2
 80036f6:	f7fe fc1e 	bl	8001f36 <LL_ADC_SetCommonPathInternalCh>
 80036fa:	e00c      	b.n	8003716 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	f043 0220 	orr.w	r2, r3, #32
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800370e:	e002      	b.n	8003716 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003710:	bf00      	nop
 8003712:	e000      	b.n	8003716 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003714:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800371e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003722:	4618      	mov	r0, r3
 8003724:	37d8      	adds	r7, #216	; 0xd8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	50000700 	.word	0x50000700
 8003730:	c3210000 	.word	0xc3210000
 8003734:	90c00010 	.word	0x90c00010
 8003738:	50000600 	.word	0x50000600
 800373c:	50000100 	.word	0x50000100
 8003740:	50000300 	.word	0x50000300
 8003744:	20000000 	.word	0x20000000
 8003748:	053e2d63 	.word	0x053e2d63
 800374c:	c7520000 	.word	0xc7520000
 8003750:	50000500 	.word	0x50000500
 8003754:	cb840000 	.word	0xcb840000

08003758 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7fe fdc9 	bl	80022fc <LL_ADC_IsEnabled>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d14d      	bne.n	800380c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689a      	ldr	r2, [r3, #8]
 8003776:	4b28      	ldr	r3, [pc, #160]	; (8003818 <ADC_Enable+0xc0>)
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00d      	beq.n	800379a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003782:	f043 0210 	orr.w	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800378e:	f043 0201 	orr.w	r2, r3, #1
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e039      	b.n	800380e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe fd98 	bl	80022d4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037a4:	f7fe fba8 	bl	8001ef8 <HAL_GetTick>
 80037a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037aa:	e028      	b.n	80037fe <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe fda3 	bl	80022fc <LL_ADC_IsEnabled>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d104      	bne.n	80037c6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fe fd87 	bl	80022d4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037c6:	f7fe fb97 	bl	8001ef8 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d914      	bls.n	80037fe <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d00d      	beq.n	80037fe <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	f043 0210 	orr.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f2:	f043 0201 	orr.w	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e007      	b.n	800380e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b01      	cmp	r3, #1
 800380a:	d1cf      	bne.n	80037ac <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	8000003f 	.word	0x8000003f

0800381c <LL_ADC_SetCommonPathInternalCh>:
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	609a      	str	r2, [r3, #8]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <LL_ADC_GetCommonPathInternalCh>:
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <LL_ADC_SetOffset>:
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	3360      	adds	r3, #96	; 0x60
 8003872:	461a      	mov	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <LL_ADC_SetOffset+0x44>)
 8003882:	4013      	ands	r3, r2
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	4313      	orrs	r3, r2
 8003890:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	601a      	str	r2, [r3, #0]
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	03fff000 	.word	0x03fff000

080038a8 <LL_ADC_GetOffsetChannel>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3360      	adds	r3, #96	; 0x60
 80038b6:	461a      	mov	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_ADC_SetOffsetState>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3360      	adds	r3, #96	; 0x60
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	601a      	str	r2, [r3, #0]
}
 80038fe:	bf00      	nop
 8003900:	371c      	adds	r7, #28
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <LL_ADC_SetOffsetSign>:
{
 800390a:	b480      	push	{r7}
 800390c:	b087      	sub	sp, #28
 800390e:	af00      	add	r7, sp, #0
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	3360      	adds	r3, #96	; 0x60
 800391a:	461a      	mov	r2, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	431a      	orrs	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	601a      	str	r2, [r3, #0]
}
 8003934:	bf00      	nop
 8003936:	371c      	adds	r7, #28
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_ADC_SetOffsetSaturation>:
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3360      	adds	r3, #96	; 0x60
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	431a      	orrs	r2, r3
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	601a      	str	r2, [r3, #0]
}
 800396a:	bf00      	nop
 800396c:	371c      	adds	r7, #28
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	615a      	str	r2, [r3, #20]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <LL_ADC_SetChannelSamplingTime>:
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	3314      	adds	r3, #20
 80039ac:	461a      	mov	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	0e5b      	lsrs	r3, r3, #25
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	4413      	add	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	0d1b      	lsrs	r3, r3, #20
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	2107      	movs	r1, #7
 80039ca:	fa01 f303 	lsl.w	r3, r1, r3
 80039ce:	43db      	mvns	r3, r3
 80039d0:	401a      	ands	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	0d1b      	lsrs	r3, r3, #20
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	431a      	orrs	r2, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	601a      	str	r2, [r3, #0]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <LL_ADC_SetChannelSingleDiff>:
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a0f      	ldr	r2, [pc, #60]	; (8003a40 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10a      	bne.n	8003a1e <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003a1c:	e00a      	b.n	8003a34 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	401a      	ands	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	407f0000 	.word	0x407f0000

08003a44 <LL_ADC_IsEnabled>:
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <LL_ADC_IsEnabled+0x18>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <LL_ADC_IsEnabled+0x1a>
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <LL_ADC_REG_IsConversionOngoing>:
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d101      	bne.n	8003a82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d101      	bne.n	8003aa8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b0b6      	sub	sp, #216	; 0xd8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d102      	bne.n	8003b46 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003b40:	2302      	movs	r3, #2
 8003b42:	f000 bcfd 	b.w	8004540 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d130      	bne.n	8003bc0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b09      	cmp	r3, #9
 8003b64:	d179      	bne.n	8003c5a <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d010      	beq.n	8003b90 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	0e9b      	lsrs	r3, r3, #26
 8003b74:	025b      	lsls	r3, r3, #9
 8003b76:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003b82:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b8e:	e007      	b.n	8003ba0 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	0e9b      	lsrs	r3, r3, #26
 8003b96:	025b      	lsls	r3, r3, #9
 8003b98:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003ba6:	4b84      	ldr	r3, [pc, #528]	; (8003db8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bbc:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003bbe:	e04c      	b.n	8003c5a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d11d      	bne.n	8003c04 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	6a1a      	ldr	r2, [r3, #32]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003bec:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bf8:	e004      	b.n	8003c04 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0e9b      	lsrs	r3, r3, #26
 8003c0a:	f003 021f 	and.w	r2, r3, #31
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c28:	1e5a      	subs	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c4a:	4b5b      	ldr	r3, [pc, #364]	; (8003db8 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	430b      	orrs	r3, r1
 8003c58:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff ff16 	bl	8003a90 <LL_ADC_INJ_IsConversionOngoing>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d124      	bne.n	8003cb4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d112      	bne.n	8003c9a <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c84:	055a      	lsls	r2, r3, #21
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c8c:	051b      	lsls	r3, r3, #20
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	e00c      	b.n	8003cb4 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003caa:	055a      	lsls	r2, r3, #21
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff fed6 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 8003cbe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff fee2 	bl	8003a90 <LL_ADC_INJ_IsConversionOngoing>
 8003ccc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f040 822e 	bne.w	8004136 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003cda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f040 8229 	bne.w	8004136 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d116      	bne.n	8003d22 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d108      	bne.n	8003d10 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003d0c:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003d0e:	e01f      	b.n	8003d50 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68da      	ldr	r2, [r3, #12]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003d1e:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003d20:	e016      	b.n	8003d50 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d109      	bne.n	8003d40 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003d3e:	e007      	b.n	8003d50 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003d4e:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d110      	bne.n	8003d7c <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	430b      	orrs	r3, r1
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0202 	orr.w	r2, r2, #2
 8003d78:	611a      	str	r2, [r3, #16]
 8003d7a:	e007      	b.n	8003d8c <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 0202 	bic.w	r2, r2, #2
 8003d8a:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d94:	d112      	bne.n	8003dbc <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	4619      	mov	r1, r3
 8003da2:	f7ff fdfb 	bl	800399c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fde1 	bl	8003976 <LL_ADC_SetSamplingTimeCommonConfig>
 8003db4:	e011      	b.n	8003dda <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8003db6:	bf00      	nop
 8003db8:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6819      	ldr	r1, [r3, #0]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f7ff fde7 	bl	800399c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fdce 	bl	8003976 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	08db      	lsrs	r3, r3, #3
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d022      	beq.n	8003e42 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	6919      	ldr	r1, [r3, #16]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e0c:	f7ff fd28 	bl	8003860 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6919      	ldr	r1, [r3, #16]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f7ff fd74 	bl	800390a <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d102      	bne.n	8003e38 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e36:	e000      	b.n	8003e3a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f7ff fd80 	bl	8003940 <LL_ADC_SetOffsetSaturation>
 8003e40:	e179      	b.n	8004136 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fd2d 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff fd22 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8003e64:	4603      	mov	r3, r0
 8003e66:	0e9b      	lsrs	r3, r3, #26
 8003e68:	f003 021f 	and.w	r2, r3, #31
 8003e6c:	e01e      	b.n	8003eac <HAL_ADCEx_InjectedConfigChannel+0x390>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2100      	movs	r1, #0
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fd17 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e84:	fa93 f3a3 	rbit	r3, r3
 8003e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003e8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003e94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8003e9c:	2320      	movs	r3, #32
 8003e9e:	e004      	b.n	8003eaa <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8003ea0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ea4:	fab3 f383 	clz	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	0e9b      	lsrs	r3, r3, #26
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	e018      	b.n	8003ef6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ed0:	fa93 f3a3 	rbit	r3, r3
 8003ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003ed8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003edc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003ee0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d101      	bne.n	8003eec <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003ee8:	2320      	movs	r3, #32
 8003eea:	e004      	b.n	8003ef6 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003eec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ef0:	fab3 f383 	clz	r3, r3
 8003ef4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d106      	bne.n	8003f08 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fce6 	bl	80038d4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff fcca 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2101      	movs	r1, #1
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fcbf 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	0e9b      	lsrs	r3, r3, #26
 8003f2e:	f003 021f 	and.w	r2, r3, #31
 8003f32:	e01e      	b.n	8003f72 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fcb4 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003f52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8003f62:	2320      	movs	r3, #32
 8003f64:	e004      	b.n	8003f70 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f6a:	fab3 f383 	clz	r3, r3
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d105      	bne.n	8003f8a <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	0e9b      	lsrs	r3, r3, #26
 8003f84:	f003 031f 	and.w	r3, r3, #31
 8003f88:	e018      	b.n	8003fbc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f96:	fa93 f3a3 	rbit	r3, r3
 8003f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003f9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003fa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8003fae:	2320      	movs	r3, #32
 8003fb0:	e004      	b.n	8003fbc <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8003fb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fb6:	fab3 f383 	clz	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d106      	bne.n	8003fce <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fc83 	bl	80038d4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fc67 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff fc5c 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	0e9b      	lsrs	r3, r3, #26
 8003ff4:	f003 021f 	and.w	r2, r3, #31
 8003ff8:	e01e      	b.n	8004038 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2102      	movs	r1, #2
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fc51 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004006:	4603      	mov	r3, r0
 8004008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004010:	fa93 f3a3 	rbit	r3, r3
 8004014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800401c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004020:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8004028:	2320      	movs	r3, #32
 800402a:	e004      	b.n	8004036 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 800402c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004030:	fab3 f383 	clz	r3, r3
 8004034:	b2db      	uxtb	r3, r3
 8004036:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004040:	2b00      	cmp	r3, #0
 8004042:	d105      	bne.n	8004050 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	0e9b      	lsrs	r3, r3, #26
 800404a:	f003 031f 	and.w	r3, r3, #31
 800404e:	e014      	b.n	800407a <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800405e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004060:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004064:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 800406c:	2320      	movs	r3, #32
 800406e:	e004      	b.n	800407a <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004070:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800407a:	429a      	cmp	r2, r3
 800407c:	d106      	bne.n	800408c <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2200      	movs	r2, #0
 8004084:	2102      	movs	r1, #2
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fc24 	bl	80038d4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2103      	movs	r1, #3
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fc08 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 8004098:	4603      	mov	r3, r0
 800409a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2103      	movs	r1, #3
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7ff fbfd 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80040ae:	4603      	mov	r3, r0
 80040b0:	0e9b      	lsrs	r3, r3, #26
 80040b2:	f003 021f 	and.w	r2, r3, #31
 80040b6:	e017      	b.n	80040e8 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2103      	movs	r1, #3
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fbf2 	bl	80038a8 <LL_ADC_GetOffsetChannel>
 80040c4:	4603      	mov	r3, r0
 80040c6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ca:	fa93 f3a3 	rbit	r3, r3
 80040ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80040d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80040da:	2320      	movs	r3, #32
 80040dc:	e003      	b.n	80040e6 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80040de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e0:	fab3 f383 	clz	r3, r3
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	0e9b      	lsrs	r3, r3, #26
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	e011      	b.n	8004124 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004106:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004108:	fa93 f3a3 	rbit	r3, r3
 800410c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800410e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004110:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004112:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8004118:	2320      	movs	r3, #32
 800411a:	e003      	b.n	8004124 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 800411c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004124:	429a      	cmp	r2, r3
 8004126:	d106      	bne.n	8004136 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2200      	movs	r2, #0
 800412e:	2103      	movs	r1, #3
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fbcf 	bl	80038d4 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fc82 	bl	8003a44 <LL_ADC_IsEnabled>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	f040 813d 	bne.w	80043c2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	6819      	ldr	r1, [r3, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	461a      	mov	r2, r3
 8004156:	f7ff fc4d 	bl	80039f4 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	4aa2      	ldr	r2, [pc, #648]	; (80043e8 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	f040 812e 	bne.w	80043c2 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <HAL_ADCEx_InjectedConfigChannel+0x672>
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	0e9b      	lsrs	r3, r3, #26
 800417c:	3301      	adds	r3, #1
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	2b09      	cmp	r3, #9
 8004184:	bf94      	ite	ls
 8004186:	2301      	movls	r3, #1
 8004188:	2300      	movhi	r3, #0
 800418a:	b2db      	uxtb	r3, r3
 800418c:	e019      	b.n	80041c2 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004196:	fa93 f3a3 	rbit	r3, r3
 800419a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800419c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80041a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80041a6:	2320      	movs	r3, #32
 80041a8:	e003      	b.n	80041b2 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80041aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ac:	fab3 f383 	clz	r3, r3
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	3301      	adds	r3, #1
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	2b09      	cmp	r3, #9
 80041ba:	bf94      	ite	ls
 80041bc:	2301      	movls	r3, #1
 80041be:	2300      	movhi	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d079      	beq.n	80042ba <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d107      	bne.n	80041e2 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	0e9b      	lsrs	r3, r3, #26
 80041d8:	3301      	adds	r3, #1
 80041da:	069b      	lsls	r3, r3, #26
 80041dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041e0:	e015      	b.n	800420e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ea:	fa93 f3a3 	rbit	r3, r3
 80041ee:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80041f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80041f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80041fa:	2320      	movs	r3, #32
 80041fc:	e003      	b.n	8004206 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80041fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004200:	fab3 f383 	clz	r3, r3
 8004204:	b2db      	uxtb	r3, r3
 8004206:	3301      	adds	r3, #1
 8004208:	069b      	lsls	r3, r3, #26
 800420a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_ADCEx_InjectedConfigChannel+0x712>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	0e9b      	lsrs	r3, r3, #26
 8004220:	3301      	adds	r3, #1
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	2101      	movs	r1, #1
 8004228:	fa01 f303 	lsl.w	r3, r1, r3
 800422c:	e017      	b.n	800425e <HAL_ADCEx_InjectedConfigChannel+0x742>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800423c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8004246:	2320      	movs	r3, #32
 8004248:	e003      	b.n	8004252 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800424a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424c:	fab3 f383 	clz	r3, r3
 8004250:	b2db      	uxtb	r3, r3
 8004252:	3301      	adds	r3, #1
 8004254:	f003 031f 	and.w	r3, r3, #31
 8004258:	2101      	movs	r1, #1
 800425a:	fa01 f303 	lsl.w	r3, r1, r3
 800425e:	ea42 0103 	orr.w	r1, r2, r3
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <HAL_ADCEx_InjectedConfigChannel+0x768>
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	0e9b      	lsrs	r3, r3, #26
 8004274:	3301      	adds	r3, #1
 8004276:	f003 021f 	and.w	r2, r3, #31
 800427a:	4613      	mov	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	4413      	add	r3, r2
 8004280:	051b      	lsls	r3, r3, #20
 8004282:	e018      	b.n	80042b6 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428c:	fa93 f3a3 	rbit	r3, r3
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004294:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 800429c:	2320      	movs	r3, #32
 800429e:	e003      	b.n	80042a8 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80042a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	3301      	adds	r3, #1
 80042aa:	f003 021f 	and.w	r2, r3, #31
 80042ae:	4613      	mov	r3, r2
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	4413      	add	r3, r2
 80042b4:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b6:	430b      	orrs	r3, r1
 80042b8:	e07e      	b.n	80043b8 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d107      	bne.n	80042d6 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	0e9b      	lsrs	r3, r3, #26
 80042cc:	3301      	adds	r3, #1
 80042ce:	069b      	lsls	r3, r3, #26
 80042d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042d4:	e015      	b.n	8004302 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80042ee:	2320      	movs	r3, #32
 80042f0:	e003      	b.n	80042fa <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80042f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f4:	fab3 f383 	clz	r3, r3
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	3301      	adds	r3, #1
 80042fc:	069b      	lsls	r3, r3, #26
 80042fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_ADCEx_InjectedConfigChannel+0x806>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	0e9b      	lsrs	r3, r3, #26
 8004314:	3301      	adds	r3, #1
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2101      	movs	r1, #1
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	e017      	b.n	8004352 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	61bb      	str	r3, [r7, #24]
  return result;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800433a:	2320      	movs	r3, #32
 800433c:	e003      	b.n	8004346 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	3301      	adds	r3, #1
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	ea42 0103 	orr.w	r1, r2, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10d      	bne.n	800437e <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	0e9b      	lsrs	r3, r3, #26
 8004368:	3301      	adds	r3, #1
 800436a:	f003 021f 	and.w	r2, r3, #31
 800436e:	4613      	mov	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4413      	add	r3, r2
 8004374:	3b1e      	subs	r3, #30
 8004376:	051b      	lsls	r3, r3, #20
 8004378:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800437c:	e01b      	b.n	80043b6 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	fa93 f3a3 	rbit	r3, r3
 800438a:	60fb      	str	r3, [r7, #12]
  return result;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8004396:	2320      	movs	r3, #32
 8004398:	e003      	b.n	80043a2 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	fab3 f383 	clz	r3, r3
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	3301      	adds	r3, #1
 80043a4:	f003 021f 	and.w	r2, r3, #31
 80043a8:	4613      	mov	r3, r2
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	4413      	add	r3, r2
 80043ae:	3b1e      	subs	r3, #30
 80043b0:	051b      	lsls	r3, r3, #20
 80043b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043b6:	430b      	orrs	r3, r1
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	6892      	ldr	r2, [r2, #8]
 80043bc:	4619      	mov	r1, r3
 80043be:	f7ff faed 	bl	800399c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80b2 	beq.w	8004534 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043d8:	d004      	beq.n	80043e4 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d109      	bne.n	80043f8 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 80043e6:	e008      	b.n	80043fa <HAL_ADCEx_InjectedConfigChannel+0x8de>
 80043e8:	407f0000 	.word	0x407f0000
 80043ec:	80080000 	.word	0x80080000
 80043f0:	50000100 	.word	0x50000100
 80043f4:	50000300 	.word	0x50000300
 80043f8:	4b53      	ldr	r3, [pc, #332]	; (8004548 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff fa21 	bl	8003842 <LL_ADC_GetCommonPathInternalCh>
 8004400:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a50      	ldr	r2, [pc, #320]	; (800454c <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a4f      	ldr	r2, [pc, #316]	; (8004550 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d139      	bne.n	800448c <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004418:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800441c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d133      	bne.n	800448c <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800442c:	d004      	beq.n	8004438 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a48      	ldr	r2, [pc, #288]	; (8004554 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d17a      	bne.n	800452e <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004440:	d004      	beq.n	800444c <HAL_ADCEx_InjectedConfigChannel+0x930>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a44      	ldr	r2, [pc, #272]	; (8004558 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d101      	bne.n	8004450 <HAL_ADCEx_InjectedConfigChannel+0x934>
 800444c:	4a43      	ldr	r2, [pc, #268]	; (800455c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800444e:	e000      	b.n	8004452 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8004450:	4a3d      	ldr	r2, [pc, #244]	; (8004548 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004456:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800445a:	4619      	mov	r1, r3
 800445c:	4610      	mov	r0, r2
 800445e:	f7ff f9dd 	bl	800381c <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004462:	4b3f      	ldr	r3, [pc, #252]	; (8004560 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	099b      	lsrs	r3, r3, #6
 8004468:	4a3e      	ldr	r2, [pc, #248]	; (8004564 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	099a      	lsrs	r2, r3, #6
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	3318      	adds	r3, #24
 800447a:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800447c:	e002      	b.n	8004484 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	3b01      	subs	r3, #1
 8004482:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1f9      	bne.n	800447e <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800448a:	e050      	b.n	800452e <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a35      	ldr	r2, [pc, #212]	; (8004568 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d125      	bne.n	80044e2 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004496:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800449a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d11f      	bne.n	80044e2 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a2c      	ldr	r2, [pc, #176]	; (8004558 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d104      	bne.n	80044b6 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a2e      	ldr	r2, [pc, #184]	; (800456c <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d03d      	beq.n	8004532 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044be:	d004      	beq.n	80044ca <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a24      	ldr	r2, [pc, #144]	; (8004558 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d101      	bne.n	80044ce <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 80044ca:	4a24      	ldr	r2, [pc, #144]	; (800455c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80044cc:	e000      	b.n	80044d0 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 80044ce:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80044d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f7ff f99e 	bl	800381c <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044e0:	e027      	b.n	8004532 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a22      	ldr	r2, [pc, #136]	; (8004570 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d123      	bne.n	8004534 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d11d      	bne.n	8004534 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a16      	ldr	r2, [pc, #88]	; (8004558 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d018      	beq.n	8004534 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800450a:	d004      	beq.n	8004516 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a11      	ldr	r2, [pc, #68]	; (8004558 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8004516:	4a11      	ldr	r2, [pc, #68]	; (800455c <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004518:	e000      	b.n	800451c <HAL_ADCEx_InjectedConfigChannel+0xa00>
 800451a:	4a0b      	ldr	r2, [pc, #44]	; (8004548 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800451c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f7ff f978 	bl	800381c <LL_ADC_SetCommonPathInternalCh>
 800452c:	e002      	b.n	8004534 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800452e:	bf00      	nop
 8004530:	e000      	b.n	8004534 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004532:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800453c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004540:	4618      	mov	r0, r3
 8004542:	37d8      	adds	r7, #216	; 0xd8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	50000700 	.word	0x50000700
 800454c:	c3210000 	.word	0xc3210000
 8004550:	90c00010 	.word	0x90c00010
 8004554:	50000600 	.word	0x50000600
 8004558:	50000100 	.word	0x50000100
 800455c:	50000300 	.word	0x50000300
 8004560:	20000000 	.word	0x20000000
 8004564:	053e2d63 	.word	0x053e2d63
 8004568:	c7520000 	.word	0xc7520000
 800456c:	50000500 	.word	0x50000500
 8004570:	cb840000 	.word	0xcb840000

08004574 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004574:	b590      	push	{r4, r7, lr}
 8004576:	b0a1      	sub	sp, #132	; 0x84
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800458e:	2302      	movs	r3, #2
 8004590:	e0e7      	b.n	8004762 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800459a:	2300      	movs	r3, #0
 800459c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800459e:	2300      	movs	r3, #0
 80045a0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045aa:	d102      	bne.n	80045b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80045ac:	4b6f      	ldr	r3, [pc, #444]	; (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	e009      	b.n	80045c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6e      	ldr	r2, [pc, #440]	; (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d102      	bne.n	80045c2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80045bc:	4b6d      	ldr	r3, [pc, #436]	; (8004774 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045be:	60bb      	str	r3, [r7, #8]
 80045c0:	e001      	b.n	80045c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80045c2:	2300      	movs	r3, #0
 80045c4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10b      	bne.n	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0be      	b.n	8004762 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7ff fa3f 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 80045ec:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fa39 	bl	8003a6a <LL_ADC_REG_IsConversionOngoing>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f040 80a0 	bne.w	8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004602:	2b00      	cmp	r3, #0
 8004604:	f040 809c 	bne.w	8004740 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004610:	d004      	beq.n	800461c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a55      	ldr	r2, [pc, #340]	; (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800461c:	4b56      	ldr	r3, [pc, #344]	; (8004778 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800461e:	e000      	b.n	8004622 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004620:	4b56      	ldr	r3, [pc, #344]	; (800477c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004622:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d04b      	beq.n	80046c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800462c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6859      	ldr	r1, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800463e:	035b      	lsls	r3, r3, #13
 8004640:	430b      	orrs	r3, r1
 8004642:	431a      	orrs	r2, r3
 8004644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004646:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004650:	d004      	beq.n	800465c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a45      	ldr	r2, [pc, #276]	; (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d10f      	bne.n	800467c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800465c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004660:	f7ff f9f0 	bl	8003a44 <LL_ADC_IsEnabled>
 8004664:	4604      	mov	r4, r0
 8004666:	4841      	ldr	r0, [pc, #260]	; (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004668:	f7ff f9ec 	bl	8003a44 <LL_ADC_IsEnabled>
 800466c:	4603      	mov	r3, r0
 800466e:	4323      	orrs	r3, r4
 8004670:	2b00      	cmp	r3, #0
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	e012      	b.n	80046a2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800467c:	483c      	ldr	r0, [pc, #240]	; (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800467e:	f7ff f9e1 	bl	8003a44 <LL_ADC_IsEnabled>
 8004682:	4604      	mov	r4, r0
 8004684:	483b      	ldr	r0, [pc, #236]	; (8004774 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004686:	f7ff f9dd 	bl	8003a44 <LL_ADC_IsEnabled>
 800468a:	4603      	mov	r3, r0
 800468c:	431c      	orrs	r4, r3
 800468e:	483c      	ldr	r0, [pc, #240]	; (8004780 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004690:	f7ff f9d8 	bl	8003a44 <LL_ADC_IsEnabled>
 8004694:	4603      	mov	r3, r0
 8004696:	4323      	orrs	r3, r4
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d056      	beq.n	8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80046a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80046ae:	f023 030f 	bic.w	r3, r3, #15
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	6811      	ldr	r1, [r2, #0]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	6892      	ldr	r2, [r2, #8]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	431a      	orrs	r2, r3
 80046be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80046c2:	e047      	b.n	8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046d8:	d004      	beq.n	80046e4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a23      	ldr	r2, [pc, #140]	; (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d10f      	bne.n	8004704 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80046e4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80046e8:	f7ff f9ac 	bl	8003a44 <LL_ADC_IsEnabled>
 80046ec:	4604      	mov	r4, r0
 80046ee:	481f      	ldr	r0, [pc, #124]	; (800476c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046f0:	f7ff f9a8 	bl	8003a44 <LL_ADC_IsEnabled>
 80046f4:	4603      	mov	r3, r0
 80046f6:	4323      	orrs	r3, r4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bf0c      	ite	eq
 80046fc:	2301      	moveq	r3, #1
 80046fe:	2300      	movne	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	e012      	b.n	800472a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004704:	481a      	ldr	r0, [pc, #104]	; (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004706:	f7ff f99d 	bl	8003a44 <LL_ADC_IsEnabled>
 800470a:	4604      	mov	r4, r0
 800470c:	4819      	ldr	r0, [pc, #100]	; (8004774 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800470e:	f7ff f999 	bl	8003a44 <LL_ADC_IsEnabled>
 8004712:	4603      	mov	r3, r0
 8004714:	431c      	orrs	r4, r3
 8004716:	481a      	ldr	r0, [pc, #104]	; (8004780 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004718:	f7ff f994 	bl	8003a44 <LL_ADC_IsEnabled>
 800471c:	4603      	mov	r3, r0
 800471e:	4323      	orrs	r3, r4
 8004720:	2b00      	cmp	r3, #0
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d012      	beq.n	8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800472e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004736:	f023 030f 	bic.w	r3, r3, #15
 800473a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800473c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800473e:	e009      	b.n	8004754 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004752:	e000      	b.n	8004756 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004754:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800475e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004762:	4618      	mov	r0, r3
 8004764:	3784      	adds	r7, #132	; 0x84
 8004766:	46bd      	mov	sp, r7
 8004768:	bd90      	pop	{r4, r7, pc}
 800476a:	bf00      	nop
 800476c:	50000100 	.word	0x50000100
 8004770:	50000400 	.word	0x50000400
 8004774:	50000500 	.word	0x50000500
 8004778:	50000300 	.word	0x50000300
 800477c:	50000700 	.word	0x50000700
 8004780:	50000600 	.word	0x50000600

08004784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f003 0307 	and.w	r3, r3, #7
 8004792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80047a0:	4013      	ands	r3, r2
 80047a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047b6:	4a04      	ldr	r2, [pc, #16]	; (80047c8 <__NVIC_SetPriorityGrouping+0x44>)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	60d3      	str	r3, [r2, #12]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	e000ed00 	.word	0xe000ed00

080047cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047d0:	4b04      	ldr	r3, [pc, #16]	; (80047e4 <__NVIC_GetPriorityGrouping+0x18>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	0a1b      	lsrs	r3, r3, #8
 80047d6:	f003 0307 	and.w	r3, r3, #7
}
 80047da:	4618      	mov	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	e000ed00 	.word	0xe000ed00

080047e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	db0b      	blt.n	8004812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047fa:	79fb      	ldrb	r3, [r7, #7]
 80047fc:	f003 021f 	and.w	r2, r3, #31
 8004800:	4907      	ldr	r1, [pc, #28]	; (8004820 <__NVIC_EnableIRQ+0x38>)
 8004802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004806:	095b      	lsrs	r3, r3, #5
 8004808:	2001      	movs	r0, #1
 800480a:	fa00 f202 	lsl.w	r2, r0, r2
 800480e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000e100 	.word	0xe000e100

08004824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	4603      	mov	r3, r0
 800482c:	6039      	str	r1, [r7, #0]
 800482e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004834:	2b00      	cmp	r3, #0
 8004836:	db0a      	blt.n	800484e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	b2da      	uxtb	r2, r3
 800483c:	490c      	ldr	r1, [pc, #48]	; (8004870 <__NVIC_SetPriority+0x4c>)
 800483e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004842:	0112      	lsls	r2, r2, #4
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	440b      	add	r3, r1
 8004848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800484c:	e00a      	b.n	8004864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	4908      	ldr	r1, [pc, #32]	; (8004874 <__NVIC_SetPriority+0x50>)
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	3b04      	subs	r3, #4
 800485c:	0112      	lsls	r2, r2, #4
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	440b      	add	r3, r1
 8004862:	761a      	strb	r2, [r3, #24]
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	e000e100 	.word	0xe000e100
 8004874:	e000ed00 	.word	0xe000ed00

08004878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	; 0x24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f003 0307 	and.w	r3, r3, #7
 800488a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	f1c3 0307 	rsb	r3, r3, #7
 8004892:	2b04      	cmp	r3, #4
 8004894:	bf28      	it	cs
 8004896:	2304      	movcs	r3, #4
 8004898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3304      	adds	r3, #4
 800489e:	2b06      	cmp	r3, #6
 80048a0:	d902      	bls.n	80048a8 <NVIC_EncodePriority+0x30>
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	3b03      	subs	r3, #3
 80048a6:	e000      	b.n	80048aa <NVIC_EncodePriority+0x32>
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048ac:	f04f 32ff 	mov.w	r2, #4294967295
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43da      	mvns	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	401a      	ands	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c0:	f04f 31ff 	mov.w	r1, #4294967295
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	fa01 f303 	lsl.w	r3, r1, r3
 80048ca:	43d9      	mvns	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d0:	4313      	orrs	r3, r2
         );
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3724      	adds	r7, #36	; 0x24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
	...

080048e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048f0:	d301      	bcc.n	80048f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048f2:	2301      	movs	r3, #1
 80048f4:	e00f      	b.n	8004916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048f6:	4a0a      	ldr	r2, [pc, #40]	; (8004920 <SysTick_Config+0x40>)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3b01      	subs	r3, #1
 80048fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048fe:	210f      	movs	r1, #15
 8004900:	f04f 30ff 	mov.w	r0, #4294967295
 8004904:	f7ff ff8e 	bl	8004824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <SysTick_Config+0x40>)
 800490a:	2200      	movs	r2, #0
 800490c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <SysTick_Config+0x40>)
 8004910:	2207      	movs	r2, #7
 8004912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	e000e010 	.word	0xe000e010

08004924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff ff29 	bl	8004784 <__NVIC_SetPriorityGrouping>
}
 8004932:	bf00      	nop
 8004934:	3708      	adds	r7, #8
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b086      	sub	sp, #24
 800493e:	af00      	add	r7, sp, #0
 8004940:	4603      	mov	r3, r0
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004948:	f7ff ff40 	bl	80047cc <__NVIC_GetPriorityGrouping>
 800494c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	6978      	ldr	r0, [r7, #20]
 8004954:	f7ff ff90 	bl	8004878 <NVIC_EncodePriority>
 8004958:	4602      	mov	r2, r0
 800495a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff5f 	bl	8004824 <__NVIC_SetPriority>
}
 8004966:	bf00      	nop
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	4603      	mov	r3, r0
 8004976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ff33 	bl	80047e8 <__NVIC_EnableIRQ>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff ffa4 	bl	80048e0 <SysTick_Config>
 8004998:	4603      	mov	r3, r0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d005      	beq.n	80049c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2204      	movs	r2, #4
 80049be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
 80049c4:	e037      	b.n	8004a36 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 020e 	bic.w	r2, r2, #14
 80049d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0201 	bic.w	r2, r2, #1
 80049f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	f003 021f 	and.w	r2, r3, #31
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	2101      	movs	r1, #1
 8004a04:	fa01 f202 	lsl.w	r2, r1, r2
 8004a08:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a12:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00c      	beq.n	8004a36 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a2a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004a34:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d00d      	beq.n	8004a88 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2204      	movs	r2, #4
 8004a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
 8004a86:	e047      	b.n	8004b18 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 020e 	bic.w	r2, r2, #14
 8004a96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ab6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abc:	f003 021f 	and.w	r2, r3, #31
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ad4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00c      	beq.n	8004af8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004af6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	4798      	blx	r3
    }
  }
  return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b32:	e15a      	b.n	8004dea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	2101      	movs	r1, #1
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b40:	4013      	ands	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 814c 	beq.w	8004de4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d005      	beq.n	8004b64 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d130      	bne.n	8004bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	2203      	movs	r2, #3
 8004b70:	fa02 f303 	lsl.w	r3, r2, r3
 8004b74:	43db      	mvns	r3, r3
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4013      	ands	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	091b      	lsrs	r3, r3, #4
 8004bb0:	f003 0201 	and.w	r2, r3, #1
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d017      	beq.n	8004c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	2203      	movs	r2, #3
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4013      	ands	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d123      	bne.n	8004c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	08da      	lsrs	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3208      	adds	r2, #8
 8004c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	220f      	movs	r2, #15
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4013      	ands	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	08da      	lsrs	r2, r3, #3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3208      	adds	r2, #8
 8004c50:	6939      	ldr	r1, [r7, #16]
 8004c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	2203      	movs	r2, #3
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	43db      	mvns	r3, r3
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 0203 	and.w	r2, r3, #3
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80a6 	beq.w	8004de4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c98:	4b5b      	ldr	r3, [pc, #364]	; (8004e08 <HAL_GPIO_Init+0x2e4>)
 8004c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9c:	4a5a      	ldr	r2, [pc, #360]	; (8004e08 <HAL_GPIO_Init+0x2e4>)
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	6613      	str	r3, [r2, #96]	; 0x60
 8004ca4:	4b58      	ldr	r3, [pc, #352]	; (8004e08 <HAL_GPIO_Init+0x2e4>)
 8004ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004cb0:	4a56      	ldr	r2, [pc, #344]	; (8004e0c <HAL_GPIO_Init+0x2e8>)
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	089b      	lsrs	r3, r3, #2
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	220f      	movs	r2, #15
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	43db      	mvns	r3, r3
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004cda:	d01f      	beq.n	8004d1c <HAL_GPIO_Init+0x1f8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a4c      	ldr	r2, [pc, #304]	; (8004e10 <HAL_GPIO_Init+0x2ec>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d019      	beq.n	8004d18 <HAL_GPIO_Init+0x1f4>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a4b      	ldr	r2, [pc, #300]	; (8004e14 <HAL_GPIO_Init+0x2f0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d013      	beq.n	8004d14 <HAL_GPIO_Init+0x1f0>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a4a      	ldr	r2, [pc, #296]	; (8004e18 <HAL_GPIO_Init+0x2f4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d00d      	beq.n	8004d10 <HAL_GPIO_Init+0x1ec>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a49      	ldr	r2, [pc, #292]	; (8004e1c <HAL_GPIO_Init+0x2f8>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d007      	beq.n	8004d0c <HAL_GPIO_Init+0x1e8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a48      	ldr	r2, [pc, #288]	; (8004e20 <HAL_GPIO_Init+0x2fc>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d101      	bne.n	8004d08 <HAL_GPIO_Init+0x1e4>
 8004d04:	2305      	movs	r3, #5
 8004d06:	e00a      	b.n	8004d1e <HAL_GPIO_Init+0x1fa>
 8004d08:	2306      	movs	r3, #6
 8004d0a:	e008      	b.n	8004d1e <HAL_GPIO_Init+0x1fa>
 8004d0c:	2304      	movs	r3, #4
 8004d0e:	e006      	b.n	8004d1e <HAL_GPIO_Init+0x1fa>
 8004d10:	2303      	movs	r3, #3
 8004d12:	e004      	b.n	8004d1e <HAL_GPIO_Init+0x1fa>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e002      	b.n	8004d1e <HAL_GPIO_Init+0x1fa>
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_GPIO_Init+0x1fa>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	f002 0203 	and.w	r2, r2, #3
 8004d24:	0092      	lsls	r2, r2, #2
 8004d26:	4093      	lsls	r3, r2
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d2e:	4937      	ldr	r1, [pc, #220]	; (8004e0c <HAL_GPIO_Init+0x2e8>)
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	089b      	lsrs	r3, r3, #2
 8004d34:	3302      	adds	r3, #2
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d3c:	4b39      	ldr	r3, [pc, #228]	; (8004e24 <HAL_GPIO_Init+0x300>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	43db      	mvns	r3, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004d60:	4a30      	ldr	r2, [pc, #192]	; (8004e24 <HAL_GPIO_Init+0x300>)
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004d66:	4b2f      	ldr	r3, [pc, #188]	; (8004e24 <HAL_GPIO_Init+0x300>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4013      	ands	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004d8a:	4a26      	ldr	r2, [pc, #152]	; (8004e24 <HAL_GPIO_Init+0x300>)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004d90:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <HAL_GPIO_Init+0x300>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004db4:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <HAL_GPIO_Init+0x300>)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004dba:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <HAL_GPIO_Init+0x300>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004dde:	4a11      	ldr	r2, [pc, #68]	; (8004e24 <HAL_GPIO_Init+0x300>)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	3301      	adds	r3, #1
 8004de8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	fa22 f303 	lsr.w	r3, r2, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f47f ae9d 	bne.w	8004b34 <HAL_GPIO_Init+0x10>
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	40010000 	.word	0x40010000
 8004e10:	48000400 	.word	0x48000400
 8004e14:	48000800 	.word	0x48000800
 8004e18:	48000c00 	.word	0x48000c00
 8004e1c:	48001000 	.word	0x48001000
 8004e20:	48001400 	.word	0x48001400
 8004e24:	40010400 	.word	0x40010400

08004e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	807b      	strh	r3, [r7, #2]
 8004e34:	4613      	mov	r3, r2
 8004e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e38:	787b      	ldrb	r3, [r7, #1]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e3e:	887a      	ldrh	r2, [r7, #2]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e44:	e002      	b.n	8004e4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e46:	887a      	ldrh	r2, [r7, #2]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	460b      	mov	r3, r1
 8004e62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e6a:	887a      	ldrh	r2, [r7, #2]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	041a      	lsls	r2, r3, #16
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	43d9      	mvns	r1, r3
 8004e76:	887b      	ldrh	r3, [r7, #2]
 8004e78:	400b      	ands	r3, r1
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	619a      	str	r2, [r3, #24]
}
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d141      	bne.n	8004f1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e9a:	4b4b      	ldr	r3, [pc, #300]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea6:	d131      	bne.n	8004f0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ea8:	4b47      	ldr	r3, [pc, #284]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eae:	4a46      	ldr	r2, [pc, #280]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eb8:	4b43      	ldr	r3, [pc, #268]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ec0:	4a41      	ldr	r2, [pc, #260]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ec6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ec8:	4b40      	ldr	r3, [pc, #256]	; (8004fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2232      	movs	r2, #50	; 0x32
 8004ece:	fb02 f303 	mul.w	r3, r2, r3
 8004ed2:	4a3f      	ldr	r2, [pc, #252]	; (8004fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	0c9b      	lsrs	r3, r3, #18
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ede:	e002      	b.n	8004ee6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ee6:	4b38      	ldr	r3, [pc, #224]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef2:	d102      	bne.n	8004efa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1f2      	bne.n	8004ee0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004efa:	4b33      	ldr	r3, [pc, #204]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f06:	d158      	bne.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e057      	b.n	8004fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f0c:	4b2e      	ldr	r3, [pc, #184]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f12:	4a2d      	ldr	r2, [pc, #180]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f1c:	e04d      	b.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f24:	d141      	bne.n	8004faa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f26:	4b28      	ldr	r3, [pc, #160]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f32:	d131      	bne.n	8004f98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f34:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f3a:	4a23      	ldr	r2, [pc, #140]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f44:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f4c:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f54:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2232      	movs	r2, #50	; 0x32
 8004f5a:	fb02 f303 	mul.w	r3, r2, r3
 8004f5e:	4a1c      	ldr	r2, [pc, #112]	; (8004fd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	0c9b      	lsrs	r3, r3, #18
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f6a:	e002      	b.n	8004f72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7e:	d102      	bne.n	8004f86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f2      	bne.n	8004f6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f86:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f92:	d112      	bne.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e011      	b.n	8004fbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f9e:	4a0a      	ldr	r2, [pc, #40]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004fa8:	e007      	b.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004faa:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fb2:	4a05      	ldr	r2, [pc, #20]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	20000000 	.word	0x20000000
 8004fd0:	431bde83 	.word	0x431bde83

08004fd4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fe2:	6093      	str	r3, [r2, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40007000 	.word	0x40007000

08004ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e306      	b.n	8005614 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d075      	beq.n	80050fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005012:	4b97      	ldr	r3, [pc, #604]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 030c 	and.w	r3, r3, #12
 800501a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800501c:	4b94      	ldr	r3, [pc, #592]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0303 	and.w	r3, r3, #3
 8005024:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b0c      	cmp	r3, #12
 800502a:	d102      	bne.n	8005032 <HAL_RCC_OscConfig+0x3e>
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d002      	beq.n	8005038 <HAL_RCC_OscConfig+0x44>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b08      	cmp	r3, #8
 8005036:	d10b      	bne.n	8005050 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005038:	4b8d      	ldr	r3, [pc, #564]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d05b      	beq.n	80050fc <HAL_RCC_OscConfig+0x108>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d157      	bne.n	80050fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e2e1      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005058:	d106      	bne.n	8005068 <HAL_RCC_OscConfig+0x74>
 800505a:	4b85      	ldr	r3, [pc, #532]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a84      	ldr	r2, [pc, #528]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e01d      	b.n	80050a4 <HAL_RCC_OscConfig+0xb0>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005070:	d10c      	bne.n	800508c <HAL_RCC_OscConfig+0x98>
 8005072:	4b7f      	ldr	r3, [pc, #508]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a7e      	ldr	r2, [pc, #504]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	4b7c      	ldr	r3, [pc, #496]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a7b      	ldr	r2, [pc, #492]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e00b      	b.n	80050a4 <HAL_RCC_OscConfig+0xb0>
 800508c:	4b78      	ldr	r3, [pc, #480]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a77      	ldr	r2, [pc, #476]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	4b75      	ldr	r3, [pc, #468]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a74      	ldr	r2, [pc, #464]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 800509e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d013      	beq.n	80050d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fc ff24 	bl	8001ef8 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b4:	f7fc ff20 	bl	8001ef8 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b64      	cmp	r3, #100	; 0x64
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e2a6      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050c6:	4b6a      	ldr	r3, [pc, #424]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0xc0>
 80050d2:	e014      	b.n	80050fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fc ff10 	bl	8001ef8 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050dc:	f7fc ff0c 	bl	8001ef8 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b64      	cmp	r3, #100	; 0x64
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e292      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ee:	4b60      	ldr	r3, [pc, #384]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0xe8>
 80050fa:	e000      	b.n	80050fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d075      	beq.n	80051f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800510a:	4b59      	ldr	r3, [pc, #356]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005114:	4b56      	ldr	r3, [pc, #344]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0303 	and.w	r3, r3, #3
 800511c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	2b0c      	cmp	r3, #12
 8005122:	d102      	bne.n	800512a <HAL_RCC_OscConfig+0x136>
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b02      	cmp	r3, #2
 8005128:	d002      	beq.n	8005130 <HAL_RCC_OscConfig+0x13c>
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	2b04      	cmp	r3, #4
 800512e:	d11f      	bne.n	8005170 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005130:	4b4f      	ldr	r3, [pc, #316]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_RCC_OscConfig+0x154>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e265      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005148:	4b49      	ldr	r3, [pc, #292]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	061b      	lsls	r3, r3, #24
 8005156:	4946      	ldr	r1, [pc, #280]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005158:	4313      	orrs	r3, r2
 800515a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800515c:	4b45      	ldr	r3, [pc, #276]	; (8005274 <HAL_RCC_OscConfig+0x280>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f7fc fe7d 	bl	8001e60 <HAL_InitTick>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d043      	beq.n	80051f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e251      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d023      	beq.n	80051c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005178:	4b3d      	ldr	r3, [pc, #244]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a3c      	ldr	r2, [pc, #240]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 800517e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005184:	f7fc feb8 	bl	8001ef8 <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800518c:	f7fc feb4 	bl	8001ef8 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e23a      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800519e:	4b34      	ldr	r3, [pc, #208]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051aa:	4b31      	ldr	r3, [pc, #196]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	061b      	lsls	r3, r3, #24
 80051b8:	492d      	ldr	r1, [pc, #180]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	604b      	str	r3, [r1, #4]
 80051be:	e01a      	b.n	80051f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051c0:	4b2b      	ldr	r3, [pc, #172]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a2a      	ldr	r2, [pc, #168]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 80051c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fc fe94 	bl	8001ef8 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051d4:	f7fc fe90 	bl	8001ef8 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e216      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051e6:	4b22      	ldr	r3, [pc, #136]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x1e0>
 80051f2:	e000      	b.n	80051f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d041      	beq.n	8005286 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01c      	beq.n	8005244 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520a:	4b19      	ldr	r3, [pc, #100]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 800520c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005210:	4a17      	ldr	r2, [pc, #92]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521a:	f7fc fe6d 	bl	8001ef8 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005220:	e008      	b.n	8005234 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005222:	f7fc fe69 	bl	8001ef8 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b02      	cmp	r3, #2
 800522e:	d901      	bls.n	8005234 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e1ef      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005234:	4b0e      	ldr	r3, [pc, #56]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800523a:	f003 0302 	and.w	r3, r3, #2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0ef      	beq.n	8005222 <HAL_RCC_OscConfig+0x22e>
 8005242:	e020      	b.n	8005286 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 8005246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800524a:	4a09      	ldr	r2, [pc, #36]	; (8005270 <HAL_RCC_OscConfig+0x27c>)
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005254:	f7fc fe50 	bl	8001ef8 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800525a:	e00d      	b.n	8005278 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800525c:	f7fc fe4c 	bl	8001ef8 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d906      	bls.n	8005278 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e1d2      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005278:	4b8c      	ldr	r3, [pc, #560]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800527a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1ea      	bne.n	800525c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 80a6 	beq.w	80053e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005294:	2300      	movs	r3, #0
 8005296:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005298:	4b84      	ldr	r3, [pc, #528]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800529a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800529c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_OscConfig+0x2b4>
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <HAL_RCC_OscConfig+0x2b6>
 80052a8:	2300      	movs	r3, #0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00d      	beq.n	80052ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ae:	4b7f      	ldr	r3, [pc, #508]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80052b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b2:	4a7e      	ldr	r2, [pc, #504]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80052b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b8:	6593      	str	r3, [r2, #88]	; 0x58
 80052ba:	4b7c      	ldr	r3, [pc, #496]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80052bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c2:	60fb      	str	r3, [r7, #12]
 80052c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052c6:	2301      	movs	r3, #1
 80052c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052ca:	4b79      	ldr	r3, [pc, #484]	; (80054b0 <HAL_RCC_OscConfig+0x4bc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d118      	bne.n	8005308 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052d6:	4b76      	ldr	r3, [pc, #472]	; (80054b0 <HAL_RCC_OscConfig+0x4bc>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a75      	ldr	r2, [pc, #468]	; (80054b0 <HAL_RCC_OscConfig+0x4bc>)
 80052dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e2:	f7fc fe09 	bl	8001ef8 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ea:	f7fc fe05 	bl	8001ef8 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e18b      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80052fc:	4b6c      	ldr	r3, [pc, #432]	; (80054b0 <HAL_RCC_OscConfig+0x4bc>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d108      	bne.n	8005322 <HAL_RCC_OscConfig+0x32e>
 8005310:	4b66      	ldr	r3, [pc, #408]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	4a65      	ldr	r2, [pc, #404]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005320:	e024      	b.n	800536c <HAL_RCC_OscConfig+0x378>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b05      	cmp	r3, #5
 8005328:	d110      	bne.n	800534c <HAL_RCC_OscConfig+0x358>
 800532a:	4b60      	ldr	r3, [pc, #384]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005330:	4a5e      	ldr	r2, [pc, #376]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005332:	f043 0304 	orr.w	r3, r3, #4
 8005336:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800533a:	4b5c      	ldr	r3, [pc, #368]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800533c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005340:	4a5a      	ldr	r2, [pc, #360]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800534a:	e00f      	b.n	800536c <HAL_RCC_OscConfig+0x378>
 800534c:	4b57      	ldr	r3, [pc, #348]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800534e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005352:	4a56      	ldr	r2, [pc, #344]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800535c:	4b53      	ldr	r3, [pc, #332]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	4a52      	ldr	r2, [pc, #328]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005364:	f023 0304 	bic.w	r3, r3, #4
 8005368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d016      	beq.n	80053a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005374:	f7fc fdc0 	bl	8001ef8 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537a:	e00a      	b.n	8005392 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537c:	f7fc fdbc 	bl	8001ef8 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	f241 3288 	movw	r2, #5000	; 0x1388
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e140      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005392:	4b46      	ldr	r3, [pc, #280]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0ed      	beq.n	800537c <HAL_RCC_OscConfig+0x388>
 80053a0:	e015      	b.n	80053ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a2:	f7fc fda9 	bl	8001ef8 <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053a8:	e00a      	b.n	80053c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053aa:	f7fc fda5 	bl	8001ef8 <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e129      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053c0:	4b3a      	ldr	r3, [pc, #232]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1ed      	bne.n	80053aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053ce:	7ffb      	ldrb	r3, [r7, #31]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d105      	bne.n	80053e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053d4:	4b35      	ldr	r3, [pc, #212]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80053d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d8:	4a34      	ldr	r2, [pc, #208]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80053da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d03c      	beq.n	8005466 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01c      	beq.n	800542e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053f4:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80053f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053fa:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005404:	f7fc fd78 	bl	8001ef8 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800540c:	f7fc fd74 	bl	8001ef8 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0fa      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800541e:	4b23      	ldr	r3, [pc, #140]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005420:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0ef      	beq.n	800540c <HAL_RCC_OscConfig+0x418>
 800542c:	e01b      	b.n	8005466 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800542e:	4b1f      	ldr	r3, [pc, #124]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005434:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005436:	f023 0301 	bic.w	r3, r3, #1
 800543a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543e:	f7fc fd5b 	bl	8001ef8 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005446:	f7fc fd57 	bl	8001ef8 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e0dd      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005458:	4b14      	ldr	r3, [pc, #80]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800545a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1ef      	bne.n	8005446 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80d1 	beq.w	8005612 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005470:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 030c 	and.w	r3, r3, #12
 8005478:	2b0c      	cmp	r3, #12
 800547a:	f000 808b 	beq.w	8005594 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d15e      	bne.n	8005544 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a08      	ldr	r2, [pc, #32]	; (80054ac <HAL_RCC_OscConfig+0x4b8>)
 800548c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005492:	f7fc fd31 	bl	8001ef8 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005498:	e00c      	b.n	80054b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549a:	f7fc fd2d 	bl	8001ef8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d905      	bls.n	80054b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e0b3      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
 80054ac:	40021000 	.word	0x40021000
 80054b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b4:	4b59      	ldr	r3, [pc, #356]	; (800561c <HAL_RCC_OscConfig+0x628>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ec      	bne.n	800549a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054c0:	4b56      	ldr	r3, [pc, #344]	; (800561c <HAL_RCC_OscConfig+0x628>)
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	4b56      	ldr	r3, [pc, #344]	; (8005620 <HAL_RCC_OscConfig+0x62c>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6a11      	ldr	r1, [r2, #32]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054d0:	3a01      	subs	r2, #1
 80054d2:	0112      	lsls	r2, r2, #4
 80054d4:	4311      	orrs	r1, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80054da:	0212      	lsls	r2, r2, #8
 80054dc:	4311      	orrs	r1, r2
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054e2:	0852      	lsrs	r2, r2, #1
 80054e4:	3a01      	subs	r2, #1
 80054e6:	0552      	lsls	r2, r2, #21
 80054e8:	4311      	orrs	r1, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054ee:	0852      	lsrs	r2, r2, #1
 80054f0:	3a01      	subs	r2, #1
 80054f2:	0652      	lsls	r2, r2, #25
 80054f4:	4311      	orrs	r1, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054fa:	06d2      	lsls	r2, r2, #27
 80054fc:	430a      	orrs	r2, r1
 80054fe:	4947      	ldr	r1, [pc, #284]	; (800561c <HAL_RCC_OscConfig+0x628>)
 8005500:	4313      	orrs	r3, r2
 8005502:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005504:	4b45      	ldr	r3, [pc, #276]	; (800561c <HAL_RCC_OscConfig+0x628>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a44      	ldr	r2, [pc, #272]	; (800561c <HAL_RCC_OscConfig+0x628>)
 800550a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800550e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005510:	4b42      	ldr	r3, [pc, #264]	; (800561c <HAL_RCC_OscConfig+0x628>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4a41      	ldr	r2, [pc, #260]	; (800561c <HAL_RCC_OscConfig+0x628>)
 8005516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800551a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551c:	f7fc fcec 	bl	8001ef8 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005524:	f7fc fce8 	bl	8001ef8 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e06e      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005536:	4b39      	ldr	r3, [pc, #228]	; (800561c <HAL_RCC_OscConfig+0x628>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCC_OscConfig+0x530>
 8005542:	e066      	b.n	8005612 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005544:	4b35      	ldr	r3, [pc, #212]	; (800561c <HAL_RCC_OscConfig+0x628>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a34      	ldr	r2, [pc, #208]	; (800561c <HAL_RCC_OscConfig+0x628>)
 800554a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005550:	4b32      	ldr	r3, [pc, #200]	; (800561c <HAL_RCC_OscConfig+0x628>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	4a31      	ldr	r2, [pc, #196]	; (800561c <HAL_RCC_OscConfig+0x628>)
 8005556:	f023 0303 	bic.w	r3, r3, #3
 800555a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800555c:	4b2f      	ldr	r3, [pc, #188]	; (800561c <HAL_RCC_OscConfig+0x628>)
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	4a2e      	ldr	r2, [pc, #184]	; (800561c <HAL_RCC_OscConfig+0x628>)
 8005562:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800556a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800556c:	f7fc fcc4 	bl	8001ef8 <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005574:	f7fc fcc0 	bl	8001ef8 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e046      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005586:	4b25      	ldr	r3, [pc, #148]	; (800561c <HAL_RCC_OscConfig+0x628>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0x580>
 8005592:	e03e      	b.n	8005612 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e039      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80055a0:	4b1e      	ldr	r3, [pc, #120]	; (800561c <HAL_RCC_OscConfig+0x628>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f003 0203 	and.w	r2, r3, #3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d12c      	bne.n	800560e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	3b01      	subs	r3, #1
 80055c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d123      	bne.n	800560e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d11b      	bne.n	800560e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d113      	bne.n	800560e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	3b01      	subs	r3, #1
 80055f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d109      	bne.n	800560e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	085b      	lsrs	r3, r3, #1
 8005606:	3b01      	subs	r3, #1
 8005608:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800560a:	429a      	cmp	r2, r3
 800560c:	d001      	beq.n	8005612 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40021000 	.word	0x40021000
 8005620:	019f800c 	.word	0x019f800c

08005624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e11e      	b.n	800587a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800563c:	4b91      	ldr	r3, [pc, #580]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	429a      	cmp	r2, r3
 8005648:	d910      	bls.n	800566c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800564a:	4b8e      	ldr	r3, [pc, #568]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f023 020f 	bic.w	r2, r3, #15
 8005652:	498c      	ldr	r1, [pc, #560]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	4313      	orrs	r3, r2
 8005658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800565a:	4b8a      	ldr	r3, [pc, #552]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 030f 	and.w	r3, r3, #15
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	429a      	cmp	r2, r3
 8005666:	d001      	beq.n	800566c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e106      	b.n	800587a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d073      	beq.n	8005760 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d129      	bne.n	80056d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005680:	4b81      	ldr	r3, [pc, #516]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e0f4      	b.n	800587a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005690:	f000 f99e 	bl	80059d0 <RCC_GetSysClockFreqFromPLLSource>
 8005694:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4a7c      	ldr	r2, [pc, #496]	; (800588c <HAL_RCC_ClockConfig+0x268>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d93f      	bls.n	800571e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800569e:	4b7a      	ldr	r3, [pc, #488]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d033      	beq.n	800571e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d12f      	bne.n	800571e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80056be:	4b72      	ldr	r3, [pc, #456]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056c6:	4a70      	ldr	r2, [pc, #448]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 80056c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	e024      	b.n	800571e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d107      	bne.n	80056ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80056dc:	4b6a      	ldr	r3, [pc, #424]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d109      	bne.n	80056fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e0c6      	b.n	800587a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056ec:	4b66      	ldr	r3, [pc, #408]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e0be      	b.n	800587a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80056fc:	f000 f8ce 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8005700:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4a61      	ldr	r2, [pc, #388]	; (800588c <HAL_RCC_ClockConfig+0x268>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d909      	bls.n	800571e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800570a:	4b5f      	ldr	r3, [pc, #380]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005712:	4a5d      	ldr	r2, [pc, #372]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 8005714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005718:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800571e:	4b5a      	ldr	r3, [pc, #360]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f023 0203 	bic.w	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	4957      	ldr	r1, [pc, #348]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 800572c:	4313      	orrs	r3, r2
 800572e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005730:	f7fc fbe2 	bl	8001ef8 <HAL_GetTick>
 8005734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005736:	e00a      	b.n	800574e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005738:	f7fc fbde 	bl	8001ef8 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	; 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e095      	b.n	800587a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800574e:	4b4e      	ldr	r3, [pc, #312]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 020c 	and.w	r2, r3, #12
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	429a      	cmp	r2, r3
 800575e:	d1eb      	bne.n	8005738 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d023      	beq.n	80057b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005778:	4b43      	ldr	r3, [pc, #268]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	4a42      	ldr	r2, [pc, #264]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 800577e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005782:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005790:	4b3d      	ldr	r3, [pc, #244]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005798:	4a3b      	ldr	r2, [pc, #236]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 800579a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800579e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057a0:	4b39      	ldr	r3, [pc, #228]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	4936      	ldr	r1, [pc, #216]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	608b      	str	r3, [r1, #8]
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2b80      	cmp	r3, #128	; 0x80
 80057b8:	d105      	bne.n	80057c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80057ba:	4b33      	ldr	r3, [pc, #204]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	4a32      	ldr	r2, [pc, #200]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 80057c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057c6:	4b2f      	ldr	r3, [pc, #188]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d21d      	bcs.n	8005810 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d4:	4b2b      	ldr	r3, [pc, #172]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f023 020f 	bic.w	r2, r3, #15
 80057dc:	4929      	ldr	r1, [pc, #164]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057e4:	f7fc fb88 	bl	8001ef8 <HAL_GetTick>
 80057e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057ec:	f7fc fb84 	bl	8001ef8 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e03b      	b.n	800587a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005802:	4b20      	ldr	r3, [pc, #128]	; (8005884 <HAL_RCC_ClockConfig+0x260>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d1ed      	bne.n	80057ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	d008      	beq.n	800582e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800581c:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	4917      	ldr	r1, [pc, #92]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 800582a:	4313      	orrs	r3, r2
 800582c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800583a:	4b13      	ldr	r3, [pc, #76]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	490f      	ldr	r1, [pc, #60]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 800584a:	4313      	orrs	r3, r2
 800584c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800584e:	f000 f825 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8005852:	4602      	mov	r2, r0
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <HAL_RCC_ClockConfig+0x264>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	091b      	lsrs	r3, r3, #4
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	490c      	ldr	r1, [pc, #48]	; (8005890 <HAL_RCC_ClockConfig+0x26c>)
 8005860:	5ccb      	ldrb	r3, [r1, r3]
 8005862:	f003 031f 	and.w	r3, r3, #31
 8005866:	fa22 f303 	lsr.w	r3, r2, r3
 800586a:	4a0a      	ldr	r2, [pc, #40]	; (8005894 <HAL_RCC_ClockConfig+0x270>)
 800586c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800586e:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <HAL_RCC_ClockConfig+0x274>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fc faf4 	bl	8001e60 <HAL_InitTick>
 8005878:	4603      	mov	r3, r0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40022000 	.word	0x40022000
 8005888:	40021000 	.word	0x40021000
 800588c:	04c4b400 	.word	0x04c4b400
 8005890:	0800e290 	.word	0x0800e290
 8005894:	20000000 	.word	0x20000000
 8005898:	20000004 	.word	0x20000004

0800589c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80058a2:	4b2c      	ldr	r3, [pc, #176]	; (8005954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 030c 	and.w	r3, r3, #12
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	d102      	bne.n	80058b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058ae:	4b2a      	ldr	r3, [pc, #168]	; (8005958 <HAL_RCC_GetSysClockFreq+0xbc>)
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e047      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80058b4:	4b27      	ldr	r3, [pc, #156]	; (8005954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 030c 	and.w	r3, r3, #12
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d102      	bne.n	80058c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058c0:	4b26      	ldr	r3, [pc, #152]	; (800595c <HAL_RCC_GetSysClockFreq+0xc0>)
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	e03e      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80058c6:	4b23      	ldr	r3, [pc, #140]	; (8005954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 030c 	and.w	r3, r3, #12
 80058ce:	2b0c      	cmp	r3, #12
 80058d0:	d136      	bne.n	8005940 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058d2:	4b20      	ldr	r3, [pc, #128]	; (8005954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f003 0303 	and.w	r3, r3, #3
 80058da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058dc:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	091b      	lsrs	r3, r3, #4
 80058e2:	f003 030f 	and.w	r3, r3, #15
 80058e6:	3301      	adds	r3, #1
 80058e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d10c      	bne.n	800590a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058f0:	4a1a      	ldr	r2, [pc, #104]	; (800595c <HAL_RCC_GetSysClockFreq+0xc0>)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f8:	4a16      	ldr	r2, [pc, #88]	; (8005954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80058fa:	68d2      	ldr	r2, [r2, #12]
 80058fc:	0a12      	lsrs	r2, r2, #8
 80058fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005902:	fb02 f303 	mul.w	r3, r2, r3
 8005906:	617b      	str	r3, [r7, #20]
      break;
 8005908:	e00c      	b.n	8005924 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800590a:	4a13      	ldr	r2, [pc, #76]	; (8005958 <HAL_RCC_GetSysClockFreq+0xbc>)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005912:	4a10      	ldr	r2, [pc, #64]	; (8005954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005914:	68d2      	ldr	r2, [r2, #12]
 8005916:	0a12      	lsrs	r2, r2, #8
 8005918:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800591c:	fb02 f303 	mul.w	r3, r2, r3
 8005920:	617b      	str	r3, [r7, #20]
      break;
 8005922:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005924:	4b0b      	ldr	r3, [pc, #44]	; (8005954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	0e5b      	lsrs	r3, r3, #25
 800592a:	f003 0303 	and.w	r3, r3, #3
 800592e:	3301      	adds	r3, #1
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	fbb2 f3f3 	udiv	r3, r2, r3
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	e001      	b.n	8005944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005944:	693b      	ldr	r3, [r7, #16]
}
 8005946:	4618      	mov	r0, r3
 8005948:	371c      	adds	r7, #28
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40021000 	.word	0x40021000
 8005958:	00f42400 	.word	0x00f42400
 800595c:	007a1200 	.word	0x007a1200

08005960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005964:	4b03      	ldr	r3, [pc, #12]	; (8005974 <HAL_RCC_GetHCLKFreq+0x14>)
 8005966:	681b      	ldr	r3, [r3, #0]
}
 8005968:	4618      	mov	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000000 	.word	0x20000000

08005978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800597c:	f7ff fff0 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 8005980:	4602      	mov	r2, r0
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	4904      	ldr	r1, [pc, #16]	; (80059a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800598e:	5ccb      	ldrb	r3, [r1, r3]
 8005990:	f003 031f 	and.w	r3, r3, #31
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005998:	4618      	mov	r0, r3
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40021000 	.word	0x40021000
 80059a0:	0800e2a0 	.word	0x0800e2a0

080059a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059a8:	f7ff ffda 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 80059ac:	4602      	mov	r2, r0
 80059ae:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	0adb      	lsrs	r3, r3, #11
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	4904      	ldr	r1, [pc, #16]	; (80059cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80059ba:	5ccb      	ldrb	r3, [r1, r3]
 80059bc:	f003 031f 	and.w	r3, r3, #31
 80059c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40021000 	.word	0x40021000
 80059cc:	0800e2a0 	.word	0x0800e2a0

080059d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059d6:	4b1e      	ldr	r3, [pc, #120]	; (8005a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0303 	and.w	r3, r3, #3
 80059de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	3301      	adds	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d10c      	bne.n	8005a0e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80059f4:	4a17      	ldr	r2, [pc, #92]	; (8005a54 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	4a14      	ldr	r2, [pc, #80]	; (8005a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80059fe:	68d2      	ldr	r2, [r2, #12]
 8005a00:	0a12      	lsrs	r2, r2, #8
 8005a02:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	617b      	str	r3, [r7, #20]
    break;
 8005a0c:	e00c      	b.n	8005a28 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a0e:	4a12      	ldr	r2, [pc, #72]	; (8005a58 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	4a0e      	ldr	r2, [pc, #56]	; (8005a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a18:	68d2      	ldr	r2, [r2, #12]
 8005a1a:	0a12      	lsrs	r2, r2, #8
 8005a1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a20:	fb02 f303 	mul.w	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]
    break;
 8005a26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a28:	4b09      	ldr	r3, [pc, #36]	; (8005a50 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	0e5b      	lsrs	r3, r3, #25
 8005a2e:	f003 0303 	and.w	r3, r3, #3
 8005a32:	3301      	adds	r3, #1
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a40:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005a42:	687b      	ldr	r3, [r7, #4]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	371c      	adds	r7, #28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	40021000 	.word	0x40021000
 8005a54:	007a1200 	.word	0x007a1200
 8005a58:	00f42400 	.word	0x00f42400

08005a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a64:	2300      	movs	r3, #0
 8005a66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a68:	2300      	movs	r3, #0
 8005a6a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8098 	beq.w	8005baa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a7e:	4b43      	ldr	r3, [pc, #268]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d10d      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8a:	4b40      	ldr	r3, [pc, #256]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8e:	4a3f      	ldr	r2, [pc, #252]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a94:	6593      	str	r3, [r2, #88]	; 0x58
 8005a96:	4b3d      	ldr	r3, [pc, #244]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	60bb      	str	r3, [r7, #8]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aa6:	4b3a      	ldr	r3, [pc, #232]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a39      	ldr	r2, [pc, #228]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ab2:	f7fc fa21 	bl	8001ef8 <HAL_GetTick>
 8005ab6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ab8:	e009      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aba:	f7fc fa1d 	bl	8001ef8 <HAL_GetTick>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d902      	bls.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	74fb      	strb	r3, [r7, #19]
        break;
 8005acc:	e005      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ace:	4b30      	ldr	r3, [pc, #192]	; (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0ef      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005ada:	7cfb      	ldrb	r3, [r7, #19]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d159      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ae0:	4b2a      	ldr	r3, [pc, #168]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d01e      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d019      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005afc:	4b23      	ldr	r3, [pc, #140]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b06:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b08:	4b20      	ldr	r3, [pc, #128]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0e:	4a1f      	ldr	r2, [pc, #124]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b18:	4b1c      	ldr	r3, [pc, #112]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1e:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b28:	4a18      	ldr	r2, [pc, #96]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d016      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3a:	f7fc f9dd 	bl	8001ef8 <HAL_GetTick>
 8005b3e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b40:	e00b      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b42:	f7fc f9d9 	bl	8001ef8 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d902      	bls.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	74fb      	strb	r3, [r7, #19]
            break;
 8005b58:	e006      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0ec      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005b68:	7cfb      	ldrb	r3, [r7, #19]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10b      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b6e:	4b07      	ldr	r3, [pc, #28]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7c:	4903      	ldr	r1, [pc, #12]	; (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b84:	e008      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b86:	7cfb      	ldrb	r3, [r7, #19]
 8005b88:	74bb      	strb	r3, [r7, #18]
 8005b8a:	e005      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b94:	7cfb      	ldrb	r3, [r7, #19]
 8005b96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b98:	7c7b      	ldrb	r3, [r7, #17]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d105      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b9e:	4ba7      	ldr	r3, [pc, #668]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba2:	4aa6      	ldr	r2, [pc, #664]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ba8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bb6:	4ba1      	ldr	r3, [pc, #644]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbc:	f023 0203 	bic.w	r2, r3, #3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	499d      	ldr	r1, [pc, #628]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bd8:	4b98      	ldr	r3, [pc, #608]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bde:	f023 020c 	bic.w	r2, r3, #12
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	4995      	ldr	r1, [pc, #596]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005bfa:	4b90      	ldr	r3, [pc, #576]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	498c      	ldr	r1, [pc, #560]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c1c:	4b87      	ldr	r3, [pc, #540]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	4984      	ldr	r1, [pc, #528]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c3e:	4b7f      	ldr	r3, [pc, #508]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	497b      	ldr	r1, [pc, #492]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c60:	4b76      	ldr	r3, [pc, #472]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	4973      	ldr	r1, [pc, #460]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c82:	4b6e      	ldr	r3, [pc, #440]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	496a      	ldr	r1, [pc, #424]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ca4:	4b65      	ldr	r3, [pc, #404]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005caa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	4962      	ldr	r1, [pc, #392]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cc6:	4b5d      	ldr	r3, [pc, #372]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	4959      	ldr	r1, [pc, #356]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ce8:	4b54      	ldr	r3, [pc, #336]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cee:	f023 0203 	bic.w	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	4951      	ldr	r1, [pc, #324]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d0a:	4b4c      	ldr	r3, [pc, #304]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	4948      	ldr	r1, [pc, #288]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d015      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d2c:	4b43      	ldr	r3, [pc, #268]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3a:	4940      	ldr	r1, [pc, #256]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d4a:	d105      	bne.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d4c:	4b3b      	ldr	r3, [pc, #236]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4a3a      	ldr	r2, [pc, #232]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d015      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d64:	4b35      	ldr	r3, [pc, #212]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	4932      	ldr	r1, [pc, #200]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d82:	d105      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d84:	4b2d      	ldr	r3, [pc, #180]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	4a2c      	ldr	r2, [pc, #176]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d8e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d015      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d9c:	4b27      	ldr	r3, [pc, #156]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	4924      	ldr	r1, [pc, #144]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005dba:	d105      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dbc:	4b1f      	ldr	r3, [pc, #124]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dc6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d015      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dd4:	4b19      	ldr	r3, [pc, #100]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de2:	4916      	ldr	r1, [pc, #88]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df2:	d105      	bne.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005df4:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	4a10      	ldr	r2, [pc, #64]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dfe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d019      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	4908      	ldr	r1, [pc, #32]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e2a:	d109      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e2c:	4b03      	ldr	r3, [pc, #12]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4a02      	ldr	r2, [pc, #8]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e36:	60d3      	str	r3, [r2, #12]
 8005e38:	e002      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e3a:	bf00      	nop
 8005e3c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d015      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e4c:	4b29      	ldr	r3, [pc, #164]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5a:	4926      	ldr	r1, [pc, #152]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e6a:	d105      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e6c:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	4a20      	ldr	r2, [pc, #128]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e76:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d015      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005e84:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e92:	4918      	ldr	r1, [pc, #96]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea2:	d105      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ea4:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	4a12      	ldr	r2, [pc, #72]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d015      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005ebc:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ec2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eca:	490a      	ldr	r1, [pc, #40]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eda:	d105      	bne.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005edc:	4b05      	ldr	r3, [pc, #20]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ee6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ee8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40021000 	.word	0x40021000

08005ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e049      	b.n	8005f9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fb fd74 	bl	8001a0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4619      	mov	r1, r3
 8005f36:	4610      	mov	r0, r2
 8005f38:	f000 fbd2 	bl	80066e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b082      	sub	sp, #8
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e049      	b.n	800604c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d106      	bne.n	8005fd2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f841 	bl	8006054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	f000 fb7b 	bl	80066e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d109      	bne.n	800608c <HAL_TIM_PWM_Start+0x24>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b01      	cmp	r3, #1
 8006082:	bf14      	ite	ne
 8006084:	2301      	movne	r3, #1
 8006086:	2300      	moveq	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	e03c      	b.n	8006106 <HAL_TIM_PWM_Start+0x9e>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b04      	cmp	r3, #4
 8006090:	d109      	bne.n	80060a6 <HAL_TIM_PWM_Start+0x3e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b01      	cmp	r3, #1
 800609c:	bf14      	ite	ne
 800609e:	2301      	movne	r3, #1
 80060a0:	2300      	moveq	r3, #0
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	e02f      	b.n	8006106 <HAL_TIM_PWM_Start+0x9e>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d109      	bne.n	80060c0 <HAL_TIM_PWM_Start+0x58>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	bf14      	ite	ne
 80060b8:	2301      	movne	r3, #1
 80060ba:	2300      	moveq	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	e022      	b.n	8006106 <HAL_TIM_PWM_Start+0x9e>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b0c      	cmp	r3, #12
 80060c4:	d109      	bne.n	80060da <HAL_TIM_PWM_Start+0x72>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	bf14      	ite	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	2300      	moveq	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	e015      	b.n	8006106 <HAL_TIM_PWM_Start+0x9e>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b10      	cmp	r3, #16
 80060de:	d109      	bne.n	80060f4 <HAL_TIM_PWM_Start+0x8c>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	bf14      	ite	ne
 80060ec:	2301      	movne	r3, #1
 80060ee:	2300      	moveq	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	e008      	b.n	8006106 <HAL_TIM_PWM_Start+0x9e>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	bf14      	ite	ne
 8006100:	2301      	movne	r3, #1
 8006102:	2300      	moveq	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e0a6      	b.n	800625c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <HAL_TIM_PWM_Start+0xb6>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800611c:	e023      	b.n	8006166 <HAL_TIM_PWM_Start+0xfe>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b04      	cmp	r3, #4
 8006122:	d104      	bne.n	800612e <HAL_TIM_PWM_Start+0xc6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800612c:	e01b      	b.n	8006166 <HAL_TIM_PWM_Start+0xfe>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b08      	cmp	r3, #8
 8006132:	d104      	bne.n	800613e <HAL_TIM_PWM_Start+0xd6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800613c:	e013      	b.n	8006166 <HAL_TIM_PWM_Start+0xfe>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b0c      	cmp	r3, #12
 8006142:	d104      	bne.n	800614e <HAL_TIM_PWM_Start+0xe6>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800614c:	e00b      	b.n	8006166 <HAL_TIM_PWM_Start+0xfe>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b10      	cmp	r3, #16
 8006152:	d104      	bne.n	800615e <HAL_TIM_PWM_Start+0xf6>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800615c:	e003      	b.n	8006166 <HAL_TIM_PWM_Start+0xfe>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2202      	movs	r2, #2
 8006162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2201      	movs	r2, #1
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f000 ff24 	bl	8006fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a3a      	ldr	r2, [pc, #232]	; (8006264 <HAL_TIM_PWM_Start+0x1fc>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d018      	beq.n	80061b0 <HAL_TIM_PWM_Start+0x148>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a39      	ldr	r2, [pc, #228]	; (8006268 <HAL_TIM_PWM_Start+0x200>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d013      	beq.n	80061b0 <HAL_TIM_PWM_Start+0x148>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a37      	ldr	r2, [pc, #220]	; (800626c <HAL_TIM_PWM_Start+0x204>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00e      	beq.n	80061b0 <HAL_TIM_PWM_Start+0x148>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a36      	ldr	r2, [pc, #216]	; (8006270 <HAL_TIM_PWM_Start+0x208>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d009      	beq.n	80061b0 <HAL_TIM_PWM_Start+0x148>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a34      	ldr	r2, [pc, #208]	; (8006274 <HAL_TIM_PWM_Start+0x20c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d004      	beq.n	80061b0 <HAL_TIM_PWM_Start+0x148>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a33      	ldr	r2, [pc, #204]	; (8006278 <HAL_TIM_PWM_Start+0x210>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d101      	bne.n	80061b4 <HAL_TIM_PWM_Start+0x14c>
 80061b0:	2301      	movs	r3, #1
 80061b2:	e000      	b.n	80061b6 <HAL_TIM_PWM_Start+0x14e>
 80061b4:	2300      	movs	r3, #0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a25      	ldr	r2, [pc, #148]	; (8006264 <HAL_TIM_PWM_Start+0x1fc>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d022      	beq.n	800621a <HAL_TIM_PWM_Start+0x1b2>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061dc:	d01d      	beq.n	800621a <HAL_TIM_PWM_Start+0x1b2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a26      	ldr	r2, [pc, #152]	; (800627c <HAL_TIM_PWM_Start+0x214>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d018      	beq.n	800621a <HAL_TIM_PWM_Start+0x1b2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a24      	ldr	r2, [pc, #144]	; (8006280 <HAL_TIM_PWM_Start+0x218>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d013      	beq.n	800621a <HAL_TIM_PWM_Start+0x1b2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a23      	ldr	r2, [pc, #140]	; (8006284 <HAL_TIM_PWM_Start+0x21c>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00e      	beq.n	800621a <HAL_TIM_PWM_Start+0x1b2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a19      	ldr	r2, [pc, #100]	; (8006268 <HAL_TIM_PWM_Start+0x200>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d009      	beq.n	800621a <HAL_TIM_PWM_Start+0x1b2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a18      	ldr	r2, [pc, #96]	; (800626c <HAL_TIM_PWM_Start+0x204>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d004      	beq.n	800621a <HAL_TIM_PWM_Start+0x1b2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a18      	ldr	r2, [pc, #96]	; (8006278 <HAL_TIM_PWM_Start+0x210>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d115      	bne.n	8006246 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	4b19      	ldr	r3, [pc, #100]	; (8006288 <HAL_TIM_PWM_Start+0x220>)
 8006222:	4013      	ands	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b06      	cmp	r3, #6
 800622a:	d015      	beq.n	8006258 <HAL_TIM_PWM_Start+0x1f0>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006232:	d011      	beq.n	8006258 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0201 	orr.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006244:	e008      	b.n	8006258 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f042 0201 	orr.w	r2, r2, #1
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	e000      	b.n	800625a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006258:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	40012c00 	.word	0x40012c00
 8006268:	40013400 	.word	0x40013400
 800626c:	40014000 	.word	0x40014000
 8006270:	40014400 	.word	0x40014400
 8006274:	40014800 	.word	0x40014800
 8006278:	40015000 	.word	0x40015000
 800627c:	40000400 	.word	0x40000400
 8006280:	40000800 	.word	0x40000800
 8006284:	40000c00 	.word	0x40000c00
 8006288:	00010007 	.word	0x00010007

0800628c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e0ff      	b.n	80064aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b14      	cmp	r3, #20
 80062b6:	f200 80f0 	bhi.w	800649a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80062ba:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c0:	08006315 	.word	0x08006315
 80062c4:	0800649b 	.word	0x0800649b
 80062c8:	0800649b 	.word	0x0800649b
 80062cc:	0800649b 	.word	0x0800649b
 80062d0:	08006355 	.word	0x08006355
 80062d4:	0800649b 	.word	0x0800649b
 80062d8:	0800649b 	.word	0x0800649b
 80062dc:	0800649b 	.word	0x0800649b
 80062e0:	08006397 	.word	0x08006397
 80062e4:	0800649b 	.word	0x0800649b
 80062e8:	0800649b 	.word	0x0800649b
 80062ec:	0800649b 	.word	0x0800649b
 80062f0:	080063d7 	.word	0x080063d7
 80062f4:	0800649b 	.word	0x0800649b
 80062f8:	0800649b 	.word	0x0800649b
 80062fc:	0800649b 	.word	0x0800649b
 8006300:	08006419 	.word	0x08006419
 8006304:	0800649b 	.word	0x0800649b
 8006308:	0800649b 	.word	0x0800649b
 800630c:	0800649b 	.word	0x0800649b
 8006310:	08006459 	.word	0x08006459
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68b9      	ldr	r1, [r7, #8]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 fa88 	bl	8006830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0208 	orr.w	r2, r2, #8
 800632e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0204 	bic.w	r2, r2, #4
 800633e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6999      	ldr	r1, [r3, #24]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	619a      	str	r2, [r3, #24]
      break;
 8006352:	e0a5      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fb02 	bl	8006964 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800636e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800637e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6999      	ldr	r1, [r3, #24]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	021a      	lsls	r2, r3, #8
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	619a      	str	r2, [r3, #24]
      break;
 8006394:	e084      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	4618      	mov	r0, r3
 800639e:	f000 fb75 	bl	8006a8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69da      	ldr	r2, [r3, #28]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0208 	orr.w	r2, r2, #8
 80063b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0204 	bic.w	r2, r2, #4
 80063c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69d9      	ldr	r1, [r3, #28]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	61da      	str	r2, [r3, #28]
      break;
 80063d4:	e064      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fbe7 	bl	8006bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69da      	ldr	r2, [r3, #28]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69d9      	ldr	r1, [r3, #28]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	021a      	lsls	r2, r3, #8
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	61da      	str	r2, [r3, #28]
      break;
 8006416:	e043      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fc5a 	bl	8006cd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0208 	orr.w	r2, r2, #8
 8006432:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0204 	bic.w	r2, r2, #4
 8006442:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006456:	e023      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fca4 	bl	8006dac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006472:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006482:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	021a      	lsls	r2, r3, #8
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006498:	e002      	b.n	80064a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	75fb      	strb	r3, [r7, #23]
      break;
 800649e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop

080064b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_TIM_ConfigClockSource+0x1c>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e0f6      	b.n	80066be <HAL_TIM_ConfigClockSource+0x20a>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80064ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80064f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68ba      	ldr	r2, [r7, #8]
 8006502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a6f      	ldr	r2, [pc, #444]	; (80066c8 <HAL_TIM_ConfigClockSource+0x214>)
 800650a:	4293      	cmp	r3, r2
 800650c:	f000 80c1 	beq.w	8006692 <HAL_TIM_ConfigClockSource+0x1de>
 8006510:	4a6d      	ldr	r2, [pc, #436]	; (80066c8 <HAL_TIM_ConfigClockSource+0x214>)
 8006512:	4293      	cmp	r3, r2
 8006514:	f200 80c6 	bhi.w	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006518:	4a6c      	ldr	r2, [pc, #432]	; (80066cc <HAL_TIM_ConfigClockSource+0x218>)
 800651a:	4293      	cmp	r3, r2
 800651c:	f000 80b9 	beq.w	8006692 <HAL_TIM_ConfigClockSource+0x1de>
 8006520:	4a6a      	ldr	r2, [pc, #424]	; (80066cc <HAL_TIM_ConfigClockSource+0x218>)
 8006522:	4293      	cmp	r3, r2
 8006524:	f200 80be 	bhi.w	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006528:	4a69      	ldr	r2, [pc, #420]	; (80066d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	f000 80b1 	beq.w	8006692 <HAL_TIM_ConfigClockSource+0x1de>
 8006530:	4a67      	ldr	r2, [pc, #412]	; (80066d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006532:	4293      	cmp	r3, r2
 8006534:	f200 80b6 	bhi.w	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006538:	4a66      	ldr	r2, [pc, #408]	; (80066d4 <HAL_TIM_ConfigClockSource+0x220>)
 800653a:	4293      	cmp	r3, r2
 800653c:	f000 80a9 	beq.w	8006692 <HAL_TIM_ConfigClockSource+0x1de>
 8006540:	4a64      	ldr	r2, [pc, #400]	; (80066d4 <HAL_TIM_ConfigClockSource+0x220>)
 8006542:	4293      	cmp	r3, r2
 8006544:	f200 80ae 	bhi.w	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006548:	4a63      	ldr	r2, [pc, #396]	; (80066d8 <HAL_TIM_ConfigClockSource+0x224>)
 800654a:	4293      	cmp	r3, r2
 800654c:	f000 80a1 	beq.w	8006692 <HAL_TIM_ConfigClockSource+0x1de>
 8006550:	4a61      	ldr	r2, [pc, #388]	; (80066d8 <HAL_TIM_ConfigClockSource+0x224>)
 8006552:	4293      	cmp	r3, r2
 8006554:	f200 80a6 	bhi.w	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006558:	4a60      	ldr	r2, [pc, #384]	; (80066dc <HAL_TIM_ConfigClockSource+0x228>)
 800655a:	4293      	cmp	r3, r2
 800655c:	f000 8099 	beq.w	8006692 <HAL_TIM_ConfigClockSource+0x1de>
 8006560:	4a5e      	ldr	r2, [pc, #376]	; (80066dc <HAL_TIM_ConfigClockSource+0x228>)
 8006562:	4293      	cmp	r3, r2
 8006564:	f200 809e 	bhi.w	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006568:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800656c:	f000 8091 	beq.w	8006692 <HAL_TIM_ConfigClockSource+0x1de>
 8006570:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006574:	f200 8096 	bhi.w	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800657c:	f000 8089 	beq.w	8006692 <HAL_TIM_ConfigClockSource+0x1de>
 8006580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006584:	f200 808e 	bhi.w	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800658c:	d03e      	beq.n	800660c <HAL_TIM_ConfigClockSource+0x158>
 800658e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006592:	f200 8087 	bhi.w	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8006596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659a:	f000 8086 	beq.w	80066aa <HAL_TIM_ConfigClockSource+0x1f6>
 800659e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a2:	d87f      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80065a4:	2b70      	cmp	r3, #112	; 0x70
 80065a6:	d01a      	beq.n	80065de <HAL_TIM_ConfigClockSource+0x12a>
 80065a8:	2b70      	cmp	r3, #112	; 0x70
 80065aa:	d87b      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80065ac:	2b60      	cmp	r3, #96	; 0x60
 80065ae:	d050      	beq.n	8006652 <HAL_TIM_ConfigClockSource+0x19e>
 80065b0:	2b60      	cmp	r3, #96	; 0x60
 80065b2:	d877      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80065b4:	2b50      	cmp	r3, #80	; 0x50
 80065b6:	d03c      	beq.n	8006632 <HAL_TIM_ConfigClockSource+0x17e>
 80065b8:	2b50      	cmp	r3, #80	; 0x50
 80065ba:	d873      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d058      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0x1be>
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d86f      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80065c4:	2b30      	cmp	r3, #48	; 0x30
 80065c6:	d064      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x1de>
 80065c8:	2b30      	cmp	r3, #48	; 0x30
 80065ca:	d86b      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80065cc:	2b20      	cmp	r3, #32
 80065ce:	d060      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x1de>
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d867      	bhi.n	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d05c      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x1de>
 80065d8:	2b10      	cmp	r3, #16
 80065da:	d05a      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x1de>
 80065dc:	e062      	b.n	80066a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	6899      	ldr	r1, [r3, #8]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f000 fcc5 	bl	8006f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	609a      	str	r2, [r3, #8]
      break;
 800660a:	e04f      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6818      	ldr	r0, [r3, #0]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	6899      	ldr	r1, [r3, #8]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f000 fcae 	bl	8006f7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800662e:	609a      	str	r2, [r3, #8]
      break;
 8006630:	e03c      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6818      	ldr	r0, [r3, #0]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	6859      	ldr	r1, [r3, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	461a      	mov	r2, r3
 8006640:	f000 fc20 	bl	8006e84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	2150      	movs	r1, #80	; 0x50
 800664a:	4618      	mov	r0, r3
 800664c:	f000 fc79 	bl	8006f42 <TIM_ITRx_SetConfig>
      break;
 8006650:	e02c      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	6859      	ldr	r1, [r3, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	461a      	mov	r2, r3
 8006660:	f000 fc3f 	bl	8006ee2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2160      	movs	r1, #96	; 0x60
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fc69 	bl	8006f42 <TIM_ITRx_SetConfig>
      break;
 8006670:	e01c      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	461a      	mov	r2, r3
 8006680:	f000 fc00 	bl	8006e84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2140      	movs	r1, #64	; 0x40
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fc59 	bl	8006f42 <TIM_ITRx_SetConfig>
      break;
 8006690:	e00c      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f000 fc50 	bl	8006f42 <TIM_ITRx_SetConfig>
      break;
 80066a2:	e003      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	73fb      	strb	r3, [r7, #15]
      break;
 80066a8:	e000      	b.n	80066ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80066aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	00100070 	.word	0x00100070
 80066cc:	00100060 	.word	0x00100060
 80066d0:	00100050 	.word	0x00100050
 80066d4:	00100040 	.word	0x00100040
 80066d8:	00100030 	.word	0x00100030
 80066dc:	00100020 	.word	0x00100020

080066e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a46      	ldr	r2, [pc, #280]	; (800680c <TIM_Base_SetConfig+0x12c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d017      	beq.n	8006728 <TIM_Base_SetConfig+0x48>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066fe:	d013      	beq.n	8006728 <TIM_Base_SetConfig+0x48>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a43      	ldr	r2, [pc, #268]	; (8006810 <TIM_Base_SetConfig+0x130>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00f      	beq.n	8006728 <TIM_Base_SetConfig+0x48>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a42      	ldr	r2, [pc, #264]	; (8006814 <TIM_Base_SetConfig+0x134>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00b      	beq.n	8006728 <TIM_Base_SetConfig+0x48>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a41      	ldr	r2, [pc, #260]	; (8006818 <TIM_Base_SetConfig+0x138>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d007      	beq.n	8006728 <TIM_Base_SetConfig+0x48>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a40      	ldr	r2, [pc, #256]	; (800681c <TIM_Base_SetConfig+0x13c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d003      	beq.n	8006728 <TIM_Base_SetConfig+0x48>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	4a3f      	ldr	r2, [pc, #252]	; (8006820 <TIM_Base_SetConfig+0x140>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d108      	bne.n	800673a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	4313      	orrs	r3, r2
 8006738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a33      	ldr	r2, [pc, #204]	; (800680c <TIM_Base_SetConfig+0x12c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d023      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006748:	d01f      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a30      	ldr	r2, [pc, #192]	; (8006810 <TIM_Base_SetConfig+0x130>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01b      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a2f      	ldr	r2, [pc, #188]	; (8006814 <TIM_Base_SetConfig+0x134>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d017      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a2e      	ldr	r2, [pc, #184]	; (8006818 <TIM_Base_SetConfig+0x138>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d013      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a2d      	ldr	r2, [pc, #180]	; (800681c <TIM_Base_SetConfig+0x13c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00f      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2d      	ldr	r2, [pc, #180]	; (8006824 <TIM_Base_SetConfig+0x144>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d00b      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2c      	ldr	r2, [pc, #176]	; (8006828 <TIM_Base_SetConfig+0x148>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d007      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2b      	ldr	r2, [pc, #172]	; (800682c <TIM_Base_SetConfig+0x14c>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d003      	beq.n	800678a <TIM_Base_SetConfig+0xaa>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a26      	ldr	r2, [pc, #152]	; (8006820 <TIM_Base_SetConfig+0x140>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d108      	bne.n	800679c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	689a      	ldr	r2, [r3, #8]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a12      	ldr	r2, [pc, #72]	; (800680c <TIM_Base_SetConfig+0x12c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d013      	beq.n	80067f0 <TIM_Base_SetConfig+0x110>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a14      	ldr	r2, [pc, #80]	; (800681c <TIM_Base_SetConfig+0x13c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d00f      	beq.n	80067f0 <TIM_Base_SetConfig+0x110>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a14      	ldr	r2, [pc, #80]	; (8006824 <TIM_Base_SetConfig+0x144>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00b      	beq.n	80067f0 <TIM_Base_SetConfig+0x110>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a13      	ldr	r2, [pc, #76]	; (8006828 <TIM_Base_SetConfig+0x148>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d007      	beq.n	80067f0 <TIM_Base_SetConfig+0x110>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a12      	ldr	r2, [pc, #72]	; (800682c <TIM_Base_SetConfig+0x14c>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d003      	beq.n	80067f0 <TIM_Base_SetConfig+0x110>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a0d      	ldr	r2, [pc, #52]	; (8006820 <TIM_Base_SetConfig+0x140>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d103      	bne.n	80067f8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	615a      	str	r2, [r3, #20]
}
 80067fe:	bf00      	nop
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40000400 	.word	0x40000400
 8006814:	40000800 	.word	0x40000800
 8006818:	40000c00 	.word	0x40000c00
 800681c:	40013400 	.word	0x40013400
 8006820:	40015000 	.word	0x40015000
 8006824:	40014000 	.word	0x40014000
 8006828:	40014400 	.word	0x40014400
 800682c:	40014800 	.word	0x40014800

08006830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f023 0201 	bic.w	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800685e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0303 	bic.w	r3, r3, #3
 800686a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f023 0302 	bic.w	r3, r3, #2
 800687c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a30      	ldr	r2, [pc, #192]	; (800694c <TIM_OC1_SetConfig+0x11c>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d013      	beq.n	80068b8 <TIM_OC1_SetConfig+0x88>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a2f      	ldr	r2, [pc, #188]	; (8006950 <TIM_OC1_SetConfig+0x120>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d00f      	beq.n	80068b8 <TIM_OC1_SetConfig+0x88>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a2e      	ldr	r2, [pc, #184]	; (8006954 <TIM_OC1_SetConfig+0x124>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d00b      	beq.n	80068b8 <TIM_OC1_SetConfig+0x88>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a2d      	ldr	r2, [pc, #180]	; (8006958 <TIM_OC1_SetConfig+0x128>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d007      	beq.n	80068b8 <TIM_OC1_SetConfig+0x88>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a2c      	ldr	r2, [pc, #176]	; (800695c <TIM_OC1_SetConfig+0x12c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d003      	beq.n	80068b8 <TIM_OC1_SetConfig+0x88>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a2b      	ldr	r2, [pc, #172]	; (8006960 <TIM_OC1_SetConfig+0x130>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d10c      	bne.n	80068d2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	f023 0308 	bic.w	r3, r3, #8
 80068be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f023 0304 	bic.w	r3, r3, #4
 80068d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a1d      	ldr	r2, [pc, #116]	; (800694c <TIM_OC1_SetConfig+0x11c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <TIM_OC1_SetConfig+0xd2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a1c      	ldr	r2, [pc, #112]	; (8006950 <TIM_OC1_SetConfig+0x120>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d00f      	beq.n	8006902 <TIM_OC1_SetConfig+0xd2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a1b      	ldr	r2, [pc, #108]	; (8006954 <TIM_OC1_SetConfig+0x124>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00b      	beq.n	8006902 <TIM_OC1_SetConfig+0xd2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a1a      	ldr	r2, [pc, #104]	; (8006958 <TIM_OC1_SetConfig+0x128>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d007      	beq.n	8006902 <TIM_OC1_SetConfig+0xd2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a19      	ldr	r2, [pc, #100]	; (800695c <TIM_OC1_SetConfig+0x12c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_OC1_SetConfig+0xd2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a18      	ldr	r2, [pc, #96]	; (8006960 <TIM_OC1_SetConfig+0x130>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d111      	bne.n	8006926 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	621a      	str	r2, [r3, #32]
}
 8006940:	bf00      	nop
 8006942:	371c      	adds	r7, #28
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	40012c00 	.word	0x40012c00
 8006950:	40013400 	.word	0x40013400
 8006954:	40014000 	.word	0x40014000
 8006958:	40014400 	.word	0x40014400
 800695c:	40014800 	.word	0x40014800
 8006960:	40015000 	.word	0x40015000

08006964 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	f023 0210 	bic.w	r2, r3, #16
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f023 0320 	bic.w	r3, r3, #32
 80069b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a2c      	ldr	r2, [pc, #176]	; (8006a74 <TIM_OC2_SetConfig+0x110>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d007      	beq.n	80069d8 <TIM_OC2_SetConfig+0x74>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a2b      	ldr	r2, [pc, #172]	; (8006a78 <TIM_OC2_SetConfig+0x114>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d003      	beq.n	80069d8 <TIM_OC2_SetConfig+0x74>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a2a      	ldr	r2, [pc, #168]	; (8006a7c <TIM_OC2_SetConfig+0x118>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d10d      	bne.n	80069f4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a1f      	ldr	r2, [pc, #124]	; (8006a74 <TIM_OC2_SetConfig+0x110>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d013      	beq.n	8006a24 <TIM_OC2_SetConfig+0xc0>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a1e      	ldr	r2, [pc, #120]	; (8006a78 <TIM_OC2_SetConfig+0x114>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00f      	beq.n	8006a24 <TIM_OC2_SetConfig+0xc0>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <TIM_OC2_SetConfig+0x11c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00b      	beq.n	8006a24 <TIM_OC2_SetConfig+0xc0>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a1d      	ldr	r2, [pc, #116]	; (8006a84 <TIM_OC2_SetConfig+0x120>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d007      	beq.n	8006a24 <TIM_OC2_SetConfig+0xc0>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a1c      	ldr	r2, [pc, #112]	; (8006a88 <TIM_OC2_SetConfig+0x124>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d003      	beq.n	8006a24 <TIM_OC2_SetConfig+0xc0>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a17      	ldr	r2, [pc, #92]	; (8006a7c <TIM_OC2_SetConfig+0x118>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d113      	bne.n	8006a4c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685a      	ldr	r2, [r3, #4]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	621a      	str	r2, [r3, #32]
}
 8006a66:	bf00      	nop
 8006a68:	371c      	adds	r7, #28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	40012c00 	.word	0x40012c00
 8006a78:	40013400 	.word	0x40013400
 8006a7c:	40015000 	.word	0x40015000
 8006a80:	40014000 	.word	0x40014000
 8006a84:	40014400 	.word	0x40014400
 8006a88:	40014800 	.word	0x40014800

08006a8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0303 	bic.w	r3, r3, #3
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a2b      	ldr	r2, [pc, #172]	; (8006b98 <TIM_OC3_SetConfig+0x10c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d007      	beq.n	8006afe <TIM_OC3_SetConfig+0x72>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a2a      	ldr	r2, [pc, #168]	; (8006b9c <TIM_OC3_SetConfig+0x110>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_OC3_SetConfig+0x72>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a29      	ldr	r2, [pc, #164]	; (8006ba0 <TIM_OC3_SetConfig+0x114>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d10d      	bne.n	8006b1a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a1e      	ldr	r2, [pc, #120]	; (8006b98 <TIM_OC3_SetConfig+0x10c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <TIM_OC3_SetConfig+0xbe>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <TIM_OC3_SetConfig+0x110>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00f      	beq.n	8006b4a <TIM_OC3_SetConfig+0xbe>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <TIM_OC3_SetConfig+0x118>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d00b      	beq.n	8006b4a <TIM_OC3_SetConfig+0xbe>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a1c      	ldr	r2, [pc, #112]	; (8006ba8 <TIM_OC3_SetConfig+0x11c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d007      	beq.n	8006b4a <TIM_OC3_SetConfig+0xbe>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a1b      	ldr	r2, [pc, #108]	; (8006bac <TIM_OC3_SetConfig+0x120>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d003      	beq.n	8006b4a <TIM_OC3_SetConfig+0xbe>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <TIM_OC3_SetConfig+0x114>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d113      	bne.n	8006b72 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	011b      	lsls	r3, r3, #4
 8006b6c:	693a      	ldr	r2, [r7, #16]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	621a      	str	r2, [r3, #32]
}
 8006b8c:	bf00      	nop
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	40012c00 	.word	0x40012c00
 8006b9c:	40013400 	.word	0x40013400
 8006ba0:	40015000 	.word	0x40015000
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400
 8006bac:	40014800 	.word	0x40014800

08006bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	021b      	lsls	r3, r3, #8
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	031b      	lsls	r3, r3, #12
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a2c      	ldr	r2, [pc, #176]	; (8006cc0 <TIM_OC4_SetConfig+0x110>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d007      	beq.n	8006c24 <TIM_OC4_SetConfig+0x74>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a2b      	ldr	r2, [pc, #172]	; (8006cc4 <TIM_OC4_SetConfig+0x114>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d003      	beq.n	8006c24 <TIM_OC4_SetConfig+0x74>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a2a      	ldr	r2, [pc, #168]	; (8006cc8 <TIM_OC4_SetConfig+0x118>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d10d      	bne.n	8006c40 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	031b      	lsls	r3, r3, #12
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a1f      	ldr	r2, [pc, #124]	; (8006cc0 <TIM_OC4_SetConfig+0x110>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d013      	beq.n	8006c70 <TIM_OC4_SetConfig+0xc0>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a1e      	ldr	r2, [pc, #120]	; (8006cc4 <TIM_OC4_SetConfig+0x114>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00f      	beq.n	8006c70 <TIM_OC4_SetConfig+0xc0>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a1e      	ldr	r2, [pc, #120]	; (8006ccc <TIM_OC4_SetConfig+0x11c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00b      	beq.n	8006c70 <TIM_OC4_SetConfig+0xc0>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a1d      	ldr	r2, [pc, #116]	; (8006cd0 <TIM_OC4_SetConfig+0x120>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d007      	beq.n	8006c70 <TIM_OC4_SetConfig+0xc0>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a1c      	ldr	r2, [pc, #112]	; (8006cd4 <TIM_OC4_SetConfig+0x124>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d003      	beq.n	8006c70 <TIM_OC4_SetConfig+0xc0>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a17      	ldr	r2, [pc, #92]	; (8006cc8 <TIM_OC4_SetConfig+0x118>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d113      	bne.n	8006c98 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c76:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c7e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	695b      	ldr	r3, [r3, #20]
 8006c84:	019b      	lsls	r3, r3, #6
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	019b      	lsls	r3, r3, #6
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	68fa      	ldr	r2, [r7, #12]
 8006ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	621a      	str	r2, [r3, #32]
}
 8006cb2:	bf00      	nop
 8006cb4:	371c      	adds	r7, #28
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40012c00 	.word	0x40012c00
 8006cc4:	40013400 	.word	0x40013400
 8006cc8:	40015000 	.word	0x40015000
 8006ccc:	40014000 	.word	0x40014000
 8006cd0:	40014400 	.word	0x40014400
 8006cd4:	40014800 	.word	0x40014800

08006cd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	041b      	lsls	r3, r3, #16
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a19      	ldr	r2, [pc, #100]	; (8006d94 <TIM_OC5_SetConfig+0xbc>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <TIM_OC5_SetConfig+0x82>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <TIM_OC5_SetConfig+0xc0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00f      	beq.n	8006d5a <TIM_OC5_SetConfig+0x82>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a17      	ldr	r2, [pc, #92]	; (8006d9c <TIM_OC5_SetConfig+0xc4>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d00b      	beq.n	8006d5a <TIM_OC5_SetConfig+0x82>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a16      	ldr	r2, [pc, #88]	; (8006da0 <TIM_OC5_SetConfig+0xc8>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d007      	beq.n	8006d5a <TIM_OC5_SetConfig+0x82>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a15      	ldr	r2, [pc, #84]	; (8006da4 <TIM_OC5_SetConfig+0xcc>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d003      	beq.n	8006d5a <TIM_OC5_SetConfig+0x82>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a14      	ldr	r2, [pc, #80]	; (8006da8 <TIM_OC5_SetConfig+0xd0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d109      	bne.n	8006d6e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	695b      	ldr	r3, [r3, #20]
 8006d66:	021b      	lsls	r3, r3, #8
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	621a      	str	r2, [r3, #32]
}
 8006d88:	bf00      	nop
 8006d8a:	371c      	adds	r7, #28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	40012c00 	.word	0x40012c00
 8006d98:	40013400 	.word	0x40013400
 8006d9c:	40014000 	.word	0x40014000
 8006da0:	40014400 	.word	0x40014400
 8006da4:	40014800 	.word	0x40014800
 8006da8:	40015000 	.word	0x40015000

08006dac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006df2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	051b      	lsls	r3, r3, #20
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a1a      	ldr	r2, [pc, #104]	; (8006e6c <TIM_OC6_SetConfig+0xc0>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d013      	beq.n	8006e30 <TIM_OC6_SetConfig+0x84>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a19      	ldr	r2, [pc, #100]	; (8006e70 <TIM_OC6_SetConfig+0xc4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00f      	beq.n	8006e30 <TIM_OC6_SetConfig+0x84>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a18      	ldr	r2, [pc, #96]	; (8006e74 <TIM_OC6_SetConfig+0xc8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00b      	beq.n	8006e30 <TIM_OC6_SetConfig+0x84>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a17      	ldr	r2, [pc, #92]	; (8006e78 <TIM_OC6_SetConfig+0xcc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d007      	beq.n	8006e30 <TIM_OC6_SetConfig+0x84>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a16      	ldr	r2, [pc, #88]	; (8006e7c <TIM_OC6_SetConfig+0xd0>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC6_SetConfig+0x84>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a15      	ldr	r2, [pc, #84]	; (8006e80 <TIM_OC6_SetConfig+0xd4>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d109      	bne.n	8006e44 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	029b      	lsls	r3, r3, #10
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	693a      	ldr	r2, [r7, #16]
 8006e5c:	621a      	str	r2, [r3, #32]
}
 8006e5e:	bf00      	nop
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	40012c00 	.word	0x40012c00
 8006e70:	40013400 	.word	0x40013400
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40014400 	.word	0x40014400
 8006e7c:	40014800 	.word	0x40014800
 8006e80:	40015000 	.word	0x40015000

08006e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f023 0201 	bic.w	r2, r3, #1
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f023 030a 	bic.w	r3, r3, #10
 8006ec0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	621a      	str	r2, [r3, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b087      	sub	sp, #28
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f023 0210 	bic.w	r2, r3, #16
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	031b      	lsls	r3, r3, #12
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	011b      	lsls	r3, r3, #4
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	621a      	str	r2, [r3, #32]
}
 8006f36:	bf00      	nop
 8006f38:	371c      	adds	r7, #28
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f043 0307 	orr.w	r3, r3, #7
 8006f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	609a      	str	r2, [r3, #8]
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	021a      	lsls	r2, r3, #8
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	609a      	str	r2, [r3, #8]
}
 8006fb0:	bf00      	nop
 8006fb2:	371c      	adds	r7, #28
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	2201      	movs	r2, #1
 8006fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a1a      	ldr	r2, [r3, #32]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	43db      	mvns	r3, r3
 8006fde:	401a      	ands	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a1a      	ldr	r2, [r3, #32]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	f003 031f 	and.w	r3, r3, #31
 8006fee:	6879      	ldr	r1, [r7, #4]
 8006ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	621a      	str	r2, [r3, #32]
}
 8006ffa:	bf00      	nop
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
	...

08007008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007018:	2b01      	cmp	r3, #1
 800701a:	d101      	bne.n	8007020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800701c:	2302      	movs	r3, #2
 800701e:	e074      	b.n	800710a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a34      	ldr	r2, [pc, #208]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d009      	beq.n	800705e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a33      	ldr	r2, [pc, #204]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d004      	beq.n	800705e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a31      	ldr	r2, [pc, #196]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d108      	bne.n	8007070 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007064:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a21      	ldr	r2, [pc, #132]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d022      	beq.n	80070de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a0:	d01d      	beq.n	80070de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a1f      	ldr	r2, [pc, #124]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d018      	beq.n	80070de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1d      	ldr	r2, [pc, #116]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d013      	beq.n	80070de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a1c      	ldr	r2, [pc, #112]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00e      	beq.n	80070de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a15      	ldr	r2, [pc, #84]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d009      	beq.n	80070de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a18      	ldr	r2, [pc, #96]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d004      	beq.n	80070de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a11      	ldr	r2, [pc, #68]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d10c      	bne.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	40012c00 	.word	0x40012c00
 800711c:	40013400 	.word	0x40013400
 8007120:	40015000 	.word	0x40015000
 8007124:	40000400 	.word	0x40000400
 8007128:	40000800 	.word	0x40000800
 800712c:	40000c00 	.word	0x40000c00
 8007130:	40014000 	.word	0x40014000

08007134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e042      	b.n	80071cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800714c:	2b00      	cmp	r3, #0
 800714e:	d106      	bne.n	800715e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7fa fcbf 	bl	8001adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2224      	movs	r2, #36	; 0x24
 8007162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0201 	bic.w	r2, r2, #1
 8007174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fc50 	bl	8007a1c <UART_SetConfig>
 800717c:	4603      	mov	r3, r0
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007182:	2301      	movs	r3, #1
 8007184:	e022      	b.n	80071cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718a:	2b00      	cmp	r3, #0
 800718c:	d002      	beq.n	8007194 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 ff40 	bl	8008014 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 ffc7 	bl	8008158 <UART_CheckIdleState>
 80071ca:	4603      	mov	r3, r0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08a      	sub	sp, #40	; 0x28
 80071d8:	af02      	add	r7, sp, #8
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	4613      	mov	r3, r2
 80071e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071ea:	2b20      	cmp	r3, #32
 80071ec:	f040 8083 	bne.w	80072f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d002      	beq.n	80071fc <HAL_UART_Transmit+0x28>
 80071f6:	88fb      	ldrh	r3, [r7, #6]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e07b      	b.n	80072f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007206:	2b01      	cmp	r3, #1
 8007208:	d101      	bne.n	800720e <HAL_UART_Transmit+0x3a>
 800720a:	2302      	movs	r3, #2
 800720c:	e074      	b.n	80072f8 <HAL_UART_Transmit+0x124>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2221      	movs	r2, #33	; 0x21
 8007222:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007226:	f7fa fe67 	bl	8001ef8 <HAL_GetTick>
 800722a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	88fa      	ldrh	r2, [r7, #6]
 8007230:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007244:	d108      	bne.n	8007258 <HAL_UART_Transmit+0x84>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	61bb      	str	r3, [r7, #24]
 8007256:	e003      	b.n	8007260 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800725c:	2300      	movs	r3, #0
 800725e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007268:	e02c      	b.n	80072c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2200      	movs	r2, #0
 8007272:	2180      	movs	r1, #128	; 0x80
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 ffba 	bl	80081ee <UART_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e039      	b.n	80072f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10b      	bne.n	80072a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	881b      	ldrh	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007298:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	3302      	adds	r3, #2
 800729e:	61bb      	str	r3, [r7, #24]
 80072a0:	e007      	b.n	80072b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	781a      	ldrb	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	3301      	adds	r3, #1
 80072b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1cc      	bne.n	800726a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	2200      	movs	r2, #0
 80072d8:	2140      	movs	r1, #64	; 0x40
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 ff87 	bl	80081ee <UART_WaitOnFlagUntilTimeout>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d001      	beq.n	80072ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e006      	b.n	80072f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2220      	movs	r2, #32
 80072ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	e000      	b.n	80072f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80072f6:	2302      	movs	r3, #2
  }
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08a      	sub	sp, #40	; 0x28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	4613      	mov	r3, r2
 800730c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007314:	2b20      	cmp	r3, #32
 8007316:	d142      	bne.n	800739e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <HAL_UART_Receive_IT+0x24>
 800731e:	88fb      	ldrh	r3, [r7, #6]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e03b      	b.n	80073a0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800732e:	2b01      	cmp	r3, #1
 8007330:	d101      	bne.n	8007336 <HAL_UART_Receive_IT+0x36>
 8007332:	2302      	movs	r3, #2
 8007334:	e034      	b.n	80073a0 <HAL_UART_Receive_IT+0xa0>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a17      	ldr	r2, [pc, #92]	; (80073a8 <HAL_UART_Receive_IT+0xa8>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d01f      	beq.n	800738e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d018      	beq.n	800738e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	613b      	str	r3, [r7, #16]
   return(result);
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	623b      	str	r3, [r7, #32]
 800737c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	69f9      	ldr	r1, [r7, #28]
 8007380:	6a3a      	ldr	r2, [r7, #32]
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	61bb      	str	r3, [r7, #24]
   return(result);
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e6      	bne.n	800735c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800738e:	88fb      	ldrh	r3, [r7, #6]
 8007390:	461a      	mov	r2, r3
 8007392:	68b9      	ldr	r1, [r7, #8]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f000 fff3 	bl	8008380 <UART_Start_Receive_IT>
 800739a:	4603      	mov	r3, r0
 800739c:	e000      	b.n	80073a0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800739e:	2302      	movs	r3, #2
  }
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3728      	adds	r7, #40	; 0x28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40008000 	.word	0x40008000

080073ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b0ba      	sub	sp, #232	; 0xe8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073d2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80073d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80073da:	4013      	ands	r3, r2
 80073dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80073e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d11b      	bne.n	8007420 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073ec:	f003 0320 	and.w	r3, r3, #32
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d015      	beq.n	8007420 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f8:	f003 0320 	and.w	r3, r3, #32
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d105      	bne.n	800740c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d009      	beq.n	8007420 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 82d6 	beq.w	80079c2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
      }
      return;
 800741e:	e2d0      	b.n	80079c2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 811f 	beq.w	8007668 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800742a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800742e:	4b8b      	ldr	r3, [pc, #556]	; (800765c <HAL_UART_IRQHandler+0x2b0>)
 8007430:	4013      	ands	r3, r2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d106      	bne.n	8007444 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007436:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800743a:	4b89      	ldr	r3, [pc, #548]	; (8007660 <HAL_UART_IRQHandler+0x2b4>)
 800743c:	4013      	ands	r3, r2
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 8112 	beq.w	8007668 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d011      	beq.n	8007474 <HAL_UART_IRQHandler+0xc8>
 8007450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2201      	movs	r2, #1
 8007462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800746a:	f043 0201 	orr.w	r2, r3, #1
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d011      	beq.n	80074a4 <HAL_UART_IRQHandler+0xf8>
 8007480:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00b      	beq.n	80074a4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2202      	movs	r2, #2
 8007492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800749a:	f043 0204 	orr.w	r2, r3, #4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a8:	f003 0304 	and.w	r3, r3, #4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d011      	beq.n	80074d4 <HAL_UART_IRQHandler+0x128>
 80074b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2204      	movs	r2, #4
 80074c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ca:	f043 0202 	orr.w	r2, r3, #2
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d8:	f003 0308 	and.w	r3, r3, #8
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d017      	beq.n	8007510 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074e4:	f003 0320 	and.w	r3, r3, #32
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d105      	bne.n	80074f8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80074ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80074f0:	4b5a      	ldr	r3, [pc, #360]	; (800765c <HAL_UART_IRQHandler+0x2b0>)
 80074f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2208      	movs	r2, #8
 80074fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007506:	f043 0208 	orr.w	r2, r3, #8
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007518:	2b00      	cmp	r3, #0
 800751a:	d012      	beq.n	8007542 <HAL_UART_IRQHandler+0x196>
 800751c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007520:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00c      	beq.n	8007542 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007538:	f043 0220 	orr.w	r2, r3, #32
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 823c 	beq.w	80079c6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800754e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d013      	beq.n	8007582 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800755a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800755e:	f003 0320 	and.w	r3, r3, #32
 8007562:	2b00      	cmp	r3, #0
 8007564:	d105      	bne.n	8007572 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800756a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d007      	beq.n	8007582 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007588:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	d005      	beq.n	80075a6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800759a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800759e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d04f      	beq.n	8007646 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 f814 	bl	80085d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b6:	2b40      	cmp	r3, #64	; 0x40
 80075b8:	d141      	bne.n	800763e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	3308      	adds	r3, #8
 80075c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075c8:	e853 3f00 	ldrex	r3, [r3]
 80075cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3308      	adds	r3, #8
 80075e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075f6:	e841 2300 	strex	r3, r2, [r1]
 80075fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1d9      	bne.n	80075ba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800760a:	2b00      	cmp	r3, #0
 800760c:	d013      	beq.n	8007636 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007612:	4a14      	ldr	r2, [pc, #80]	; (8007664 <HAL_UART_IRQHandler+0x2b8>)
 8007614:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800761a:	4618      	mov	r0, r3
 800761c:	f7fd fa1a 	bl	8004a54 <HAL_DMA_Abort_IT>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d017      	beq.n	8007656 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007634:	e00f      	b.n	8007656 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f9da 	bl	80079f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763c:	e00b      	b.n	8007656 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f9d6 	bl	80079f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007644:	e007      	b.n	8007656 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f9d2 	bl	80079f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007654:	e1b7      	b.n	80079c6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007656:	bf00      	nop
    return;
 8007658:	e1b5      	b.n	80079c6 <HAL_UART_IRQHandler+0x61a>
 800765a:	bf00      	nop
 800765c:	10000001 	.word	0x10000001
 8007660:	04000120 	.word	0x04000120
 8007664:	080086a1 	.word	0x080086a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800766c:	2b01      	cmp	r3, #1
 800766e:	f040 814a 	bne.w	8007906 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 8143 	beq.w	8007906 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 813c 	beq.w	8007906 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2210      	movs	r2, #16
 8007694:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a0:	2b40      	cmp	r3, #64	; 0x40
 80076a2:	f040 80b5 	bne.w	8007810 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f000 8187 	beq.w	80079ca <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076c6:	429a      	cmp	r2, r3
 80076c8:	f080 817f 	bcs.w	80079ca <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f040 8086 	bne.w	80077f4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007704:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007712:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007716:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800771e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800772a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1da      	bne.n	80076e8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	3308      	adds	r3, #8
 8007738:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007744:	f023 0301 	bic.w	r3, r3, #1
 8007748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3308      	adds	r3, #8
 8007752:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007756:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800775a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800775e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e1      	bne.n	8007732 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3308      	adds	r3, #8
 8007774:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800777e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3308      	adds	r3, #8
 800778e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007792:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007794:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007798:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e3      	bne.n	800776e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077c4:	f023 0310 	bic.w	r3, r3, #16
 80077c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80077d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077de:	e841 2300 	strex	r3, r2, [r1]
 80077e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1e4      	bne.n	80077b4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fd f8d7 	bl	80049a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007800:	b29b      	uxth	r3, r3
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	b29b      	uxth	r3, r3
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f8fb 	bl	8007a04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800780e:	e0dc      	b.n	80079ca <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800781c:	b29b      	uxth	r3, r3
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800782a:	b29b      	uxth	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 80ce 	beq.w	80079ce <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007832:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 80c9 	beq.w	80079ce <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800784a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007850:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800785e:	647b      	str	r3, [r7, #68]	; 0x44
 8007860:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800786c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e4      	bne.n	800783c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	623b      	str	r3, [r7, #32]
   return(result);
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3308      	adds	r3, #8
 8007896:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800789a:	633a      	str	r2, [r7, #48]	; 0x30
 800789c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e1      	bne.n	8007872 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	e853 3f00 	ldrex	r3, [r3]
 80078ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0310 	bic.w	r3, r3, #16
 80078d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078e4:	61fb      	str	r3, [r7, #28]
 80078e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	69b9      	ldr	r1, [r7, #24]
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	617b      	str	r3, [r7, #20]
   return(result);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e4      	bne.n	80078c2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f880 	bl	8007a04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007904:	e063      	b.n	80079ce <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800790a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00e      	beq.n	8007930 <HAL_UART_IRQHandler+0x584>
 8007912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d008      	beq.n	8007930 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007926:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 fb57 	bl	8008fdc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800792e:	e051      	b.n	80079d4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007938:	2b00      	cmp	r3, #0
 800793a:	d014      	beq.n	8007966 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800793c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007944:	2b00      	cmp	r3, #0
 8007946:	d105      	bne.n	8007954 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800794c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d008      	beq.n	8007966 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007958:	2b00      	cmp	r3, #0
 800795a:	d03a      	beq.n	80079d2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	4798      	blx	r3
    }
    return;
 8007964:	e035      	b.n	80079d2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b00      	cmp	r3, #0
 8007970:	d009      	beq.n	8007986 <HAL_UART_IRQHandler+0x5da>
 8007972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fea4 	bl	80086cc <UART_EndTransmit_IT>
    return;
 8007984:	e026      	b.n	80079d4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800798a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d009      	beq.n	80079a6 <HAL_UART_IRQHandler+0x5fa>
 8007992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007996:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f001 fb30 	bl	8009004 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079a4:	e016      	b.n	80079d4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80079a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d010      	beq.n	80079d4 <HAL_UART_IRQHandler+0x628>
 80079b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	da0c      	bge.n	80079d4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 fb18 	bl	8008ff0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079c0:	e008      	b.n	80079d4 <HAL_UART_IRQHandler+0x628>
      return;
 80079c2:	bf00      	nop
 80079c4:	e006      	b.n	80079d4 <HAL_UART_IRQHandler+0x628>
    return;
 80079c6:	bf00      	nop
 80079c8:	e004      	b.n	80079d4 <HAL_UART_IRQHandler+0x628>
      return;
 80079ca:	bf00      	nop
 80079cc:	e002      	b.n	80079d4 <HAL_UART_IRQHandler+0x628>
      return;
 80079ce:	bf00      	nop
 80079d0:	e000      	b.n	80079d4 <HAL_UART_IRQHandler+0x628>
    return;
 80079d2:	bf00      	nop
  }
}
 80079d4:	37e8      	adds	r7, #232	; 0xe8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop

080079dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a20:	b08c      	sub	sp, #48	; 0x30
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	689a      	ldr	r2, [r3, #8]
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	431a      	orrs	r2, r3
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	4baa      	ldr	r3, [pc, #680]	; (8007cf4 <UART_SetConfig+0x2d8>)
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a54:	430b      	orrs	r3, r1
 8007a56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a9f      	ldr	r2, [pc, #636]	; (8007cf8 <UART_SetConfig+0x2dc>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d004      	beq.n	8007a88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a84:	4313      	orrs	r3, r2
 8007a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007a92:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	6812      	ldr	r2, [r2, #0]
 8007a9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a9c:	430b      	orrs	r3, r1
 8007a9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa6:	f023 010f 	bic.w	r1, r3, #15
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a90      	ldr	r2, [pc, #576]	; (8007cfc <UART_SetConfig+0x2e0>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d125      	bne.n	8007b0c <UART_SetConfig+0xf0>
 8007ac0:	4b8f      	ldr	r3, [pc, #572]	; (8007d00 <UART_SetConfig+0x2e4>)
 8007ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	d81a      	bhi.n	8007b04 <UART_SetConfig+0xe8>
 8007ace:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <UART_SetConfig+0xb8>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007ae5 	.word	0x08007ae5
 8007ad8:	08007af5 	.word	0x08007af5
 8007adc:	08007aed 	.word	0x08007aed
 8007ae0:	08007afd 	.word	0x08007afd
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aea:	e116      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007aec:	2302      	movs	r3, #2
 8007aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007af2:	e112      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007af4:	2304      	movs	r3, #4
 8007af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007afa:	e10e      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007afc:	2308      	movs	r3, #8
 8007afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b02:	e10a      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007b04:	2310      	movs	r3, #16
 8007b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b0a:	e106      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a7c      	ldr	r2, [pc, #496]	; (8007d04 <UART_SetConfig+0x2e8>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d138      	bne.n	8007b88 <UART_SetConfig+0x16c>
 8007b16:	4b7a      	ldr	r3, [pc, #488]	; (8007d00 <UART_SetConfig+0x2e4>)
 8007b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1c:	f003 030c 	and.w	r3, r3, #12
 8007b20:	2b0c      	cmp	r3, #12
 8007b22:	d82d      	bhi.n	8007b80 <UART_SetConfig+0x164>
 8007b24:	a201      	add	r2, pc, #4	; (adr r2, 8007b2c <UART_SetConfig+0x110>)
 8007b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2a:	bf00      	nop
 8007b2c:	08007b61 	.word	0x08007b61
 8007b30:	08007b81 	.word	0x08007b81
 8007b34:	08007b81 	.word	0x08007b81
 8007b38:	08007b81 	.word	0x08007b81
 8007b3c:	08007b71 	.word	0x08007b71
 8007b40:	08007b81 	.word	0x08007b81
 8007b44:	08007b81 	.word	0x08007b81
 8007b48:	08007b81 	.word	0x08007b81
 8007b4c:	08007b69 	.word	0x08007b69
 8007b50:	08007b81 	.word	0x08007b81
 8007b54:	08007b81 	.word	0x08007b81
 8007b58:	08007b81 	.word	0x08007b81
 8007b5c:	08007b79 	.word	0x08007b79
 8007b60:	2300      	movs	r3, #0
 8007b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b66:	e0d8      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007b68:	2302      	movs	r3, #2
 8007b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6e:	e0d4      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007b70:	2304      	movs	r3, #4
 8007b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b76:	e0d0      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007b78:	2308      	movs	r3, #8
 8007b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b7e:	e0cc      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007b80:	2310      	movs	r3, #16
 8007b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b86:	e0c8      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a5e      	ldr	r2, [pc, #376]	; (8007d08 <UART_SetConfig+0x2ec>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d125      	bne.n	8007bde <UART_SetConfig+0x1c2>
 8007b92:	4b5b      	ldr	r3, [pc, #364]	; (8007d00 <UART_SetConfig+0x2e4>)
 8007b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b9c:	2b30      	cmp	r3, #48	; 0x30
 8007b9e:	d016      	beq.n	8007bce <UART_SetConfig+0x1b2>
 8007ba0:	2b30      	cmp	r3, #48	; 0x30
 8007ba2:	d818      	bhi.n	8007bd6 <UART_SetConfig+0x1ba>
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	d00a      	beq.n	8007bbe <UART_SetConfig+0x1a2>
 8007ba8:	2b20      	cmp	r3, #32
 8007baa:	d814      	bhi.n	8007bd6 <UART_SetConfig+0x1ba>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d002      	beq.n	8007bb6 <UART_SetConfig+0x19a>
 8007bb0:	2b10      	cmp	r3, #16
 8007bb2:	d008      	beq.n	8007bc6 <UART_SetConfig+0x1aa>
 8007bb4:	e00f      	b.n	8007bd6 <UART_SetConfig+0x1ba>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bbc:	e0ad      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc4:	e0a9      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007bc6:	2304      	movs	r3, #4
 8007bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bcc:	e0a5      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007bce:	2308      	movs	r3, #8
 8007bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd4:	e0a1      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007bd6:	2310      	movs	r3, #16
 8007bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bdc:	e09d      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a4a      	ldr	r2, [pc, #296]	; (8007d0c <UART_SetConfig+0x2f0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d125      	bne.n	8007c34 <UART_SetConfig+0x218>
 8007be8:	4b45      	ldr	r3, [pc, #276]	; (8007d00 <UART_SetConfig+0x2e4>)
 8007bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007bf2:	2bc0      	cmp	r3, #192	; 0xc0
 8007bf4:	d016      	beq.n	8007c24 <UART_SetConfig+0x208>
 8007bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8007bf8:	d818      	bhi.n	8007c2c <UART_SetConfig+0x210>
 8007bfa:	2b80      	cmp	r3, #128	; 0x80
 8007bfc:	d00a      	beq.n	8007c14 <UART_SetConfig+0x1f8>
 8007bfe:	2b80      	cmp	r3, #128	; 0x80
 8007c00:	d814      	bhi.n	8007c2c <UART_SetConfig+0x210>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <UART_SetConfig+0x1f0>
 8007c06:	2b40      	cmp	r3, #64	; 0x40
 8007c08:	d008      	beq.n	8007c1c <UART_SetConfig+0x200>
 8007c0a:	e00f      	b.n	8007c2c <UART_SetConfig+0x210>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c12:	e082      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007c14:	2302      	movs	r3, #2
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c1a:	e07e      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007c1c:	2304      	movs	r3, #4
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c22:	e07a      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007c24:	2308      	movs	r3, #8
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c2a:	e076      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c32:	e072      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a35      	ldr	r2, [pc, #212]	; (8007d10 <UART_SetConfig+0x2f4>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d12a      	bne.n	8007c94 <UART_SetConfig+0x278>
 8007c3e:	4b30      	ldr	r3, [pc, #192]	; (8007d00 <UART_SetConfig+0x2e4>)
 8007c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c4c:	d01a      	beq.n	8007c84 <UART_SetConfig+0x268>
 8007c4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c52:	d81b      	bhi.n	8007c8c <UART_SetConfig+0x270>
 8007c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c58:	d00c      	beq.n	8007c74 <UART_SetConfig+0x258>
 8007c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c5e:	d815      	bhi.n	8007c8c <UART_SetConfig+0x270>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d003      	beq.n	8007c6c <UART_SetConfig+0x250>
 8007c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c68:	d008      	beq.n	8007c7c <UART_SetConfig+0x260>
 8007c6a:	e00f      	b.n	8007c8c <UART_SetConfig+0x270>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c72:	e052      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007c74:	2302      	movs	r3, #2
 8007c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c7a:	e04e      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007c7c:	2304      	movs	r3, #4
 8007c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c82:	e04a      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007c84:	2308      	movs	r3, #8
 8007c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c8a:	e046      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007c8c:	2310      	movs	r3, #16
 8007c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c92:	e042      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <UART_SetConfig+0x2dc>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d13a      	bne.n	8007d14 <UART_SetConfig+0x2f8>
 8007c9e:	4b18      	ldr	r3, [pc, #96]	; (8007d00 <UART_SetConfig+0x2e4>)
 8007ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cac:	d01a      	beq.n	8007ce4 <UART_SetConfig+0x2c8>
 8007cae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cb2:	d81b      	bhi.n	8007cec <UART_SetConfig+0x2d0>
 8007cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cb8:	d00c      	beq.n	8007cd4 <UART_SetConfig+0x2b8>
 8007cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cbe:	d815      	bhi.n	8007cec <UART_SetConfig+0x2d0>
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <UART_SetConfig+0x2b0>
 8007cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cc8:	d008      	beq.n	8007cdc <UART_SetConfig+0x2c0>
 8007cca:	e00f      	b.n	8007cec <UART_SetConfig+0x2d0>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cd2:	e022      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cda:	e01e      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007cdc:	2304      	movs	r3, #4
 8007cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ce2:	e01a      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007ce4:	2308      	movs	r3, #8
 8007ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cea:	e016      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007cec:	2310      	movs	r3, #16
 8007cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cf2:	e012      	b.n	8007d1a <UART_SetConfig+0x2fe>
 8007cf4:	cfff69f3 	.word	0xcfff69f3
 8007cf8:	40008000 	.word	0x40008000
 8007cfc:	40013800 	.word	0x40013800
 8007d00:	40021000 	.word	0x40021000
 8007d04:	40004400 	.word	0x40004400
 8007d08:	40004800 	.word	0x40004800
 8007d0c:	40004c00 	.word	0x40004c00
 8007d10:	40005000 	.word	0x40005000
 8007d14:	2310      	movs	r3, #16
 8007d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4aae      	ldr	r2, [pc, #696]	; (8007fd8 <UART_SetConfig+0x5bc>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	f040 8097 	bne.w	8007e54 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d2a:	2b08      	cmp	r3, #8
 8007d2c:	d823      	bhi.n	8007d76 <UART_SetConfig+0x35a>
 8007d2e:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <UART_SetConfig+0x318>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d59 	.word	0x08007d59
 8007d38:	08007d77 	.word	0x08007d77
 8007d3c:	08007d61 	.word	0x08007d61
 8007d40:	08007d77 	.word	0x08007d77
 8007d44:	08007d67 	.word	0x08007d67
 8007d48:	08007d77 	.word	0x08007d77
 8007d4c:	08007d77 	.word	0x08007d77
 8007d50:	08007d77 	.word	0x08007d77
 8007d54:	08007d6f 	.word	0x08007d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d58:	f7fd fe0e 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 8007d5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d5e:	e010      	b.n	8007d82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d60:	4b9e      	ldr	r3, [pc, #632]	; (8007fdc <UART_SetConfig+0x5c0>)
 8007d62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d64:	e00d      	b.n	8007d82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d66:	f7fd fd99 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8007d6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d6c:	e009      	b.n	8007d82 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d74:	e005      	b.n	8007d82 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 8130 	beq.w	8007fea <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8e:	4a94      	ldr	r2, [pc, #592]	; (8007fe0 <UART_SetConfig+0x5c4>)
 8007d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d94:	461a      	mov	r2, r3
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d9c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	4413      	add	r3, r2
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d305      	bcc.n	8007dba <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007db4:	69ba      	ldr	r2, [r7, #24]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d903      	bls.n	8007dc2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007dba:	2301      	movs	r3, #1
 8007dbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007dc0:	e113      	b.n	8007fea <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	60bb      	str	r3, [r7, #8]
 8007dc8:	60fa      	str	r2, [r7, #12]
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	4a84      	ldr	r2, [pc, #528]	; (8007fe0 <UART_SetConfig+0x5c4>)
 8007dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	603b      	str	r3, [r7, #0]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007de4:	f7f8 ff78 	bl	8000cd8 <__aeabi_uldivmod>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4610      	mov	r0, r2
 8007dee:	4619      	mov	r1, r3
 8007df0:	f04f 0200 	mov.w	r2, #0
 8007df4:	f04f 0300 	mov.w	r3, #0
 8007df8:	020b      	lsls	r3, r1, #8
 8007dfa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007dfe:	0202      	lsls	r2, r0, #8
 8007e00:	6979      	ldr	r1, [r7, #20]
 8007e02:	6849      	ldr	r1, [r1, #4]
 8007e04:	0849      	lsrs	r1, r1, #1
 8007e06:	2000      	movs	r0, #0
 8007e08:	460c      	mov	r4, r1
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	eb12 0804 	adds.w	r8, r2, r4
 8007e10:	eb43 0905 	adc.w	r9, r3, r5
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	469a      	mov	sl, r3
 8007e1c:	4693      	mov	fp, r2
 8007e1e:	4652      	mov	r2, sl
 8007e20:	465b      	mov	r3, fp
 8007e22:	4640      	mov	r0, r8
 8007e24:	4649      	mov	r1, r9
 8007e26:	f7f8 ff57 	bl	8000cd8 <__aeabi_uldivmod>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4613      	mov	r3, r2
 8007e30:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e38:	d308      	bcc.n	8007e4c <UART_SetConfig+0x430>
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e40:	d204      	bcs.n	8007e4c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6a3a      	ldr	r2, [r7, #32]
 8007e48:	60da      	str	r2, [r3, #12]
 8007e4a:	e0ce      	b.n	8007fea <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e52:	e0ca      	b.n	8007fea <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	69db      	ldr	r3, [r3, #28]
 8007e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e5c:	d166      	bne.n	8007f2c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007e5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e62:	2b08      	cmp	r3, #8
 8007e64:	d827      	bhi.n	8007eb6 <UART_SetConfig+0x49a>
 8007e66:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <UART_SetConfig+0x450>)
 8007e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6c:	08007e91 	.word	0x08007e91
 8007e70:	08007e99 	.word	0x08007e99
 8007e74:	08007ea1 	.word	0x08007ea1
 8007e78:	08007eb7 	.word	0x08007eb7
 8007e7c:	08007ea7 	.word	0x08007ea7
 8007e80:	08007eb7 	.word	0x08007eb7
 8007e84:	08007eb7 	.word	0x08007eb7
 8007e88:	08007eb7 	.word	0x08007eb7
 8007e8c:	08007eaf 	.word	0x08007eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e90:	f7fd fd72 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 8007e94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e96:	e014      	b.n	8007ec2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e98:	f7fd fd84 	bl	80059a4 <HAL_RCC_GetPCLK2Freq>
 8007e9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e9e:	e010      	b.n	8007ec2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ea0:	4b4e      	ldr	r3, [pc, #312]	; (8007fdc <UART_SetConfig+0x5c0>)
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ea4:	e00d      	b.n	8007ec2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ea6:	f7fd fcf9 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8007eaa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007eac:	e009      	b.n	8007ec2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007eb4:	e005      	b.n	8007ec2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ec0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 8090 	beq.w	8007fea <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	4a44      	ldr	r2, [pc, #272]	; (8007fe0 <UART_SetConfig+0x5c4>)
 8007ed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007edc:	005a      	lsls	r2, r3, #1
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	085b      	lsrs	r3, r3, #1
 8007ee4:	441a      	add	r2, r3
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	2b0f      	cmp	r3, #15
 8007ef4:	d916      	bls.n	8007f24 <UART_SetConfig+0x508>
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efc:	d212      	bcs.n	8007f24 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f023 030f 	bic.w	r3, r3, #15
 8007f06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	085b      	lsrs	r3, r3, #1
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	f003 0307 	and.w	r3, r3, #7
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	8bfb      	ldrh	r3, [r7, #30]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	8bfa      	ldrh	r2, [r7, #30]
 8007f20:	60da      	str	r2, [r3, #12]
 8007f22:	e062      	b.n	8007fea <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007f2a:	e05e      	b.n	8007fea <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f30:	2b08      	cmp	r3, #8
 8007f32:	d828      	bhi.n	8007f86 <UART_SetConfig+0x56a>
 8007f34:	a201      	add	r2, pc, #4	; (adr r2, 8007f3c <UART_SetConfig+0x520>)
 8007f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f3a:	bf00      	nop
 8007f3c:	08007f61 	.word	0x08007f61
 8007f40:	08007f69 	.word	0x08007f69
 8007f44:	08007f71 	.word	0x08007f71
 8007f48:	08007f87 	.word	0x08007f87
 8007f4c:	08007f77 	.word	0x08007f77
 8007f50:	08007f87 	.word	0x08007f87
 8007f54:	08007f87 	.word	0x08007f87
 8007f58:	08007f87 	.word	0x08007f87
 8007f5c:	08007f7f 	.word	0x08007f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f60:	f7fd fd0a 	bl	8005978 <HAL_RCC_GetPCLK1Freq>
 8007f64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f66:	e014      	b.n	8007f92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f68:	f7fd fd1c 	bl	80059a4 <HAL_RCC_GetPCLK2Freq>
 8007f6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f6e:	e010      	b.n	8007f92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f70:	4b1a      	ldr	r3, [pc, #104]	; (8007fdc <UART_SetConfig+0x5c0>)
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f74:	e00d      	b.n	8007f92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f76:	f7fd fc91 	bl	800589c <HAL_RCC_GetSysClockFreq>
 8007f7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f7c:	e009      	b.n	8007f92 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f84:	e005      	b.n	8007f92 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f90:	bf00      	nop
    }

    if (pclk != 0U)
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d028      	beq.n	8007fea <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	4a10      	ldr	r2, [pc, #64]	; (8007fe0 <UART_SetConfig+0x5c4>)
 8007f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	085b      	lsrs	r3, r3, #1
 8007fb0:	441a      	add	r2, r3
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fbc:	6a3b      	ldr	r3, [r7, #32]
 8007fbe:	2b0f      	cmp	r3, #15
 8007fc0:	d910      	bls.n	8007fe4 <UART_SetConfig+0x5c8>
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fc8:	d20c      	bcs.n	8007fe4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fca:	6a3b      	ldr	r3, [r7, #32]
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	60da      	str	r2, [r3, #12]
 8007fd4:	e009      	b.n	8007fea <UART_SetConfig+0x5ce>
 8007fd6:	bf00      	nop
 8007fd8:	40008000 	.word	0x40008000
 8007fdc:	00f42400 	.word	0x00f42400
 8007fe0:	0800e2a8 	.word	0x0800e2a8
      }
      else
      {
        ret = HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2200      	movs	r2, #0
 8008004:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008006:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800800a:	4618      	mov	r0, r3
 800800c:	3730      	adds	r7, #48	; 0x30
 800800e:	46bd      	mov	sp, r7
 8008010:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008014 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008020:	f003 0301 	and.w	r3, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00a      	beq.n	800803e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00a      	beq.n	8008060 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008064:	f003 0304 	and.w	r3, r3, #4
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00a      	beq.n	8008082 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008086:	f003 0308 	and.w	r3, r3, #8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	430a      	orrs	r2, r1
 80080a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a8:	f003 0310 	and.w	r3, r3, #16
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00a      	beq.n	80080c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ca:	f003 0320 	and.w	r3, r3, #32
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00a      	beq.n	80080e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d01a      	beq.n	800812a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008112:	d10a      	bne.n	800812a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	430a      	orrs	r2, r1
 8008128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	605a      	str	r2, [r3, #4]
  }
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b086      	sub	sp, #24
 800815c:	af02      	add	r7, sp, #8
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008168:	f7f9 fec6 	bl	8001ef8 <HAL_GetTick>
 800816c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0308 	and.w	r3, r3, #8
 8008178:	2b08      	cmp	r3, #8
 800817a:	d10e      	bne.n	800819a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800817c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f82f 	bl	80081ee <UART_WaitOnFlagUntilTimeout>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e025      	b.n	80081e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d10e      	bne.n	80081c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f819 	bl	80081ee <UART_WaitOnFlagUntilTimeout>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e00f      	b.n	80081e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2220      	movs	r2, #32
 80081ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2220      	movs	r2, #32
 80081d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b09c      	sub	sp, #112	; 0x70
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	60f8      	str	r0, [r7, #12]
 80081f6:	60b9      	str	r1, [r7, #8]
 80081f8:	603b      	str	r3, [r7, #0]
 80081fa:	4613      	mov	r3, r2
 80081fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081fe:	e0a9      	b.n	8008354 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008206:	f000 80a5 	beq.w	8008354 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800820a:	f7f9 fe75 	bl	8001ef8 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008216:	429a      	cmp	r2, r3
 8008218:	d302      	bcc.n	8008220 <UART_WaitOnFlagUntilTimeout+0x32>
 800821a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800821c:	2b00      	cmp	r3, #0
 800821e:	d140      	bne.n	80082a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800822e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008230:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008234:	667b      	str	r3, [r7, #100]	; 0x64
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800823e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008240:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008244:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800824c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e6      	bne.n	8008220 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	f023 0301 	bic.w	r3, r3, #1
 8008268:	663b      	str	r3, [r7, #96]	; 0x60
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3308      	adds	r3, #8
 8008270:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008272:	64ba      	str	r2, [r7, #72]	; 0x48
 8008274:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008278:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e5      	bne.n	8008252 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2220      	movs	r2, #32
 800828a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2220      	movs	r2, #32
 8008292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e069      	b.n	8008376 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0304 	and.w	r3, r3, #4
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d051      	beq.n	8008354 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082be:	d149      	bne.n	8008354 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082c8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e8:	637b      	str	r3, [r7, #52]	; 0x34
 80082ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e6      	bne.n	80082ca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3308      	adds	r3, #8
 8008302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	e853 3f00 	ldrex	r3, [r3]
 800830a:	613b      	str	r3, [r7, #16]
   return(result);
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	f023 0301 	bic.w	r3, r3, #1
 8008312:	66bb      	str	r3, [r7, #104]	; 0x68
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3308      	adds	r3, #8
 800831a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800831c:	623a      	str	r2, [r7, #32]
 800831e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008320:	69f9      	ldr	r1, [r7, #28]
 8008322:	6a3a      	ldr	r2, [r7, #32]
 8008324:	e841 2300 	strex	r3, r2, [r1]
 8008328:	61bb      	str	r3, [r7, #24]
   return(result);
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1e5      	bne.n	80082fc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2220      	movs	r2, #32
 8008334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2220      	movs	r2, #32
 800833c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2220      	movs	r2, #32
 8008344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e010      	b.n	8008376 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	69da      	ldr	r2, [r3, #28]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	4013      	ands	r3, r2
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	429a      	cmp	r2, r3
 8008362:	bf0c      	ite	eq
 8008364:	2301      	moveq	r3, #1
 8008366:	2300      	movne	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	461a      	mov	r2, r3
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	429a      	cmp	r2, r3
 8008370:	f43f af46 	beq.w	8008200 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3770      	adds	r7, #112	; 0x70
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008380:	b480      	push	{r7}
 8008382:	b0a3      	sub	sp, #140	; 0x8c
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	4613      	mov	r3, r2
 800838c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	88fa      	ldrh	r2, [r7, #6]
 8008398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	88fa      	ldrh	r2, [r7, #6]
 80083a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083b2:	d10e      	bne.n	80083d2 <UART_Start_Receive_IT+0x52>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d105      	bne.n	80083c8 <UART_Start_Receive_IT+0x48>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80083c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083c6:	e02d      	b.n	8008424 <UART_Start_Receive_IT+0xa4>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	22ff      	movs	r2, #255	; 0xff
 80083cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083d0:	e028      	b.n	8008424 <UART_Start_Receive_IT+0xa4>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10d      	bne.n	80083f6 <UART_Start_Receive_IT+0x76>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	691b      	ldr	r3, [r3, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d104      	bne.n	80083ec <UART_Start_Receive_IT+0x6c>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	22ff      	movs	r2, #255	; 0xff
 80083e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083ea:	e01b      	b.n	8008424 <UART_Start_Receive_IT+0xa4>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	227f      	movs	r2, #127	; 0x7f
 80083f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083f4:	e016      	b.n	8008424 <UART_Start_Receive_IT+0xa4>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083fe:	d10d      	bne.n	800841c <UART_Start_Receive_IT+0x9c>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <UART_Start_Receive_IT+0x92>
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	227f      	movs	r2, #127	; 0x7f
 800840c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008410:	e008      	b.n	8008424 <UART_Start_Receive_IT+0xa4>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	223f      	movs	r2, #63	; 0x3f
 8008416:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800841a:	e003      	b.n	8008424 <UART_Start_Receive_IT+0xa4>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2222      	movs	r2, #34	; 0x22
 8008430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3308      	adds	r3, #8
 800843a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800843e:	e853 3f00 	ldrex	r3, [r3]
 8008442:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008446:	f043 0301 	orr.w	r3, r3, #1
 800844a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3308      	adds	r3, #8
 8008454:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008458:	673a      	str	r2, [r7, #112]	; 0x70
 800845a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800845e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008460:	e841 2300 	strex	r3, r2, [r1]
 8008464:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008466:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e3      	bne.n	8008434 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008474:	d153      	bne.n	800851e <UART_Start_Receive_IT+0x19e>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800847c:	88fa      	ldrh	r2, [r7, #6]
 800847e:	429a      	cmp	r2, r3
 8008480:	d34d      	bcc.n	800851e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800848a:	d107      	bne.n	800849c <UART_Start_Receive_IT+0x11c>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d103      	bne.n	800849c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4a4b      	ldr	r2, [pc, #300]	; (80085c4 <UART_Start_Receive_IT+0x244>)
 8008498:	671a      	str	r2, [r3, #112]	; 0x70
 800849a:	e002      	b.n	80084a2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4a4a      	ldr	r2, [pc, #296]	; (80085c8 <UART_Start_Receive_IT+0x248>)
 80084a0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01a      	beq.n	80084e8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	461a      	mov	r2, r3
 80084d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80084d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084d6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80084e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e4      	bne.n	80084b2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3308      	adds	r3, #8
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f2:	e853 3f00 	ldrex	r3, [r3]
 80084f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3308      	adds	r3, #8
 8008506:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008508:	64ba      	str	r2, [r7, #72]	; 0x48
 800850a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800850e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008510:	e841 2300 	strex	r3, r2, [r1]
 8008514:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e5      	bne.n	80084e8 <UART_Start_Receive_IT+0x168>
 800851c:	e04a      	b.n	80085b4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008526:	d107      	bne.n	8008538 <UART_Start_Receive_IT+0x1b8>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d103      	bne.n	8008538 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4a26      	ldr	r2, [pc, #152]	; (80085cc <UART_Start_Receive_IT+0x24c>)
 8008534:	671a      	str	r2, [r3, #112]	; 0x70
 8008536:	e002      	b.n	800853e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	4a25      	ldr	r2, [pc, #148]	; (80085d0 <UART_Start_Receive_IT+0x250>)
 800853c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d019      	beq.n	8008582 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	e853 3f00 	ldrex	r3, [r3]
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008562:	677b      	str	r3, [r7, #116]	; 0x74
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	461a      	mov	r2, r3
 800856a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800856c:	637b      	str	r3, [r7, #52]	; 0x34
 800856e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008570:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008574:	e841 2300 	strex	r3, r2, [r1]
 8008578:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800857a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857c:	2b00      	cmp	r3, #0
 800857e:	d1e6      	bne.n	800854e <UART_Start_Receive_IT+0x1ce>
 8008580:	e018      	b.n	80085b4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	e853 3f00 	ldrex	r3, [r3]
 800858e:	613b      	str	r3, [r7, #16]
   return(result);
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	f043 0320 	orr.w	r3, r3, #32
 8008596:	67bb      	str	r3, [r7, #120]	; 0x78
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	461a      	mov	r2, r3
 800859e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085a0:	623b      	str	r3, [r7, #32]
 80085a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a4:	69f9      	ldr	r1, [r7, #28]
 80085a6:	6a3a      	ldr	r2, [r7, #32]
 80085a8:	e841 2300 	strex	r3, r2, [r1]
 80085ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1e6      	bne.n	8008582 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	378c      	adds	r7, #140	; 0x8c
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	08008cdd 	.word	0x08008cdd
 80085c8:	080089e5 	.word	0x080089e5
 80085cc:	08008883 	.word	0x08008883
 80085d0:	08008723 	.word	0x08008723

080085d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b095      	sub	sp, #84	; 0x54
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e4:	e853 3f00 	ldrex	r3, [r3]
 80085e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	461a      	mov	r2, r3
 80085f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085fa:	643b      	str	r3, [r7, #64]	; 0x40
 80085fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1e6      	bne.n	80085dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	3308      	adds	r3, #8
 8008614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	e853 3f00 	ldrex	r3, [r3]
 800861c:	61fb      	str	r3, [r7, #28]
   return(result);
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	64bb      	str	r3, [r7, #72]	; 0x48
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3308      	adds	r3, #8
 8008630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008632:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800863a:	e841 2300 	strex	r3, r2, [r1]
 800863e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1e3      	bne.n	800860e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800864a:	2b01      	cmp	r3, #1
 800864c:	d118      	bne.n	8008680 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	60bb      	str	r3, [r7, #8]
   return(result);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f023 0310 	bic.w	r3, r3, #16
 8008662:	647b      	str	r3, [r7, #68]	; 0x44
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	461a      	mov	r2, r3
 800866a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008670:	6979      	ldr	r1, [r7, #20]
 8008672:	69ba      	ldr	r2, [r7, #24]
 8008674:	e841 2300 	strex	r3, r2, [r1]
 8008678:	613b      	str	r3, [r7, #16]
   return(result);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d1e6      	bne.n	800864e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2220      	movs	r2, #32
 8008684:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008694:	bf00      	nop
 8008696:	3754      	adds	r7, #84	; 0x54
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f7ff f996 	bl	80079f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086c4:	bf00      	nop
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086e8:	61fb      	str	r3, [r7, #28]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	61bb      	str	r3, [r7, #24]
 80086f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6979      	ldr	r1, [r7, #20]
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e6      	bne.n	80086d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2220      	movs	r2, #32
 800870a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f7ff f961 	bl	80079dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800871a:	bf00      	nop
 800871c:	3720      	adds	r7, #32
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b096      	sub	sp, #88	; 0x58
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008730:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800873a:	2b22      	cmp	r3, #34	; 0x22
 800873c:	f040 8095 	bne.w	800886a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008746:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800874a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800874e:	b2d9      	uxtb	r1, r3
 8008750:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008754:	b2da      	uxtb	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875a:	400a      	ands	r2, r1
 800875c:	b2d2      	uxtb	r2, r2
 800875e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008764:	1c5a      	adds	r2, r3, #1
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008770:	b29b      	uxth	r3, r3
 8008772:	3b01      	subs	r3, #1
 8008774:	b29a      	uxth	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008782:	b29b      	uxth	r3, r3
 8008784:	2b00      	cmp	r3, #0
 8008786:	d178      	bne.n	800887a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	e853 3f00 	ldrex	r3, [r3]
 8008794:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008798:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800879c:	653b      	str	r3, [r7, #80]	; 0x50
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087a6:	647b      	str	r3, [r7, #68]	; 0x44
 80087a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087ae:	e841 2300 	strex	r3, r2, [r1]
 80087b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1e6      	bne.n	8008788 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	3308      	adds	r3, #8
 80087c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	e853 3f00 	ldrex	r3, [r3]
 80087c8:	623b      	str	r3, [r7, #32]
   return(result);
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	f023 0301 	bic.w	r3, r3, #1
 80087d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3308      	adds	r3, #8
 80087d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087da:	633a      	str	r2, [r7, #48]	; 0x30
 80087dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1e5      	bne.n	80087ba <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2220      	movs	r2, #32
 80087f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008800:	2b01      	cmp	r3, #1
 8008802:	d12e      	bne.n	8008862 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	e853 3f00 	ldrex	r3, [r3]
 8008816:	60fb      	str	r3, [r7, #12]
   return(result);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0310 	bic.w	r3, r3, #16
 800881e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882c:	69b9      	ldr	r1, [r7, #24]
 800882e:	69fa      	ldr	r2, [r7, #28]
 8008830:	e841 2300 	strex	r3, r2, [r1]
 8008834:	617b      	str	r3, [r7, #20]
   return(result);
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1e6      	bne.n	800880a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	f003 0310 	and.w	r3, r3, #16
 8008846:	2b10      	cmp	r3, #16
 8008848:	d103      	bne.n	8008852 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2210      	movs	r2, #16
 8008850:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008858:	4619      	mov	r1, r3
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff f8d2 	bl	8007a04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008860:	e00b      	b.n	800887a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fd74 	bl	8009350 <HAL_UART_RxCpltCallback>
}
 8008868:	e007      	b.n	800887a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	699a      	ldr	r2, [r3, #24]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0208 	orr.w	r2, r2, #8
 8008878:	619a      	str	r2, [r3, #24]
}
 800887a:	bf00      	nop
 800887c:	3758      	adds	r7, #88	; 0x58
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b096      	sub	sp, #88	; 0x58
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008890:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800889a:	2b22      	cmp	r3, #34	; 0x22
 800889c:	f040 8095 	bne.w	80089ca <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088ae:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80088b0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80088b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80088b8:	4013      	ands	r3, r2
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088be:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c4:	1c9a      	adds	r2, r3, #2
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	3b01      	subs	r3, #1
 80088d4:	b29a      	uxth	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d178      	bne.n	80089da <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f0:	e853 3f00 	ldrex	r3, [r3]
 80088f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008906:	643b      	str	r3, [r7, #64]	; 0x40
 8008908:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800890c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1e6      	bne.n	80088e8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3308      	adds	r3, #8
 8008920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	61fb      	str	r3, [r7, #28]
   return(result);
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	f023 0301 	bic.w	r3, r3, #1
 8008930:	64bb      	str	r3, [r7, #72]	; 0x48
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3308      	adds	r3, #8
 8008938:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800893a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800893c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008942:	e841 2300 	strex	r3, r2, [r1]
 8008946:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1e5      	bne.n	800891a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2220      	movs	r2, #32
 8008952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008960:	2b01      	cmp	r3, #1
 8008962:	d12e      	bne.n	80089c2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	60bb      	str	r3, [r7, #8]
   return(result);
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f023 0310 	bic.w	r3, r3, #16
 800897e:	647b      	str	r3, [r7, #68]	; 0x44
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	461a      	mov	r2, r3
 8008986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008988:	61bb      	str	r3, [r7, #24]
 800898a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	6979      	ldr	r1, [r7, #20]
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	613b      	str	r3, [r7, #16]
   return(result);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e6      	bne.n	800896a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	f003 0310 	and.w	r3, r3, #16
 80089a6:	2b10      	cmp	r3, #16
 80089a8:	d103      	bne.n	80089b2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2210      	movs	r2, #16
 80089b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7ff f822 	bl	8007a04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089c0:	e00b      	b.n	80089da <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fcc4 	bl	8009350 <HAL_UART_RxCpltCallback>
}
 80089c8:	e007      	b.n	80089da <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	699a      	ldr	r2, [r3, #24]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f042 0208 	orr.w	r2, r2, #8
 80089d8:	619a      	str	r2, [r3, #24]
}
 80089da:	bf00      	nop
 80089dc:	3758      	adds	r7, #88	; 0x58
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
	...

080089e4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b0a6      	sub	sp, #152	; 0x98
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089f2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a1a:	2b22      	cmp	r3, #34	; 0x22
 8008a1c:	f040 814f 	bne.w	8008cbe <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a26:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a2a:	e0f6      	b.n	8008c1a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a36:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008a3a:	b2d9      	uxtb	r1, r3
 8008a3c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008a40:	b2da      	uxtb	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a46:	400a      	ands	r2, r1
 8008a48:	b2d2      	uxtb	r2, r2
 8008a4a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a50:	1c5a      	adds	r2, r3, #1
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	3b01      	subs	r3, #1
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d053      	beq.n	8008b26 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d011      	beq.n	8008aae <UART_RxISR_8BIT_FIFOEN+0xca>
 8008a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00b      	beq.n	8008aae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aa4:	f043 0201 	orr.w	r2, r3, #1
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008aae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d011      	beq.n	8008ade <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00b      	beq.n	8008ade <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2202      	movs	r2, #2
 8008acc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ad4:	f043 0204 	orr.w	r2, r3, #4
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ade:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ae2:	f003 0304 	and.w	r3, r3, #4
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d011      	beq.n	8008b0e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00b      	beq.n	8008b0e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2204      	movs	r2, #4
 8008afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b04:	f043 0202 	orr.w	r2, r3, #2
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d006      	beq.n	8008b26 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7fe ff69 	bl	80079f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d173      	bne.n	8008c1a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b3a:	e853 3f00 	ldrex	r3, [r3]
 8008b3e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b56:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b58:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008b5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008b62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e4      	bne.n	8008b32 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b72:	e853 3f00 	ldrex	r3, [r3]
 8008b76:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b7e:	f023 0301 	bic.w	r3, r3, #1
 8008b82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	3308      	adds	r3, #8
 8008b8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b8c:	657a      	str	r2, [r7, #84]	; 0x54
 8008b8e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b90:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b94:	e841 2300 	strex	r3, r2, [r1]
 8008b98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e3      	bne.n	8008b68 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2200      	movs	r2, #0
 8008bac:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d12e      	bne.n	8008c14 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc4:	e853 3f00 	ldrex	r3, [r3]
 8008bc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bcc:	f023 0310 	bic.w	r3, r3, #16
 8008bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bda:	643b      	str	r3, [r7, #64]	; 0x40
 8008bdc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e6      	bne.n	8008bbc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	69db      	ldr	r3, [r3, #28]
 8008bf4:	f003 0310 	and.w	r3, r3, #16
 8008bf8:	2b10      	cmp	r3, #16
 8008bfa:	d103      	bne.n	8008c04 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2210      	movs	r2, #16
 8008c02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7fe fef9 	bl	8007a04 <HAL_UARTEx_RxEventCallback>
 8008c12:	e002      	b.n	8008c1a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fb9b 	bl	8009350 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d006      	beq.n	8008c30 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008c22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c26:	f003 0320 	and.w	r3, r3, #32
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f47f aefe 	bne.w	8008a2c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c36:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c3a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d045      	beq.n	8008cce <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d23e      	bcs.n	8008cce <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3308      	adds	r3, #8
 8008c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	e853 3f00 	ldrex	r3, [r3]
 8008c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c66:	673b      	str	r3, [r7, #112]	; 0x70
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3308      	adds	r3, #8
 8008c6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e5      	bne.n	8008c50 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a14      	ldr	r2, [pc, #80]	; (8008cd8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008c88:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f043 0320 	orr.w	r3, r3, #32
 8008c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ca8:	61bb      	str	r3, [r7, #24]
 8008caa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	6979      	ldr	r1, [r7, #20]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e6      	bne.n	8008c8a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008cbc:	e007      	b.n	8008cce <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	699a      	ldr	r2, [r3, #24]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f042 0208 	orr.w	r2, r2, #8
 8008ccc:	619a      	str	r2, [r3, #24]
}
 8008cce:	bf00      	nop
 8008cd0:	3798      	adds	r7, #152	; 0x98
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	08008723 	.word	0x08008723

08008cdc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b0a8      	sub	sp, #160	; 0xa0
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008cea:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d12:	2b22      	cmp	r3, #34	; 0x22
 8008d14:	f040 8153 	bne.w	8008fbe <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d1e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d22:	e0fa      	b.n	8008f1a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008d36:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008d3a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008d3e:	4013      	ands	r3, r2
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d4c:	1c9a      	adds	r2, r3, #2
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008d6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d053      	beq.n	8008e22 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d011      	beq.n	8008daa <UART_RxISR_16BIT_FIFOEN+0xce>
 8008d86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d00b      	beq.n	8008daa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2201      	movs	r2, #1
 8008d98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008da0:	f043 0201 	orr.w	r2, r3, #1
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008daa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dae:	f003 0302 	and.w	r3, r3, #2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d011      	beq.n	8008dda <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008db6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00b      	beq.n	8008dda <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dd0:	f043 0204 	orr.w	r2, r3, #4
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dde:	f003 0304 	and.w	r3, r3, #4
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d011      	beq.n	8008e0a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00b      	beq.n	8008e0a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2204      	movs	r2, #4
 8008df8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e00:	f043 0202 	orr.w	r2, r3, #2
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d006      	beq.n	8008e22 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7fe fdeb 	bl	80079f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d175      	bne.n	8008f1a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e36:	e853 3f00 	ldrex	r3, [r3]
 8008e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e52:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e56:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e58:	e841 2300 	strex	r3, r2, [r1]
 8008e5c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008e5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1e4      	bne.n	8008e2e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e7a:	f023 0301 	bic.w	r3, r3, #1
 8008e7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3308      	adds	r3, #8
 8008e88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008e8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008e8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e94:	e841 2300 	strex	r3, r2, [r1]
 8008e98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1e1      	bne.n	8008e64 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d12e      	bne.n	8008f14 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec4:	e853 3f00 	ldrex	r3, [r3]
 8008ec8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ecc:	f023 0310 	bic.w	r3, r3, #16
 8008ed0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008eda:	647b      	str	r3, [r7, #68]	; 0x44
 8008edc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ede:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ee0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ee2:	e841 2300 	strex	r3, r2, [r1]
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1e6      	bne.n	8008ebc <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	69db      	ldr	r3, [r3, #28]
 8008ef4:	f003 0310 	and.w	r3, r3, #16
 8008ef8:	2b10      	cmp	r3, #16
 8008efa:	d103      	bne.n	8008f04 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2210      	movs	r2, #16
 8008f02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7fe fd79 	bl	8007a04 <HAL_UARTEx_RxEventCallback>
 8008f12:	e002      	b.n	8008f1a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa1b 	bl	8009350 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f1a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d006      	beq.n	8008f30 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f26:	f003 0320 	and.w	r3, r3, #32
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f47f aefa 	bne.w	8008d24 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f36:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f3a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d045      	beq.n	8008fce <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f48:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d23e      	bcs.n	8008fce <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3308      	adds	r3, #8
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	e853 3f00 	ldrex	r3, [r3]
 8008f5e:	623b      	str	r3, [r7, #32]
   return(result);
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f66:	677b      	str	r3, [r7, #116]	; 0x74
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f70:	633a      	str	r2, [r7, #48]	; 0x30
 8008f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f78:	e841 2300 	strex	r3, r2, [r1]
 8008f7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e5      	bne.n	8008f50 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a14      	ldr	r2, [pc, #80]	; (8008fd8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8008f88:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	e853 3f00 	ldrex	r3, [r3]
 8008f96:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f043 0320 	orr.w	r3, r3, #32
 8008f9e:	673b      	str	r3, [r7, #112]	; 0x70
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fa8:	61fb      	str	r3, [r7, #28]
 8008faa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fac:	69b9      	ldr	r1, [r7, #24]
 8008fae:	69fa      	ldr	r2, [r7, #28]
 8008fb0:	e841 2300 	strex	r3, r2, [r1]
 8008fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1e6      	bne.n	8008f8a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fbc:	e007      	b.n	8008fce <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	699a      	ldr	r2, [r3, #24]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f042 0208 	orr.w	r2, r2, #8
 8008fcc:	619a      	str	r2, [r3, #24]
}
 8008fce:	bf00      	nop
 8008fd0:	37a0      	adds	r7, #160	; 0xa0
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	08008883 	.word	0x08008883

08008fdc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009026:	2b01      	cmp	r3, #1
 8009028:	d101      	bne.n	800902e <HAL_UARTEx_DisableFifoMode+0x16>
 800902a:	2302      	movs	r3, #2
 800902c:	e027      	b.n	800907e <HAL_UARTEx_DisableFifoMode+0x66>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2224      	movs	r2, #36	; 0x24
 800903a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f022 0201 	bic.w	r2, r2, #1
 8009054:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800905c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2220      	movs	r2, #32
 8009070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800909a:	2b01      	cmp	r3, #1
 800909c:	d101      	bne.n	80090a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800909e:	2302      	movs	r3, #2
 80090a0:	e02d      	b.n	80090fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2224      	movs	r2, #36	; 0x24
 80090ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f022 0201 	bic.w	r2, r2, #1
 80090c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	430a      	orrs	r2, r1
 80090dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f850 	bl	8009184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2220      	movs	r2, #32
 80090f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3710      	adds	r7, #16
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009116:	2b01      	cmp	r3, #1
 8009118:	d101      	bne.n	800911e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800911a:	2302      	movs	r3, #2
 800911c:	e02d      	b.n	800917a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2224      	movs	r2, #36	; 0x24
 800912a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f022 0201 	bic.w	r2, r2, #1
 8009144:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	683a      	ldr	r2, [r7, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f812 	bl	8009184 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2220      	movs	r2, #32
 800916c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
	...

08009184 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009190:	2b00      	cmp	r3, #0
 8009192:	d108      	bne.n	80091a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80091a4:	e031      	b.n	800920a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80091a6:	2308      	movs	r3, #8
 80091a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80091aa:	2308      	movs	r3, #8
 80091ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	0e5b      	lsrs	r3, r3, #25
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	f003 0307 	and.w	r3, r3, #7
 80091bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	0f5b      	lsrs	r3, r3, #29
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	f003 0307 	and.w	r3, r3, #7
 80091cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	7b3a      	ldrb	r2, [r7, #12]
 80091d2:	4911      	ldr	r1, [pc, #68]	; (8009218 <UARTEx_SetNbDataToProcess+0x94>)
 80091d4:	5c8a      	ldrb	r2, [r1, r2]
 80091d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091da:	7b3a      	ldrb	r2, [r7, #12]
 80091dc:	490f      	ldr	r1, [pc, #60]	; (800921c <UARTEx_SetNbDataToProcess+0x98>)
 80091de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	7b7a      	ldrb	r2, [r7, #13]
 80091f0:	4909      	ldr	r1, [pc, #36]	; (8009218 <UARTEx_SetNbDataToProcess+0x94>)
 80091f2:	5c8a      	ldrb	r2, [r1, r2]
 80091f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091f8:	7b7a      	ldrb	r2, [r7, #13]
 80091fa:	4908      	ldr	r1, [pc, #32]	; (800921c <UARTEx_SetNbDataToProcess+0x98>)
 80091fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009202:	b29a      	uxth	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800920a:	bf00      	nop
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	0800e2c0 	.word	0x0800e2c0
 800921c:	0800e2c8 	.word	0x0800e2c8

08009220 <USER_ADC_ConfigFilter>:

COMPONENT_ADCFilter FilterSignal ={50000,100000,0};
/*Static funtion*/

void USER_ADC_ConfigFilter(COMPONENT_ADCFilter FilterSignalConfig)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	eef0 6a40 	vmov.f32	s13, s0
 800922a:	eeb0 7a60 	vmov.f32	s14, s1
 800922e:	eef0 7a41 	vmov.f32	s15, s2
 8009232:	edc7 6a01 	vstr	s13, [r7, #4]
 8009236:	ed87 7a02 	vstr	s14, [r7, #8]
 800923a:	edc7 7a03 	vstr	s15, [r7, #12]
	FilterSignal.cutoffFreq = FilterSignalConfig.cutoffFreq;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a04      	ldr	r2, [pc, #16]	; (8009254 <USER_ADC_ConfigFilter+0x34>)
 8009242:	6013      	str	r3, [r2, #0]
	FilterSignalConfig.sampleTime = FilterSignalConfig.sampleTime;
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	60bb      	str	r3, [r7, #8]
}
 8009248:	bf00      	nop
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	2000000c 	.word	0x2000000c

08009258 <USER_ADC_handleString>:
	FilterSignal.output = __USER_FILTER_LowPassFilter(rawSignal, FilterSignal.cutoffFreq, FilterSignal.sampleTime,channelADC);
	return FilterSignal.output;
}
/*Syntax buffer ADC-100-100000(ADC-cutoff-samplingtime) */
COMPONENT_ADCFilter USER_ADC_handleString(char* Buffer)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b08e      	sub	sp, #56	; 0x38
 800925c:	af00      	add	r7, sp, #0
 800925e:	6178      	str	r0, [r7, #20]
	COMPONENT_ADCFilter var;
	char* ptr = NULL;
 8009260:	2300      	movs	r3, #0
 8009262:	637b      	str	r3, [r7, #52]	; 0x34
	ptr = strtok(Buffer,"-");
 8009264:	491a      	ldr	r1, [pc, #104]	; (80092d0 <USER_ADC_handleString+0x78>)
 8009266:	6978      	ldr	r0, [r7, #20]
 8009268:	f001 ffba 	bl	800b1e0 <strtok>
 800926c:	6378      	str	r0, [r7, #52]	; 0x34
	ptr = strtok(NULL,"-");
 800926e:	4918      	ldr	r1, [pc, #96]	; (80092d0 <USER_ADC_handleString+0x78>)
 8009270:	2000      	movs	r0, #0
 8009272:	f001 ffb5 	bl	800b1e0 <strtok>
 8009276:	6378      	str	r0, [r7, #52]	; 0x34
	var.cutoffFreq = atoff(ptr);
 8009278:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800927a:	f000 fa2d 	bl	80096d8 <atoff>
 800927e:	eef0 7a40 	vmov.f32	s15, s0
 8009282:	edc7 7a07 	vstr	s15, [r7, #28]
	ptr = strtok(NULL,"-");
 8009286:	4912      	ldr	r1, [pc, #72]	; (80092d0 <USER_ADC_handleString+0x78>)
 8009288:	2000      	movs	r0, #0
 800928a:	f001 ffa9 	bl	800b1e0 <strtok>
 800928e:	6378      	str	r0, [r7, #52]	; 0x34
	var.sampleTime = atoff(ptr);
 8009290:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009292:	f000 fa21 	bl	80096d8 <atoff>
 8009296:	eef0 7a40 	vmov.f32	s15, s0
 800929a:	edc7 7a08 	vstr	s15, [r7, #32]

	return var;
 800929e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092a2:	f107 021c 	add.w	r2, r7, #28
 80092a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80092a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80092ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b2:	ee06 1a90 	vmov	s13, r1
 80092b6:	ee07 2a10 	vmov	s14, r2
 80092ba:	ee07 3a90 	vmov	s15, r3
}
 80092be:	eeb0 0a66 	vmov.f32	s0, s13
 80092c2:	eef0 0a47 	vmov.f32	s1, s14
 80092c6:	eeb0 1a67 	vmov.f32	s2, s15
 80092ca:	3738      	adds	r7, #56	; 0x38
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	0800e288 	.word	0x0800e288

080092d4 <USER_ADC_GetInforFilter>:

COMPONENT_ADCFilter USER_ADC_GetInforFilter(void)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b089      	sub	sp, #36	; 0x24
 80092d8:	af00      	add	r7, sp, #0
	return FilterSignal;
 80092da:	4a0d      	ldr	r2, [pc, #52]	; (8009310 <USER_ADC_GetInforFilter+0x3c>)
 80092dc:	f107 0314 	add.w	r3, r7, #20
 80092e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80092e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80092e6:	6979      	ldr	r1, [r7, #20]
 80092e8:	69ba      	ldr	r2, [r7, #24]
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	ee06 1a90 	vmov	s13, r1
 80092f0:	ee07 2a10 	vmov	s14, r2
 80092f4:	ee07 3a90 	vmov	s15, r3
}
 80092f8:	eeb0 0a66 	vmov.f32	s0, s13
 80092fc:	eef0 0a47 	vmov.f32	s1, s14
 8009300:	eeb0 1a67 	vmov.f32	s2, s15
 8009304:	3724      	adds	r7, #36	; 0x24
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	2000000c 	.word	0x2000000c

08009314 <USER_CALLBACK_init>:
uint8_t CheckFlagUSART = 0;/*************************************************** Flag checking when UART jump into CallBack funtion*/
uint16_t Voltage_Variable = 0;/*********************************************** Voltage Variable*/
uint32_t ADCVar[3];

void USER_CALLBACK_init(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8009318:	2104      	movs	r1, #4
 800931a:	4808      	ldr	r0, [pc, #32]	; (800933c <USER_CALLBACK_init+0x28>)
 800931c:	f7fc fea4 	bl	8006068 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8009320:	2100      	movs	r1, #0
 8009322:	4807      	ldr	r0, [pc, #28]	; (8009340 <USER_CALLBACK_init+0x2c>)
 8009324:	f7fc fea0 	bl	8006068 <HAL_TIM_PWM_Start>
//	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
	 // HAL_TIM_Base_Start_IT(&htim2);
	//  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);/******************************* To disable ADC*/
	  /*Start Interrupt Function*/
	  /****Uart Transfer*****/
	  HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx_data, 1);
 8009328:	2201      	movs	r2, #1
 800932a:	4906      	ldr	r1, [pc, #24]	; (8009344 <USER_CALLBACK_init+0x30>)
 800932c:	4806      	ldr	r0, [pc, #24]	; (8009348 <USER_CALLBACK_init+0x34>)
 800932e:	f7fd ffe7 	bl	8007300 <HAL_UART_Receive_IT>
	  /**** ADC Start 1********/
	  //HAL_ADC_Start_IT(&hadc1);
	  /**** ADC 4 Start with DMA*****/
	  //HAL_ADC_Start_DMA(&hadc3,ADCVar,3);
	  HAL_ADC_Start_IT(&hadc3);
 8009332:	4806      	ldr	r0, [pc, #24]	; (800934c <USER_CALLBACK_init+0x38>)
 8009334:	f7f9 f9f2 	bl	800271c <HAL_ADC_Start_IT>
	  // Use HAL_ADC_Start when want to start mesuare ADC
	  // HAL_ADC_Stop to stop mesuare
}
 8009338:	bf00      	nop
 800933a:	bd80      	pop	{r7, pc}
 800933c:	200002e4 	.word	0x200002e4
 8009340:	20000330 	.word	0x20000330
 8009344:	200004a0 	.word	0x200004a0
 8009348:	2000037c 	.word	0x2000037c
 800934c:	20000278 	.word	0x20000278

08009350 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a10      	ldr	r2, [pc, #64]	; (80093a0 <HAL_UART_RxCpltCallback+0x50>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d119      	bne.n	8009396 <HAL_UART_RxCpltCallback+0x46>
	{
		Rx_Buffer[count++] = Rx_data[0];
 8009362:	4b10      	ldr	r3, [pc, #64]	; (80093a4 <HAL_UART_RxCpltCallback+0x54>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	b2d1      	uxtb	r1, r2
 800936a:	4a0e      	ldr	r2, [pc, #56]	; (80093a4 <HAL_UART_RxCpltCallback+0x54>)
 800936c:	7011      	strb	r1, [r2, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	4b0d      	ldr	r3, [pc, #52]	; (80093a8 <HAL_UART_RxCpltCallback+0x58>)
 8009372:	7819      	ldrb	r1, [r3, #0]
 8009374:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <HAL_UART_RxCpltCallback+0x5c>)
 8009376:	5499      	strb	r1, [r3, r2]
		if((Rx_data[0]) == '\r')
 8009378:	4b0b      	ldr	r3, [pc, #44]	; (80093a8 <HAL_UART_RxCpltCallback+0x58>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	2b0d      	cmp	r3, #13
 800937e:	d105      	bne.n	800938c <HAL_UART_RxCpltCallback+0x3c>
		{
			count = 0;
 8009380:	4b08      	ldr	r3, [pc, #32]	; (80093a4 <HAL_UART_RxCpltCallback+0x54>)
 8009382:	2200      	movs	r2, #0
 8009384:	701a      	strb	r2, [r3, #0]
			CheckFlagUSART = 1;
 8009386:	4b0a      	ldr	r3, [pc, #40]	; (80093b0 <HAL_UART_RxCpltCallback+0x60>)
 8009388:	2201      	movs	r2, #1
 800938a:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, (uint8_t*)Rx_data,1);
 800938c:	2201      	movs	r2, #1
 800938e:	4906      	ldr	r1, [pc, #24]	; (80093a8 <HAL_UART_RxCpltCallback+0x58>)
 8009390:	4808      	ldr	r0, [pc, #32]	; (80093b4 <HAL_UART_RxCpltCallback+0x64>)
 8009392:	f7fd ffb5 	bl	8007300 <HAL_UART_Receive_IT>
	}
}
 8009396:	bf00      	nop
 8009398:	3708      	adds	r7, #8
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	40004400 	.word	0x40004400
 80093a4:	200004b8 	.word	0x200004b8
 80093a8:	200004a0 	.word	0x200004a0
 80093ac:	200004a4 	.word	0x200004a4
 80093b0:	200004ba 	.word	0x200004ba
 80093b4:	2000037c 	.word	0x2000037c

080093b8 <HAL_ADC_ConvCpltCallback>:
/********Conversion complete callback in non-blocking mode***/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	4b0a      	ldr	r3, [pc, #40]	; (80093f0 <HAL_ADC_ConvCpltCallback+0x38>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d102      	bne.n	80093d2 <HAL_ADC_ConvCpltCallback+0x1a>
	{
		CheckFlagADC = 1;
 80093cc:	4b09      	ldr	r3, [pc, #36]	; (80093f4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80093ce:	2201      	movs	r2, #1
 80093d0:	701a      	strb	r2, [r3, #0]
	}
	if(hadc->Instance == hadc3.Instance)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	4b08      	ldr	r3, [pc, #32]	; (80093f8 <HAL_ADC_ConvCpltCallback+0x40>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d102      	bne.n	80093e4 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		CheckFlagADC = 1;
 80093de:	4b05      	ldr	r3, [pc, #20]	; (80093f4 <HAL_ADC_ConvCpltCallback+0x3c>)
 80093e0:	2201      	movs	r2, #1
 80093e2:	701a      	strb	r2, [r3, #0]
	}
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	2000020c 	.word	0x2000020c
 80093f4:	200004b9 	.word	0x200004b9
 80093f8:	20000278 	.word	0x20000278

080093fc <USER_CALLBACK_clearRxBuffer>:

void USER_CALLBACK_clearRxBuffer(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	af00      	add	r7, sp, #0
	memset(Rx_Buffer,'\0',strlen(Rx_Buffer));
 8009400:	4805      	ldr	r0, [pc, #20]	; (8009418 <USER_CALLBACK_clearRxBuffer+0x1c>)
 8009402:	f7f6 ff0d 	bl	8000220 <strlen>
 8009406:	4603      	mov	r3, r0
 8009408:	461a      	mov	r2, r3
 800940a:	2100      	movs	r1, #0
 800940c:	4802      	ldr	r0, [pc, #8]	; (8009418 <USER_CALLBACK_clearRxBuffer+0x1c>)
 800940e:	f000 f9a3 	bl	8009758 <memset>
}
 8009412:	bf00      	nop
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	200004a4 	.word	0x200004a4

0800941c <USER_CALLBACK_clearRxData>:
void USER_CALLBACK_clearRxData(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0
	memset(Rx_data,'\0',strlen(Rx_data));
 8009420:	4805      	ldr	r0, [pc, #20]	; (8009438 <USER_CALLBACK_clearRxData+0x1c>)
 8009422:	f7f6 fefd 	bl	8000220 <strlen>
 8009426:	4603      	mov	r3, r0
 8009428:	461a      	mov	r2, r3
 800942a:	2100      	movs	r1, #0
 800942c:	4802      	ldr	r0, [pc, #8]	; (8009438 <USER_CALLBACK_clearRxData+0x1c>)
 800942e:	f000 f993 	bl	8009758 <memset>
}
 8009432:	bf00      	nop
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	200004a0 	.word	0x200004a0

0800943c <__USER_TIMER_convertU16>:
/****Static Prototype *****/
static uint16_t __USER_TIMER_convertU16(int DutyCycle);

/****Define function********************/
static uint16_t __USER_TIMER_convertU16(int DutyCycle)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
	return (uint16_t)DutyCycle;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	b29b      	uxth	r3, r3
}
 8009448:	4618      	mov	r0, r3
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <USER_TIMER_setValueOfPWM>:


void USER_TIMER_setValueOfPWM(COMPONENT_TIMER TimerVariable)
{
 8009454:	b590      	push	{r4, r7, lr}
 8009456:	b099      	sub	sp, #100	; 0x64
 8009458:	af00      	add	r7, sp, #0
 800945a:	463c      	mov	r4, r7
 800945c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TIM_HandleTypeDef htim;
	switch(TimerVariable.NumberOfTimer)
 8009460:	88bb      	ldrh	r3, [r7, #4]
 8009462:	2b02      	cmp	r3, #2
 8009464:	d002      	beq.n	800946c <USER_TIMER_setValueOfPWM+0x18>
 8009466:	2b03      	cmp	r3, #3
 8009468:	d009      	beq.n	800947e <USER_TIMER_setValueOfPWM+0x2a>
 800946a:	e011      	b.n	8009490 <USER_TIMER_setValueOfPWM+0x3c>
	{
		case 2:
			htim = htim2;
 800946c:	4a3e      	ldr	r2, [pc, #248]	; (8009568 <USER_TIMER_setValueOfPWM+0x114>)
 800946e:	f107 0314 	add.w	r3, r7, #20
 8009472:	4611      	mov	r1, r2
 8009474:	224c      	movs	r2, #76	; 0x4c
 8009476:	4618      	mov	r0, r3
 8009478:	f000 f960 	bl	800973c <memcpy>
			break;
 800947c:	e008      	b.n	8009490 <USER_TIMER_setValueOfPWM+0x3c>
		case 3:
			htim = htim3;
 800947e:	4a3b      	ldr	r2, [pc, #236]	; (800956c <USER_TIMER_setValueOfPWM+0x118>)
 8009480:	f107 0314 	add.w	r3, r7, #20
 8009484:	4611      	mov	r1, r2
 8009486:	224c      	movs	r2, #76	; 0x4c
 8009488:	4618      	mov	r0, r3
 800948a:	f000 f957 	bl	800973c <memcpy>
			break;
 800948e:	bf00      	nop
	}
	switch (TimerVariable.Channel)
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b03      	cmp	r3, #3
 8009494:	d00c      	beq.n	80094b0 <USER_TIMER_setValueOfPWM+0x5c>
 8009496:	2b03      	cmp	r3, #3
 8009498:	d80d      	bhi.n	80094b6 <USER_TIMER_setValueOfPWM+0x62>
 800949a:	2b01      	cmp	r3, #1
 800949c:	d002      	beq.n	80094a4 <USER_TIMER_setValueOfPWM+0x50>
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d003      	beq.n	80094aa <USER_TIMER_setValueOfPWM+0x56>
 80094a2:	e008      	b.n	80094b6 <USER_TIMER_setValueOfPWM+0x62>
	{
		case 1: /* Channel to trigger ADC */
			TimerVariable.Channel = TIM_CHANNEL_1;
 80094a4:	2300      	movs	r3, #0
 80094a6:	60bb      	str	r3, [r7, #8]
			break;
 80094a8:	e005      	b.n	80094b6 <USER_TIMER_setValueOfPWM+0x62>
		case 2: /* Channel to PWM */
			TimerVariable.Channel = TIM_CHANNEL_2;
 80094aa:	2304      	movs	r3, #4
 80094ac:	60bb      	str	r3, [r7, #8]
			break;
 80094ae:	e002      	b.n	80094b6 <USER_TIMER_setValueOfPWM+0x62>
		case 3:
			TimerVariable.Channel = TIM_CHANNEL_3;
 80094b0:	2308      	movs	r3, #8
 80094b2:	60bb      	str	r3, [r7, #8]
			break;
 80094b4:	bf00      	nop
	}
	//assert((TimerVariable.frequency >=100000) || TimerVariable.frequency == 0);
	switch (TimerVariable.frequency)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d104      	bne.n	80094c6 <USER_TIMER_setValueOfPWM+0x72>
	{
		case 0:
			ValueOfARR = (uint32_t)__HAL_TIM_GET_AUTORELOAD(&htim);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	4a2b      	ldr	r2, [pc, #172]	; (8009570 <USER_TIMER_setValueOfPWM+0x11c>)
 80094c2:	6013      	str	r3, [r2, #0]
			break;
 80094c4:	e010      	b.n	80094e8 <USER_TIMER_setValueOfPWM+0x94>
		default:
			htim.Instance->ARR = ((uint32_t)((AHBFrequency)/(TimerVariable.frequency*(htim.Init.Prescaler+1))) -1);
 80094c6:	4b2b      	ldr	r3, [pc, #172]	; (8009574 <USER_TIMER_setValueOfPWM+0x120>)
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	69b9      	ldr	r1, [r7, #24]
 80094ce:	3101      	adds	r1, #1
 80094d0:	fb01 f303 	mul.w	r3, r1, r3
 80094d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	3a01      	subs	r2, #1
 80094dc:	62da      	str	r2, [r3, #44]	; 0x2c
			ValueOfARR = (uint32_t)__HAL_TIM_GET_AUTORELOAD(&htim);
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e2:	4a23      	ldr	r2, [pc, #140]	; (8009570 <USER_TIMER_setValueOfPWM+0x11c>)
 80094e4:	6013      	str	r3, [r2, #0]
			break;
 80094e6:	bf00      	nop
	}
	ValueOfCCR = (((uint32_t)TimerVariable.Duty*ValueOfARR)/100);
 80094e8:	edd7 7a00 	vldr	s15, [r7]
 80094ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094f0:	ee17 2a90 	vmov	r2, s15
 80094f4:	4b1e      	ldr	r3, [pc, #120]	; (8009570 <USER_TIMER_setValueOfPWM+0x11c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	fb02 f303 	mul.w	r3, r2, r3
 80094fc:	4a1e      	ldr	r2, [pc, #120]	; (8009578 <USER_TIMER_setValueOfPWM+0x124>)
 80094fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009502:	095b      	lsrs	r3, r3, #5
 8009504:	4a1d      	ldr	r2, [pc, #116]	; (800957c <USER_TIMER_setValueOfPWM+0x128>)
 8009506:	6013      	str	r3, [r2, #0]
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d104      	bne.n	8009518 <USER_TIMER_setValueOfPWM+0xc4>
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	4a1a      	ldr	r2, [pc, #104]	; (800957c <USER_TIMER_setValueOfPWM+0x128>)
 8009512:	6812      	ldr	r2, [r2, #0]
 8009514:	635a      	str	r2, [r3, #52]	; 0x34
}
 8009516:	e023      	b.n	8009560 <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b04      	cmp	r3, #4
 800951c:	d104      	bne.n	8009528 <USER_TIMER_setValueOfPWM+0xd4>
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	4b16      	ldr	r3, [pc, #88]	; (800957c <USER_TIMER_setValueOfPWM+0x128>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6393      	str	r3, [r2, #56]	; 0x38
}
 8009526:	e01b      	b.n	8009560 <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2b08      	cmp	r3, #8
 800952c:	d104      	bne.n	8009538 <USER_TIMER_setValueOfPWM+0xe4>
 800952e:	697a      	ldr	r2, [r7, #20]
 8009530:	4b12      	ldr	r3, [pc, #72]	; (800957c <USER_TIMER_setValueOfPWM+0x128>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8009536:	e013      	b.n	8009560 <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	2b0c      	cmp	r3, #12
 800953c:	d104      	bne.n	8009548 <USER_TIMER_setValueOfPWM+0xf4>
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	4b0e      	ldr	r3, [pc, #56]	; (800957c <USER_TIMER_setValueOfPWM+0x128>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6413      	str	r3, [r2, #64]	; 0x40
}
 8009546:	e00b      	b.n	8009560 <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2b10      	cmp	r3, #16
 800954c:	d104      	bne.n	8009558 <USER_TIMER_setValueOfPWM+0x104>
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4b0a      	ldr	r3, [pc, #40]	; (800957c <USER_TIMER_setValueOfPWM+0x128>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6493      	str	r3, [r2, #72]	; 0x48
}
 8009556:	e003      	b.n	8009560 <USER_TIMER_setValueOfPWM+0x10c>
	__HAL_TIM_SET_COMPARE(&htim,TimerVariable.Channel,ValueOfCCR);
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	4b08      	ldr	r3, [pc, #32]	; (800957c <USER_TIMER_setValueOfPWM+0x128>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8009560:	bf00      	nop
 8009562:	3764      	adds	r7, #100	; 0x64
 8009564:	46bd      	mov	sp, r7
 8009566:	bd90      	pop	{r4, r7, pc}
 8009568:	200002e4 	.word	0x200002e4
 800956c:	20000330 	.word	0x20000330
 8009570:	200004bc 	.word	0x200004bc
 8009574:	20000018 	.word	0x20000018
 8009578:	51eb851f 	.word	0x51eb851f
 800957c:	200004c0 	.word	0x200004c0

08009580 <USER_TIMER_handleString>:
/*Syntax buffer TIMER-30-20000-2-2(TIMER-dutycycle-tanso-numberoftimer-channel) */
COMPONENT_TIMER USER_TIMER_handleString(char* Buffer)
{
 8009580:	b590      	push	{r4, r7, lr}
 8009582:	b089      	sub	sp, #36	; 0x24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
	char* ptr = NULL;
 800958a:	2300      	movs	r3, #0
 800958c:	61fb      	str	r3, [r7, #28]
	COMPONENT_TIMER var = {0.0,0,0,0};
 800958e:	f107 030c 	add.w	r3, r7, #12
 8009592:	2200      	movs	r2, #0
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	605a      	str	r2, [r3, #4]
 8009598:	609a      	str	r2, [r3, #8]
 800959a:	60da      	str	r2, [r3, #12]


	ptr = strtok(Buffer,"-");
 800959c:	4924      	ldr	r1, [pc, #144]	; (8009630 <USER_TIMER_handleString+0xb0>)
 800959e:	6838      	ldr	r0, [r7, #0]
 80095a0:	f001 fe1e 	bl	800b1e0 <strtok>
 80095a4:	61f8      	str	r0, [r7, #28]
	ptr = strtok(NULL,"-");
 80095a6:	4922      	ldr	r1, [pc, #136]	; (8009630 <USER_TIMER_handleString+0xb0>)
 80095a8:	2000      	movs	r0, #0
 80095aa:	f001 fe19 	bl	800b1e0 <strtok>
 80095ae:	61f8      	str	r0, [r7, #28]
	var.Duty = __USER_TIMER_convertU16(atoi(ptr));
 80095b0:	69f8      	ldr	r0, [r7, #28]
 80095b2:	f000 f894 	bl	80096de <atoi>
 80095b6:	4603      	mov	r3, r0
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff ff3f 	bl	800943c <__USER_TIMER_convertU16>
 80095be:	4603      	mov	r3, r0
 80095c0:	ee07 3a90 	vmov	s15, r3
 80095c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c8:	edc7 7a03 	vstr	s15, [r7, #12]
	ptr = strtok(NULL,"-");
 80095cc:	4918      	ldr	r1, [pc, #96]	; (8009630 <USER_TIMER_handleString+0xb0>)
 80095ce:	2000      	movs	r0, #0
 80095d0:	f001 fe06 	bl	800b1e0 <strtok>
 80095d4:	61f8      	str	r0, [r7, #28]
	var.frequency = (uint32_t)atoi(ptr);
 80095d6:	69f8      	ldr	r0, [r7, #28]
 80095d8:	f000 f881 	bl	80096de <atoi>
 80095dc:	4603      	mov	r3, r0
 80095de:	61bb      	str	r3, [r7, #24]
	ptr = strtok(NULL,"-");
 80095e0:	4913      	ldr	r1, [pc, #76]	; (8009630 <USER_TIMER_handleString+0xb0>)
 80095e2:	2000      	movs	r0, #0
 80095e4:	f001 fdfc 	bl	800b1e0 <strtok>
 80095e8:	61f8      	str	r0, [r7, #28]
	var.NumberOfTimer = __USER_TIMER_convertU16(atoi(ptr));
 80095ea:	69f8      	ldr	r0, [r7, #28]
 80095ec:	f000 f877 	bl	80096de <atoi>
 80095f0:	4603      	mov	r3, r0
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff ff22 	bl	800943c <__USER_TIMER_convertU16>
 80095f8:	4603      	mov	r3, r0
 80095fa:	823b      	strh	r3, [r7, #16]
	ptr = strtok(NULL,"-");
 80095fc:	490c      	ldr	r1, [pc, #48]	; (8009630 <USER_TIMER_handleString+0xb0>)
 80095fe:	2000      	movs	r0, #0
 8009600:	f001 fdee 	bl	800b1e0 <strtok>
 8009604:	61f8      	str	r0, [r7, #28]
	var.Channel = __USER_TIMER_convertU16(atoi(ptr));
 8009606:	69f8      	ldr	r0, [r7, #28]
 8009608:	f000 f869 	bl	80096de <atoi>
 800960c:	4603      	mov	r3, r0
 800960e:	4618      	mov	r0, r3
 8009610:	f7ff ff14 	bl	800943c <__USER_TIMER_convertU16>
 8009614:	4603      	mov	r3, r0
 8009616:	617b      	str	r3, [r7, #20]
	return var;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	461c      	mov	r4, r3
 800961c:	f107 030c 	add.w	r3, r7, #12
 8009620:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009622:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	3724      	adds	r7, #36	; 0x24
 800962a:	46bd      	mov	sp, r7
 800962c:	bd90      	pop	{r4, r7, pc}
 800962e:	bf00      	nop
 8009630:	0800e28c 	.word	0x0800e28c

08009634 <USER_TIMER_getValueARR>:
uint32_t USER_TIMER_getValueARR(void)
{
 8009634:	b480      	push	{r7}
 8009636:	af00      	add	r7, sp, #0
	return ValueOfARR;
 8009638:	4b03      	ldr	r3, [pc, #12]	; (8009648 <USER_TIMER_getValueARR+0x14>)
 800963a:	681b      	ldr	r3, [r3, #0]
}
 800963c:	4618      	mov	r0, r3
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	200004bc 	.word	0x200004bc

0800964c <USER_TIMER_getValueCCR>:
uint32_t USER_TIMER_getValueCCR(void)
{
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
	return ValueOfCCR;
 8009650:	4b03      	ldr	r3, [pc, #12]	; (8009660 <USER_TIMER_getValueCCR+0x14>)
 8009652:	681b      	ldr	r3, [r3, #0]
}
 8009654:	4618      	mov	r0, r3
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	200004c0 	.word	0x200004c0
 8009664:	00000000 	.word	0x00000000

08009668 <USER_TIMER_ConvertADCValueToDutyCycle>:
  * @brief  Convert ADC value to Dutycycle. Voltage 0 - 3.3V conver 0->100%
  * @note   Parameters of this function
  *          - ADC value
  */
float USER_TIMER_ConvertADCValueToDutyCycle(float ADCValue)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	ed87 0a01 	vstr	s0, [r7, #4]
	float tempValue = (ADCValue/1000);
 8009672:	ed97 7a01 	vldr	s14, [r7, #4]
 8009676:	eddf 6a16 	vldr	s13, [pc, #88]	; 80096d0 <USER_TIMER_ConvertADCValueToDutyCycle+0x68>
 800967a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800967e:	edc7 7a03 	vstr	s15, [r7, #12]
	float DutyCycle = 0;
 8009682:	f04f 0300 	mov.w	r3, #0
 8009686:	60bb      	str	r3, [r7, #8]

	DutyCycle = (tempValue*100)/3.3;
 8009688:	edd7 7a03 	vldr	s15, [r7, #12]
 800968c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80096d4 <USER_TIMER_ConvertADCValueToDutyCycle+0x6c>
 8009690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009694:	ee17 0a90 	vmov	r0, s15
 8009698:	f7f6 ff7e 	bl	8000598 <__aeabi_f2d>
 800969c:	a30a      	add	r3, pc, #40	; (adr r3, 80096c8 <USER_TIMER_ConvertADCValueToDutyCycle+0x60>)
 800969e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a2:	f7f7 f8fb 	bl	800089c <__aeabi_ddiv>
 80096a6:	4602      	mov	r2, r0
 80096a8:	460b      	mov	r3, r1
 80096aa:	4610      	mov	r0, r2
 80096ac:	4619      	mov	r1, r3
 80096ae:	f7f7 fac3 	bl	8000c38 <__aeabi_d2f>
 80096b2:	4603      	mov	r3, r0
 80096b4:	60bb      	str	r3, [r7, #8]
	return DutyCycle;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	ee07 3a90 	vmov	s15, r3
}
 80096bc:	eeb0 0a67 	vmov.f32	s0, s15
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	66666666 	.word	0x66666666
 80096cc:	400a6666 	.word	0x400a6666
 80096d0:	447a0000 	.word	0x447a0000
 80096d4:	42c80000 	.word	0x42c80000

080096d8 <atoff>:
 80096d8:	2100      	movs	r1, #0
 80096da:	f001 bd25 	b.w	800b128 <strtof>

080096de <atoi>:
 80096de:	220a      	movs	r2, #10
 80096e0:	2100      	movs	r1, #0
 80096e2:	f001 be5d 	b.w	800b3a0 <strtol>
	...

080096e8 <__errno>:
 80096e8:	4b01      	ldr	r3, [pc, #4]	; (80096f0 <__errno+0x8>)
 80096ea:	6818      	ldr	r0, [r3, #0]
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	2000001c 	.word	0x2000001c

080096f4 <__libc_init_array>:
 80096f4:	b570      	push	{r4, r5, r6, lr}
 80096f6:	4d0d      	ldr	r5, [pc, #52]	; (800972c <__libc_init_array+0x38>)
 80096f8:	4c0d      	ldr	r4, [pc, #52]	; (8009730 <__libc_init_array+0x3c>)
 80096fa:	1b64      	subs	r4, r4, r5
 80096fc:	10a4      	asrs	r4, r4, #2
 80096fe:	2600      	movs	r6, #0
 8009700:	42a6      	cmp	r6, r4
 8009702:	d109      	bne.n	8009718 <__libc_init_array+0x24>
 8009704:	4d0b      	ldr	r5, [pc, #44]	; (8009734 <__libc_init_array+0x40>)
 8009706:	4c0c      	ldr	r4, [pc, #48]	; (8009738 <__libc_init_array+0x44>)
 8009708:	f004 fd6a 	bl	800e1e0 <_init>
 800970c:	1b64      	subs	r4, r4, r5
 800970e:	10a4      	asrs	r4, r4, #2
 8009710:	2600      	movs	r6, #0
 8009712:	42a6      	cmp	r6, r4
 8009714:	d105      	bne.n	8009722 <__libc_init_array+0x2e>
 8009716:	bd70      	pop	{r4, r5, r6, pc}
 8009718:	f855 3b04 	ldr.w	r3, [r5], #4
 800971c:	4798      	blx	r3
 800971e:	3601      	adds	r6, #1
 8009720:	e7ee      	b.n	8009700 <__libc_init_array+0xc>
 8009722:	f855 3b04 	ldr.w	r3, [r5], #4
 8009726:	4798      	blx	r3
 8009728:	3601      	adds	r6, #1
 800972a:	e7f2      	b.n	8009712 <__libc_init_array+0x1e>
 800972c:	0800e7d8 	.word	0x0800e7d8
 8009730:	0800e7d8 	.word	0x0800e7d8
 8009734:	0800e7d8 	.word	0x0800e7d8
 8009738:	0800e7dc 	.word	0x0800e7dc

0800973c <memcpy>:
 800973c:	440a      	add	r2, r1
 800973e:	4291      	cmp	r1, r2
 8009740:	f100 33ff 	add.w	r3, r0, #4294967295
 8009744:	d100      	bne.n	8009748 <memcpy+0xc>
 8009746:	4770      	bx	lr
 8009748:	b510      	push	{r4, lr}
 800974a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800974e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009752:	4291      	cmp	r1, r2
 8009754:	d1f9      	bne.n	800974a <memcpy+0xe>
 8009756:	bd10      	pop	{r4, pc}

08009758 <memset>:
 8009758:	4402      	add	r2, r0
 800975a:	4603      	mov	r3, r0
 800975c:	4293      	cmp	r3, r2
 800975e:	d100      	bne.n	8009762 <memset+0xa>
 8009760:	4770      	bx	lr
 8009762:	f803 1b01 	strb.w	r1, [r3], #1
 8009766:	e7f9      	b.n	800975c <memset+0x4>

08009768 <__cvt>:
 8009768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800976c:	ec55 4b10 	vmov	r4, r5, d0
 8009770:	2d00      	cmp	r5, #0
 8009772:	460e      	mov	r6, r1
 8009774:	4619      	mov	r1, r3
 8009776:	462b      	mov	r3, r5
 8009778:	bfbb      	ittet	lt
 800977a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800977e:	461d      	movlt	r5, r3
 8009780:	2300      	movge	r3, #0
 8009782:	232d      	movlt	r3, #45	; 0x2d
 8009784:	700b      	strb	r3, [r1, #0]
 8009786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009788:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800978c:	4691      	mov	r9, r2
 800978e:	f023 0820 	bic.w	r8, r3, #32
 8009792:	bfbc      	itt	lt
 8009794:	4622      	movlt	r2, r4
 8009796:	4614      	movlt	r4, r2
 8009798:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800979c:	d005      	beq.n	80097aa <__cvt+0x42>
 800979e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097a2:	d100      	bne.n	80097a6 <__cvt+0x3e>
 80097a4:	3601      	adds	r6, #1
 80097a6:	2102      	movs	r1, #2
 80097a8:	e000      	b.n	80097ac <__cvt+0x44>
 80097aa:	2103      	movs	r1, #3
 80097ac:	ab03      	add	r3, sp, #12
 80097ae:	9301      	str	r3, [sp, #4]
 80097b0:	ab02      	add	r3, sp, #8
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	ec45 4b10 	vmov	d0, r4, r5
 80097b8:	4653      	mov	r3, sl
 80097ba:	4632      	mov	r2, r6
 80097bc:	f001 fea4 	bl	800b508 <_dtoa_r>
 80097c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097c4:	4607      	mov	r7, r0
 80097c6:	d102      	bne.n	80097ce <__cvt+0x66>
 80097c8:	f019 0f01 	tst.w	r9, #1
 80097cc:	d022      	beq.n	8009814 <__cvt+0xac>
 80097ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097d2:	eb07 0906 	add.w	r9, r7, r6
 80097d6:	d110      	bne.n	80097fa <__cvt+0x92>
 80097d8:	783b      	ldrb	r3, [r7, #0]
 80097da:	2b30      	cmp	r3, #48	; 0x30
 80097dc:	d10a      	bne.n	80097f4 <__cvt+0x8c>
 80097de:	2200      	movs	r2, #0
 80097e0:	2300      	movs	r3, #0
 80097e2:	4620      	mov	r0, r4
 80097e4:	4629      	mov	r1, r5
 80097e6:	f7f7 f997 	bl	8000b18 <__aeabi_dcmpeq>
 80097ea:	b918      	cbnz	r0, 80097f4 <__cvt+0x8c>
 80097ec:	f1c6 0601 	rsb	r6, r6, #1
 80097f0:	f8ca 6000 	str.w	r6, [sl]
 80097f4:	f8da 3000 	ldr.w	r3, [sl]
 80097f8:	4499      	add	r9, r3
 80097fa:	2200      	movs	r2, #0
 80097fc:	2300      	movs	r3, #0
 80097fe:	4620      	mov	r0, r4
 8009800:	4629      	mov	r1, r5
 8009802:	f7f7 f989 	bl	8000b18 <__aeabi_dcmpeq>
 8009806:	b108      	cbz	r0, 800980c <__cvt+0xa4>
 8009808:	f8cd 900c 	str.w	r9, [sp, #12]
 800980c:	2230      	movs	r2, #48	; 0x30
 800980e:	9b03      	ldr	r3, [sp, #12]
 8009810:	454b      	cmp	r3, r9
 8009812:	d307      	bcc.n	8009824 <__cvt+0xbc>
 8009814:	9b03      	ldr	r3, [sp, #12]
 8009816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009818:	1bdb      	subs	r3, r3, r7
 800981a:	4638      	mov	r0, r7
 800981c:	6013      	str	r3, [r2, #0]
 800981e:	b004      	add	sp, #16
 8009820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009824:	1c59      	adds	r1, r3, #1
 8009826:	9103      	str	r1, [sp, #12]
 8009828:	701a      	strb	r2, [r3, #0]
 800982a:	e7f0      	b.n	800980e <__cvt+0xa6>

0800982c <__exponent>:
 800982c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800982e:	4603      	mov	r3, r0
 8009830:	2900      	cmp	r1, #0
 8009832:	bfb8      	it	lt
 8009834:	4249      	neglt	r1, r1
 8009836:	f803 2b02 	strb.w	r2, [r3], #2
 800983a:	bfb4      	ite	lt
 800983c:	222d      	movlt	r2, #45	; 0x2d
 800983e:	222b      	movge	r2, #43	; 0x2b
 8009840:	2909      	cmp	r1, #9
 8009842:	7042      	strb	r2, [r0, #1]
 8009844:	dd2a      	ble.n	800989c <__exponent+0x70>
 8009846:	f10d 0407 	add.w	r4, sp, #7
 800984a:	46a4      	mov	ip, r4
 800984c:	270a      	movs	r7, #10
 800984e:	46a6      	mov	lr, r4
 8009850:	460a      	mov	r2, r1
 8009852:	fb91 f6f7 	sdiv	r6, r1, r7
 8009856:	fb07 1516 	mls	r5, r7, r6, r1
 800985a:	3530      	adds	r5, #48	; 0x30
 800985c:	2a63      	cmp	r2, #99	; 0x63
 800985e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009862:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009866:	4631      	mov	r1, r6
 8009868:	dcf1      	bgt.n	800984e <__exponent+0x22>
 800986a:	3130      	adds	r1, #48	; 0x30
 800986c:	f1ae 0502 	sub.w	r5, lr, #2
 8009870:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009874:	1c44      	adds	r4, r0, #1
 8009876:	4629      	mov	r1, r5
 8009878:	4561      	cmp	r1, ip
 800987a:	d30a      	bcc.n	8009892 <__exponent+0x66>
 800987c:	f10d 0209 	add.w	r2, sp, #9
 8009880:	eba2 020e 	sub.w	r2, r2, lr
 8009884:	4565      	cmp	r5, ip
 8009886:	bf88      	it	hi
 8009888:	2200      	movhi	r2, #0
 800988a:	4413      	add	r3, r2
 800988c:	1a18      	subs	r0, r3, r0
 800988e:	b003      	add	sp, #12
 8009890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009896:	f804 2f01 	strb.w	r2, [r4, #1]!
 800989a:	e7ed      	b.n	8009878 <__exponent+0x4c>
 800989c:	2330      	movs	r3, #48	; 0x30
 800989e:	3130      	adds	r1, #48	; 0x30
 80098a0:	7083      	strb	r3, [r0, #2]
 80098a2:	70c1      	strb	r1, [r0, #3]
 80098a4:	1d03      	adds	r3, r0, #4
 80098a6:	e7f1      	b.n	800988c <__exponent+0x60>

080098a8 <_printf_float>:
 80098a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ac:	ed2d 8b02 	vpush	{d8}
 80098b0:	b08d      	sub	sp, #52	; 0x34
 80098b2:	460c      	mov	r4, r1
 80098b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80098b8:	4616      	mov	r6, r2
 80098ba:	461f      	mov	r7, r3
 80098bc:	4605      	mov	r5, r0
 80098be:	f002 ff93 	bl	800c7e8 <_localeconv_r>
 80098c2:	f8d0 a000 	ldr.w	sl, [r0]
 80098c6:	4650      	mov	r0, sl
 80098c8:	f7f6 fcaa 	bl	8000220 <strlen>
 80098cc:	2300      	movs	r3, #0
 80098ce:	930a      	str	r3, [sp, #40]	; 0x28
 80098d0:	6823      	ldr	r3, [r4, #0]
 80098d2:	9305      	str	r3, [sp, #20]
 80098d4:	f8d8 3000 	ldr.w	r3, [r8]
 80098d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80098dc:	3307      	adds	r3, #7
 80098de:	f023 0307 	bic.w	r3, r3, #7
 80098e2:	f103 0208 	add.w	r2, r3, #8
 80098e6:	f8c8 2000 	str.w	r2, [r8]
 80098ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80098f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80098f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098fa:	9307      	str	r3, [sp, #28]
 80098fc:	f8cd 8018 	str.w	r8, [sp, #24]
 8009900:	ee08 0a10 	vmov	s16, r0
 8009904:	4b9f      	ldr	r3, [pc, #636]	; (8009b84 <_printf_float+0x2dc>)
 8009906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800990a:	f04f 32ff 	mov.w	r2, #4294967295
 800990e:	f7f7 f935 	bl	8000b7c <__aeabi_dcmpun>
 8009912:	bb88      	cbnz	r0, 8009978 <_printf_float+0xd0>
 8009914:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009918:	4b9a      	ldr	r3, [pc, #616]	; (8009b84 <_printf_float+0x2dc>)
 800991a:	f04f 32ff 	mov.w	r2, #4294967295
 800991e:	f7f7 f90f 	bl	8000b40 <__aeabi_dcmple>
 8009922:	bb48      	cbnz	r0, 8009978 <_printf_float+0xd0>
 8009924:	2200      	movs	r2, #0
 8009926:	2300      	movs	r3, #0
 8009928:	4640      	mov	r0, r8
 800992a:	4649      	mov	r1, r9
 800992c:	f7f7 f8fe 	bl	8000b2c <__aeabi_dcmplt>
 8009930:	b110      	cbz	r0, 8009938 <_printf_float+0x90>
 8009932:	232d      	movs	r3, #45	; 0x2d
 8009934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009938:	4b93      	ldr	r3, [pc, #588]	; (8009b88 <_printf_float+0x2e0>)
 800993a:	4894      	ldr	r0, [pc, #592]	; (8009b8c <_printf_float+0x2e4>)
 800993c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009940:	bf94      	ite	ls
 8009942:	4698      	movls	r8, r3
 8009944:	4680      	movhi	r8, r0
 8009946:	2303      	movs	r3, #3
 8009948:	6123      	str	r3, [r4, #16]
 800994a:	9b05      	ldr	r3, [sp, #20]
 800994c:	f023 0204 	bic.w	r2, r3, #4
 8009950:	6022      	str	r2, [r4, #0]
 8009952:	f04f 0900 	mov.w	r9, #0
 8009956:	9700      	str	r7, [sp, #0]
 8009958:	4633      	mov	r3, r6
 800995a:	aa0b      	add	r2, sp, #44	; 0x2c
 800995c:	4621      	mov	r1, r4
 800995e:	4628      	mov	r0, r5
 8009960:	f000 f9d8 	bl	8009d14 <_printf_common>
 8009964:	3001      	adds	r0, #1
 8009966:	f040 8090 	bne.w	8009a8a <_printf_float+0x1e2>
 800996a:	f04f 30ff 	mov.w	r0, #4294967295
 800996e:	b00d      	add	sp, #52	; 0x34
 8009970:	ecbd 8b02 	vpop	{d8}
 8009974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009978:	4642      	mov	r2, r8
 800997a:	464b      	mov	r3, r9
 800997c:	4640      	mov	r0, r8
 800997e:	4649      	mov	r1, r9
 8009980:	f7f7 f8fc 	bl	8000b7c <__aeabi_dcmpun>
 8009984:	b140      	cbz	r0, 8009998 <_printf_float+0xf0>
 8009986:	464b      	mov	r3, r9
 8009988:	2b00      	cmp	r3, #0
 800998a:	bfbc      	itt	lt
 800998c:	232d      	movlt	r3, #45	; 0x2d
 800998e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009992:	487f      	ldr	r0, [pc, #508]	; (8009b90 <_printf_float+0x2e8>)
 8009994:	4b7f      	ldr	r3, [pc, #508]	; (8009b94 <_printf_float+0x2ec>)
 8009996:	e7d1      	b.n	800993c <_printf_float+0x94>
 8009998:	6863      	ldr	r3, [r4, #4]
 800999a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800999e:	9206      	str	r2, [sp, #24]
 80099a0:	1c5a      	adds	r2, r3, #1
 80099a2:	d13f      	bne.n	8009a24 <_printf_float+0x17c>
 80099a4:	2306      	movs	r3, #6
 80099a6:	6063      	str	r3, [r4, #4]
 80099a8:	9b05      	ldr	r3, [sp, #20]
 80099aa:	6861      	ldr	r1, [r4, #4]
 80099ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80099b0:	2300      	movs	r3, #0
 80099b2:	9303      	str	r3, [sp, #12]
 80099b4:	ab0a      	add	r3, sp, #40	; 0x28
 80099b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80099ba:	ab09      	add	r3, sp, #36	; 0x24
 80099bc:	ec49 8b10 	vmov	d0, r8, r9
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	6022      	str	r2, [r4, #0]
 80099c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80099c8:	4628      	mov	r0, r5
 80099ca:	f7ff fecd 	bl	8009768 <__cvt>
 80099ce:	9b06      	ldr	r3, [sp, #24]
 80099d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099d2:	2b47      	cmp	r3, #71	; 0x47
 80099d4:	4680      	mov	r8, r0
 80099d6:	d108      	bne.n	80099ea <_printf_float+0x142>
 80099d8:	1cc8      	adds	r0, r1, #3
 80099da:	db02      	blt.n	80099e2 <_printf_float+0x13a>
 80099dc:	6863      	ldr	r3, [r4, #4]
 80099de:	4299      	cmp	r1, r3
 80099e0:	dd41      	ble.n	8009a66 <_printf_float+0x1be>
 80099e2:	f1ab 0b02 	sub.w	fp, fp, #2
 80099e6:	fa5f fb8b 	uxtb.w	fp, fp
 80099ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099ee:	d820      	bhi.n	8009a32 <_printf_float+0x18a>
 80099f0:	3901      	subs	r1, #1
 80099f2:	465a      	mov	r2, fp
 80099f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80099f8:	9109      	str	r1, [sp, #36]	; 0x24
 80099fa:	f7ff ff17 	bl	800982c <__exponent>
 80099fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a00:	1813      	adds	r3, r2, r0
 8009a02:	2a01      	cmp	r2, #1
 8009a04:	4681      	mov	r9, r0
 8009a06:	6123      	str	r3, [r4, #16]
 8009a08:	dc02      	bgt.n	8009a10 <_printf_float+0x168>
 8009a0a:	6822      	ldr	r2, [r4, #0]
 8009a0c:	07d2      	lsls	r2, r2, #31
 8009a0e:	d501      	bpl.n	8009a14 <_printf_float+0x16c>
 8009a10:	3301      	adds	r3, #1
 8009a12:	6123      	str	r3, [r4, #16]
 8009a14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d09c      	beq.n	8009956 <_printf_float+0xae>
 8009a1c:	232d      	movs	r3, #45	; 0x2d
 8009a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a22:	e798      	b.n	8009956 <_printf_float+0xae>
 8009a24:	9a06      	ldr	r2, [sp, #24]
 8009a26:	2a47      	cmp	r2, #71	; 0x47
 8009a28:	d1be      	bne.n	80099a8 <_printf_float+0x100>
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1bc      	bne.n	80099a8 <_printf_float+0x100>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e7b9      	b.n	80099a6 <_printf_float+0xfe>
 8009a32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a36:	d118      	bne.n	8009a6a <_printf_float+0x1c2>
 8009a38:	2900      	cmp	r1, #0
 8009a3a:	6863      	ldr	r3, [r4, #4]
 8009a3c:	dd0b      	ble.n	8009a56 <_printf_float+0x1ae>
 8009a3e:	6121      	str	r1, [r4, #16]
 8009a40:	b913      	cbnz	r3, 8009a48 <_printf_float+0x1a0>
 8009a42:	6822      	ldr	r2, [r4, #0]
 8009a44:	07d0      	lsls	r0, r2, #31
 8009a46:	d502      	bpl.n	8009a4e <_printf_float+0x1a6>
 8009a48:	3301      	adds	r3, #1
 8009a4a:	440b      	add	r3, r1
 8009a4c:	6123      	str	r3, [r4, #16]
 8009a4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a50:	f04f 0900 	mov.w	r9, #0
 8009a54:	e7de      	b.n	8009a14 <_printf_float+0x16c>
 8009a56:	b913      	cbnz	r3, 8009a5e <_printf_float+0x1b6>
 8009a58:	6822      	ldr	r2, [r4, #0]
 8009a5a:	07d2      	lsls	r2, r2, #31
 8009a5c:	d501      	bpl.n	8009a62 <_printf_float+0x1ba>
 8009a5e:	3302      	adds	r3, #2
 8009a60:	e7f4      	b.n	8009a4c <_printf_float+0x1a4>
 8009a62:	2301      	movs	r3, #1
 8009a64:	e7f2      	b.n	8009a4c <_printf_float+0x1a4>
 8009a66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a6c:	4299      	cmp	r1, r3
 8009a6e:	db05      	blt.n	8009a7c <_printf_float+0x1d4>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	6121      	str	r1, [r4, #16]
 8009a74:	07d8      	lsls	r0, r3, #31
 8009a76:	d5ea      	bpl.n	8009a4e <_printf_float+0x1a6>
 8009a78:	1c4b      	adds	r3, r1, #1
 8009a7a:	e7e7      	b.n	8009a4c <_printf_float+0x1a4>
 8009a7c:	2900      	cmp	r1, #0
 8009a7e:	bfd4      	ite	le
 8009a80:	f1c1 0202 	rsble	r2, r1, #2
 8009a84:	2201      	movgt	r2, #1
 8009a86:	4413      	add	r3, r2
 8009a88:	e7e0      	b.n	8009a4c <_printf_float+0x1a4>
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	055a      	lsls	r2, r3, #21
 8009a8e:	d407      	bmi.n	8009aa0 <_printf_float+0x1f8>
 8009a90:	6923      	ldr	r3, [r4, #16]
 8009a92:	4642      	mov	r2, r8
 8009a94:	4631      	mov	r1, r6
 8009a96:	4628      	mov	r0, r5
 8009a98:	47b8      	blx	r7
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	d12c      	bne.n	8009af8 <_printf_float+0x250>
 8009a9e:	e764      	b.n	800996a <_printf_float+0xc2>
 8009aa0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009aa4:	f240 80e0 	bls.w	8009c68 <_printf_float+0x3c0>
 8009aa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009aac:	2200      	movs	r2, #0
 8009aae:	2300      	movs	r3, #0
 8009ab0:	f7f7 f832 	bl	8000b18 <__aeabi_dcmpeq>
 8009ab4:	2800      	cmp	r0, #0
 8009ab6:	d034      	beq.n	8009b22 <_printf_float+0x27a>
 8009ab8:	4a37      	ldr	r2, [pc, #220]	; (8009b98 <_printf_float+0x2f0>)
 8009aba:	2301      	movs	r3, #1
 8009abc:	4631      	mov	r1, r6
 8009abe:	4628      	mov	r0, r5
 8009ac0:	47b8      	blx	r7
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	f43f af51 	beq.w	800996a <_printf_float+0xc2>
 8009ac8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009acc:	429a      	cmp	r2, r3
 8009ace:	db02      	blt.n	8009ad6 <_printf_float+0x22e>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	07d8      	lsls	r0, r3, #31
 8009ad4:	d510      	bpl.n	8009af8 <_printf_float+0x250>
 8009ad6:	ee18 3a10 	vmov	r3, s16
 8009ada:	4652      	mov	r2, sl
 8009adc:	4631      	mov	r1, r6
 8009ade:	4628      	mov	r0, r5
 8009ae0:	47b8      	blx	r7
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	f43f af41 	beq.w	800996a <_printf_float+0xc2>
 8009ae8:	f04f 0800 	mov.w	r8, #0
 8009aec:	f104 091a 	add.w	r9, r4, #26
 8009af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af2:	3b01      	subs	r3, #1
 8009af4:	4543      	cmp	r3, r8
 8009af6:	dc09      	bgt.n	8009b0c <_printf_float+0x264>
 8009af8:	6823      	ldr	r3, [r4, #0]
 8009afa:	079b      	lsls	r3, r3, #30
 8009afc:	f100 8105 	bmi.w	8009d0a <_printf_float+0x462>
 8009b00:	68e0      	ldr	r0, [r4, #12]
 8009b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b04:	4298      	cmp	r0, r3
 8009b06:	bfb8      	it	lt
 8009b08:	4618      	movlt	r0, r3
 8009b0a:	e730      	b.n	800996e <_printf_float+0xc6>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	464a      	mov	r2, r9
 8009b10:	4631      	mov	r1, r6
 8009b12:	4628      	mov	r0, r5
 8009b14:	47b8      	blx	r7
 8009b16:	3001      	adds	r0, #1
 8009b18:	f43f af27 	beq.w	800996a <_printf_float+0xc2>
 8009b1c:	f108 0801 	add.w	r8, r8, #1
 8009b20:	e7e6      	b.n	8009af0 <_printf_float+0x248>
 8009b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	dc39      	bgt.n	8009b9c <_printf_float+0x2f4>
 8009b28:	4a1b      	ldr	r2, [pc, #108]	; (8009b98 <_printf_float+0x2f0>)
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	4628      	mov	r0, r5
 8009b30:	47b8      	blx	r7
 8009b32:	3001      	adds	r0, #1
 8009b34:	f43f af19 	beq.w	800996a <_printf_float+0xc2>
 8009b38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	d102      	bne.n	8009b46 <_printf_float+0x29e>
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	07d9      	lsls	r1, r3, #31
 8009b44:	d5d8      	bpl.n	8009af8 <_printf_float+0x250>
 8009b46:	ee18 3a10 	vmov	r3, s16
 8009b4a:	4652      	mov	r2, sl
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	4628      	mov	r0, r5
 8009b50:	47b8      	blx	r7
 8009b52:	3001      	adds	r0, #1
 8009b54:	f43f af09 	beq.w	800996a <_printf_float+0xc2>
 8009b58:	f04f 0900 	mov.w	r9, #0
 8009b5c:	f104 0a1a 	add.w	sl, r4, #26
 8009b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b62:	425b      	negs	r3, r3
 8009b64:	454b      	cmp	r3, r9
 8009b66:	dc01      	bgt.n	8009b6c <_printf_float+0x2c4>
 8009b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b6a:	e792      	b.n	8009a92 <_printf_float+0x1ea>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	4652      	mov	r2, sl
 8009b70:	4631      	mov	r1, r6
 8009b72:	4628      	mov	r0, r5
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	f43f aef7 	beq.w	800996a <_printf_float+0xc2>
 8009b7c:	f109 0901 	add.w	r9, r9, #1
 8009b80:	e7ee      	b.n	8009b60 <_printf_float+0x2b8>
 8009b82:	bf00      	nop
 8009b84:	7fefffff 	.word	0x7fefffff
 8009b88:	0800e2d4 	.word	0x0800e2d4
 8009b8c:	0800e2d8 	.word	0x0800e2d8
 8009b90:	0800e2e0 	.word	0x0800e2e0
 8009b94:	0800e2dc 	.word	0x0800e2dc
 8009b98:	0800e2e4 	.word	0x0800e2e4
 8009b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	bfa8      	it	ge
 8009ba4:	461a      	movge	r2, r3
 8009ba6:	2a00      	cmp	r2, #0
 8009ba8:	4691      	mov	r9, r2
 8009baa:	dc37      	bgt.n	8009c1c <_printf_float+0x374>
 8009bac:	f04f 0b00 	mov.w	fp, #0
 8009bb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bb4:	f104 021a 	add.w	r2, r4, #26
 8009bb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bba:	9305      	str	r3, [sp, #20]
 8009bbc:	eba3 0309 	sub.w	r3, r3, r9
 8009bc0:	455b      	cmp	r3, fp
 8009bc2:	dc33      	bgt.n	8009c2c <_printf_float+0x384>
 8009bc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bc8:	429a      	cmp	r2, r3
 8009bca:	db3b      	blt.n	8009c44 <_printf_float+0x39c>
 8009bcc:	6823      	ldr	r3, [r4, #0]
 8009bce:	07da      	lsls	r2, r3, #31
 8009bd0:	d438      	bmi.n	8009c44 <_printf_float+0x39c>
 8009bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd4:	9a05      	ldr	r2, [sp, #20]
 8009bd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bd8:	1a9a      	subs	r2, r3, r2
 8009bda:	eba3 0901 	sub.w	r9, r3, r1
 8009bde:	4591      	cmp	r9, r2
 8009be0:	bfa8      	it	ge
 8009be2:	4691      	movge	r9, r2
 8009be4:	f1b9 0f00 	cmp.w	r9, #0
 8009be8:	dc35      	bgt.n	8009c56 <_printf_float+0x3ae>
 8009bea:	f04f 0800 	mov.w	r8, #0
 8009bee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bf2:	f104 0a1a 	add.w	sl, r4, #26
 8009bf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bfa:	1a9b      	subs	r3, r3, r2
 8009bfc:	eba3 0309 	sub.w	r3, r3, r9
 8009c00:	4543      	cmp	r3, r8
 8009c02:	f77f af79 	ble.w	8009af8 <_printf_float+0x250>
 8009c06:	2301      	movs	r3, #1
 8009c08:	4652      	mov	r2, sl
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	4628      	mov	r0, r5
 8009c0e:	47b8      	blx	r7
 8009c10:	3001      	adds	r0, #1
 8009c12:	f43f aeaa 	beq.w	800996a <_printf_float+0xc2>
 8009c16:	f108 0801 	add.w	r8, r8, #1
 8009c1a:	e7ec      	b.n	8009bf6 <_printf_float+0x34e>
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	4631      	mov	r1, r6
 8009c20:	4642      	mov	r2, r8
 8009c22:	4628      	mov	r0, r5
 8009c24:	47b8      	blx	r7
 8009c26:	3001      	adds	r0, #1
 8009c28:	d1c0      	bne.n	8009bac <_printf_float+0x304>
 8009c2a:	e69e      	b.n	800996a <_printf_float+0xc2>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	4631      	mov	r1, r6
 8009c30:	4628      	mov	r0, r5
 8009c32:	9205      	str	r2, [sp, #20]
 8009c34:	47b8      	blx	r7
 8009c36:	3001      	adds	r0, #1
 8009c38:	f43f ae97 	beq.w	800996a <_printf_float+0xc2>
 8009c3c:	9a05      	ldr	r2, [sp, #20]
 8009c3e:	f10b 0b01 	add.w	fp, fp, #1
 8009c42:	e7b9      	b.n	8009bb8 <_printf_float+0x310>
 8009c44:	ee18 3a10 	vmov	r3, s16
 8009c48:	4652      	mov	r2, sl
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	4628      	mov	r0, r5
 8009c4e:	47b8      	blx	r7
 8009c50:	3001      	adds	r0, #1
 8009c52:	d1be      	bne.n	8009bd2 <_printf_float+0x32a>
 8009c54:	e689      	b.n	800996a <_printf_float+0xc2>
 8009c56:	9a05      	ldr	r2, [sp, #20]
 8009c58:	464b      	mov	r3, r9
 8009c5a:	4442      	add	r2, r8
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4628      	mov	r0, r5
 8009c60:	47b8      	blx	r7
 8009c62:	3001      	adds	r0, #1
 8009c64:	d1c1      	bne.n	8009bea <_printf_float+0x342>
 8009c66:	e680      	b.n	800996a <_printf_float+0xc2>
 8009c68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c6a:	2a01      	cmp	r2, #1
 8009c6c:	dc01      	bgt.n	8009c72 <_printf_float+0x3ca>
 8009c6e:	07db      	lsls	r3, r3, #31
 8009c70:	d538      	bpl.n	8009ce4 <_printf_float+0x43c>
 8009c72:	2301      	movs	r3, #1
 8009c74:	4642      	mov	r2, r8
 8009c76:	4631      	mov	r1, r6
 8009c78:	4628      	mov	r0, r5
 8009c7a:	47b8      	blx	r7
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	f43f ae74 	beq.w	800996a <_printf_float+0xc2>
 8009c82:	ee18 3a10 	vmov	r3, s16
 8009c86:	4652      	mov	r2, sl
 8009c88:	4631      	mov	r1, r6
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	47b8      	blx	r7
 8009c8e:	3001      	adds	r0, #1
 8009c90:	f43f ae6b 	beq.w	800996a <_printf_float+0xc2>
 8009c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	f7f6 ff3c 	bl	8000b18 <__aeabi_dcmpeq>
 8009ca0:	b9d8      	cbnz	r0, 8009cda <_printf_float+0x432>
 8009ca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca4:	f108 0201 	add.w	r2, r8, #1
 8009ca8:	3b01      	subs	r3, #1
 8009caa:	4631      	mov	r1, r6
 8009cac:	4628      	mov	r0, r5
 8009cae:	47b8      	blx	r7
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d10e      	bne.n	8009cd2 <_printf_float+0x42a>
 8009cb4:	e659      	b.n	800996a <_printf_float+0xc2>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	4652      	mov	r2, sl
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	47b8      	blx	r7
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	f43f ae52 	beq.w	800996a <_printf_float+0xc2>
 8009cc6:	f108 0801 	add.w	r8, r8, #1
 8009cca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	4543      	cmp	r3, r8
 8009cd0:	dcf1      	bgt.n	8009cb6 <_printf_float+0x40e>
 8009cd2:	464b      	mov	r3, r9
 8009cd4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cd8:	e6dc      	b.n	8009a94 <_printf_float+0x1ec>
 8009cda:	f04f 0800 	mov.w	r8, #0
 8009cde:	f104 0a1a 	add.w	sl, r4, #26
 8009ce2:	e7f2      	b.n	8009cca <_printf_float+0x422>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	4642      	mov	r2, r8
 8009ce8:	e7df      	b.n	8009caa <_printf_float+0x402>
 8009cea:	2301      	movs	r3, #1
 8009cec:	464a      	mov	r2, r9
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	f43f ae38 	beq.w	800996a <_printf_float+0xc2>
 8009cfa:	f108 0801 	add.w	r8, r8, #1
 8009cfe:	68e3      	ldr	r3, [r4, #12]
 8009d00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d02:	1a5b      	subs	r3, r3, r1
 8009d04:	4543      	cmp	r3, r8
 8009d06:	dcf0      	bgt.n	8009cea <_printf_float+0x442>
 8009d08:	e6fa      	b.n	8009b00 <_printf_float+0x258>
 8009d0a:	f04f 0800 	mov.w	r8, #0
 8009d0e:	f104 0919 	add.w	r9, r4, #25
 8009d12:	e7f4      	b.n	8009cfe <_printf_float+0x456>

08009d14 <_printf_common>:
 8009d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d18:	4616      	mov	r6, r2
 8009d1a:	4699      	mov	r9, r3
 8009d1c:	688a      	ldr	r2, [r1, #8]
 8009d1e:	690b      	ldr	r3, [r1, #16]
 8009d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d24:	4293      	cmp	r3, r2
 8009d26:	bfb8      	it	lt
 8009d28:	4613      	movlt	r3, r2
 8009d2a:	6033      	str	r3, [r6, #0]
 8009d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d30:	4607      	mov	r7, r0
 8009d32:	460c      	mov	r4, r1
 8009d34:	b10a      	cbz	r2, 8009d3a <_printf_common+0x26>
 8009d36:	3301      	adds	r3, #1
 8009d38:	6033      	str	r3, [r6, #0]
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	0699      	lsls	r1, r3, #26
 8009d3e:	bf42      	ittt	mi
 8009d40:	6833      	ldrmi	r3, [r6, #0]
 8009d42:	3302      	addmi	r3, #2
 8009d44:	6033      	strmi	r3, [r6, #0]
 8009d46:	6825      	ldr	r5, [r4, #0]
 8009d48:	f015 0506 	ands.w	r5, r5, #6
 8009d4c:	d106      	bne.n	8009d5c <_printf_common+0x48>
 8009d4e:	f104 0a19 	add.w	sl, r4, #25
 8009d52:	68e3      	ldr	r3, [r4, #12]
 8009d54:	6832      	ldr	r2, [r6, #0]
 8009d56:	1a9b      	subs	r3, r3, r2
 8009d58:	42ab      	cmp	r3, r5
 8009d5a:	dc26      	bgt.n	8009daa <_printf_common+0x96>
 8009d5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d60:	1e13      	subs	r3, r2, #0
 8009d62:	6822      	ldr	r2, [r4, #0]
 8009d64:	bf18      	it	ne
 8009d66:	2301      	movne	r3, #1
 8009d68:	0692      	lsls	r2, r2, #26
 8009d6a:	d42b      	bmi.n	8009dc4 <_printf_common+0xb0>
 8009d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d70:	4649      	mov	r1, r9
 8009d72:	4638      	mov	r0, r7
 8009d74:	47c0      	blx	r8
 8009d76:	3001      	adds	r0, #1
 8009d78:	d01e      	beq.n	8009db8 <_printf_common+0xa4>
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	68e5      	ldr	r5, [r4, #12]
 8009d7e:	6832      	ldr	r2, [r6, #0]
 8009d80:	f003 0306 	and.w	r3, r3, #6
 8009d84:	2b04      	cmp	r3, #4
 8009d86:	bf08      	it	eq
 8009d88:	1aad      	subeq	r5, r5, r2
 8009d8a:	68a3      	ldr	r3, [r4, #8]
 8009d8c:	6922      	ldr	r2, [r4, #16]
 8009d8e:	bf0c      	ite	eq
 8009d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d94:	2500      	movne	r5, #0
 8009d96:	4293      	cmp	r3, r2
 8009d98:	bfc4      	itt	gt
 8009d9a:	1a9b      	subgt	r3, r3, r2
 8009d9c:	18ed      	addgt	r5, r5, r3
 8009d9e:	2600      	movs	r6, #0
 8009da0:	341a      	adds	r4, #26
 8009da2:	42b5      	cmp	r5, r6
 8009da4:	d11a      	bne.n	8009ddc <_printf_common+0xc8>
 8009da6:	2000      	movs	r0, #0
 8009da8:	e008      	b.n	8009dbc <_printf_common+0xa8>
 8009daa:	2301      	movs	r3, #1
 8009dac:	4652      	mov	r2, sl
 8009dae:	4649      	mov	r1, r9
 8009db0:	4638      	mov	r0, r7
 8009db2:	47c0      	blx	r8
 8009db4:	3001      	adds	r0, #1
 8009db6:	d103      	bne.n	8009dc0 <_printf_common+0xac>
 8009db8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc0:	3501      	adds	r5, #1
 8009dc2:	e7c6      	b.n	8009d52 <_printf_common+0x3e>
 8009dc4:	18e1      	adds	r1, r4, r3
 8009dc6:	1c5a      	adds	r2, r3, #1
 8009dc8:	2030      	movs	r0, #48	; 0x30
 8009dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dce:	4422      	add	r2, r4
 8009dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009dd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dd8:	3302      	adds	r3, #2
 8009dda:	e7c7      	b.n	8009d6c <_printf_common+0x58>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	4622      	mov	r2, r4
 8009de0:	4649      	mov	r1, r9
 8009de2:	4638      	mov	r0, r7
 8009de4:	47c0      	blx	r8
 8009de6:	3001      	adds	r0, #1
 8009de8:	d0e6      	beq.n	8009db8 <_printf_common+0xa4>
 8009dea:	3601      	adds	r6, #1
 8009dec:	e7d9      	b.n	8009da2 <_printf_common+0x8e>
	...

08009df0 <_printf_i>:
 8009df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009df4:	7e0f      	ldrb	r7, [r1, #24]
 8009df6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009df8:	2f78      	cmp	r7, #120	; 0x78
 8009dfa:	4691      	mov	r9, r2
 8009dfc:	4680      	mov	r8, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	469a      	mov	sl, r3
 8009e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e06:	d807      	bhi.n	8009e18 <_printf_i+0x28>
 8009e08:	2f62      	cmp	r7, #98	; 0x62
 8009e0a:	d80a      	bhi.n	8009e22 <_printf_i+0x32>
 8009e0c:	2f00      	cmp	r7, #0
 8009e0e:	f000 80d8 	beq.w	8009fc2 <_printf_i+0x1d2>
 8009e12:	2f58      	cmp	r7, #88	; 0x58
 8009e14:	f000 80a3 	beq.w	8009f5e <_printf_i+0x16e>
 8009e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e20:	e03a      	b.n	8009e98 <_printf_i+0xa8>
 8009e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e26:	2b15      	cmp	r3, #21
 8009e28:	d8f6      	bhi.n	8009e18 <_printf_i+0x28>
 8009e2a:	a101      	add	r1, pc, #4	; (adr r1, 8009e30 <_printf_i+0x40>)
 8009e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e30:	08009e89 	.word	0x08009e89
 8009e34:	08009e9d 	.word	0x08009e9d
 8009e38:	08009e19 	.word	0x08009e19
 8009e3c:	08009e19 	.word	0x08009e19
 8009e40:	08009e19 	.word	0x08009e19
 8009e44:	08009e19 	.word	0x08009e19
 8009e48:	08009e9d 	.word	0x08009e9d
 8009e4c:	08009e19 	.word	0x08009e19
 8009e50:	08009e19 	.word	0x08009e19
 8009e54:	08009e19 	.word	0x08009e19
 8009e58:	08009e19 	.word	0x08009e19
 8009e5c:	08009fa9 	.word	0x08009fa9
 8009e60:	08009ecd 	.word	0x08009ecd
 8009e64:	08009f8b 	.word	0x08009f8b
 8009e68:	08009e19 	.word	0x08009e19
 8009e6c:	08009e19 	.word	0x08009e19
 8009e70:	08009fcb 	.word	0x08009fcb
 8009e74:	08009e19 	.word	0x08009e19
 8009e78:	08009ecd 	.word	0x08009ecd
 8009e7c:	08009e19 	.word	0x08009e19
 8009e80:	08009e19 	.word	0x08009e19
 8009e84:	08009f93 	.word	0x08009f93
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	1d1a      	adds	r2, r3, #4
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	602a      	str	r2, [r5, #0]
 8009e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e0a3      	b.n	8009fe4 <_printf_i+0x1f4>
 8009e9c:	6820      	ldr	r0, [r4, #0]
 8009e9e:	6829      	ldr	r1, [r5, #0]
 8009ea0:	0606      	lsls	r6, r0, #24
 8009ea2:	f101 0304 	add.w	r3, r1, #4
 8009ea6:	d50a      	bpl.n	8009ebe <_printf_i+0xce>
 8009ea8:	680e      	ldr	r6, [r1, #0]
 8009eaa:	602b      	str	r3, [r5, #0]
 8009eac:	2e00      	cmp	r6, #0
 8009eae:	da03      	bge.n	8009eb8 <_printf_i+0xc8>
 8009eb0:	232d      	movs	r3, #45	; 0x2d
 8009eb2:	4276      	negs	r6, r6
 8009eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eb8:	485e      	ldr	r0, [pc, #376]	; (800a034 <_printf_i+0x244>)
 8009eba:	230a      	movs	r3, #10
 8009ebc:	e019      	b.n	8009ef2 <_printf_i+0x102>
 8009ebe:	680e      	ldr	r6, [r1, #0]
 8009ec0:	602b      	str	r3, [r5, #0]
 8009ec2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ec6:	bf18      	it	ne
 8009ec8:	b236      	sxthne	r6, r6
 8009eca:	e7ef      	b.n	8009eac <_printf_i+0xbc>
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	6820      	ldr	r0, [r4, #0]
 8009ed0:	1d19      	adds	r1, r3, #4
 8009ed2:	6029      	str	r1, [r5, #0]
 8009ed4:	0601      	lsls	r1, r0, #24
 8009ed6:	d501      	bpl.n	8009edc <_printf_i+0xec>
 8009ed8:	681e      	ldr	r6, [r3, #0]
 8009eda:	e002      	b.n	8009ee2 <_printf_i+0xf2>
 8009edc:	0646      	lsls	r6, r0, #25
 8009ede:	d5fb      	bpl.n	8009ed8 <_printf_i+0xe8>
 8009ee0:	881e      	ldrh	r6, [r3, #0]
 8009ee2:	4854      	ldr	r0, [pc, #336]	; (800a034 <_printf_i+0x244>)
 8009ee4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ee6:	bf0c      	ite	eq
 8009ee8:	2308      	moveq	r3, #8
 8009eea:	230a      	movne	r3, #10
 8009eec:	2100      	movs	r1, #0
 8009eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ef2:	6865      	ldr	r5, [r4, #4]
 8009ef4:	60a5      	str	r5, [r4, #8]
 8009ef6:	2d00      	cmp	r5, #0
 8009ef8:	bfa2      	ittt	ge
 8009efa:	6821      	ldrge	r1, [r4, #0]
 8009efc:	f021 0104 	bicge.w	r1, r1, #4
 8009f00:	6021      	strge	r1, [r4, #0]
 8009f02:	b90e      	cbnz	r6, 8009f08 <_printf_i+0x118>
 8009f04:	2d00      	cmp	r5, #0
 8009f06:	d04d      	beq.n	8009fa4 <_printf_i+0x1b4>
 8009f08:	4615      	mov	r5, r2
 8009f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8009f12:	5dc7      	ldrb	r7, [r0, r7]
 8009f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f18:	4637      	mov	r7, r6
 8009f1a:	42bb      	cmp	r3, r7
 8009f1c:	460e      	mov	r6, r1
 8009f1e:	d9f4      	bls.n	8009f0a <_printf_i+0x11a>
 8009f20:	2b08      	cmp	r3, #8
 8009f22:	d10b      	bne.n	8009f3c <_printf_i+0x14c>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	07de      	lsls	r6, r3, #31
 8009f28:	d508      	bpl.n	8009f3c <_printf_i+0x14c>
 8009f2a:	6923      	ldr	r3, [r4, #16]
 8009f2c:	6861      	ldr	r1, [r4, #4]
 8009f2e:	4299      	cmp	r1, r3
 8009f30:	bfde      	ittt	le
 8009f32:	2330      	movle	r3, #48	; 0x30
 8009f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f38:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f3c:	1b52      	subs	r2, r2, r5
 8009f3e:	6122      	str	r2, [r4, #16]
 8009f40:	f8cd a000 	str.w	sl, [sp]
 8009f44:	464b      	mov	r3, r9
 8009f46:	aa03      	add	r2, sp, #12
 8009f48:	4621      	mov	r1, r4
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	f7ff fee2 	bl	8009d14 <_printf_common>
 8009f50:	3001      	adds	r0, #1
 8009f52:	d14c      	bne.n	8009fee <_printf_i+0x1fe>
 8009f54:	f04f 30ff 	mov.w	r0, #4294967295
 8009f58:	b004      	add	sp, #16
 8009f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5e:	4835      	ldr	r0, [pc, #212]	; (800a034 <_printf_i+0x244>)
 8009f60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009f64:	6829      	ldr	r1, [r5, #0]
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f6c:	6029      	str	r1, [r5, #0]
 8009f6e:	061d      	lsls	r5, r3, #24
 8009f70:	d514      	bpl.n	8009f9c <_printf_i+0x1ac>
 8009f72:	07df      	lsls	r7, r3, #31
 8009f74:	bf44      	itt	mi
 8009f76:	f043 0320 	orrmi.w	r3, r3, #32
 8009f7a:	6023      	strmi	r3, [r4, #0]
 8009f7c:	b91e      	cbnz	r6, 8009f86 <_printf_i+0x196>
 8009f7e:	6823      	ldr	r3, [r4, #0]
 8009f80:	f023 0320 	bic.w	r3, r3, #32
 8009f84:	6023      	str	r3, [r4, #0]
 8009f86:	2310      	movs	r3, #16
 8009f88:	e7b0      	b.n	8009eec <_printf_i+0xfc>
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	f043 0320 	orr.w	r3, r3, #32
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	2378      	movs	r3, #120	; 0x78
 8009f94:	4828      	ldr	r0, [pc, #160]	; (800a038 <_printf_i+0x248>)
 8009f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f9a:	e7e3      	b.n	8009f64 <_printf_i+0x174>
 8009f9c:	0659      	lsls	r1, r3, #25
 8009f9e:	bf48      	it	mi
 8009fa0:	b2b6      	uxthmi	r6, r6
 8009fa2:	e7e6      	b.n	8009f72 <_printf_i+0x182>
 8009fa4:	4615      	mov	r5, r2
 8009fa6:	e7bb      	b.n	8009f20 <_printf_i+0x130>
 8009fa8:	682b      	ldr	r3, [r5, #0]
 8009faa:	6826      	ldr	r6, [r4, #0]
 8009fac:	6961      	ldr	r1, [r4, #20]
 8009fae:	1d18      	adds	r0, r3, #4
 8009fb0:	6028      	str	r0, [r5, #0]
 8009fb2:	0635      	lsls	r5, r6, #24
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	d501      	bpl.n	8009fbc <_printf_i+0x1cc>
 8009fb8:	6019      	str	r1, [r3, #0]
 8009fba:	e002      	b.n	8009fc2 <_printf_i+0x1d2>
 8009fbc:	0670      	lsls	r0, r6, #25
 8009fbe:	d5fb      	bpl.n	8009fb8 <_printf_i+0x1c8>
 8009fc0:	8019      	strh	r1, [r3, #0]
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	6123      	str	r3, [r4, #16]
 8009fc6:	4615      	mov	r5, r2
 8009fc8:	e7ba      	b.n	8009f40 <_printf_i+0x150>
 8009fca:	682b      	ldr	r3, [r5, #0]
 8009fcc:	1d1a      	adds	r2, r3, #4
 8009fce:	602a      	str	r2, [r5, #0]
 8009fd0:	681d      	ldr	r5, [r3, #0]
 8009fd2:	6862      	ldr	r2, [r4, #4]
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f7f6 f92a 	bl	8000230 <memchr>
 8009fdc:	b108      	cbz	r0, 8009fe2 <_printf_i+0x1f2>
 8009fde:	1b40      	subs	r0, r0, r5
 8009fe0:	6060      	str	r0, [r4, #4]
 8009fe2:	6863      	ldr	r3, [r4, #4]
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fec:	e7a8      	b.n	8009f40 <_printf_i+0x150>
 8009fee:	6923      	ldr	r3, [r4, #16]
 8009ff0:	462a      	mov	r2, r5
 8009ff2:	4649      	mov	r1, r9
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	47d0      	blx	sl
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	d0ab      	beq.n	8009f54 <_printf_i+0x164>
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	079b      	lsls	r3, r3, #30
 800a000:	d413      	bmi.n	800a02a <_printf_i+0x23a>
 800a002:	68e0      	ldr	r0, [r4, #12]
 800a004:	9b03      	ldr	r3, [sp, #12]
 800a006:	4298      	cmp	r0, r3
 800a008:	bfb8      	it	lt
 800a00a:	4618      	movlt	r0, r3
 800a00c:	e7a4      	b.n	8009f58 <_printf_i+0x168>
 800a00e:	2301      	movs	r3, #1
 800a010:	4632      	mov	r2, r6
 800a012:	4649      	mov	r1, r9
 800a014:	4640      	mov	r0, r8
 800a016:	47d0      	blx	sl
 800a018:	3001      	adds	r0, #1
 800a01a:	d09b      	beq.n	8009f54 <_printf_i+0x164>
 800a01c:	3501      	adds	r5, #1
 800a01e:	68e3      	ldr	r3, [r4, #12]
 800a020:	9903      	ldr	r1, [sp, #12]
 800a022:	1a5b      	subs	r3, r3, r1
 800a024:	42ab      	cmp	r3, r5
 800a026:	dcf2      	bgt.n	800a00e <_printf_i+0x21e>
 800a028:	e7eb      	b.n	800a002 <_printf_i+0x212>
 800a02a:	2500      	movs	r5, #0
 800a02c:	f104 0619 	add.w	r6, r4, #25
 800a030:	e7f5      	b.n	800a01e <_printf_i+0x22e>
 800a032:	bf00      	nop
 800a034:	0800e2e6 	.word	0x0800e2e6
 800a038:	0800e2f7 	.word	0x0800e2f7

0800a03c <_scanf_float>:
 800a03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a040:	b087      	sub	sp, #28
 800a042:	4617      	mov	r7, r2
 800a044:	9303      	str	r3, [sp, #12]
 800a046:	688b      	ldr	r3, [r1, #8]
 800a048:	1e5a      	subs	r2, r3, #1
 800a04a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a04e:	bf83      	ittte	hi
 800a050:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a054:	195b      	addhi	r3, r3, r5
 800a056:	9302      	strhi	r3, [sp, #8]
 800a058:	2300      	movls	r3, #0
 800a05a:	bf86      	itte	hi
 800a05c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a060:	608b      	strhi	r3, [r1, #8]
 800a062:	9302      	strls	r3, [sp, #8]
 800a064:	680b      	ldr	r3, [r1, #0]
 800a066:	468b      	mov	fp, r1
 800a068:	2500      	movs	r5, #0
 800a06a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a06e:	f84b 3b1c 	str.w	r3, [fp], #28
 800a072:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a076:	4680      	mov	r8, r0
 800a078:	460c      	mov	r4, r1
 800a07a:	465e      	mov	r6, fp
 800a07c:	46aa      	mov	sl, r5
 800a07e:	46a9      	mov	r9, r5
 800a080:	9501      	str	r5, [sp, #4]
 800a082:	68a2      	ldr	r2, [r4, #8]
 800a084:	b152      	cbz	r2, 800a09c <_scanf_float+0x60>
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	2b4e      	cmp	r3, #78	; 0x4e
 800a08c:	d864      	bhi.n	800a158 <_scanf_float+0x11c>
 800a08e:	2b40      	cmp	r3, #64	; 0x40
 800a090:	d83c      	bhi.n	800a10c <_scanf_float+0xd0>
 800a092:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a096:	b2c8      	uxtb	r0, r1
 800a098:	280e      	cmp	r0, #14
 800a09a:	d93a      	bls.n	800a112 <_scanf_float+0xd6>
 800a09c:	f1b9 0f00 	cmp.w	r9, #0
 800a0a0:	d003      	beq.n	800a0aa <_scanf_float+0x6e>
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0a8:	6023      	str	r3, [r4, #0]
 800a0aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0ae:	f1ba 0f01 	cmp.w	sl, #1
 800a0b2:	f200 8113 	bhi.w	800a2dc <_scanf_float+0x2a0>
 800a0b6:	455e      	cmp	r6, fp
 800a0b8:	f200 8105 	bhi.w	800a2c6 <_scanf_float+0x28a>
 800a0bc:	2501      	movs	r5, #1
 800a0be:	4628      	mov	r0, r5
 800a0c0:	b007      	add	sp, #28
 800a0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a0ca:	2a0d      	cmp	r2, #13
 800a0cc:	d8e6      	bhi.n	800a09c <_scanf_float+0x60>
 800a0ce:	a101      	add	r1, pc, #4	; (adr r1, 800a0d4 <_scanf_float+0x98>)
 800a0d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a0d4:	0800a213 	.word	0x0800a213
 800a0d8:	0800a09d 	.word	0x0800a09d
 800a0dc:	0800a09d 	.word	0x0800a09d
 800a0e0:	0800a09d 	.word	0x0800a09d
 800a0e4:	0800a273 	.word	0x0800a273
 800a0e8:	0800a24b 	.word	0x0800a24b
 800a0ec:	0800a09d 	.word	0x0800a09d
 800a0f0:	0800a09d 	.word	0x0800a09d
 800a0f4:	0800a221 	.word	0x0800a221
 800a0f8:	0800a09d 	.word	0x0800a09d
 800a0fc:	0800a09d 	.word	0x0800a09d
 800a100:	0800a09d 	.word	0x0800a09d
 800a104:	0800a09d 	.word	0x0800a09d
 800a108:	0800a1d9 	.word	0x0800a1d9
 800a10c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a110:	e7db      	b.n	800a0ca <_scanf_float+0x8e>
 800a112:	290e      	cmp	r1, #14
 800a114:	d8c2      	bhi.n	800a09c <_scanf_float+0x60>
 800a116:	a001      	add	r0, pc, #4	; (adr r0, 800a11c <_scanf_float+0xe0>)
 800a118:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a11c:	0800a1cb 	.word	0x0800a1cb
 800a120:	0800a09d 	.word	0x0800a09d
 800a124:	0800a1cb 	.word	0x0800a1cb
 800a128:	0800a25f 	.word	0x0800a25f
 800a12c:	0800a09d 	.word	0x0800a09d
 800a130:	0800a179 	.word	0x0800a179
 800a134:	0800a1b5 	.word	0x0800a1b5
 800a138:	0800a1b5 	.word	0x0800a1b5
 800a13c:	0800a1b5 	.word	0x0800a1b5
 800a140:	0800a1b5 	.word	0x0800a1b5
 800a144:	0800a1b5 	.word	0x0800a1b5
 800a148:	0800a1b5 	.word	0x0800a1b5
 800a14c:	0800a1b5 	.word	0x0800a1b5
 800a150:	0800a1b5 	.word	0x0800a1b5
 800a154:	0800a1b5 	.word	0x0800a1b5
 800a158:	2b6e      	cmp	r3, #110	; 0x6e
 800a15a:	d809      	bhi.n	800a170 <_scanf_float+0x134>
 800a15c:	2b60      	cmp	r3, #96	; 0x60
 800a15e:	d8b2      	bhi.n	800a0c6 <_scanf_float+0x8a>
 800a160:	2b54      	cmp	r3, #84	; 0x54
 800a162:	d077      	beq.n	800a254 <_scanf_float+0x218>
 800a164:	2b59      	cmp	r3, #89	; 0x59
 800a166:	d199      	bne.n	800a09c <_scanf_float+0x60>
 800a168:	2d07      	cmp	r5, #7
 800a16a:	d197      	bne.n	800a09c <_scanf_float+0x60>
 800a16c:	2508      	movs	r5, #8
 800a16e:	e029      	b.n	800a1c4 <_scanf_float+0x188>
 800a170:	2b74      	cmp	r3, #116	; 0x74
 800a172:	d06f      	beq.n	800a254 <_scanf_float+0x218>
 800a174:	2b79      	cmp	r3, #121	; 0x79
 800a176:	e7f6      	b.n	800a166 <_scanf_float+0x12a>
 800a178:	6821      	ldr	r1, [r4, #0]
 800a17a:	05c8      	lsls	r0, r1, #23
 800a17c:	d51a      	bpl.n	800a1b4 <_scanf_float+0x178>
 800a17e:	9b02      	ldr	r3, [sp, #8]
 800a180:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a184:	6021      	str	r1, [r4, #0]
 800a186:	f109 0901 	add.w	r9, r9, #1
 800a18a:	b11b      	cbz	r3, 800a194 <_scanf_float+0x158>
 800a18c:	3b01      	subs	r3, #1
 800a18e:	3201      	adds	r2, #1
 800a190:	9302      	str	r3, [sp, #8]
 800a192:	60a2      	str	r2, [r4, #8]
 800a194:	68a3      	ldr	r3, [r4, #8]
 800a196:	3b01      	subs	r3, #1
 800a198:	60a3      	str	r3, [r4, #8]
 800a19a:	6923      	ldr	r3, [r4, #16]
 800a19c:	3301      	adds	r3, #1
 800a19e:	6123      	str	r3, [r4, #16]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	607b      	str	r3, [r7, #4]
 800a1a8:	f340 8084 	ble.w	800a2b4 <_scanf_float+0x278>
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	603b      	str	r3, [r7, #0]
 800a1b2:	e766      	b.n	800a082 <_scanf_float+0x46>
 800a1b4:	eb1a 0f05 	cmn.w	sl, r5
 800a1b8:	f47f af70 	bne.w	800a09c <_scanf_float+0x60>
 800a1bc:	6822      	ldr	r2, [r4, #0]
 800a1be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a1c2:	6022      	str	r2, [r4, #0]
 800a1c4:	f806 3b01 	strb.w	r3, [r6], #1
 800a1c8:	e7e4      	b.n	800a194 <_scanf_float+0x158>
 800a1ca:	6822      	ldr	r2, [r4, #0]
 800a1cc:	0610      	lsls	r0, r2, #24
 800a1ce:	f57f af65 	bpl.w	800a09c <_scanf_float+0x60>
 800a1d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1d6:	e7f4      	b.n	800a1c2 <_scanf_float+0x186>
 800a1d8:	f1ba 0f00 	cmp.w	sl, #0
 800a1dc:	d10e      	bne.n	800a1fc <_scanf_float+0x1c0>
 800a1de:	f1b9 0f00 	cmp.w	r9, #0
 800a1e2:	d10e      	bne.n	800a202 <_scanf_float+0x1c6>
 800a1e4:	6822      	ldr	r2, [r4, #0]
 800a1e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a1ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a1ee:	d108      	bne.n	800a202 <_scanf_float+0x1c6>
 800a1f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1f4:	6022      	str	r2, [r4, #0]
 800a1f6:	f04f 0a01 	mov.w	sl, #1
 800a1fa:	e7e3      	b.n	800a1c4 <_scanf_float+0x188>
 800a1fc:	f1ba 0f02 	cmp.w	sl, #2
 800a200:	d055      	beq.n	800a2ae <_scanf_float+0x272>
 800a202:	2d01      	cmp	r5, #1
 800a204:	d002      	beq.n	800a20c <_scanf_float+0x1d0>
 800a206:	2d04      	cmp	r5, #4
 800a208:	f47f af48 	bne.w	800a09c <_scanf_float+0x60>
 800a20c:	3501      	adds	r5, #1
 800a20e:	b2ed      	uxtb	r5, r5
 800a210:	e7d8      	b.n	800a1c4 <_scanf_float+0x188>
 800a212:	f1ba 0f01 	cmp.w	sl, #1
 800a216:	f47f af41 	bne.w	800a09c <_scanf_float+0x60>
 800a21a:	f04f 0a02 	mov.w	sl, #2
 800a21e:	e7d1      	b.n	800a1c4 <_scanf_float+0x188>
 800a220:	b97d      	cbnz	r5, 800a242 <_scanf_float+0x206>
 800a222:	f1b9 0f00 	cmp.w	r9, #0
 800a226:	f47f af3c 	bne.w	800a0a2 <_scanf_float+0x66>
 800a22a:	6822      	ldr	r2, [r4, #0]
 800a22c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a230:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a234:	f47f af39 	bne.w	800a0aa <_scanf_float+0x6e>
 800a238:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a23c:	6022      	str	r2, [r4, #0]
 800a23e:	2501      	movs	r5, #1
 800a240:	e7c0      	b.n	800a1c4 <_scanf_float+0x188>
 800a242:	2d03      	cmp	r5, #3
 800a244:	d0e2      	beq.n	800a20c <_scanf_float+0x1d0>
 800a246:	2d05      	cmp	r5, #5
 800a248:	e7de      	b.n	800a208 <_scanf_float+0x1cc>
 800a24a:	2d02      	cmp	r5, #2
 800a24c:	f47f af26 	bne.w	800a09c <_scanf_float+0x60>
 800a250:	2503      	movs	r5, #3
 800a252:	e7b7      	b.n	800a1c4 <_scanf_float+0x188>
 800a254:	2d06      	cmp	r5, #6
 800a256:	f47f af21 	bne.w	800a09c <_scanf_float+0x60>
 800a25a:	2507      	movs	r5, #7
 800a25c:	e7b2      	b.n	800a1c4 <_scanf_float+0x188>
 800a25e:	6822      	ldr	r2, [r4, #0]
 800a260:	0591      	lsls	r1, r2, #22
 800a262:	f57f af1b 	bpl.w	800a09c <_scanf_float+0x60>
 800a266:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a26a:	6022      	str	r2, [r4, #0]
 800a26c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a270:	e7a8      	b.n	800a1c4 <_scanf_float+0x188>
 800a272:	6822      	ldr	r2, [r4, #0]
 800a274:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a278:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a27c:	d006      	beq.n	800a28c <_scanf_float+0x250>
 800a27e:	0550      	lsls	r0, r2, #21
 800a280:	f57f af0c 	bpl.w	800a09c <_scanf_float+0x60>
 800a284:	f1b9 0f00 	cmp.w	r9, #0
 800a288:	f43f af0f 	beq.w	800a0aa <_scanf_float+0x6e>
 800a28c:	0591      	lsls	r1, r2, #22
 800a28e:	bf58      	it	pl
 800a290:	9901      	ldrpl	r1, [sp, #4]
 800a292:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a296:	bf58      	it	pl
 800a298:	eba9 0101 	subpl.w	r1, r9, r1
 800a29c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a2a0:	bf58      	it	pl
 800a2a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2a6:	6022      	str	r2, [r4, #0]
 800a2a8:	f04f 0900 	mov.w	r9, #0
 800a2ac:	e78a      	b.n	800a1c4 <_scanf_float+0x188>
 800a2ae:	f04f 0a03 	mov.w	sl, #3
 800a2b2:	e787      	b.n	800a1c4 <_scanf_float+0x188>
 800a2b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a2b8:	4639      	mov	r1, r7
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	4798      	blx	r3
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	f43f aedf 	beq.w	800a082 <_scanf_float+0x46>
 800a2c4:	e6ea      	b.n	800a09c <_scanf_float+0x60>
 800a2c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2ce:	463a      	mov	r2, r7
 800a2d0:	4640      	mov	r0, r8
 800a2d2:	4798      	blx	r3
 800a2d4:	6923      	ldr	r3, [r4, #16]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	6123      	str	r3, [r4, #16]
 800a2da:	e6ec      	b.n	800a0b6 <_scanf_float+0x7a>
 800a2dc:	1e6b      	subs	r3, r5, #1
 800a2de:	2b06      	cmp	r3, #6
 800a2e0:	d825      	bhi.n	800a32e <_scanf_float+0x2f2>
 800a2e2:	2d02      	cmp	r5, #2
 800a2e4:	d836      	bhi.n	800a354 <_scanf_float+0x318>
 800a2e6:	455e      	cmp	r6, fp
 800a2e8:	f67f aee8 	bls.w	800a0bc <_scanf_float+0x80>
 800a2ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2f4:	463a      	mov	r2, r7
 800a2f6:	4640      	mov	r0, r8
 800a2f8:	4798      	blx	r3
 800a2fa:	6923      	ldr	r3, [r4, #16]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	6123      	str	r3, [r4, #16]
 800a300:	e7f1      	b.n	800a2e6 <_scanf_float+0x2aa>
 800a302:	9802      	ldr	r0, [sp, #8]
 800a304:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a308:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a30c:	9002      	str	r0, [sp, #8]
 800a30e:	463a      	mov	r2, r7
 800a310:	4640      	mov	r0, r8
 800a312:	4798      	blx	r3
 800a314:	6923      	ldr	r3, [r4, #16]
 800a316:	3b01      	subs	r3, #1
 800a318:	6123      	str	r3, [r4, #16]
 800a31a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a31e:	fa5f fa8a 	uxtb.w	sl, sl
 800a322:	f1ba 0f02 	cmp.w	sl, #2
 800a326:	d1ec      	bne.n	800a302 <_scanf_float+0x2c6>
 800a328:	3d03      	subs	r5, #3
 800a32a:	b2ed      	uxtb	r5, r5
 800a32c:	1b76      	subs	r6, r6, r5
 800a32e:	6823      	ldr	r3, [r4, #0]
 800a330:	05da      	lsls	r2, r3, #23
 800a332:	d52f      	bpl.n	800a394 <_scanf_float+0x358>
 800a334:	055b      	lsls	r3, r3, #21
 800a336:	d510      	bpl.n	800a35a <_scanf_float+0x31e>
 800a338:	455e      	cmp	r6, fp
 800a33a:	f67f aebf 	bls.w	800a0bc <_scanf_float+0x80>
 800a33e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a342:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a346:	463a      	mov	r2, r7
 800a348:	4640      	mov	r0, r8
 800a34a:	4798      	blx	r3
 800a34c:	6923      	ldr	r3, [r4, #16]
 800a34e:	3b01      	subs	r3, #1
 800a350:	6123      	str	r3, [r4, #16]
 800a352:	e7f1      	b.n	800a338 <_scanf_float+0x2fc>
 800a354:	46aa      	mov	sl, r5
 800a356:	9602      	str	r6, [sp, #8]
 800a358:	e7df      	b.n	800a31a <_scanf_float+0x2de>
 800a35a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a35e:	6923      	ldr	r3, [r4, #16]
 800a360:	2965      	cmp	r1, #101	; 0x65
 800a362:	f103 33ff 	add.w	r3, r3, #4294967295
 800a366:	f106 35ff 	add.w	r5, r6, #4294967295
 800a36a:	6123      	str	r3, [r4, #16]
 800a36c:	d00c      	beq.n	800a388 <_scanf_float+0x34c>
 800a36e:	2945      	cmp	r1, #69	; 0x45
 800a370:	d00a      	beq.n	800a388 <_scanf_float+0x34c>
 800a372:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a376:	463a      	mov	r2, r7
 800a378:	4640      	mov	r0, r8
 800a37a:	4798      	blx	r3
 800a37c:	6923      	ldr	r3, [r4, #16]
 800a37e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a382:	3b01      	subs	r3, #1
 800a384:	1eb5      	subs	r5, r6, #2
 800a386:	6123      	str	r3, [r4, #16]
 800a388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a38c:	463a      	mov	r2, r7
 800a38e:	4640      	mov	r0, r8
 800a390:	4798      	blx	r3
 800a392:	462e      	mov	r6, r5
 800a394:	6825      	ldr	r5, [r4, #0]
 800a396:	f015 0510 	ands.w	r5, r5, #16
 800a39a:	d159      	bne.n	800a450 <_scanf_float+0x414>
 800a39c:	7035      	strb	r5, [r6, #0]
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a8:	d11b      	bne.n	800a3e2 <_scanf_float+0x3a6>
 800a3aa:	9b01      	ldr	r3, [sp, #4]
 800a3ac:	454b      	cmp	r3, r9
 800a3ae:	eba3 0209 	sub.w	r2, r3, r9
 800a3b2:	d123      	bne.n	800a3fc <_scanf_float+0x3c0>
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	4659      	mov	r1, fp
 800a3b8:	4640      	mov	r0, r8
 800a3ba:	f000 feaf 	bl	800b11c <_strtod_r>
 800a3be:	6822      	ldr	r2, [r4, #0]
 800a3c0:	9b03      	ldr	r3, [sp, #12]
 800a3c2:	f012 0f02 	tst.w	r2, #2
 800a3c6:	ec57 6b10 	vmov	r6, r7, d0
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	d021      	beq.n	800a412 <_scanf_float+0x3d6>
 800a3ce:	9903      	ldr	r1, [sp, #12]
 800a3d0:	1d1a      	adds	r2, r3, #4
 800a3d2:	600a      	str	r2, [r1, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	e9c3 6700 	strd	r6, r7, [r3]
 800a3da:	68e3      	ldr	r3, [r4, #12]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	60e3      	str	r3, [r4, #12]
 800a3e0:	e66d      	b.n	800a0be <_scanf_float+0x82>
 800a3e2:	9b04      	ldr	r3, [sp, #16]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d0e5      	beq.n	800a3b4 <_scanf_float+0x378>
 800a3e8:	9905      	ldr	r1, [sp, #20]
 800a3ea:	230a      	movs	r3, #10
 800a3ec:	462a      	mov	r2, r5
 800a3ee:	3101      	adds	r1, #1
 800a3f0:	4640      	mov	r0, r8
 800a3f2:	f000 ffd3 	bl	800b39c <_strtol_r>
 800a3f6:	9b04      	ldr	r3, [sp, #16]
 800a3f8:	9e05      	ldr	r6, [sp, #20]
 800a3fa:	1ac2      	subs	r2, r0, r3
 800a3fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a400:	429e      	cmp	r6, r3
 800a402:	bf28      	it	cs
 800a404:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a408:	4912      	ldr	r1, [pc, #72]	; (800a454 <_scanf_float+0x418>)
 800a40a:	4630      	mov	r0, r6
 800a40c:	f000 f82c 	bl	800a468 <siprintf>
 800a410:	e7d0      	b.n	800a3b4 <_scanf_float+0x378>
 800a412:	9903      	ldr	r1, [sp, #12]
 800a414:	f012 0f04 	tst.w	r2, #4
 800a418:	f103 0204 	add.w	r2, r3, #4
 800a41c:	600a      	str	r2, [r1, #0]
 800a41e:	d1d9      	bne.n	800a3d4 <_scanf_float+0x398>
 800a420:	f8d3 8000 	ldr.w	r8, [r3]
 800a424:	ee10 2a10 	vmov	r2, s0
 800a428:	ee10 0a10 	vmov	r0, s0
 800a42c:	463b      	mov	r3, r7
 800a42e:	4639      	mov	r1, r7
 800a430:	f7f6 fba4 	bl	8000b7c <__aeabi_dcmpun>
 800a434:	b128      	cbz	r0, 800a442 <_scanf_float+0x406>
 800a436:	4808      	ldr	r0, [pc, #32]	; (800a458 <_scanf_float+0x41c>)
 800a438:	f000 f810 	bl	800a45c <nanf>
 800a43c:	ed88 0a00 	vstr	s0, [r8]
 800a440:	e7cb      	b.n	800a3da <_scanf_float+0x39e>
 800a442:	4630      	mov	r0, r6
 800a444:	4639      	mov	r1, r7
 800a446:	f7f6 fbf7 	bl	8000c38 <__aeabi_d2f>
 800a44a:	f8c8 0000 	str.w	r0, [r8]
 800a44e:	e7c4      	b.n	800a3da <_scanf_float+0x39e>
 800a450:	2500      	movs	r5, #0
 800a452:	e634      	b.n	800a0be <_scanf_float+0x82>
 800a454:	0800e308 	.word	0x0800e308
 800a458:	0800e40f 	.word	0x0800e40f

0800a45c <nanf>:
 800a45c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a464 <nanf+0x8>
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	7fc00000 	.word	0x7fc00000

0800a468 <siprintf>:
 800a468:	b40e      	push	{r1, r2, r3}
 800a46a:	b500      	push	{lr}
 800a46c:	b09c      	sub	sp, #112	; 0x70
 800a46e:	ab1d      	add	r3, sp, #116	; 0x74
 800a470:	9002      	str	r0, [sp, #8]
 800a472:	9006      	str	r0, [sp, #24]
 800a474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a478:	4809      	ldr	r0, [pc, #36]	; (800a4a0 <siprintf+0x38>)
 800a47a:	9107      	str	r1, [sp, #28]
 800a47c:	9104      	str	r1, [sp, #16]
 800a47e:	4909      	ldr	r1, [pc, #36]	; (800a4a4 <siprintf+0x3c>)
 800a480:	f853 2b04 	ldr.w	r2, [r3], #4
 800a484:	9105      	str	r1, [sp, #20]
 800a486:	6800      	ldr	r0, [r0, #0]
 800a488:	9301      	str	r3, [sp, #4]
 800a48a:	a902      	add	r1, sp, #8
 800a48c:	f002 ffde 	bl	800d44c <_svfiprintf_r>
 800a490:	9b02      	ldr	r3, [sp, #8]
 800a492:	2200      	movs	r2, #0
 800a494:	701a      	strb	r2, [r3, #0]
 800a496:	b01c      	add	sp, #112	; 0x70
 800a498:	f85d eb04 	ldr.w	lr, [sp], #4
 800a49c:	b003      	add	sp, #12
 800a49e:	4770      	bx	lr
 800a4a0:	2000001c 	.word	0x2000001c
 800a4a4:	ffff0208 	.word	0xffff0208

0800a4a8 <strstr>:
 800a4a8:	780a      	ldrb	r2, [r1, #0]
 800a4aa:	b570      	push	{r4, r5, r6, lr}
 800a4ac:	b96a      	cbnz	r2, 800a4ca <strstr+0x22>
 800a4ae:	bd70      	pop	{r4, r5, r6, pc}
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d109      	bne.n	800a4c8 <strstr+0x20>
 800a4b4:	460c      	mov	r4, r1
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d0f6      	beq.n	800a4ae <strstr+0x6>
 800a4c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a4c4:	429e      	cmp	r6, r3
 800a4c6:	d0f7      	beq.n	800a4b8 <strstr+0x10>
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	7803      	ldrb	r3, [r0, #0]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1ef      	bne.n	800a4b0 <strstr+0x8>
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	e7ec      	b.n	800a4ae <strstr+0x6>

0800a4d4 <sulp>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	460d      	mov	r5, r1
 800a4da:	ec45 4b10 	vmov	d0, r4, r5
 800a4de:	4616      	mov	r6, r2
 800a4e0:	f002 fd12 	bl	800cf08 <__ulp>
 800a4e4:	ec51 0b10 	vmov	r0, r1, d0
 800a4e8:	b17e      	cbz	r6, 800a50a <sulp+0x36>
 800a4ea:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a4ee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	dd09      	ble.n	800a50a <sulp+0x36>
 800a4f6:	051b      	lsls	r3, r3, #20
 800a4f8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a4fc:	2400      	movs	r4, #0
 800a4fe:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a502:	4622      	mov	r2, r4
 800a504:	462b      	mov	r3, r5
 800a506:	f7f6 f89f 	bl	8000648 <__aeabi_dmul>
 800a50a:	bd70      	pop	{r4, r5, r6, pc}
 800a50c:	0000      	movs	r0, r0
	...

0800a510 <_strtod_l>:
 800a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	ed2d 8b02 	vpush	{d8}
 800a518:	b09d      	sub	sp, #116	; 0x74
 800a51a:	461f      	mov	r7, r3
 800a51c:	2300      	movs	r3, #0
 800a51e:	9318      	str	r3, [sp, #96]	; 0x60
 800a520:	4ba2      	ldr	r3, [pc, #648]	; (800a7ac <_strtod_l+0x29c>)
 800a522:	9213      	str	r2, [sp, #76]	; 0x4c
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	9305      	str	r3, [sp, #20]
 800a528:	4604      	mov	r4, r0
 800a52a:	4618      	mov	r0, r3
 800a52c:	4688      	mov	r8, r1
 800a52e:	f7f5 fe77 	bl	8000220 <strlen>
 800a532:	f04f 0a00 	mov.w	sl, #0
 800a536:	4605      	mov	r5, r0
 800a538:	f04f 0b00 	mov.w	fp, #0
 800a53c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a542:	781a      	ldrb	r2, [r3, #0]
 800a544:	2a2b      	cmp	r2, #43	; 0x2b
 800a546:	d04e      	beq.n	800a5e6 <_strtod_l+0xd6>
 800a548:	d83b      	bhi.n	800a5c2 <_strtod_l+0xb2>
 800a54a:	2a0d      	cmp	r2, #13
 800a54c:	d834      	bhi.n	800a5b8 <_strtod_l+0xa8>
 800a54e:	2a08      	cmp	r2, #8
 800a550:	d834      	bhi.n	800a5bc <_strtod_l+0xac>
 800a552:	2a00      	cmp	r2, #0
 800a554:	d03e      	beq.n	800a5d4 <_strtod_l+0xc4>
 800a556:	2300      	movs	r3, #0
 800a558:	930a      	str	r3, [sp, #40]	; 0x28
 800a55a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a55c:	7833      	ldrb	r3, [r6, #0]
 800a55e:	2b30      	cmp	r3, #48	; 0x30
 800a560:	f040 80b0 	bne.w	800a6c4 <_strtod_l+0x1b4>
 800a564:	7873      	ldrb	r3, [r6, #1]
 800a566:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a56a:	2b58      	cmp	r3, #88	; 0x58
 800a56c:	d168      	bne.n	800a640 <_strtod_l+0x130>
 800a56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	ab18      	add	r3, sp, #96	; 0x60
 800a574:	9702      	str	r7, [sp, #8]
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	4a8d      	ldr	r2, [pc, #564]	; (800a7b0 <_strtod_l+0x2a0>)
 800a57a:	ab19      	add	r3, sp, #100	; 0x64
 800a57c:	a917      	add	r1, sp, #92	; 0x5c
 800a57e:	4620      	mov	r0, r4
 800a580:	f001 fe2a 	bl	800c1d8 <__gethex>
 800a584:	f010 0707 	ands.w	r7, r0, #7
 800a588:	4605      	mov	r5, r0
 800a58a:	d005      	beq.n	800a598 <_strtod_l+0x88>
 800a58c:	2f06      	cmp	r7, #6
 800a58e:	d12c      	bne.n	800a5ea <_strtod_l+0xda>
 800a590:	3601      	adds	r6, #1
 800a592:	2300      	movs	r3, #0
 800a594:	9617      	str	r6, [sp, #92]	; 0x5c
 800a596:	930a      	str	r3, [sp, #40]	; 0x28
 800a598:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	f040 8590 	bne.w	800b0c0 <_strtod_l+0xbb0>
 800a5a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5a2:	b1eb      	cbz	r3, 800a5e0 <_strtod_l+0xd0>
 800a5a4:	4652      	mov	r2, sl
 800a5a6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a5aa:	ec43 2b10 	vmov	d0, r2, r3
 800a5ae:	b01d      	add	sp, #116	; 0x74
 800a5b0:	ecbd 8b02 	vpop	{d8}
 800a5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b8:	2a20      	cmp	r2, #32
 800a5ba:	d1cc      	bne.n	800a556 <_strtod_l+0x46>
 800a5bc:	3301      	adds	r3, #1
 800a5be:	9317      	str	r3, [sp, #92]	; 0x5c
 800a5c0:	e7be      	b.n	800a540 <_strtod_l+0x30>
 800a5c2:	2a2d      	cmp	r2, #45	; 0x2d
 800a5c4:	d1c7      	bne.n	800a556 <_strtod_l+0x46>
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	920a      	str	r2, [sp, #40]	; 0x28
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a5ce:	785b      	ldrb	r3, [r3, #1]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d1c2      	bne.n	800a55a <_strtod_l+0x4a>
 800a5d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5d6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f040 856e 	bne.w	800b0bc <_strtod_l+0xbac>
 800a5e0:	4652      	mov	r2, sl
 800a5e2:	465b      	mov	r3, fp
 800a5e4:	e7e1      	b.n	800a5aa <_strtod_l+0x9a>
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	e7ee      	b.n	800a5c8 <_strtod_l+0xb8>
 800a5ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a5ec:	b13a      	cbz	r2, 800a5fe <_strtod_l+0xee>
 800a5ee:	2135      	movs	r1, #53	; 0x35
 800a5f0:	a81a      	add	r0, sp, #104	; 0x68
 800a5f2:	f002 fd94 	bl	800d11e <__copybits>
 800a5f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	f002 f953 	bl	800c8a4 <_Bfree>
 800a5fe:	3f01      	subs	r7, #1
 800a600:	2f04      	cmp	r7, #4
 800a602:	d806      	bhi.n	800a612 <_strtod_l+0x102>
 800a604:	e8df f007 	tbb	[pc, r7]
 800a608:	1714030a 	.word	0x1714030a
 800a60c:	0a          	.byte	0x0a
 800a60d:	00          	.byte	0x00
 800a60e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a612:	0728      	lsls	r0, r5, #28
 800a614:	d5c0      	bpl.n	800a598 <_strtod_l+0x88>
 800a616:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a61a:	e7bd      	b.n	800a598 <_strtod_l+0x88>
 800a61c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a620:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a622:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a626:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a62a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a62e:	e7f0      	b.n	800a612 <_strtod_l+0x102>
 800a630:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a7b4 <_strtod_l+0x2a4>
 800a634:	e7ed      	b.n	800a612 <_strtod_l+0x102>
 800a636:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a63a:	f04f 3aff 	mov.w	sl, #4294967295
 800a63e:	e7e8      	b.n	800a612 <_strtod_l+0x102>
 800a640:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a642:	1c5a      	adds	r2, r3, #1
 800a644:	9217      	str	r2, [sp, #92]	; 0x5c
 800a646:	785b      	ldrb	r3, [r3, #1]
 800a648:	2b30      	cmp	r3, #48	; 0x30
 800a64a:	d0f9      	beq.n	800a640 <_strtod_l+0x130>
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d0a3      	beq.n	800a598 <_strtod_l+0x88>
 800a650:	2301      	movs	r3, #1
 800a652:	f04f 0900 	mov.w	r9, #0
 800a656:	9304      	str	r3, [sp, #16]
 800a658:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a65a:	9308      	str	r3, [sp, #32]
 800a65c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a660:	464f      	mov	r7, r9
 800a662:	220a      	movs	r2, #10
 800a664:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a666:	7806      	ldrb	r6, [r0, #0]
 800a668:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a66c:	b2d9      	uxtb	r1, r3
 800a66e:	2909      	cmp	r1, #9
 800a670:	d92a      	bls.n	800a6c8 <_strtod_l+0x1b8>
 800a672:	9905      	ldr	r1, [sp, #20]
 800a674:	462a      	mov	r2, r5
 800a676:	f003 f95b 	bl	800d930 <strncmp>
 800a67a:	b398      	cbz	r0, 800a6e4 <_strtod_l+0x1d4>
 800a67c:	2000      	movs	r0, #0
 800a67e:	4632      	mov	r2, r6
 800a680:	463d      	mov	r5, r7
 800a682:	9005      	str	r0, [sp, #20]
 800a684:	4603      	mov	r3, r0
 800a686:	2a65      	cmp	r2, #101	; 0x65
 800a688:	d001      	beq.n	800a68e <_strtod_l+0x17e>
 800a68a:	2a45      	cmp	r2, #69	; 0x45
 800a68c:	d118      	bne.n	800a6c0 <_strtod_l+0x1b0>
 800a68e:	b91d      	cbnz	r5, 800a698 <_strtod_l+0x188>
 800a690:	9a04      	ldr	r2, [sp, #16]
 800a692:	4302      	orrs	r2, r0
 800a694:	d09e      	beq.n	800a5d4 <_strtod_l+0xc4>
 800a696:	2500      	movs	r5, #0
 800a698:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a69c:	f108 0201 	add.w	r2, r8, #1
 800a6a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a6a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a6a6:	2a2b      	cmp	r2, #43	; 0x2b
 800a6a8:	d075      	beq.n	800a796 <_strtod_l+0x286>
 800a6aa:	2a2d      	cmp	r2, #45	; 0x2d
 800a6ac:	d07b      	beq.n	800a7a6 <_strtod_l+0x296>
 800a6ae:	f04f 0c00 	mov.w	ip, #0
 800a6b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a6b6:	2909      	cmp	r1, #9
 800a6b8:	f240 8082 	bls.w	800a7c0 <_strtod_l+0x2b0>
 800a6bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a6c0:	2600      	movs	r6, #0
 800a6c2:	e09d      	b.n	800a800 <_strtod_l+0x2f0>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	e7c4      	b.n	800a652 <_strtod_l+0x142>
 800a6c8:	2f08      	cmp	r7, #8
 800a6ca:	bfd8      	it	le
 800a6cc:	9907      	ldrle	r1, [sp, #28]
 800a6ce:	f100 0001 	add.w	r0, r0, #1
 800a6d2:	bfda      	itte	le
 800a6d4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a6d8:	9307      	strle	r3, [sp, #28]
 800a6da:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a6de:	3701      	adds	r7, #1
 800a6e0:	9017      	str	r0, [sp, #92]	; 0x5c
 800a6e2:	e7bf      	b.n	800a664 <_strtod_l+0x154>
 800a6e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a6e6:	195a      	adds	r2, r3, r5
 800a6e8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a6ea:	5d5a      	ldrb	r2, [r3, r5]
 800a6ec:	2f00      	cmp	r7, #0
 800a6ee:	d037      	beq.n	800a760 <_strtod_l+0x250>
 800a6f0:	9005      	str	r0, [sp, #20]
 800a6f2:	463d      	mov	r5, r7
 800a6f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a6f8:	2b09      	cmp	r3, #9
 800a6fa:	d912      	bls.n	800a722 <_strtod_l+0x212>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e7c2      	b.n	800a686 <_strtod_l+0x176>
 800a700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	9217      	str	r2, [sp, #92]	; 0x5c
 800a706:	785a      	ldrb	r2, [r3, #1]
 800a708:	3001      	adds	r0, #1
 800a70a:	2a30      	cmp	r2, #48	; 0x30
 800a70c:	d0f8      	beq.n	800a700 <_strtod_l+0x1f0>
 800a70e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a712:	2b08      	cmp	r3, #8
 800a714:	f200 84d9 	bhi.w	800b0ca <_strtod_l+0xbba>
 800a718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a71a:	9005      	str	r0, [sp, #20]
 800a71c:	2000      	movs	r0, #0
 800a71e:	9308      	str	r3, [sp, #32]
 800a720:	4605      	mov	r5, r0
 800a722:	3a30      	subs	r2, #48	; 0x30
 800a724:	f100 0301 	add.w	r3, r0, #1
 800a728:	d014      	beq.n	800a754 <_strtod_l+0x244>
 800a72a:	9905      	ldr	r1, [sp, #20]
 800a72c:	4419      	add	r1, r3
 800a72e:	9105      	str	r1, [sp, #20]
 800a730:	462b      	mov	r3, r5
 800a732:	eb00 0e05 	add.w	lr, r0, r5
 800a736:	210a      	movs	r1, #10
 800a738:	4573      	cmp	r3, lr
 800a73a:	d113      	bne.n	800a764 <_strtod_l+0x254>
 800a73c:	182b      	adds	r3, r5, r0
 800a73e:	2b08      	cmp	r3, #8
 800a740:	f105 0501 	add.w	r5, r5, #1
 800a744:	4405      	add	r5, r0
 800a746:	dc1c      	bgt.n	800a782 <_strtod_l+0x272>
 800a748:	9907      	ldr	r1, [sp, #28]
 800a74a:	230a      	movs	r3, #10
 800a74c:	fb03 2301 	mla	r3, r3, r1, r2
 800a750:	9307      	str	r3, [sp, #28]
 800a752:	2300      	movs	r3, #0
 800a754:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a756:	1c51      	adds	r1, r2, #1
 800a758:	9117      	str	r1, [sp, #92]	; 0x5c
 800a75a:	7852      	ldrb	r2, [r2, #1]
 800a75c:	4618      	mov	r0, r3
 800a75e:	e7c9      	b.n	800a6f4 <_strtod_l+0x1e4>
 800a760:	4638      	mov	r0, r7
 800a762:	e7d2      	b.n	800a70a <_strtod_l+0x1fa>
 800a764:	2b08      	cmp	r3, #8
 800a766:	dc04      	bgt.n	800a772 <_strtod_l+0x262>
 800a768:	9e07      	ldr	r6, [sp, #28]
 800a76a:	434e      	muls	r6, r1
 800a76c:	9607      	str	r6, [sp, #28]
 800a76e:	3301      	adds	r3, #1
 800a770:	e7e2      	b.n	800a738 <_strtod_l+0x228>
 800a772:	f103 0c01 	add.w	ip, r3, #1
 800a776:	f1bc 0f10 	cmp.w	ip, #16
 800a77a:	bfd8      	it	le
 800a77c:	fb01 f909 	mulle.w	r9, r1, r9
 800a780:	e7f5      	b.n	800a76e <_strtod_l+0x25e>
 800a782:	2d10      	cmp	r5, #16
 800a784:	bfdc      	itt	le
 800a786:	230a      	movle	r3, #10
 800a788:	fb03 2909 	mlale	r9, r3, r9, r2
 800a78c:	e7e1      	b.n	800a752 <_strtod_l+0x242>
 800a78e:	2300      	movs	r3, #0
 800a790:	9305      	str	r3, [sp, #20]
 800a792:	2301      	movs	r3, #1
 800a794:	e77c      	b.n	800a690 <_strtod_l+0x180>
 800a796:	f04f 0c00 	mov.w	ip, #0
 800a79a:	f108 0202 	add.w	r2, r8, #2
 800a79e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a7a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a7a4:	e785      	b.n	800a6b2 <_strtod_l+0x1a2>
 800a7a6:	f04f 0c01 	mov.w	ip, #1
 800a7aa:	e7f6      	b.n	800a79a <_strtod_l+0x28a>
 800a7ac:	0800e5f0 	.word	0x0800e5f0
 800a7b0:	0800e310 	.word	0x0800e310
 800a7b4:	7ff00000 	.word	0x7ff00000
 800a7b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a7ba:	1c51      	adds	r1, r2, #1
 800a7bc:	9117      	str	r1, [sp, #92]	; 0x5c
 800a7be:	7852      	ldrb	r2, [r2, #1]
 800a7c0:	2a30      	cmp	r2, #48	; 0x30
 800a7c2:	d0f9      	beq.n	800a7b8 <_strtod_l+0x2a8>
 800a7c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a7c8:	2908      	cmp	r1, #8
 800a7ca:	f63f af79 	bhi.w	800a6c0 <_strtod_l+0x1b0>
 800a7ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a7d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a7d4:	9206      	str	r2, [sp, #24]
 800a7d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a7d8:	1c51      	adds	r1, r2, #1
 800a7da:	9117      	str	r1, [sp, #92]	; 0x5c
 800a7dc:	7852      	ldrb	r2, [r2, #1]
 800a7de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a7e2:	2e09      	cmp	r6, #9
 800a7e4:	d937      	bls.n	800a856 <_strtod_l+0x346>
 800a7e6:	9e06      	ldr	r6, [sp, #24]
 800a7e8:	1b89      	subs	r1, r1, r6
 800a7ea:	2908      	cmp	r1, #8
 800a7ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a7f0:	dc02      	bgt.n	800a7f8 <_strtod_l+0x2e8>
 800a7f2:	4576      	cmp	r6, lr
 800a7f4:	bfa8      	it	ge
 800a7f6:	4676      	movge	r6, lr
 800a7f8:	f1bc 0f00 	cmp.w	ip, #0
 800a7fc:	d000      	beq.n	800a800 <_strtod_l+0x2f0>
 800a7fe:	4276      	negs	r6, r6
 800a800:	2d00      	cmp	r5, #0
 800a802:	d14d      	bne.n	800a8a0 <_strtod_l+0x390>
 800a804:	9904      	ldr	r1, [sp, #16]
 800a806:	4301      	orrs	r1, r0
 800a808:	f47f aec6 	bne.w	800a598 <_strtod_l+0x88>
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	f47f aee1 	bne.w	800a5d4 <_strtod_l+0xc4>
 800a812:	2a69      	cmp	r2, #105	; 0x69
 800a814:	d027      	beq.n	800a866 <_strtod_l+0x356>
 800a816:	dc24      	bgt.n	800a862 <_strtod_l+0x352>
 800a818:	2a49      	cmp	r2, #73	; 0x49
 800a81a:	d024      	beq.n	800a866 <_strtod_l+0x356>
 800a81c:	2a4e      	cmp	r2, #78	; 0x4e
 800a81e:	f47f aed9 	bne.w	800a5d4 <_strtod_l+0xc4>
 800a822:	499f      	ldr	r1, [pc, #636]	; (800aaa0 <_strtod_l+0x590>)
 800a824:	a817      	add	r0, sp, #92	; 0x5c
 800a826:	f001 ff2f 	bl	800c688 <__match>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	f43f aed2 	beq.w	800a5d4 <_strtod_l+0xc4>
 800a830:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	2b28      	cmp	r3, #40	; 0x28
 800a836:	d12d      	bne.n	800a894 <_strtod_l+0x384>
 800a838:	499a      	ldr	r1, [pc, #616]	; (800aaa4 <_strtod_l+0x594>)
 800a83a:	aa1a      	add	r2, sp, #104	; 0x68
 800a83c:	a817      	add	r0, sp, #92	; 0x5c
 800a83e:	f001 ff37 	bl	800c6b0 <__hexnan>
 800a842:	2805      	cmp	r0, #5
 800a844:	d126      	bne.n	800a894 <_strtod_l+0x384>
 800a846:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a848:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a84c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a850:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a854:	e6a0      	b.n	800a598 <_strtod_l+0x88>
 800a856:	210a      	movs	r1, #10
 800a858:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a85c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a860:	e7b9      	b.n	800a7d6 <_strtod_l+0x2c6>
 800a862:	2a6e      	cmp	r2, #110	; 0x6e
 800a864:	e7db      	b.n	800a81e <_strtod_l+0x30e>
 800a866:	4990      	ldr	r1, [pc, #576]	; (800aaa8 <_strtod_l+0x598>)
 800a868:	a817      	add	r0, sp, #92	; 0x5c
 800a86a:	f001 ff0d 	bl	800c688 <__match>
 800a86e:	2800      	cmp	r0, #0
 800a870:	f43f aeb0 	beq.w	800a5d4 <_strtod_l+0xc4>
 800a874:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a876:	498d      	ldr	r1, [pc, #564]	; (800aaac <_strtod_l+0x59c>)
 800a878:	3b01      	subs	r3, #1
 800a87a:	a817      	add	r0, sp, #92	; 0x5c
 800a87c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a87e:	f001 ff03 	bl	800c688 <__match>
 800a882:	b910      	cbnz	r0, 800a88a <_strtod_l+0x37a>
 800a884:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a886:	3301      	adds	r3, #1
 800a888:	9317      	str	r3, [sp, #92]	; 0x5c
 800a88a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800aabc <_strtod_l+0x5ac>
 800a88e:	f04f 0a00 	mov.w	sl, #0
 800a892:	e681      	b.n	800a598 <_strtod_l+0x88>
 800a894:	4886      	ldr	r0, [pc, #536]	; (800aab0 <_strtod_l+0x5a0>)
 800a896:	f003 f833 	bl	800d900 <nan>
 800a89a:	ec5b ab10 	vmov	sl, fp, d0
 800a89e:	e67b      	b.n	800a598 <_strtod_l+0x88>
 800a8a0:	9b05      	ldr	r3, [sp, #20]
 800a8a2:	9807      	ldr	r0, [sp, #28]
 800a8a4:	1af3      	subs	r3, r6, r3
 800a8a6:	2f00      	cmp	r7, #0
 800a8a8:	bf08      	it	eq
 800a8aa:	462f      	moveq	r7, r5
 800a8ac:	2d10      	cmp	r5, #16
 800a8ae:	9306      	str	r3, [sp, #24]
 800a8b0:	46a8      	mov	r8, r5
 800a8b2:	bfa8      	it	ge
 800a8b4:	f04f 0810 	movge.w	r8, #16
 800a8b8:	f7f5 fe4c 	bl	8000554 <__aeabi_ui2d>
 800a8bc:	2d09      	cmp	r5, #9
 800a8be:	4682      	mov	sl, r0
 800a8c0:	468b      	mov	fp, r1
 800a8c2:	dd13      	ble.n	800a8ec <_strtod_l+0x3dc>
 800a8c4:	4b7b      	ldr	r3, [pc, #492]	; (800aab4 <_strtod_l+0x5a4>)
 800a8c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a8ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a8ce:	f7f5 febb 	bl	8000648 <__aeabi_dmul>
 800a8d2:	4682      	mov	sl, r0
 800a8d4:	4648      	mov	r0, r9
 800a8d6:	468b      	mov	fp, r1
 800a8d8:	f7f5 fe3c 	bl	8000554 <__aeabi_ui2d>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4650      	mov	r0, sl
 800a8e2:	4659      	mov	r1, fp
 800a8e4:	f7f5 fcfa 	bl	80002dc <__adddf3>
 800a8e8:	4682      	mov	sl, r0
 800a8ea:	468b      	mov	fp, r1
 800a8ec:	2d0f      	cmp	r5, #15
 800a8ee:	dc38      	bgt.n	800a962 <_strtod_l+0x452>
 800a8f0:	9b06      	ldr	r3, [sp, #24]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	f43f ae50 	beq.w	800a598 <_strtod_l+0x88>
 800a8f8:	dd24      	ble.n	800a944 <_strtod_l+0x434>
 800a8fa:	2b16      	cmp	r3, #22
 800a8fc:	dc0b      	bgt.n	800a916 <_strtod_l+0x406>
 800a8fe:	496d      	ldr	r1, [pc, #436]	; (800aab4 <_strtod_l+0x5a4>)
 800a900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a904:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a908:	4652      	mov	r2, sl
 800a90a:	465b      	mov	r3, fp
 800a90c:	f7f5 fe9c 	bl	8000648 <__aeabi_dmul>
 800a910:	4682      	mov	sl, r0
 800a912:	468b      	mov	fp, r1
 800a914:	e640      	b.n	800a598 <_strtod_l+0x88>
 800a916:	9a06      	ldr	r2, [sp, #24]
 800a918:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a91c:	4293      	cmp	r3, r2
 800a91e:	db20      	blt.n	800a962 <_strtod_l+0x452>
 800a920:	4c64      	ldr	r4, [pc, #400]	; (800aab4 <_strtod_l+0x5a4>)
 800a922:	f1c5 050f 	rsb	r5, r5, #15
 800a926:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a92a:	4652      	mov	r2, sl
 800a92c:	465b      	mov	r3, fp
 800a92e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a932:	f7f5 fe89 	bl	8000648 <__aeabi_dmul>
 800a936:	9b06      	ldr	r3, [sp, #24]
 800a938:	1b5d      	subs	r5, r3, r5
 800a93a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a93e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a942:	e7e3      	b.n	800a90c <_strtod_l+0x3fc>
 800a944:	9b06      	ldr	r3, [sp, #24]
 800a946:	3316      	adds	r3, #22
 800a948:	db0b      	blt.n	800a962 <_strtod_l+0x452>
 800a94a:	9b05      	ldr	r3, [sp, #20]
 800a94c:	1b9e      	subs	r6, r3, r6
 800a94e:	4b59      	ldr	r3, [pc, #356]	; (800aab4 <_strtod_l+0x5a4>)
 800a950:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a954:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a958:	4650      	mov	r0, sl
 800a95a:	4659      	mov	r1, fp
 800a95c:	f7f5 ff9e 	bl	800089c <__aeabi_ddiv>
 800a960:	e7d6      	b.n	800a910 <_strtod_l+0x400>
 800a962:	9b06      	ldr	r3, [sp, #24]
 800a964:	eba5 0808 	sub.w	r8, r5, r8
 800a968:	4498      	add	r8, r3
 800a96a:	f1b8 0f00 	cmp.w	r8, #0
 800a96e:	dd74      	ble.n	800aa5a <_strtod_l+0x54a>
 800a970:	f018 030f 	ands.w	r3, r8, #15
 800a974:	d00a      	beq.n	800a98c <_strtod_l+0x47c>
 800a976:	494f      	ldr	r1, [pc, #316]	; (800aab4 <_strtod_l+0x5a4>)
 800a978:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a97c:	4652      	mov	r2, sl
 800a97e:	465b      	mov	r3, fp
 800a980:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a984:	f7f5 fe60 	bl	8000648 <__aeabi_dmul>
 800a988:	4682      	mov	sl, r0
 800a98a:	468b      	mov	fp, r1
 800a98c:	f038 080f 	bics.w	r8, r8, #15
 800a990:	d04f      	beq.n	800aa32 <_strtod_l+0x522>
 800a992:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a996:	dd22      	ble.n	800a9de <_strtod_l+0x4ce>
 800a998:	2500      	movs	r5, #0
 800a99a:	462e      	mov	r6, r5
 800a99c:	9507      	str	r5, [sp, #28]
 800a99e:	9505      	str	r5, [sp, #20]
 800a9a0:	2322      	movs	r3, #34	; 0x22
 800a9a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800aabc <_strtod_l+0x5ac>
 800a9a6:	6023      	str	r3, [r4, #0]
 800a9a8:	f04f 0a00 	mov.w	sl, #0
 800a9ac:	9b07      	ldr	r3, [sp, #28]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f43f adf2 	beq.w	800a598 <_strtod_l+0x88>
 800a9b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f001 ff74 	bl	800c8a4 <_Bfree>
 800a9bc:	9905      	ldr	r1, [sp, #20]
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f001 ff70 	bl	800c8a4 <_Bfree>
 800a9c4:	4631      	mov	r1, r6
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f001 ff6c 	bl	800c8a4 <_Bfree>
 800a9cc:	9907      	ldr	r1, [sp, #28]
 800a9ce:	4620      	mov	r0, r4
 800a9d0:	f001 ff68 	bl	800c8a4 <_Bfree>
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f001 ff64 	bl	800c8a4 <_Bfree>
 800a9dc:	e5dc      	b.n	800a598 <_strtod_l+0x88>
 800a9de:	4b36      	ldr	r3, [pc, #216]	; (800aab8 <_strtod_l+0x5a8>)
 800a9e0:	9304      	str	r3, [sp, #16]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a9e8:	4650      	mov	r0, sl
 800a9ea:	4659      	mov	r1, fp
 800a9ec:	4699      	mov	r9, r3
 800a9ee:	f1b8 0f01 	cmp.w	r8, #1
 800a9f2:	dc21      	bgt.n	800aa38 <_strtod_l+0x528>
 800a9f4:	b10b      	cbz	r3, 800a9fa <_strtod_l+0x4ea>
 800a9f6:	4682      	mov	sl, r0
 800a9f8:	468b      	mov	fp, r1
 800a9fa:	4b2f      	ldr	r3, [pc, #188]	; (800aab8 <_strtod_l+0x5a8>)
 800a9fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aa00:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800aa04:	4652      	mov	r2, sl
 800aa06:	465b      	mov	r3, fp
 800aa08:	e9d9 0100 	ldrd	r0, r1, [r9]
 800aa0c:	f7f5 fe1c 	bl	8000648 <__aeabi_dmul>
 800aa10:	4b2a      	ldr	r3, [pc, #168]	; (800aabc <_strtod_l+0x5ac>)
 800aa12:	460a      	mov	r2, r1
 800aa14:	400b      	ands	r3, r1
 800aa16:	492a      	ldr	r1, [pc, #168]	; (800aac0 <_strtod_l+0x5b0>)
 800aa18:	428b      	cmp	r3, r1
 800aa1a:	4682      	mov	sl, r0
 800aa1c:	d8bc      	bhi.n	800a998 <_strtod_l+0x488>
 800aa1e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa22:	428b      	cmp	r3, r1
 800aa24:	bf86      	itte	hi
 800aa26:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800aac4 <_strtod_l+0x5b4>
 800aa2a:	f04f 3aff 	movhi.w	sl, #4294967295
 800aa2e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aa32:	2300      	movs	r3, #0
 800aa34:	9304      	str	r3, [sp, #16]
 800aa36:	e084      	b.n	800ab42 <_strtod_l+0x632>
 800aa38:	f018 0f01 	tst.w	r8, #1
 800aa3c:	d005      	beq.n	800aa4a <_strtod_l+0x53a>
 800aa3e:	9b04      	ldr	r3, [sp, #16]
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	f7f5 fe00 	bl	8000648 <__aeabi_dmul>
 800aa48:	2301      	movs	r3, #1
 800aa4a:	9a04      	ldr	r2, [sp, #16]
 800aa4c:	3208      	adds	r2, #8
 800aa4e:	f109 0901 	add.w	r9, r9, #1
 800aa52:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa56:	9204      	str	r2, [sp, #16]
 800aa58:	e7c9      	b.n	800a9ee <_strtod_l+0x4de>
 800aa5a:	d0ea      	beq.n	800aa32 <_strtod_l+0x522>
 800aa5c:	f1c8 0800 	rsb	r8, r8, #0
 800aa60:	f018 020f 	ands.w	r2, r8, #15
 800aa64:	d00a      	beq.n	800aa7c <_strtod_l+0x56c>
 800aa66:	4b13      	ldr	r3, [pc, #76]	; (800aab4 <_strtod_l+0x5a4>)
 800aa68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa6c:	4650      	mov	r0, sl
 800aa6e:	4659      	mov	r1, fp
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	f7f5 ff12 	bl	800089c <__aeabi_ddiv>
 800aa78:	4682      	mov	sl, r0
 800aa7a:	468b      	mov	fp, r1
 800aa7c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800aa80:	d0d7      	beq.n	800aa32 <_strtod_l+0x522>
 800aa82:	f1b8 0f1f 	cmp.w	r8, #31
 800aa86:	dd1f      	ble.n	800aac8 <_strtod_l+0x5b8>
 800aa88:	2500      	movs	r5, #0
 800aa8a:	462e      	mov	r6, r5
 800aa8c:	9507      	str	r5, [sp, #28]
 800aa8e:	9505      	str	r5, [sp, #20]
 800aa90:	2322      	movs	r3, #34	; 0x22
 800aa92:	f04f 0a00 	mov.w	sl, #0
 800aa96:	f04f 0b00 	mov.w	fp, #0
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	e786      	b.n	800a9ac <_strtod_l+0x49c>
 800aa9e:	bf00      	nop
 800aaa0:	0800e2e1 	.word	0x0800e2e1
 800aaa4:	0800e324 	.word	0x0800e324
 800aaa8:	0800e2d9 	.word	0x0800e2d9
 800aaac:	0800e514 	.word	0x0800e514
 800aab0:	0800e40f 	.word	0x0800e40f
 800aab4:	0800e688 	.word	0x0800e688
 800aab8:	0800e660 	.word	0x0800e660
 800aabc:	7ff00000 	.word	0x7ff00000
 800aac0:	7ca00000 	.word	0x7ca00000
 800aac4:	7fefffff 	.word	0x7fefffff
 800aac8:	f018 0310 	ands.w	r3, r8, #16
 800aacc:	bf18      	it	ne
 800aace:	236a      	movne	r3, #106	; 0x6a
 800aad0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ae80 <_strtod_l+0x970>
 800aad4:	9304      	str	r3, [sp, #16]
 800aad6:	4650      	mov	r0, sl
 800aad8:	4659      	mov	r1, fp
 800aada:	2300      	movs	r3, #0
 800aadc:	f018 0f01 	tst.w	r8, #1
 800aae0:	d004      	beq.n	800aaec <_strtod_l+0x5dc>
 800aae2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aae6:	f7f5 fdaf 	bl	8000648 <__aeabi_dmul>
 800aaea:	2301      	movs	r3, #1
 800aaec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aaf0:	f109 0908 	add.w	r9, r9, #8
 800aaf4:	d1f2      	bne.n	800aadc <_strtod_l+0x5cc>
 800aaf6:	b10b      	cbz	r3, 800aafc <_strtod_l+0x5ec>
 800aaf8:	4682      	mov	sl, r0
 800aafa:	468b      	mov	fp, r1
 800aafc:	9b04      	ldr	r3, [sp, #16]
 800aafe:	b1c3      	cbz	r3, 800ab32 <_strtod_l+0x622>
 800ab00:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ab04:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	4659      	mov	r1, fp
 800ab0c:	dd11      	ble.n	800ab32 <_strtod_l+0x622>
 800ab0e:	2b1f      	cmp	r3, #31
 800ab10:	f340 8124 	ble.w	800ad5c <_strtod_l+0x84c>
 800ab14:	2b34      	cmp	r3, #52	; 0x34
 800ab16:	bfde      	ittt	le
 800ab18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ab1c:	f04f 33ff 	movle.w	r3, #4294967295
 800ab20:	fa03 f202 	lslle.w	r2, r3, r2
 800ab24:	f04f 0a00 	mov.w	sl, #0
 800ab28:	bfcc      	ite	gt
 800ab2a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ab2e:	ea02 0b01 	andle.w	fp, r2, r1
 800ab32:	2200      	movs	r2, #0
 800ab34:	2300      	movs	r3, #0
 800ab36:	4650      	mov	r0, sl
 800ab38:	4659      	mov	r1, fp
 800ab3a:	f7f5 ffed 	bl	8000b18 <__aeabi_dcmpeq>
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d1a2      	bne.n	800aa88 <_strtod_l+0x578>
 800ab42:	9b07      	ldr	r3, [sp, #28]
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	9908      	ldr	r1, [sp, #32]
 800ab48:	462b      	mov	r3, r5
 800ab4a:	463a      	mov	r2, r7
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f001 ff11 	bl	800c974 <__s2b>
 800ab52:	9007      	str	r0, [sp, #28]
 800ab54:	2800      	cmp	r0, #0
 800ab56:	f43f af1f 	beq.w	800a998 <_strtod_l+0x488>
 800ab5a:	9b05      	ldr	r3, [sp, #20]
 800ab5c:	1b9e      	subs	r6, r3, r6
 800ab5e:	9b06      	ldr	r3, [sp, #24]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bfb4      	ite	lt
 800ab64:	4633      	movlt	r3, r6
 800ab66:	2300      	movge	r3, #0
 800ab68:	930c      	str	r3, [sp, #48]	; 0x30
 800ab6a:	9b06      	ldr	r3, [sp, #24]
 800ab6c:	2500      	movs	r5, #0
 800ab6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ab72:	9312      	str	r3, [sp, #72]	; 0x48
 800ab74:	462e      	mov	r6, r5
 800ab76:	9b07      	ldr	r3, [sp, #28]
 800ab78:	4620      	mov	r0, r4
 800ab7a:	6859      	ldr	r1, [r3, #4]
 800ab7c:	f001 fe52 	bl	800c824 <_Balloc>
 800ab80:	9005      	str	r0, [sp, #20]
 800ab82:	2800      	cmp	r0, #0
 800ab84:	f43f af0c 	beq.w	800a9a0 <_strtod_l+0x490>
 800ab88:	9b07      	ldr	r3, [sp, #28]
 800ab8a:	691a      	ldr	r2, [r3, #16]
 800ab8c:	3202      	adds	r2, #2
 800ab8e:	f103 010c 	add.w	r1, r3, #12
 800ab92:	0092      	lsls	r2, r2, #2
 800ab94:	300c      	adds	r0, #12
 800ab96:	f7fe fdd1 	bl	800973c <memcpy>
 800ab9a:	ec4b ab10 	vmov	d0, sl, fp
 800ab9e:	aa1a      	add	r2, sp, #104	; 0x68
 800aba0:	a919      	add	r1, sp, #100	; 0x64
 800aba2:	4620      	mov	r0, r4
 800aba4:	f002 fa2c 	bl	800d000 <__d2b>
 800aba8:	ec4b ab18 	vmov	d8, sl, fp
 800abac:	9018      	str	r0, [sp, #96]	; 0x60
 800abae:	2800      	cmp	r0, #0
 800abb0:	f43f aef6 	beq.w	800a9a0 <_strtod_l+0x490>
 800abb4:	2101      	movs	r1, #1
 800abb6:	4620      	mov	r0, r4
 800abb8:	f001 ff76 	bl	800caa8 <__i2b>
 800abbc:	4606      	mov	r6, r0
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f43f aeee 	beq.w	800a9a0 <_strtod_l+0x490>
 800abc4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800abc6:	9904      	ldr	r1, [sp, #16]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	bfab      	itete	ge
 800abcc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800abce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800abd0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800abd2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800abd6:	bfac      	ite	ge
 800abd8:	eb03 0902 	addge.w	r9, r3, r2
 800abdc:	1ad7      	sublt	r7, r2, r3
 800abde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800abe0:	eba3 0801 	sub.w	r8, r3, r1
 800abe4:	4490      	add	r8, r2
 800abe6:	4ba1      	ldr	r3, [pc, #644]	; (800ae6c <_strtod_l+0x95c>)
 800abe8:	f108 38ff 	add.w	r8, r8, #4294967295
 800abec:	4598      	cmp	r8, r3
 800abee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800abf2:	f280 80c7 	bge.w	800ad84 <_strtod_l+0x874>
 800abf6:	eba3 0308 	sub.w	r3, r3, r8
 800abfa:	2b1f      	cmp	r3, #31
 800abfc:	eba2 0203 	sub.w	r2, r2, r3
 800ac00:	f04f 0101 	mov.w	r1, #1
 800ac04:	f300 80b1 	bgt.w	800ad6a <_strtod_l+0x85a>
 800ac08:	fa01 f303 	lsl.w	r3, r1, r3
 800ac0c:	930d      	str	r3, [sp, #52]	; 0x34
 800ac0e:	2300      	movs	r3, #0
 800ac10:	9308      	str	r3, [sp, #32]
 800ac12:	eb09 0802 	add.w	r8, r9, r2
 800ac16:	9b04      	ldr	r3, [sp, #16]
 800ac18:	45c1      	cmp	r9, r8
 800ac1a:	4417      	add	r7, r2
 800ac1c:	441f      	add	r7, r3
 800ac1e:	464b      	mov	r3, r9
 800ac20:	bfa8      	it	ge
 800ac22:	4643      	movge	r3, r8
 800ac24:	42bb      	cmp	r3, r7
 800ac26:	bfa8      	it	ge
 800ac28:	463b      	movge	r3, r7
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	bfc2      	ittt	gt
 800ac2e:	eba8 0803 	subgt.w	r8, r8, r3
 800ac32:	1aff      	subgt	r7, r7, r3
 800ac34:	eba9 0903 	subgt.w	r9, r9, r3
 800ac38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	dd17      	ble.n	800ac6e <_strtod_l+0x75e>
 800ac3e:	4631      	mov	r1, r6
 800ac40:	461a      	mov	r2, r3
 800ac42:	4620      	mov	r0, r4
 800ac44:	f001 fff0 	bl	800cc28 <__pow5mult>
 800ac48:	4606      	mov	r6, r0
 800ac4a:	2800      	cmp	r0, #0
 800ac4c:	f43f aea8 	beq.w	800a9a0 <_strtod_l+0x490>
 800ac50:	4601      	mov	r1, r0
 800ac52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac54:	4620      	mov	r0, r4
 800ac56:	f001 ff3d 	bl	800cad4 <__multiply>
 800ac5a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	f43f ae9f 	beq.w	800a9a0 <_strtod_l+0x490>
 800ac62:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac64:	4620      	mov	r0, r4
 800ac66:	f001 fe1d 	bl	800c8a4 <_Bfree>
 800ac6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac6c:	9318      	str	r3, [sp, #96]	; 0x60
 800ac6e:	f1b8 0f00 	cmp.w	r8, #0
 800ac72:	f300 808c 	bgt.w	800ad8e <_strtod_l+0x87e>
 800ac76:	9b06      	ldr	r3, [sp, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	dd08      	ble.n	800ac8e <_strtod_l+0x77e>
 800ac7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac7e:	9905      	ldr	r1, [sp, #20]
 800ac80:	4620      	mov	r0, r4
 800ac82:	f001 ffd1 	bl	800cc28 <__pow5mult>
 800ac86:	9005      	str	r0, [sp, #20]
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	f43f ae89 	beq.w	800a9a0 <_strtod_l+0x490>
 800ac8e:	2f00      	cmp	r7, #0
 800ac90:	dd08      	ble.n	800aca4 <_strtod_l+0x794>
 800ac92:	9905      	ldr	r1, [sp, #20]
 800ac94:	463a      	mov	r2, r7
 800ac96:	4620      	mov	r0, r4
 800ac98:	f002 f820 	bl	800ccdc <__lshift>
 800ac9c:	9005      	str	r0, [sp, #20]
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f43f ae7e 	beq.w	800a9a0 <_strtod_l+0x490>
 800aca4:	f1b9 0f00 	cmp.w	r9, #0
 800aca8:	dd08      	ble.n	800acbc <_strtod_l+0x7ac>
 800acaa:	4631      	mov	r1, r6
 800acac:	464a      	mov	r2, r9
 800acae:	4620      	mov	r0, r4
 800acb0:	f002 f814 	bl	800ccdc <__lshift>
 800acb4:	4606      	mov	r6, r0
 800acb6:	2800      	cmp	r0, #0
 800acb8:	f43f ae72 	beq.w	800a9a0 <_strtod_l+0x490>
 800acbc:	9a05      	ldr	r2, [sp, #20]
 800acbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800acc0:	4620      	mov	r0, r4
 800acc2:	f002 f897 	bl	800cdf4 <__mdiff>
 800acc6:	4605      	mov	r5, r0
 800acc8:	2800      	cmp	r0, #0
 800acca:	f43f ae69 	beq.w	800a9a0 <_strtod_l+0x490>
 800acce:	68c3      	ldr	r3, [r0, #12]
 800acd0:	930b      	str	r3, [sp, #44]	; 0x2c
 800acd2:	2300      	movs	r3, #0
 800acd4:	60c3      	str	r3, [r0, #12]
 800acd6:	4631      	mov	r1, r6
 800acd8:	f002 f870 	bl	800cdbc <__mcmp>
 800acdc:	2800      	cmp	r0, #0
 800acde:	da60      	bge.n	800ada2 <_strtod_l+0x892>
 800ace0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ace2:	ea53 030a 	orrs.w	r3, r3, sl
 800ace6:	f040 8082 	bne.w	800adee <_strtod_l+0x8de>
 800acea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d17d      	bne.n	800adee <_strtod_l+0x8de>
 800acf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800acf6:	0d1b      	lsrs	r3, r3, #20
 800acf8:	051b      	lsls	r3, r3, #20
 800acfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800acfe:	d976      	bls.n	800adee <_strtod_l+0x8de>
 800ad00:	696b      	ldr	r3, [r5, #20]
 800ad02:	b913      	cbnz	r3, 800ad0a <_strtod_l+0x7fa>
 800ad04:	692b      	ldr	r3, [r5, #16]
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	dd71      	ble.n	800adee <_strtod_l+0x8de>
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f001 ffe4 	bl	800ccdc <__lshift>
 800ad14:	4631      	mov	r1, r6
 800ad16:	4605      	mov	r5, r0
 800ad18:	f002 f850 	bl	800cdbc <__mcmp>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	dd66      	ble.n	800adee <_strtod_l+0x8de>
 800ad20:	9904      	ldr	r1, [sp, #16]
 800ad22:	4a53      	ldr	r2, [pc, #332]	; (800ae70 <_strtod_l+0x960>)
 800ad24:	465b      	mov	r3, fp
 800ad26:	2900      	cmp	r1, #0
 800ad28:	f000 8081 	beq.w	800ae2e <_strtod_l+0x91e>
 800ad2c:	ea02 010b 	and.w	r1, r2, fp
 800ad30:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ad34:	dc7b      	bgt.n	800ae2e <_strtod_l+0x91e>
 800ad36:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad3a:	f77f aea9 	ble.w	800aa90 <_strtod_l+0x580>
 800ad3e:	4b4d      	ldr	r3, [pc, #308]	; (800ae74 <_strtod_l+0x964>)
 800ad40:	4650      	mov	r0, sl
 800ad42:	4659      	mov	r1, fp
 800ad44:	2200      	movs	r2, #0
 800ad46:	f7f5 fc7f 	bl	8000648 <__aeabi_dmul>
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	4303      	orrs	r3, r0
 800ad4e:	bf08      	it	eq
 800ad50:	2322      	moveq	r3, #34	; 0x22
 800ad52:	4682      	mov	sl, r0
 800ad54:	468b      	mov	fp, r1
 800ad56:	bf08      	it	eq
 800ad58:	6023      	streq	r3, [r4, #0]
 800ad5a:	e62b      	b.n	800a9b4 <_strtod_l+0x4a4>
 800ad5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad60:	fa02 f303 	lsl.w	r3, r2, r3
 800ad64:	ea03 0a0a 	and.w	sl, r3, sl
 800ad68:	e6e3      	b.n	800ab32 <_strtod_l+0x622>
 800ad6a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ad6e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ad72:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ad76:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ad7a:	fa01 f308 	lsl.w	r3, r1, r8
 800ad7e:	9308      	str	r3, [sp, #32]
 800ad80:	910d      	str	r1, [sp, #52]	; 0x34
 800ad82:	e746      	b.n	800ac12 <_strtod_l+0x702>
 800ad84:	2300      	movs	r3, #0
 800ad86:	9308      	str	r3, [sp, #32]
 800ad88:	2301      	movs	r3, #1
 800ad8a:	930d      	str	r3, [sp, #52]	; 0x34
 800ad8c:	e741      	b.n	800ac12 <_strtod_l+0x702>
 800ad8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad90:	4642      	mov	r2, r8
 800ad92:	4620      	mov	r0, r4
 800ad94:	f001 ffa2 	bl	800ccdc <__lshift>
 800ad98:	9018      	str	r0, [sp, #96]	; 0x60
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	f47f af6b 	bne.w	800ac76 <_strtod_l+0x766>
 800ada0:	e5fe      	b.n	800a9a0 <_strtod_l+0x490>
 800ada2:	465f      	mov	r7, fp
 800ada4:	d16e      	bne.n	800ae84 <_strtod_l+0x974>
 800ada6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ada8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800adac:	b342      	cbz	r2, 800ae00 <_strtod_l+0x8f0>
 800adae:	4a32      	ldr	r2, [pc, #200]	; (800ae78 <_strtod_l+0x968>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d128      	bne.n	800ae06 <_strtod_l+0x8f6>
 800adb4:	9b04      	ldr	r3, [sp, #16]
 800adb6:	4651      	mov	r1, sl
 800adb8:	b1eb      	cbz	r3, 800adf6 <_strtod_l+0x8e6>
 800adba:	4b2d      	ldr	r3, [pc, #180]	; (800ae70 <_strtod_l+0x960>)
 800adbc:	403b      	ands	r3, r7
 800adbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800adc2:	f04f 32ff 	mov.w	r2, #4294967295
 800adc6:	d819      	bhi.n	800adfc <_strtod_l+0x8ec>
 800adc8:	0d1b      	lsrs	r3, r3, #20
 800adca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800adce:	fa02 f303 	lsl.w	r3, r2, r3
 800add2:	4299      	cmp	r1, r3
 800add4:	d117      	bne.n	800ae06 <_strtod_l+0x8f6>
 800add6:	4b29      	ldr	r3, [pc, #164]	; (800ae7c <_strtod_l+0x96c>)
 800add8:	429f      	cmp	r7, r3
 800adda:	d102      	bne.n	800ade2 <_strtod_l+0x8d2>
 800addc:	3101      	adds	r1, #1
 800adde:	f43f addf 	beq.w	800a9a0 <_strtod_l+0x490>
 800ade2:	4b23      	ldr	r3, [pc, #140]	; (800ae70 <_strtod_l+0x960>)
 800ade4:	403b      	ands	r3, r7
 800ade6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800adea:	f04f 0a00 	mov.w	sl, #0
 800adee:	9b04      	ldr	r3, [sp, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1a4      	bne.n	800ad3e <_strtod_l+0x82e>
 800adf4:	e5de      	b.n	800a9b4 <_strtod_l+0x4a4>
 800adf6:	f04f 33ff 	mov.w	r3, #4294967295
 800adfa:	e7ea      	b.n	800add2 <_strtod_l+0x8c2>
 800adfc:	4613      	mov	r3, r2
 800adfe:	e7e8      	b.n	800add2 <_strtod_l+0x8c2>
 800ae00:	ea53 030a 	orrs.w	r3, r3, sl
 800ae04:	d08c      	beq.n	800ad20 <_strtod_l+0x810>
 800ae06:	9b08      	ldr	r3, [sp, #32]
 800ae08:	b1db      	cbz	r3, 800ae42 <_strtod_l+0x932>
 800ae0a:	423b      	tst	r3, r7
 800ae0c:	d0ef      	beq.n	800adee <_strtod_l+0x8de>
 800ae0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae10:	9a04      	ldr	r2, [sp, #16]
 800ae12:	4650      	mov	r0, sl
 800ae14:	4659      	mov	r1, fp
 800ae16:	b1c3      	cbz	r3, 800ae4a <_strtod_l+0x93a>
 800ae18:	f7ff fb5c 	bl	800a4d4 <sulp>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	460b      	mov	r3, r1
 800ae20:	ec51 0b18 	vmov	r0, r1, d8
 800ae24:	f7f5 fa5a 	bl	80002dc <__adddf3>
 800ae28:	4682      	mov	sl, r0
 800ae2a:	468b      	mov	fp, r1
 800ae2c:	e7df      	b.n	800adee <_strtod_l+0x8de>
 800ae2e:	4013      	ands	r3, r2
 800ae30:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae34:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ae38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ae3c:	f04f 3aff 	mov.w	sl, #4294967295
 800ae40:	e7d5      	b.n	800adee <_strtod_l+0x8de>
 800ae42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae44:	ea13 0f0a 	tst.w	r3, sl
 800ae48:	e7e0      	b.n	800ae0c <_strtod_l+0x8fc>
 800ae4a:	f7ff fb43 	bl	800a4d4 <sulp>
 800ae4e:	4602      	mov	r2, r0
 800ae50:	460b      	mov	r3, r1
 800ae52:	ec51 0b18 	vmov	r0, r1, d8
 800ae56:	f7f5 fa3f 	bl	80002d8 <__aeabi_dsub>
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4682      	mov	sl, r0
 800ae60:	468b      	mov	fp, r1
 800ae62:	f7f5 fe59 	bl	8000b18 <__aeabi_dcmpeq>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d0c1      	beq.n	800adee <_strtod_l+0x8de>
 800ae6a:	e611      	b.n	800aa90 <_strtod_l+0x580>
 800ae6c:	fffffc02 	.word	0xfffffc02
 800ae70:	7ff00000 	.word	0x7ff00000
 800ae74:	39500000 	.word	0x39500000
 800ae78:	000fffff 	.word	0x000fffff
 800ae7c:	7fefffff 	.word	0x7fefffff
 800ae80:	0800e338 	.word	0x0800e338
 800ae84:	4631      	mov	r1, r6
 800ae86:	4628      	mov	r0, r5
 800ae88:	f002 f916 	bl	800d0b8 <__ratio>
 800ae8c:	ec59 8b10 	vmov	r8, r9, d0
 800ae90:	ee10 0a10 	vmov	r0, s0
 800ae94:	2200      	movs	r2, #0
 800ae96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae9a:	4649      	mov	r1, r9
 800ae9c:	f7f5 fe50 	bl	8000b40 <__aeabi_dcmple>
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d07a      	beq.n	800af9a <_strtod_l+0xa8a>
 800aea4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d04a      	beq.n	800af40 <_strtod_l+0xa30>
 800aeaa:	4b95      	ldr	r3, [pc, #596]	; (800b100 <_strtod_l+0xbf0>)
 800aeac:	2200      	movs	r2, #0
 800aeae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aeb2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b100 <_strtod_l+0xbf0>
 800aeb6:	f04f 0800 	mov.w	r8, #0
 800aeba:	4b92      	ldr	r3, [pc, #584]	; (800b104 <_strtod_l+0xbf4>)
 800aebc:	403b      	ands	r3, r7
 800aebe:	930d      	str	r3, [sp, #52]	; 0x34
 800aec0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aec2:	4b91      	ldr	r3, [pc, #580]	; (800b108 <_strtod_l+0xbf8>)
 800aec4:	429a      	cmp	r2, r3
 800aec6:	f040 80b0 	bne.w	800b02a <_strtod_l+0xb1a>
 800aeca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aece:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800aed2:	ec4b ab10 	vmov	d0, sl, fp
 800aed6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aeda:	f002 f815 	bl	800cf08 <__ulp>
 800aede:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aee2:	ec53 2b10 	vmov	r2, r3, d0
 800aee6:	f7f5 fbaf 	bl	8000648 <__aeabi_dmul>
 800aeea:	4652      	mov	r2, sl
 800aeec:	465b      	mov	r3, fp
 800aeee:	f7f5 f9f5 	bl	80002dc <__adddf3>
 800aef2:	460b      	mov	r3, r1
 800aef4:	4983      	ldr	r1, [pc, #524]	; (800b104 <_strtod_l+0xbf4>)
 800aef6:	4a85      	ldr	r2, [pc, #532]	; (800b10c <_strtod_l+0xbfc>)
 800aef8:	4019      	ands	r1, r3
 800aefa:	4291      	cmp	r1, r2
 800aefc:	4682      	mov	sl, r0
 800aefe:	d960      	bls.n	800afc2 <_strtod_l+0xab2>
 800af00:	ee18 3a90 	vmov	r3, s17
 800af04:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800af08:	4293      	cmp	r3, r2
 800af0a:	d104      	bne.n	800af16 <_strtod_l+0xa06>
 800af0c:	ee18 3a10 	vmov	r3, s16
 800af10:	3301      	adds	r3, #1
 800af12:	f43f ad45 	beq.w	800a9a0 <_strtod_l+0x490>
 800af16:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b118 <_strtod_l+0xc08>
 800af1a:	f04f 3aff 	mov.w	sl, #4294967295
 800af1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af20:	4620      	mov	r0, r4
 800af22:	f001 fcbf 	bl	800c8a4 <_Bfree>
 800af26:	9905      	ldr	r1, [sp, #20]
 800af28:	4620      	mov	r0, r4
 800af2a:	f001 fcbb 	bl	800c8a4 <_Bfree>
 800af2e:	4631      	mov	r1, r6
 800af30:	4620      	mov	r0, r4
 800af32:	f001 fcb7 	bl	800c8a4 <_Bfree>
 800af36:	4629      	mov	r1, r5
 800af38:	4620      	mov	r0, r4
 800af3a:	f001 fcb3 	bl	800c8a4 <_Bfree>
 800af3e:	e61a      	b.n	800ab76 <_strtod_l+0x666>
 800af40:	f1ba 0f00 	cmp.w	sl, #0
 800af44:	d11b      	bne.n	800af7e <_strtod_l+0xa6e>
 800af46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af4a:	b9f3      	cbnz	r3, 800af8a <_strtod_l+0xa7a>
 800af4c:	4b6c      	ldr	r3, [pc, #432]	; (800b100 <_strtod_l+0xbf0>)
 800af4e:	2200      	movs	r2, #0
 800af50:	4640      	mov	r0, r8
 800af52:	4649      	mov	r1, r9
 800af54:	f7f5 fdea 	bl	8000b2c <__aeabi_dcmplt>
 800af58:	b9d0      	cbnz	r0, 800af90 <_strtod_l+0xa80>
 800af5a:	4640      	mov	r0, r8
 800af5c:	4649      	mov	r1, r9
 800af5e:	4b6c      	ldr	r3, [pc, #432]	; (800b110 <_strtod_l+0xc00>)
 800af60:	2200      	movs	r2, #0
 800af62:	f7f5 fb71 	bl	8000648 <__aeabi_dmul>
 800af66:	4680      	mov	r8, r0
 800af68:	4689      	mov	r9, r1
 800af6a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800af6e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800af72:	9315      	str	r3, [sp, #84]	; 0x54
 800af74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800af78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af7c:	e79d      	b.n	800aeba <_strtod_l+0x9aa>
 800af7e:	f1ba 0f01 	cmp.w	sl, #1
 800af82:	d102      	bne.n	800af8a <_strtod_l+0xa7a>
 800af84:	2f00      	cmp	r7, #0
 800af86:	f43f ad83 	beq.w	800aa90 <_strtod_l+0x580>
 800af8a:	4b62      	ldr	r3, [pc, #392]	; (800b114 <_strtod_l+0xc04>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	e78e      	b.n	800aeae <_strtod_l+0x99e>
 800af90:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b110 <_strtod_l+0xc00>
 800af94:	f04f 0800 	mov.w	r8, #0
 800af98:	e7e7      	b.n	800af6a <_strtod_l+0xa5a>
 800af9a:	4b5d      	ldr	r3, [pc, #372]	; (800b110 <_strtod_l+0xc00>)
 800af9c:	4640      	mov	r0, r8
 800af9e:	4649      	mov	r1, r9
 800afa0:	2200      	movs	r2, #0
 800afa2:	f7f5 fb51 	bl	8000648 <__aeabi_dmul>
 800afa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afa8:	4680      	mov	r8, r0
 800afaa:	4689      	mov	r9, r1
 800afac:	b933      	cbnz	r3, 800afbc <_strtod_l+0xaac>
 800afae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800afb2:	900e      	str	r0, [sp, #56]	; 0x38
 800afb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800afb6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800afba:	e7dd      	b.n	800af78 <_strtod_l+0xa68>
 800afbc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800afc0:	e7f9      	b.n	800afb6 <_strtod_l+0xaa6>
 800afc2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800afc6:	9b04      	ldr	r3, [sp, #16]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1a8      	bne.n	800af1e <_strtod_l+0xa0e>
 800afcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800afd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afd2:	0d1b      	lsrs	r3, r3, #20
 800afd4:	051b      	lsls	r3, r3, #20
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d1a1      	bne.n	800af1e <_strtod_l+0xa0e>
 800afda:	4640      	mov	r0, r8
 800afdc:	4649      	mov	r1, r9
 800afde:	f7f5 fe93 	bl	8000d08 <__aeabi_d2lz>
 800afe2:	f7f5 fb03 	bl	80005ec <__aeabi_l2d>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	4640      	mov	r0, r8
 800afec:	4649      	mov	r1, r9
 800afee:	f7f5 f973 	bl	80002d8 <__aeabi_dsub>
 800aff2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aff4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aff8:	ea43 030a 	orr.w	r3, r3, sl
 800affc:	4313      	orrs	r3, r2
 800affe:	4680      	mov	r8, r0
 800b000:	4689      	mov	r9, r1
 800b002:	d055      	beq.n	800b0b0 <_strtod_l+0xba0>
 800b004:	a336      	add	r3, pc, #216	; (adr r3, 800b0e0 <_strtod_l+0xbd0>)
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	f7f5 fd8f 	bl	8000b2c <__aeabi_dcmplt>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f47f acd0 	bne.w	800a9b4 <_strtod_l+0x4a4>
 800b014:	a334      	add	r3, pc, #208	; (adr r3, 800b0e8 <_strtod_l+0xbd8>)
 800b016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01a:	4640      	mov	r0, r8
 800b01c:	4649      	mov	r1, r9
 800b01e:	f7f5 fda3 	bl	8000b68 <__aeabi_dcmpgt>
 800b022:	2800      	cmp	r0, #0
 800b024:	f43f af7b 	beq.w	800af1e <_strtod_l+0xa0e>
 800b028:	e4c4      	b.n	800a9b4 <_strtod_l+0x4a4>
 800b02a:	9b04      	ldr	r3, [sp, #16]
 800b02c:	b333      	cbz	r3, 800b07c <_strtod_l+0xb6c>
 800b02e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b030:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b034:	d822      	bhi.n	800b07c <_strtod_l+0xb6c>
 800b036:	a32e      	add	r3, pc, #184	; (adr r3, 800b0f0 <_strtod_l+0xbe0>)
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	4640      	mov	r0, r8
 800b03e:	4649      	mov	r1, r9
 800b040:	f7f5 fd7e 	bl	8000b40 <__aeabi_dcmple>
 800b044:	b1a0      	cbz	r0, 800b070 <_strtod_l+0xb60>
 800b046:	4649      	mov	r1, r9
 800b048:	4640      	mov	r0, r8
 800b04a:	f7f5 fdd5 	bl	8000bf8 <__aeabi_d2uiz>
 800b04e:	2801      	cmp	r0, #1
 800b050:	bf38      	it	cc
 800b052:	2001      	movcc	r0, #1
 800b054:	f7f5 fa7e 	bl	8000554 <__aeabi_ui2d>
 800b058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b05a:	4680      	mov	r8, r0
 800b05c:	4689      	mov	r9, r1
 800b05e:	bb23      	cbnz	r3, 800b0aa <_strtod_l+0xb9a>
 800b060:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b064:	9010      	str	r0, [sp, #64]	; 0x40
 800b066:	9311      	str	r3, [sp, #68]	; 0x44
 800b068:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b06c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b072:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b074:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b078:	1a9b      	subs	r3, r3, r2
 800b07a:	9309      	str	r3, [sp, #36]	; 0x24
 800b07c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b080:	eeb0 0a48 	vmov.f32	s0, s16
 800b084:	eef0 0a68 	vmov.f32	s1, s17
 800b088:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b08c:	f001 ff3c 	bl	800cf08 <__ulp>
 800b090:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b094:	ec53 2b10 	vmov	r2, r3, d0
 800b098:	f7f5 fad6 	bl	8000648 <__aeabi_dmul>
 800b09c:	ec53 2b18 	vmov	r2, r3, d8
 800b0a0:	f7f5 f91c 	bl	80002dc <__adddf3>
 800b0a4:	4682      	mov	sl, r0
 800b0a6:	468b      	mov	fp, r1
 800b0a8:	e78d      	b.n	800afc6 <_strtod_l+0xab6>
 800b0aa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b0ae:	e7db      	b.n	800b068 <_strtod_l+0xb58>
 800b0b0:	a311      	add	r3, pc, #68	; (adr r3, 800b0f8 <_strtod_l+0xbe8>)
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	f7f5 fd39 	bl	8000b2c <__aeabi_dcmplt>
 800b0ba:	e7b2      	b.n	800b022 <_strtod_l+0xb12>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	930a      	str	r3, [sp, #40]	; 0x28
 800b0c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b0c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0c4:	6013      	str	r3, [r2, #0]
 800b0c6:	f7ff ba6b 	b.w	800a5a0 <_strtod_l+0x90>
 800b0ca:	2a65      	cmp	r2, #101	; 0x65
 800b0cc:	f43f ab5f 	beq.w	800a78e <_strtod_l+0x27e>
 800b0d0:	2a45      	cmp	r2, #69	; 0x45
 800b0d2:	f43f ab5c 	beq.w	800a78e <_strtod_l+0x27e>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	f7ff bb94 	b.w	800a804 <_strtod_l+0x2f4>
 800b0dc:	f3af 8000 	nop.w
 800b0e0:	94a03595 	.word	0x94a03595
 800b0e4:	3fdfffff 	.word	0x3fdfffff
 800b0e8:	35afe535 	.word	0x35afe535
 800b0ec:	3fe00000 	.word	0x3fe00000
 800b0f0:	ffc00000 	.word	0xffc00000
 800b0f4:	41dfffff 	.word	0x41dfffff
 800b0f8:	94a03595 	.word	0x94a03595
 800b0fc:	3fcfffff 	.word	0x3fcfffff
 800b100:	3ff00000 	.word	0x3ff00000
 800b104:	7ff00000 	.word	0x7ff00000
 800b108:	7fe00000 	.word	0x7fe00000
 800b10c:	7c9fffff 	.word	0x7c9fffff
 800b110:	3fe00000 	.word	0x3fe00000
 800b114:	bff00000 	.word	0xbff00000
 800b118:	7fefffff 	.word	0x7fefffff

0800b11c <_strtod_r>:
 800b11c:	4b01      	ldr	r3, [pc, #4]	; (800b124 <_strtod_r+0x8>)
 800b11e:	f7ff b9f7 	b.w	800a510 <_strtod_l>
 800b122:	bf00      	nop
 800b124:	20000084 	.word	0x20000084

0800b128 <strtof>:
 800b128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b12c:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800b1dc <strtof+0xb4>
 800b130:	4b26      	ldr	r3, [pc, #152]	; (800b1cc <strtof+0xa4>)
 800b132:	460a      	mov	r2, r1
 800b134:	ed2d 8b02 	vpush	{d8}
 800b138:	4601      	mov	r1, r0
 800b13a:	f8d8 0000 	ldr.w	r0, [r8]
 800b13e:	f7ff f9e7 	bl	800a510 <_strtod_l>
 800b142:	ec55 4b10 	vmov	r4, r5, d0
 800b146:	ee10 2a10 	vmov	r2, s0
 800b14a:	ee10 0a10 	vmov	r0, s0
 800b14e:	462b      	mov	r3, r5
 800b150:	4629      	mov	r1, r5
 800b152:	f7f5 fd13 	bl	8000b7c <__aeabi_dcmpun>
 800b156:	b190      	cbz	r0, 800b17e <strtof+0x56>
 800b158:	2d00      	cmp	r5, #0
 800b15a:	481d      	ldr	r0, [pc, #116]	; (800b1d0 <strtof+0xa8>)
 800b15c:	da09      	bge.n	800b172 <strtof+0x4a>
 800b15e:	f7ff f97d 	bl	800a45c <nanf>
 800b162:	eeb1 8a40 	vneg.f32	s16, s0
 800b166:	eeb0 0a48 	vmov.f32	s0, s16
 800b16a:	ecbd 8b02 	vpop	{d8}
 800b16e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b172:	ecbd 8b02 	vpop	{d8}
 800b176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b17a:	f7ff b96f 	b.w	800a45c <nanf>
 800b17e:	4620      	mov	r0, r4
 800b180:	4629      	mov	r1, r5
 800b182:	f7f5 fd59 	bl	8000c38 <__aeabi_d2f>
 800b186:	ee08 0a10 	vmov	s16, r0
 800b18a:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b1d4 <strtof+0xac>
 800b18e:	eeb0 7ac8 	vabs.f32	s14, s16
 800b192:	eeb4 7a67 	vcmp.f32	s14, s15
 800b196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b19a:	dde4      	ble.n	800b166 <strtof+0x3e>
 800b19c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800b1a0:	4b0d      	ldr	r3, [pc, #52]	; (800b1d8 <strtof+0xb0>)
 800b1a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	4639      	mov	r1, r7
 800b1aa:	f7f5 fce7 	bl	8000b7c <__aeabi_dcmpun>
 800b1ae:	b940      	cbnz	r0, 800b1c2 <strtof+0x9a>
 800b1b0:	4b09      	ldr	r3, [pc, #36]	; (800b1d8 <strtof+0xb0>)
 800b1b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	f7f5 fcc1 	bl	8000b40 <__aeabi_dcmple>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d0d1      	beq.n	800b166 <strtof+0x3e>
 800b1c2:	f8d8 3000 	ldr.w	r3, [r8]
 800b1c6:	2222      	movs	r2, #34	; 0x22
 800b1c8:	601a      	str	r2, [r3, #0]
 800b1ca:	e7cc      	b.n	800b166 <strtof+0x3e>
 800b1cc:	20000084 	.word	0x20000084
 800b1d0:	0800e40f 	.word	0x0800e40f
 800b1d4:	7f7fffff 	.word	0x7f7fffff
 800b1d8:	7fefffff 	.word	0x7fefffff
 800b1dc:	2000001c 	.word	0x2000001c

0800b1e0 <strtok>:
 800b1e0:	4b16      	ldr	r3, [pc, #88]	; (800b23c <strtok+0x5c>)
 800b1e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1e4:	681e      	ldr	r6, [r3, #0]
 800b1e6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b1e8:	4605      	mov	r5, r0
 800b1ea:	b9fc      	cbnz	r4, 800b22c <strtok+0x4c>
 800b1ec:	2050      	movs	r0, #80	; 0x50
 800b1ee:	9101      	str	r1, [sp, #4]
 800b1f0:	f001 fafe 	bl	800c7f0 <malloc>
 800b1f4:	9901      	ldr	r1, [sp, #4]
 800b1f6:	65b0      	str	r0, [r6, #88]	; 0x58
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	b920      	cbnz	r0, 800b206 <strtok+0x26>
 800b1fc:	4b10      	ldr	r3, [pc, #64]	; (800b240 <strtok+0x60>)
 800b1fe:	4811      	ldr	r0, [pc, #68]	; (800b244 <strtok+0x64>)
 800b200:	2157      	movs	r1, #87	; 0x57
 800b202:	f000 f8d7 	bl	800b3b4 <__assert_func>
 800b206:	e9c0 4400 	strd	r4, r4, [r0]
 800b20a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b20e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b212:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b216:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b21a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b21e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b222:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b226:	6184      	str	r4, [r0, #24]
 800b228:	7704      	strb	r4, [r0, #28]
 800b22a:	6244      	str	r4, [r0, #36]	; 0x24
 800b22c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b22e:	2301      	movs	r3, #1
 800b230:	4628      	mov	r0, r5
 800b232:	b002      	add	sp, #8
 800b234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b238:	f000 b806 	b.w	800b248 <__strtok_r>
 800b23c:	2000001c 	.word	0x2000001c
 800b240:	0800e360 	.word	0x0800e360
 800b244:	0800e377 	.word	0x0800e377

0800b248 <__strtok_r>:
 800b248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b24a:	b908      	cbnz	r0, 800b250 <__strtok_r+0x8>
 800b24c:	6810      	ldr	r0, [r2, #0]
 800b24e:	b188      	cbz	r0, 800b274 <__strtok_r+0x2c>
 800b250:	4604      	mov	r4, r0
 800b252:	4620      	mov	r0, r4
 800b254:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b258:	460f      	mov	r7, r1
 800b25a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b25e:	b91e      	cbnz	r6, 800b268 <__strtok_r+0x20>
 800b260:	b965      	cbnz	r5, 800b27c <__strtok_r+0x34>
 800b262:	6015      	str	r5, [r2, #0]
 800b264:	4628      	mov	r0, r5
 800b266:	e005      	b.n	800b274 <__strtok_r+0x2c>
 800b268:	42b5      	cmp	r5, r6
 800b26a:	d1f6      	bne.n	800b25a <__strtok_r+0x12>
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1f0      	bne.n	800b252 <__strtok_r+0xa>
 800b270:	6014      	str	r4, [r2, #0]
 800b272:	7003      	strb	r3, [r0, #0]
 800b274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b276:	461c      	mov	r4, r3
 800b278:	e00c      	b.n	800b294 <__strtok_r+0x4c>
 800b27a:	b915      	cbnz	r5, 800b282 <__strtok_r+0x3a>
 800b27c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b280:	460e      	mov	r6, r1
 800b282:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b286:	42ab      	cmp	r3, r5
 800b288:	d1f7      	bne.n	800b27a <__strtok_r+0x32>
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d0f3      	beq.n	800b276 <__strtok_r+0x2e>
 800b28e:	2300      	movs	r3, #0
 800b290:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b294:	6014      	str	r4, [r2, #0]
 800b296:	e7ed      	b.n	800b274 <__strtok_r+0x2c>

0800b298 <_strtol_l.constprop.0>:
 800b298:	2b01      	cmp	r3, #1
 800b29a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b29e:	d001      	beq.n	800b2a4 <_strtol_l.constprop.0+0xc>
 800b2a0:	2b24      	cmp	r3, #36	; 0x24
 800b2a2:	d906      	bls.n	800b2b2 <_strtol_l.constprop.0+0x1a>
 800b2a4:	f7fe fa20 	bl	80096e8 <__errno>
 800b2a8:	2316      	movs	r3, #22
 800b2aa:	6003      	str	r3, [r0, #0]
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b398 <_strtol_l.constprop.0+0x100>
 800b2b6:	460d      	mov	r5, r1
 800b2b8:	462e      	mov	r6, r5
 800b2ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2be:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b2c2:	f017 0708 	ands.w	r7, r7, #8
 800b2c6:	d1f7      	bne.n	800b2b8 <_strtol_l.constprop.0+0x20>
 800b2c8:	2c2d      	cmp	r4, #45	; 0x2d
 800b2ca:	d132      	bne.n	800b332 <_strtol_l.constprop.0+0x9a>
 800b2cc:	782c      	ldrb	r4, [r5, #0]
 800b2ce:	2701      	movs	r7, #1
 800b2d0:	1cb5      	adds	r5, r6, #2
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d05b      	beq.n	800b38e <_strtol_l.constprop.0+0xf6>
 800b2d6:	2b10      	cmp	r3, #16
 800b2d8:	d109      	bne.n	800b2ee <_strtol_l.constprop.0+0x56>
 800b2da:	2c30      	cmp	r4, #48	; 0x30
 800b2dc:	d107      	bne.n	800b2ee <_strtol_l.constprop.0+0x56>
 800b2de:	782c      	ldrb	r4, [r5, #0]
 800b2e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b2e4:	2c58      	cmp	r4, #88	; 0x58
 800b2e6:	d14d      	bne.n	800b384 <_strtol_l.constprop.0+0xec>
 800b2e8:	786c      	ldrb	r4, [r5, #1]
 800b2ea:	2310      	movs	r3, #16
 800b2ec:	3502      	adds	r5, #2
 800b2ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b2f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2f6:	f04f 0c00 	mov.w	ip, #0
 800b2fa:	fbb8 f9f3 	udiv	r9, r8, r3
 800b2fe:	4666      	mov	r6, ip
 800b300:	fb03 8a19 	mls	sl, r3, r9, r8
 800b304:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b308:	f1be 0f09 	cmp.w	lr, #9
 800b30c:	d816      	bhi.n	800b33c <_strtol_l.constprop.0+0xa4>
 800b30e:	4674      	mov	r4, lr
 800b310:	42a3      	cmp	r3, r4
 800b312:	dd24      	ble.n	800b35e <_strtol_l.constprop.0+0xc6>
 800b314:	f1bc 0f00 	cmp.w	ip, #0
 800b318:	db1e      	blt.n	800b358 <_strtol_l.constprop.0+0xc0>
 800b31a:	45b1      	cmp	r9, r6
 800b31c:	d31c      	bcc.n	800b358 <_strtol_l.constprop.0+0xc0>
 800b31e:	d101      	bne.n	800b324 <_strtol_l.constprop.0+0x8c>
 800b320:	45a2      	cmp	sl, r4
 800b322:	db19      	blt.n	800b358 <_strtol_l.constprop.0+0xc0>
 800b324:	fb06 4603 	mla	r6, r6, r3, r4
 800b328:	f04f 0c01 	mov.w	ip, #1
 800b32c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b330:	e7e8      	b.n	800b304 <_strtol_l.constprop.0+0x6c>
 800b332:	2c2b      	cmp	r4, #43	; 0x2b
 800b334:	bf04      	itt	eq
 800b336:	782c      	ldrbeq	r4, [r5, #0]
 800b338:	1cb5      	addeq	r5, r6, #2
 800b33a:	e7ca      	b.n	800b2d2 <_strtol_l.constprop.0+0x3a>
 800b33c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b340:	f1be 0f19 	cmp.w	lr, #25
 800b344:	d801      	bhi.n	800b34a <_strtol_l.constprop.0+0xb2>
 800b346:	3c37      	subs	r4, #55	; 0x37
 800b348:	e7e2      	b.n	800b310 <_strtol_l.constprop.0+0x78>
 800b34a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b34e:	f1be 0f19 	cmp.w	lr, #25
 800b352:	d804      	bhi.n	800b35e <_strtol_l.constprop.0+0xc6>
 800b354:	3c57      	subs	r4, #87	; 0x57
 800b356:	e7db      	b.n	800b310 <_strtol_l.constprop.0+0x78>
 800b358:	f04f 3cff 	mov.w	ip, #4294967295
 800b35c:	e7e6      	b.n	800b32c <_strtol_l.constprop.0+0x94>
 800b35e:	f1bc 0f00 	cmp.w	ip, #0
 800b362:	da05      	bge.n	800b370 <_strtol_l.constprop.0+0xd8>
 800b364:	2322      	movs	r3, #34	; 0x22
 800b366:	6003      	str	r3, [r0, #0]
 800b368:	4646      	mov	r6, r8
 800b36a:	b942      	cbnz	r2, 800b37e <_strtol_l.constprop.0+0xe6>
 800b36c:	4630      	mov	r0, r6
 800b36e:	e79e      	b.n	800b2ae <_strtol_l.constprop.0+0x16>
 800b370:	b107      	cbz	r7, 800b374 <_strtol_l.constprop.0+0xdc>
 800b372:	4276      	negs	r6, r6
 800b374:	2a00      	cmp	r2, #0
 800b376:	d0f9      	beq.n	800b36c <_strtol_l.constprop.0+0xd4>
 800b378:	f1bc 0f00 	cmp.w	ip, #0
 800b37c:	d000      	beq.n	800b380 <_strtol_l.constprop.0+0xe8>
 800b37e:	1e69      	subs	r1, r5, #1
 800b380:	6011      	str	r1, [r2, #0]
 800b382:	e7f3      	b.n	800b36c <_strtol_l.constprop.0+0xd4>
 800b384:	2430      	movs	r4, #48	; 0x30
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1b1      	bne.n	800b2ee <_strtol_l.constprop.0+0x56>
 800b38a:	2308      	movs	r3, #8
 800b38c:	e7af      	b.n	800b2ee <_strtol_l.constprop.0+0x56>
 800b38e:	2c30      	cmp	r4, #48	; 0x30
 800b390:	d0a5      	beq.n	800b2de <_strtol_l.constprop.0+0x46>
 800b392:	230a      	movs	r3, #10
 800b394:	e7ab      	b.n	800b2ee <_strtol_l.constprop.0+0x56>
 800b396:	bf00      	nop
 800b398:	0800e411 	.word	0x0800e411

0800b39c <_strtol_r>:
 800b39c:	f7ff bf7c 	b.w	800b298 <_strtol_l.constprop.0>

0800b3a0 <strtol>:
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	460a      	mov	r2, r1
 800b3a4:	4601      	mov	r1, r0
 800b3a6:	4802      	ldr	r0, [pc, #8]	; (800b3b0 <strtol+0x10>)
 800b3a8:	6800      	ldr	r0, [r0, #0]
 800b3aa:	f7ff bf75 	b.w	800b298 <_strtol_l.constprop.0>
 800b3ae:	bf00      	nop
 800b3b0:	2000001c 	.word	0x2000001c

0800b3b4 <__assert_func>:
 800b3b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3b6:	4614      	mov	r4, r2
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	4b09      	ldr	r3, [pc, #36]	; (800b3e0 <__assert_func+0x2c>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4605      	mov	r5, r0
 800b3c0:	68d8      	ldr	r0, [r3, #12]
 800b3c2:	b14c      	cbz	r4, 800b3d8 <__assert_func+0x24>
 800b3c4:	4b07      	ldr	r3, [pc, #28]	; (800b3e4 <__assert_func+0x30>)
 800b3c6:	9100      	str	r1, [sp, #0]
 800b3c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3cc:	4906      	ldr	r1, [pc, #24]	; (800b3e8 <__assert_func+0x34>)
 800b3ce:	462b      	mov	r3, r5
 800b3d0:	f000 fe88 	bl	800c0e4 <fiprintf>
 800b3d4:	f002 fb8e 	bl	800daf4 <abort>
 800b3d8:	4b04      	ldr	r3, [pc, #16]	; (800b3ec <__assert_func+0x38>)
 800b3da:	461c      	mov	r4, r3
 800b3dc:	e7f3      	b.n	800b3c6 <__assert_func+0x12>
 800b3de:	bf00      	nop
 800b3e0:	2000001c 	.word	0x2000001c
 800b3e4:	0800e3d4 	.word	0x0800e3d4
 800b3e8:	0800e3e1 	.word	0x0800e3e1
 800b3ec:	0800e40f 	.word	0x0800e40f

0800b3f0 <quorem>:
 800b3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	6903      	ldr	r3, [r0, #16]
 800b3f6:	690c      	ldr	r4, [r1, #16]
 800b3f8:	42a3      	cmp	r3, r4
 800b3fa:	4607      	mov	r7, r0
 800b3fc:	f2c0 8081 	blt.w	800b502 <quorem+0x112>
 800b400:	3c01      	subs	r4, #1
 800b402:	f101 0814 	add.w	r8, r1, #20
 800b406:	f100 0514 	add.w	r5, r0, #20
 800b40a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b40e:	9301      	str	r3, [sp, #4]
 800b410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b418:	3301      	adds	r3, #1
 800b41a:	429a      	cmp	r2, r3
 800b41c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b420:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b424:	fbb2 f6f3 	udiv	r6, r2, r3
 800b428:	d331      	bcc.n	800b48e <quorem+0x9e>
 800b42a:	f04f 0e00 	mov.w	lr, #0
 800b42e:	4640      	mov	r0, r8
 800b430:	46ac      	mov	ip, r5
 800b432:	46f2      	mov	sl, lr
 800b434:	f850 2b04 	ldr.w	r2, [r0], #4
 800b438:	b293      	uxth	r3, r2
 800b43a:	fb06 e303 	mla	r3, r6, r3, lr
 800b43e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b442:	b29b      	uxth	r3, r3
 800b444:	ebaa 0303 	sub.w	r3, sl, r3
 800b448:	f8dc a000 	ldr.w	sl, [ip]
 800b44c:	0c12      	lsrs	r2, r2, #16
 800b44e:	fa13 f38a 	uxtah	r3, r3, sl
 800b452:	fb06 e202 	mla	r2, r6, r2, lr
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	9b00      	ldr	r3, [sp, #0]
 800b45a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b45e:	b292      	uxth	r2, r2
 800b460:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b468:	f8bd 3000 	ldrh.w	r3, [sp]
 800b46c:	4581      	cmp	r9, r0
 800b46e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b472:	f84c 3b04 	str.w	r3, [ip], #4
 800b476:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b47a:	d2db      	bcs.n	800b434 <quorem+0x44>
 800b47c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b480:	b92b      	cbnz	r3, 800b48e <quorem+0x9e>
 800b482:	9b01      	ldr	r3, [sp, #4]
 800b484:	3b04      	subs	r3, #4
 800b486:	429d      	cmp	r5, r3
 800b488:	461a      	mov	r2, r3
 800b48a:	d32e      	bcc.n	800b4ea <quorem+0xfa>
 800b48c:	613c      	str	r4, [r7, #16]
 800b48e:	4638      	mov	r0, r7
 800b490:	f001 fc94 	bl	800cdbc <__mcmp>
 800b494:	2800      	cmp	r0, #0
 800b496:	db24      	blt.n	800b4e2 <quorem+0xf2>
 800b498:	3601      	adds	r6, #1
 800b49a:	4628      	mov	r0, r5
 800b49c:	f04f 0c00 	mov.w	ip, #0
 800b4a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4a4:	f8d0 e000 	ldr.w	lr, [r0]
 800b4a8:	b293      	uxth	r3, r2
 800b4aa:	ebac 0303 	sub.w	r3, ip, r3
 800b4ae:	0c12      	lsrs	r2, r2, #16
 800b4b0:	fa13 f38e 	uxtah	r3, r3, lr
 800b4b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b4b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4c2:	45c1      	cmp	r9, r8
 800b4c4:	f840 3b04 	str.w	r3, [r0], #4
 800b4c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b4cc:	d2e8      	bcs.n	800b4a0 <quorem+0xb0>
 800b4ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4d6:	b922      	cbnz	r2, 800b4e2 <quorem+0xf2>
 800b4d8:	3b04      	subs	r3, #4
 800b4da:	429d      	cmp	r5, r3
 800b4dc:	461a      	mov	r2, r3
 800b4de:	d30a      	bcc.n	800b4f6 <quorem+0x106>
 800b4e0:	613c      	str	r4, [r7, #16]
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	b003      	add	sp, #12
 800b4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ea:	6812      	ldr	r2, [r2, #0]
 800b4ec:	3b04      	subs	r3, #4
 800b4ee:	2a00      	cmp	r2, #0
 800b4f0:	d1cc      	bne.n	800b48c <quorem+0x9c>
 800b4f2:	3c01      	subs	r4, #1
 800b4f4:	e7c7      	b.n	800b486 <quorem+0x96>
 800b4f6:	6812      	ldr	r2, [r2, #0]
 800b4f8:	3b04      	subs	r3, #4
 800b4fa:	2a00      	cmp	r2, #0
 800b4fc:	d1f0      	bne.n	800b4e0 <quorem+0xf0>
 800b4fe:	3c01      	subs	r4, #1
 800b500:	e7eb      	b.n	800b4da <quorem+0xea>
 800b502:	2000      	movs	r0, #0
 800b504:	e7ee      	b.n	800b4e4 <quorem+0xf4>
	...

0800b508 <_dtoa_r>:
 800b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50c:	ed2d 8b04 	vpush	{d8-d9}
 800b510:	ec57 6b10 	vmov	r6, r7, d0
 800b514:	b093      	sub	sp, #76	; 0x4c
 800b516:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b518:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b51c:	9106      	str	r1, [sp, #24]
 800b51e:	ee10 aa10 	vmov	sl, s0
 800b522:	4604      	mov	r4, r0
 800b524:	9209      	str	r2, [sp, #36]	; 0x24
 800b526:	930c      	str	r3, [sp, #48]	; 0x30
 800b528:	46bb      	mov	fp, r7
 800b52a:	b975      	cbnz	r5, 800b54a <_dtoa_r+0x42>
 800b52c:	2010      	movs	r0, #16
 800b52e:	f001 f95f 	bl	800c7f0 <malloc>
 800b532:	4602      	mov	r2, r0
 800b534:	6260      	str	r0, [r4, #36]	; 0x24
 800b536:	b920      	cbnz	r0, 800b542 <_dtoa_r+0x3a>
 800b538:	4ba7      	ldr	r3, [pc, #668]	; (800b7d8 <_dtoa_r+0x2d0>)
 800b53a:	21ea      	movs	r1, #234	; 0xea
 800b53c:	48a7      	ldr	r0, [pc, #668]	; (800b7dc <_dtoa_r+0x2d4>)
 800b53e:	f7ff ff39 	bl	800b3b4 <__assert_func>
 800b542:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b546:	6005      	str	r5, [r0, #0]
 800b548:	60c5      	str	r5, [r0, #12]
 800b54a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b54c:	6819      	ldr	r1, [r3, #0]
 800b54e:	b151      	cbz	r1, 800b566 <_dtoa_r+0x5e>
 800b550:	685a      	ldr	r2, [r3, #4]
 800b552:	604a      	str	r2, [r1, #4]
 800b554:	2301      	movs	r3, #1
 800b556:	4093      	lsls	r3, r2
 800b558:	608b      	str	r3, [r1, #8]
 800b55a:	4620      	mov	r0, r4
 800b55c:	f001 f9a2 	bl	800c8a4 <_Bfree>
 800b560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b562:	2200      	movs	r2, #0
 800b564:	601a      	str	r2, [r3, #0]
 800b566:	1e3b      	subs	r3, r7, #0
 800b568:	bfaa      	itet	ge
 800b56a:	2300      	movge	r3, #0
 800b56c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b570:	f8c8 3000 	strge.w	r3, [r8]
 800b574:	4b9a      	ldr	r3, [pc, #616]	; (800b7e0 <_dtoa_r+0x2d8>)
 800b576:	bfbc      	itt	lt
 800b578:	2201      	movlt	r2, #1
 800b57a:	f8c8 2000 	strlt.w	r2, [r8]
 800b57e:	ea33 030b 	bics.w	r3, r3, fp
 800b582:	d11b      	bne.n	800b5bc <_dtoa_r+0xb4>
 800b584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b586:	f242 730f 	movw	r3, #9999	; 0x270f
 800b58a:	6013      	str	r3, [r2, #0]
 800b58c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b590:	4333      	orrs	r3, r6
 800b592:	f000 8592 	beq.w	800c0ba <_dtoa_r+0xbb2>
 800b596:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b598:	b963      	cbnz	r3, 800b5b4 <_dtoa_r+0xac>
 800b59a:	4b92      	ldr	r3, [pc, #584]	; (800b7e4 <_dtoa_r+0x2dc>)
 800b59c:	e022      	b.n	800b5e4 <_dtoa_r+0xdc>
 800b59e:	4b92      	ldr	r3, [pc, #584]	; (800b7e8 <_dtoa_r+0x2e0>)
 800b5a0:	9301      	str	r3, [sp, #4]
 800b5a2:	3308      	adds	r3, #8
 800b5a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b5a6:	6013      	str	r3, [r2, #0]
 800b5a8:	9801      	ldr	r0, [sp, #4]
 800b5aa:	b013      	add	sp, #76	; 0x4c
 800b5ac:	ecbd 8b04 	vpop	{d8-d9}
 800b5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b4:	4b8b      	ldr	r3, [pc, #556]	; (800b7e4 <_dtoa_r+0x2dc>)
 800b5b6:	9301      	str	r3, [sp, #4]
 800b5b8:	3303      	adds	r3, #3
 800b5ba:	e7f3      	b.n	800b5a4 <_dtoa_r+0x9c>
 800b5bc:	2200      	movs	r2, #0
 800b5be:	2300      	movs	r3, #0
 800b5c0:	4650      	mov	r0, sl
 800b5c2:	4659      	mov	r1, fp
 800b5c4:	f7f5 faa8 	bl	8000b18 <__aeabi_dcmpeq>
 800b5c8:	ec4b ab19 	vmov	d9, sl, fp
 800b5cc:	4680      	mov	r8, r0
 800b5ce:	b158      	cbz	r0, 800b5e8 <_dtoa_r+0xe0>
 800b5d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	6013      	str	r3, [r2, #0]
 800b5d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f000 856b 	beq.w	800c0b4 <_dtoa_r+0xbac>
 800b5de:	4883      	ldr	r0, [pc, #524]	; (800b7ec <_dtoa_r+0x2e4>)
 800b5e0:	6018      	str	r0, [r3, #0]
 800b5e2:	1e43      	subs	r3, r0, #1
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	e7df      	b.n	800b5a8 <_dtoa_r+0xa0>
 800b5e8:	ec4b ab10 	vmov	d0, sl, fp
 800b5ec:	aa10      	add	r2, sp, #64	; 0x40
 800b5ee:	a911      	add	r1, sp, #68	; 0x44
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f001 fd05 	bl	800d000 <__d2b>
 800b5f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b5fa:	ee08 0a10 	vmov	s16, r0
 800b5fe:	2d00      	cmp	r5, #0
 800b600:	f000 8084 	beq.w	800b70c <_dtoa_r+0x204>
 800b604:	ee19 3a90 	vmov	r3, s19
 800b608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b60c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b610:	4656      	mov	r6, sl
 800b612:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b61a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b61e:	4b74      	ldr	r3, [pc, #464]	; (800b7f0 <_dtoa_r+0x2e8>)
 800b620:	2200      	movs	r2, #0
 800b622:	4630      	mov	r0, r6
 800b624:	4639      	mov	r1, r7
 800b626:	f7f4 fe57 	bl	80002d8 <__aeabi_dsub>
 800b62a:	a365      	add	r3, pc, #404	; (adr r3, 800b7c0 <_dtoa_r+0x2b8>)
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	f7f5 f80a 	bl	8000648 <__aeabi_dmul>
 800b634:	a364      	add	r3, pc, #400	; (adr r3, 800b7c8 <_dtoa_r+0x2c0>)
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	f7f4 fe4f 	bl	80002dc <__adddf3>
 800b63e:	4606      	mov	r6, r0
 800b640:	4628      	mov	r0, r5
 800b642:	460f      	mov	r7, r1
 800b644:	f7f4 ff96 	bl	8000574 <__aeabi_i2d>
 800b648:	a361      	add	r3, pc, #388	; (adr r3, 800b7d0 <_dtoa_r+0x2c8>)
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	f7f4 fffb 	bl	8000648 <__aeabi_dmul>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	4630      	mov	r0, r6
 800b658:	4639      	mov	r1, r7
 800b65a:	f7f4 fe3f 	bl	80002dc <__adddf3>
 800b65e:	4606      	mov	r6, r0
 800b660:	460f      	mov	r7, r1
 800b662:	f7f5 faa1 	bl	8000ba8 <__aeabi_d2iz>
 800b666:	2200      	movs	r2, #0
 800b668:	9000      	str	r0, [sp, #0]
 800b66a:	2300      	movs	r3, #0
 800b66c:	4630      	mov	r0, r6
 800b66e:	4639      	mov	r1, r7
 800b670:	f7f5 fa5c 	bl	8000b2c <__aeabi_dcmplt>
 800b674:	b150      	cbz	r0, 800b68c <_dtoa_r+0x184>
 800b676:	9800      	ldr	r0, [sp, #0]
 800b678:	f7f4 ff7c 	bl	8000574 <__aeabi_i2d>
 800b67c:	4632      	mov	r2, r6
 800b67e:	463b      	mov	r3, r7
 800b680:	f7f5 fa4a 	bl	8000b18 <__aeabi_dcmpeq>
 800b684:	b910      	cbnz	r0, 800b68c <_dtoa_r+0x184>
 800b686:	9b00      	ldr	r3, [sp, #0]
 800b688:	3b01      	subs	r3, #1
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	9b00      	ldr	r3, [sp, #0]
 800b68e:	2b16      	cmp	r3, #22
 800b690:	d85a      	bhi.n	800b748 <_dtoa_r+0x240>
 800b692:	9a00      	ldr	r2, [sp, #0]
 800b694:	4b57      	ldr	r3, [pc, #348]	; (800b7f4 <_dtoa_r+0x2ec>)
 800b696:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69e:	ec51 0b19 	vmov	r0, r1, d9
 800b6a2:	f7f5 fa43 	bl	8000b2c <__aeabi_dcmplt>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d050      	beq.n	800b74c <_dtoa_r+0x244>
 800b6aa:	9b00      	ldr	r3, [sp, #0]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b6b6:	1b5d      	subs	r5, r3, r5
 800b6b8:	1e6b      	subs	r3, r5, #1
 800b6ba:	9305      	str	r3, [sp, #20]
 800b6bc:	bf45      	ittet	mi
 800b6be:	f1c5 0301 	rsbmi	r3, r5, #1
 800b6c2:	9304      	strmi	r3, [sp, #16]
 800b6c4:	2300      	movpl	r3, #0
 800b6c6:	2300      	movmi	r3, #0
 800b6c8:	bf4c      	ite	mi
 800b6ca:	9305      	strmi	r3, [sp, #20]
 800b6cc:	9304      	strpl	r3, [sp, #16]
 800b6ce:	9b00      	ldr	r3, [sp, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	db3d      	blt.n	800b750 <_dtoa_r+0x248>
 800b6d4:	9b05      	ldr	r3, [sp, #20]
 800b6d6:	9a00      	ldr	r2, [sp, #0]
 800b6d8:	920a      	str	r2, [sp, #40]	; 0x28
 800b6da:	4413      	add	r3, r2
 800b6dc:	9305      	str	r3, [sp, #20]
 800b6de:	2300      	movs	r3, #0
 800b6e0:	9307      	str	r3, [sp, #28]
 800b6e2:	9b06      	ldr	r3, [sp, #24]
 800b6e4:	2b09      	cmp	r3, #9
 800b6e6:	f200 8089 	bhi.w	800b7fc <_dtoa_r+0x2f4>
 800b6ea:	2b05      	cmp	r3, #5
 800b6ec:	bfc4      	itt	gt
 800b6ee:	3b04      	subgt	r3, #4
 800b6f0:	9306      	strgt	r3, [sp, #24]
 800b6f2:	9b06      	ldr	r3, [sp, #24]
 800b6f4:	f1a3 0302 	sub.w	r3, r3, #2
 800b6f8:	bfcc      	ite	gt
 800b6fa:	2500      	movgt	r5, #0
 800b6fc:	2501      	movle	r5, #1
 800b6fe:	2b03      	cmp	r3, #3
 800b700:	f200 8087 	bhi.w	800b812 <_dtoa_r+0x30a>
 800b704:	e8df f003 	tbb	[pc, r3]
 800b708:	59383a2d 	.word	0x59383a2d
 800b70c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b710:	441d      	add	r5, r3
 800b712:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b716:	2b20      	cmp	r3, #32
 800b718:	bfc1      	itttt	gt
 800b71a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b71e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b722:	fa0b f303 	lslgt.w	r3, fp, r3
 800b726:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b72a:	bfda      	itte	le
 800b72c:	f1c3 0320 	rsble	r3, r3, #32
 800b730:	fa06 f003 	lslle.w	r0, r6, r3
 800b734:	4318      	orrgt	r0, r3
 800b736:	f7f4 ff0d 	bl	8000554 <__aeabi_ui2d>
 800b73a:	2301      	movs	r3, #1
 800b73c:	4606      	mov	r6, r0
 800b73e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b742:	3d01      	subs	r5, #1
 800b744:	930e      	str	r3, [sp, #56]	; 0x38
 800b746:	e76a      	b.n	800b61e <_dtoa_r+0x116>
 800b748:	2301      	movs	r3, #1
 800b74a:	e7b2      	b.n	800b6b2 <_dtoa_r+0x1aa>
 800b74c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b74e:	e7b1      	b.n	800b6b4 <_dtoa_r+0x1ac>
 800b750:	9b04      	ldr	r3, [sp, #16]
 800b752:	9a00      	ldr	r2, [sp, #0]
 800b754:	1a9b      	subs	r3, r3, r2
 800b756:	9304      	str	r3, [sp, #16]
 800b758:	4253      	negs	r3, r2
 800b75a:	9307      	str	r3, [sp, #28]
 800b75c:	2300      	movs	r3, #0
 800b75e:	930a      	str	r3, [sp, #40]	; 0x28
 800b760:	e7bf      	b.n	800b6e2 <_dtoa_r+0x1da>
 800b762:	2300      	movs	r3, #0
 800b764:	9308      	str	r3, [sp, #32]
 800b766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b768:	2b00      	cmp	r3, #0
 800b76a:	dc55      	bgt.n	800b818 <_dtoa_r+0x310>
 800b76c:	2301      	movs	r3, #1
 800b76e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b772:	461a      	mov	r2, r3
 800b774:	9209      	str	r2, [sp, #36]	; 0x24
 800b776:	e00c      	b.n	800b792 <_dtoa_r+0x28a>
 800b778:	2301      	movs	r3, #1
 800b77a:	e7f3      	b.n	800b764 <_dtoa_r+0x25c>
 800b77c:	2300      	movs	r3, #0
 800b77e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b780:	9308      	str	r3, [sp, #32]
 800b782:	9b00      	ldr	r3, [sp, #0]
 800b784:	4413      	add	r3, r2
 800b786:	9302      	str	r3, [sp, #8]
 800b788:	3301      	adds	r3, #1
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	9303      	str	r3, [sp, #12]
 800b78e:	bfb8      	it	lt
 800b790:	2301      	movlt	r3, #1
 800b792:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b794:	2200      	movs	r2, #0
 800b796:	6042      	str	r2, [r0, #4]
 800b798:	2204      	movs	r2, #4
 800b79a:	f102 0614 	add.w	r6, r2, #20
 800b79e:	429e      	cmp	r6, r3
 800b7a0:	6841      	ldr	r1, [r0, #4]
 800b7a2:	d93d      	bls.n	800b820 <_dtoa_r+0x318>
 800b7a4:	4620      	mov	r0, r4
 800b7a6:	f001 f83d 	bl	800c824 <_Balloc>
 800b7aa:	9001      	str	r0, [sp, #4]
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d13b      	bne.n	800b828 <_dtoa_r+0x320>
 800b7b0:	4b11      	ldr	r3, [pc, #68]	; (800b7f8 <_dtoa_r+0x2f0>)
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b7b8:	e6c0      	b.n	800b53c <_dtoa_r+0x34>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e7df      	b.n	800b77e <_dtoa_r+0x276>
 800b7be:	bf00      	nop
 800b7c0:	636f4361 	.word	0x636f4361
 800b7c4:	3fd287a7 	.word	0x3fd287a7
 800b7c8:	8b60c8b3 	.word	0x8b60c8b3
 800b7cc:	3fc68a28 	.word	0x3fc68a28
 800b7d0:	509f79fb 	.word	0x509f79fb
 800b7d4:	3fd34413 	.word	0x3fd34413
 800b7d8:	0800e360 	.word	0x0800e360
 800b7dc:	0800e51e 	.word	0x0800e51e
 800b7e0:	7ff00000 	.word	0x7ff00000
 800b7e4:	0800e51a 	.word	0x0800e51a
 800b7e8:	0800e511 	.word	0x0800e511
 800b7ec:	0800e2e5 	.word	0x0800e2e5
 800b7f0:	3ff80000 	.word	0x3ff80000
 800b7f4:	0800e688 	.word	0x0800e688
 800b7f8:	0800e579 	.word	0x0800e579
 800b7fc:	2501      	movs	r5, #1
 800b7fe:	2300      	movs	r3, #0
 800b800:	9306      	str	r3, [sp, #24]
 800b802:	9508      	str	r5, [sp, #32]
 800b804:	f04f 33ff 	mov.w	r3, #4294967295
 800b808:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b80c:	2200      	movs	r2, #0
 800b80e:	2312      	movs	r3, #18
 800b810:	e7b0      	b.n	800b774 <_dtoa_r+0x26c>
 800b812:	2301      	movs	r3, #1
 800b814:	9308      	str	r3, [sp, #32]
 800b816:	e7f5      	b.n	800b804 <_dtoa_r+0x2fc>
 800b818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b81a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b81e:	e7b8      	b.n	800b792 <_dtoa_r+0x28a>
 800b820:	3101      	adds	r1, #1
 800b822:	6041      	str	r1, [r0, #4]
 800b824:	0052      	lsls	r2, r2, #1
 800b826:	e7b8      	b.n	800b79a <_dtoa_r+0x292>
 800b828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b82a:	9a01      	ldr	r2, [sp, #4]
 800b82c:	601a      	str	r2, [r3, #0]
 800b82e:	9b03      	ldr	r3, [sp, #12]
 800b830:	2b0e      	cmp	r3, #14
 800b832:	f200 809d 	bhi.w	800b970 <_dtoa_r+0x468>
 800b836:	2d00      	cmp	r5, #0
 800b838:	f000 809a 	beq.w	800b970 <_dtoa_r+0x468>
 800b83c:	9b00      	ldr	r3, [sp, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	dd32      	ble.n	800b8a8 <_dtoa_r+0x3a0>
 800b842:	4ab7      	ldr	r2, [pc, #732]	; (800bb20 <_dtoa_r+0x618>)
 800b844:	f003 030f 	and.w	r3, r3, #15
 800b848:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b84c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b850:	9b00      	ldr	r3, [sp, #0]
 800b852:	05d8      	lsls	r0, r3, #23
 800b854:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b858:	d516      	bpl.n	800b888 <_dtoa_r+0x380>
 800b85a:	4bb2      	ldr	r3, [pc, #712]	; (800bb24 <_dtoa_r+0x61c>)
 800b85c:	ec51 0b19 	vmov	r0, r1, d9
 800b860:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b864:	f7f5 f81a 	bl	800089c <__aeabi_ddiv>
 800b868:	f007 070f 	and.w	r7, r7, #15
 800b86c:	4682      	mov	sl, r0
 800b86e:	468b      	mov	fp, r1
 800b870:	2503      	movs	r5, #3
 800b872:	4eac      	ldr	r6, [pc, #688]	; (800bb24 <_dtoa_r+0x61c>)
 800b874:	b957      	cbnz	r7, 800b88c <_dtoa_r+0x384>
 800b876:	4642      	mov	r2, r8
 800b878:	464b      	mov	r3, r9
 800b87a:	4650      	mov	r0, sl
 800b87c:	4659      	mov	r1, fp
 800b87e:	f7f5 f80d 	bl	800089c <__aeabi_ddiv>
 800b882:	4682      	mov	sl, r0
 800b884:	468b      	mov	fp, r1
 800b886:	e028      	b.n	800b8da <_dtoa_r+0x3d2>
 800b888:	2502      	movs	r5, #2
 800b88a:	e7f2      	b.n	800b872 <_dtoa_r+0x36a>
 800b88c:	07f9      	lsls	r1, r7, #31
 800b88e:	d508      	bpl.n	800b8a2 <_dtoa_r+0x39a>
 800b890:	4640      	mov	r0, r8
 800b892:	4649      	mov	r1, r9
 800b894:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b898:	f7f4 fed6 	bl	8000648 <__aeabi_dmul>
 800b89c:	3501      	adds	r5, #1
 800b89e:	4680      	mov	r8, r0
 800b8a0:	4689      	mov	r9, r1
 800b8a2:	107f      	asrs	r7, r7, #1
 800b8a4:	3608      	adds	r6, #8
 800b8a6:	e7e5      	b.n	800b874 <_dtoa_r+0x36c>
 800b8a8:	f000 809b 	beq.w	800b9e2 <_dtoa_r+0x4da>
 800b8ac:	9b00      	ldr	r3, [sp, #0]
 800b8ae:	4f9d      	ldr	r7, [pc, #628]	; (800bb24 <_dtoa_r+0x61c>)
 800b8b0:	425e      	negs	r6, r3
 800b8b2:	4b9b      	ldr	r3, [pc, #620]	; (800bb20 <_dtoa_r+0x618>)
 800b8b4:	f006 020f 	and.w	r2, r6, #15
 800b8b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	ec51 0b19 	vmov	r0, r1, d9
 800b8c4:	f7f4 fec0 	bl	8000648 <__aeabi_dmul>
 800b8c8:	1136      	asrs	r6, r6, #4
 800b8ca:	4682      	mov	sl, r0
 800b8cc:	468b      	mov	fp, r1
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	2502      	movs	r5, #2
 800b8d2:	2e00      	cmp	r6, #0
 800b8d4:	d17a      	bne.n	800b9cc <_dtoa_r+0x4c4>
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d1d3      	bne.n	800b882 <_dtoa_r+0x37a>
 800b8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f000 8082 	beq.w	800b9e6 <_dtoa_r+0x4de>
 800b8e2:	4b91      	ldr	r3, [pc, #580]	; (800bb28 <_dtoa_r+0x620>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	4650      	mov	r0, sl
 800b8e8:	4659      	mov	r1, fp
 800b8ea:	f7f5 f91f 	bl	8000b2c <__aeabi_dcmplt>
 800b8ee:	2800      	cmp	r0, #0
 800b8f0:	d079      	beq.n	800b9e6 <_dtoa_r+0x4de>
 800b8f2:	9b03      	ldr	r3, [sp, #12]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d076      	beq.n	800b9e6 <_dtoa_r+0x4de>
 800b8f8:	9b02      	ldr	r3, [sp, #8]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	dd36      	ble.n	800b96c <_dtoa_r+0x464>
 800b8fe:	9b00      	ldr	r3, [sp, #0]
 800b900:	4650      	mov	r0, sl
 800b902:	4659      	mov	r1, fp
 800b904:	1e5f      	subs	r7, r3, #1
 800b906:	2200      	movs	r2, #0
 800b908:	4b88      	ldr	r3, [pc, #544]	; (800bb2c <_dtoa_r+0x624>)
 800b90a:	f7f4 fe9d 	bl	8000648 <__aeabi_dmul>
 800b90e:	9e02      	ldr	r6, [sp, #8]
 800b910:	4682      	mov	sl, r0
 800b912:	468b      	mov	fp, r1
 800b914:	3501      	adds	r5, #1
 800b916:	4628      	mov	r0, r5
 800b918:	f7f4 fe2c 	bl	8000574 <__aeabi_i2d>
 800b91c:	4652      	mov	r2, sl
 800b91e:	465b      	mov	r3, fp
 800b920:	f7f4 fe92 	bl	8000648 <__aeabi_dmul>
 800b924:	4b82      	ldr	r3, [pc, #520]	; (800bb30 <_dtoa_r+0x628>)
 800b926:	2200      	movs	r2, #0
 800b928:	f7f4 fcd8 	bl	80002dc <__adddf3>
 800b92c:	46d0      	mov	r8, sl
 800b92e:	46d9      	mov	r9, fp
 800b930:	4682      	mov	sl, r0
 800b932:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b936:	2e00      	cmp	r6, #0
 800b938:	d158      	bne.n	800b9ec <_dtoa_r+0x4e4>
 800b93a:	4b7e      	ldr	r3, [pc, #504]	; (800bb34 <_dtoa_r+0x62c>)
 800b93c:	2200      	movs	r2, #0
 800b93e:	4640      	mov	r0, r8
 800b940:	4649      	mov	r1, r9
 800b942:	f7f4 fcc9 	bl	80002d8 <__aeabi_dsub>
 800b946:	4652      	mov	r2, sl
 800b948:	465b      	mov	r3, fp
 800b94a:	4680      	mov	r8, r0
 800b94c:	4689      	mov	r9, r1
 800b94e:	f7f5 f90b 	bl	8000b68 <__aeabi_dcmpgt>
 800b952:	2800      	cmp	r0, #0
 800b954:	f040 8295 	bne.w	800be82 <_dtoa_r+0x97a>
 800b958:	4652      	mov	r2, sl
 800b95a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b95e:	4640      	mov	r0, r8
 800b960:	4649      	mov	r1, r9
 800b962:	f7f5 f8e3 	bl	8000b2c <__aeabi_dcmplt>
 800b966:	2800      	cmp	r0, #0
 800b968:	f040 8289 	bne.w	800be7e <_dtoa_r+0x976>
 800b96c:	ec5b ab19 	vmov	sl, fp, d9
 800b970:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b972:	2b00      	cmp	r3, #0
 800b974:	f2c0 8148 	blt.w	800bc08 <_dtoa_r+0x700>
 800b978:	9a00      	ldr	r2, [sp, #0]
 800b97a:	2a0e      	cmp	r2, #14
 800b97c:	f300 8144 	bgt.w	800bc08 <_dtoa_r+0x700>
 800b980:	4b67      	ldr	r3, [pc, #412]	; (800bb20 <_dtoa_r+0x618>)
 800b982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b986:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b98a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f280 80d5 	bge.w	800bb3c <_dtoa_r+0x634>
 800b992:	9b03      	ldr	r3, [sp, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	f300 80d1 	bgt.w	800bb3c <_dtoa_r+0x634>
 800b99a:	f040 826f 	bne.w	800be7c <_dtoa_r+0x974>
 800b99e:	4b65      	ldr	r3, [pc, #404]	; (800bb34 <_dtoa_r+0x62c>)
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	f7f4 fe4f 	bl	8000648 <__aeabi_dmul>
 800b9aa:	4652      	mov	r2, sl
 800b9ac:	465b      	mov	r3, fp
 800b9ae:	f7f5 f8d1 	bl	8000b54 <__aeabi_dcmpge>
 800b9b2:	9e03      	ldr	r6, [sp, #12]
 800b9b4:	4637      	mov	r7, r6
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	f040 8245 	bne.w	800be46 <_dtoa_r+0x93e>
 800b9bc:	9d01      	ldr	r5, [sp, #4]
 800b9be:	2331      	movs	r3, #49	; 0x31
 800b9c0:	f805 3b01 	strb.w	r3, [r5], #1
 800b9c4:	9b00      	ldr	r3, [sp, #0]
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	e240      	b.n	800be4e <_dtoa_r+0x946>
 800b9cc:	07f2      	lsls	r2, r6, #31
 800b9ce:	d505      	bpl.n	800b9dc <_dtoa_r+0x4d4>
 800b9d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9d4:	f7f4 fe38 	bl	8000648 <__aeabi_dmul>
 800b9d8:	3501      	adds	r5, #1
 800b9da:	2301      	movs	r3, #1
 800b9dc:	1076      	asrs	r6, r6, #1
 800b9de:	3708      	adds	r7, #8
 800b9e0:	e777      	b.n	800b8d2 <_dtoa_r+0x3ca>
 800b9e2:	2502      	movs	r5, #2
 800b9e4:	e779      	b.n	800b8da <_dtoa_r+0x3d2>
 800b9e6:	9f00      	ldr	r7, [sp, #0]
 800b9e8:	9e03      	ldr	r6, [sp, #12]
 800b9ea:	e794      	b.n	800b916 <_dtoa_r+0x40e>
 800b9ec:	9901      	ldr	r1, [sp, #4]
 800b9ee:	4b4c      	ldr	r3, [pc, #304]	; (800bb20 <_dtoa_r+0x618>)
 800b9f0:	4431      	add	r1, r6
 800b9f2:	910d      	str	r1, [sp, #52]	; 0x34
 800b9f4:	9908      	ldr	r1, [sp, #32]
 800b9f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9fe:	2900      	cmp	r1, #0
 800ba00:	d043      	beq.n	800ba8a <_dtoa_r+0x582>
 800ba02:	494d      	ldr	r1, [pc, #308]	; (800bb38 <_dtoa_r+0x630>)
 800ba04:	2000      	movs	r0, #0
 800ba06:	f7f4 ff49 	bl	800089c <__aeabi_ddiv>
 800ba0a:	4652      	mov	r2, sl
 800ba0c:	465b      	mov	r3, fp
 800ba0e:	f7f4 fc63 	bl	80002d8 <__aeabi_dsub>
 800ba12:	9d01      	ldr	r5, [sp, #4]
 800ba14:	4682      	mov	sl, r0
 800ba16:	468b      	mov	fp, r1
 800ba18:	4649      	mov	r1, r9
 800ba1a:	4640      	mov	r0, r8
 800ba1c:	f7f5 f8c4 	bl	8000ba8 <__aeabi_d2iz>
 800ba20:	4606      	mov	r6, r0
 800ba22:	f7f4 fda7 	bl	8000574 <__aeabi_i2d>
 800ba26:	4602      	mov	r2, r0
 800ba28:	460b      	mov	r3, r1
 800ba2a:	4640      	mov	r0, r8
 800ba2c:	4649      	mov	r1, r9
 800ba2e:	f7f4 fc53 	bl	80002d8 <__aeabi_dsub>
 800ba32:	3630      	adds	r6, #48	; 0x30
 800ba34:	f805 6b01 	strb.w	r6, [r5], #1
 800ba38:	4652      	mov	r2, sl
 800ba3a:	465b      	mov	r3, fp
 800ba3c:	4680      	mov	r8, r0
 800ba3e:	4689      	mov	r9, r1
 800ba40:	f7f5 f874 	bl	8000b2c <__aeabi_dcmplt>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d163      	bne.n	800bb10 <_dtoa_r+0x608>
 800ba48:	4642      	mov	r2, r8
 800ba4a:	464b      	mov	r3, r9
 800ba4c:	4936      	ldr	r1, [pc, #216]	; (800bb28 <_dtoa_r+0x620>)
 800ba4e:	2000      	movs	r0, #0
 800ba50:	f7f4 fc42 	bl	80002d8 <__aeabi_dsub>
 800ba54:	4652      	mov	r2, sl
 800ba56:	465b      	mov	r3, fp
 800ba58:	f7f5 f868 	bl	8000b2c <__aeabi_dcmplt>
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	f040 80b5 	bne.w	800bbcc <_dtoa_r+0x6c4>
 800ba62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba64:	429d      	cmp	r5, r3
 800ba66:	d081      	beq.n	800b96c <_dtoa_r+0x464>
 800ba68:	4b30      	ldr	r3, [pc, #192]	; (800bb2c <_dtoa_r+0x624>)
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	4650      	mov	r0, sl
 800ba6e:	4659      	mov	r1, fp
 800ba70:	f7f4 fdea 	bl	8000648 <__aeabi_dmul>
 800ba74:	4b2d      	ldr	r3, [pc, #180]	; (800bb2c <_dtoa_r+0x624>)
 800ba76:	4682      	mov	sl, r0
 800ba78:	468b      	mov	fp, r1
 800ba7a:	4640      	mov	r0, r8
 800ba7c:	4649      	mov	r1, r9
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f7f4 fde2 	bl	8000648 <__aeabi_dmul>
 800ba84:	4680      	mov	r8, r0
 800ba86:	4689      	mov	r9, r1
 800ba88:	e7c6      	b.n	800ba18 <_dtoa_r+0x510>
 800ba8a:	4650      	mov	r0, sl
 800ba8c:	4659      	mov	r1, fp
 800ba8e:	f7f4 fddb 	bl	8000648 <__aeabi_dmul>
 800ba92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba94:	9d01      	ldr	r5, [sp, #4]
 800ba96:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba98:	4682      	mov	sl, r0
 800ba9a:	468b      	mov	fp, r1
 800ba9c:	4649      	mov	r1, r9
 800ba9e:	4640      	mov	r0, r8
 800baa0:	f7f5 f882 	bl	8000ba8 <__aeabi_d2iz>
 800baa4:	4606      	mov	r6, r0
 800baa6:	f7f4 fd65 	bl	8000574 <__aeabi_i2d>
 800baaa:	3630      	adds	r6, #48	; 0x30
 800baac:	4602      	mov	r2, r0
 800baae:	460b      	mov	r3, r1
 800bab0:	4640      	mov	r0, r8
 800bab2:	4649      	mov	r1, r9
 800bab4:	f7f4 fc10 	bl	80002d8 <__aeabi_dsub>
 800bab8:	f805 6b01 	strb.w	r6, [r5], #1
 800babc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800babe:	429d      	cmp	r5, r3
 800bac0:	4680      	mov	r8, r0
 800bac2:	4689      	mov	r9, r1
 800bac4:	f04f 0200 	mov.w	r2, #0
 800bac8:	d124      	bne.n	800bb14 <_dtoa_r+0x60c>
 800baca:	4b1b      	ldr	r3, [pc, #108]	; (800bb38 <_dtoa_r+0x630>)
 800bacc:	4650      	mov	r0, sl
 800bace:	4659      	mov	r1, fp
 800bad0:	f7f4 fc04 	bl	80002dc <__adddf3>
 800bad4:	4602      	mov	r2, r0
 800bad6:	460b      	mov	r3, r1
 800bad8:	4640      	mov	r0, r8
 800bada:	4649      	mov	r1, r9
 800badc:	f7f5 f844 	bl	8000b68 <__aeabi_dcmpgt>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	d173      	bne.n	800bbcc <_dtoa_r+0x6c4>
 800bae4:	4652      	mov	r2, sl
 800bae6:	465b      	mov	r3, fp
 800bae8:	4913      	ldr	r1, [pc, #76]	; (800bb38 <_dtoa_r+0x630>)
 800baea:	2000      	movs	r0, #0
 800baec:	f7f4 fbf4 	bl	80002d8 <__aeabi_dsub>
 800baf0:	4602      	mov	r2, r0
 800baf2:	460b      	mov	r3, r1
 800baf4:	4640      	mov	r0, r8
 800baf6:	4649      	mov	r1, r9
 800baf8:	f7f5 f818 	bl	8000b2c <__aeabi_dcmplt>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	f43f af35 	beq.w	800b96c <_dtoa_r+0x464>
 800bb02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb04:	1e6b      	subs	r3, r5, #1
 800bb06:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb0c:	2b30      	cmp	r3, #48	; 0x30
 800bb0e:	d0f8      	beq.n	800bb02 <_dtoa_r+0x5fa>
 800bb10:	9700      	str	r7, [sp, #0]
 800bb12:	e049      	b.n	800bba8 <_dtoa_r+0x6a0>
 800bb14:	4b05      	ldr	r3, [pc, #20]	; (800bb2c <_dtoa_r+0x624>)
 800bb16:	f7f4 fd97 	bl	8000648 <__aeabi_dmul>
 800bb1a:	4680      	mov	r8, r0
 800bb1c:	4689      	mov	r9, r1
 800bb1e:	e7bd      	b.n	800ba9c <_dtoa_r+0x594>
 800bb20:	0800e688 	.word	0x0800e688
 800bb24:	0800e660 	.word	0x0800e660
 800bb28:	3ff00000 	.word	0x3ff00000
 800bb2c:	40240000 	.word	0x40240000
 800bb30:	401c0000 	.word	0x401c0000
 800bb34:	40140000 	.word	0x40140000
 800bb38:	3fe00000 	.word	0x3fe00000
 800bb3c:	9d01      	ldr	r5, [sp, #4]
 800bb3e:	4656      	mov	r6, sl
 800bb40:	465f      	mov	r7, fp
 800bb42:	4642      	mov	r2, r8
 800bb44:	464b      	mov	r3, r9
 800bb46:	4630      	mov	r0, r6
 800bb48:	4639      	mov	r1, r7
 800bb4a:	f7f4 fea7 	bl	800089c <__aeabi_ddiv>
 800bb4e:	f7f5 f82b 	bl	8000ba8 <__aeabi_d2iz>
 800bb52:	4682      	mov	sl, r0
 800bb54:	f7f4 fd0e 	bl	8000574 <__aeabi_i2d>
 800bb58:	4642      	mov	r2, r8
 800bb5a:	464b      	mov	r3, r9
 800bb5c:	f7f4 fd74 	bl	8000648 <__aeabi_dmul>
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	4630      	mov	r0, r6
 800bb66:	4639      	mov	r1, r7
 800bb68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bb6c:	f7f4 fbb4 	bl	80002d8 <__aeabi_dsub>
 800bb70:	f805 6b01 	strb.w	r6, [r5], #1
 800bb74:	9e01      	ldr	r6, [sp, #4]
 800bb76:	9f03      	ldr	r7, [sp, #12]
 800bb78:	1bae      	subs	r6, r5, r6
 800bb7a:	42b7      	cmp	r7, r6
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	460b      	mov	r3, r1
 800bb80:	d135      	bne.n	800bbee <_dtoa_r+0x6e6>
 800bb82:	f7f4 fbab 	bl	80002dc <__adddf3>
 800bb86:	4642      	mov	r2, r8
 800bb88:	464b      	mov	r3, r9
 800bb8a:	4606      	mov	r6, r0
 800bb8c:	460f      	mov	r7, r1
 800bb8e:	f7f4 ffeb 	bl	8000b68 <__aeabi_dcmpgt>
 800bb92:	b9d0      	cbnz	r0, 800bbca <_dtoa_r+0x6c2>
 800bb94:	4642      	mov	r2, r8
 800bb96:	464b      	mov	r3, r9
 800bb98:	4630      	mov	r0, r6
 800bb9a:	4639      	mov	r1, r7
 800bb9c:	f7f4 ffbc 	bl	8000b18 <__aeabi_dcmpeq>
 800bba0:	b110      	cbz	r0, 800bba8 <_dtoa_r+0x6a0>
 800bba2:	f01a 0f01 	tst.w	sl, #1
 800bba6:	d110      	bne.n	800bbca <_dtoa_r+0x6c2>
 800bba8:	4620      	mov	r0, r4
 800bbaa:	ee18 1a10 	vmov	r1, s16
 800bbae:	f000 fe79 	bl	800c8a4 <_Bfree>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	9800      	ldr	r0, [sp, #0]
 800bbb6:	702b      	strb	r3, [r5, #0]
 800bbb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbba:	3001      	adds	r0, #1
 800bbbc:	6018      	str	r0, [r3, #0]
 800bbbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f43f acf1 	beq.w	800b5a8 <_dtoa_r+0xa0>
 800bbc6:	601d      	str	r5, [r3, #0]
 800bbc8:	e4ee      	b.n	800b5a8 <_dtoa_r+0xa0>
 800bbca:	9f00      	ldr	r7, [sp, #0]
 800bbcc:	462b      	mov	r3, r5
 800bbce:	461d      	mov	r5, r3
 800bbd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbd4:	2a39      	cmp	r2, #57	; 0x39
 800bbd6:	d106      	bne.n	800bbe6 <_dtoa_r+0x6de>
 800bbd8:	9a01      	ldr	r2, [sp, #4]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d1f7      	bne.n	800bbce <_dtoa_r+0x6c6>
 800bbde:	9901      	ldr	r1, [sp, #4]
 800bbe0:	2230      	movs	r2, #48	; 0x30
 800bbe2:	3701      	adds	r7, #1
 800bbe4:	700a      	strb	r2, [r1, #0]
 800bbe6:	781a      	ldrb	r2, [r3, #0]
 800bbe8:	3201      	adds	r2, #1
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	e790      	b.n	800bb10 <_dtoa_r+0x608>
 800bbee:	4ba6      	ldr	r3, [pc, #664]	; (800be88 <_dtoa_r+0x980>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f7f4 fd29 	bl	8000648 <__aeabi_dmul>
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460f      	mov	r7, r1
 800bbfe:	f7f4 ff8b 	bl	8000b18 <__aeabi_dcmpeq>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d09d      	beq.n	800bb42 <_dtoa_r+0x63a>
 800bc06:	e7cf      	b.n	800bba8 <_dtoa_r+0x6a0>
 800bc08:	9a08      	ldr	r2, [sp, #32]
 800bc0a:	2a00      	cmp	r2, #0
 800bc0c:	f000 80d7 	beq.w	800bdbe <_dtoa_r+0x8b6>
 800bc10:	9a06      	ldr	r2, [sp, #24]
 800bc12:	2a01      	cmp	r2, #1
 800bc14:	f300 80ba 	bgt.w	800bd8c <_dtoa_r+0x884>
 800bc18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc1a:	2a00      	cmp	r2, #0
 800bc1c:	f000 80b2 	beq.w	800bd84 <_dtoa_r+0x87c>
 800bc20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc24:	9e07      	ldr	r6, [sp, #28]
 800bc26:	9d04      	ldr	r5, [sp, #16]
 800bc28:	9a04      	ldr	r2, [sp, #16]
 800bc2a:	441a      	add	r2, r3
 800bc2c:	9204      	str	r2, [sp, #16]
 800bc2e:	9a05      	ldr	r2, [sp, #20]
 800bc30:	2101      	movs	r1, #1
 800bc32:	441a      	add	r2, r3
 800bc34:	4620      	mov	r0, r4
 800bc36:	9205      	str	r2, [sp, #20]
 800bc38:	f000 ff36 	bl	800caa8 <__i2b>
 800bc3c:	4607      	mov	r7, r0
 800bc3e:	2d00      	cmp	r5, #0
 800bc40:	dd0c      	ble.n	800bc5c <_dtoa_r+0x754>
 800bc42:	9b05      	ldr	r3, [sp, #20]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	dd09      	ble.n	800bc5c <_dtoa_r+0x754>
 800bc48:	42ab      	cmp	r3, r5
 800bc4a:	9a04      	ldr	r2, [sp, #16]
 800bc4c:	bfa8      	it	ge
 800bc4e:	462b      	movge	r3, r5
 800bc50:	1ad2      	subs	r2, r2, r3
 800bc52:	9204      	str	r2, [sp, #16]
 800bc54:	9a05      	ldr	r2, [sp, #20]
 800bc56:	1aed      	subs	r5, r5, r3
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	9305      	str	r3, [sp, #20]
 800bc5c:	9b07      	ldr	r3, [sp, #28]
 800bc5e:	b31b      	cbz	r3, 800bca8 <_dtoa_r+0x7a0>
 800bc60:	9b08      	ldr	r3, [sp, #32]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	f000 80af 	beq.w	800bdc6 <_dtoa_r+0x8be>
 800bc68:	2e00      	cmp	r6, #0
 800bc6a:	dd13      	ble.n	800bc94 <_dtoa_r+0x78c>
 800bc6c:	4639      	mov	r1, r7
 800bc6e:	4632      	mov	r2, r6
 800bc70:	4620      	mov	r0, r4
 800bc72:	f000 ffd9 	bl	800cc28 <__pow5mult>
 800bc76:	ee18 2a10 	vmov	r2, s16
 800bc7a:	4601      	mov	r1, r0
 800bc7c:	4607      	mov	r7, r0
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f000 ff28 	bl	800cad4 <__multiply>
 800bc84:	ee18 1a10 	vmov	r1, s16
 800bc88:	4680      	mov	r8, r0
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 fe0a 	bl	800c8a4 <_Bfree>
 800bc90:	ee08 8a10 	vmov	s16, r8
 800bc94:	9b07      	ldr	r3, [sp, #28]
 800bc96:	1b9a      	subs	r2, r3, r6
 800bc98:	d006      	beq.n	800bca8 <_dtoa_r+0x7a0>
 800bc9a:	ee18 1a10 	vmov	r1, s16
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 ffc2 	bl	800cc28 <__pow5mult>
 800bca4:	ee08 0a10 	vmov	s16, r0
 800bca8:	2101      	movs	r1, #1
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f000 fefc 	bl	800caa8 <__i2b>
 800bcb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	4606      	mov	r6, r0
 800bcb6:	f340 8088 	ble.w	800bdca <_dtoa_r+0x8c2>
 800bcba:	461a      	mov	r2, r3
 800bcbc:	4601      	mov	r1, r0
 800bcbe:	4620      	mov	r0, r4
 800bcc0:	f000 ffb2 	bl	800cc28 <__pow5mult>
 800bcc4:	9b06      	ldr	r3, [sp, #24]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	4606      	mov	r6, r0
 800bcca:	f340 8081 	ble.w	800bdd0 <_dtoa_r+0x8c8>
 800bcce:	f04f 0800 	mov.w	r8, #0
 800bcd2:	6933      	ldr	r3, [r6, #16]
 800bcd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bcd8:	6918      	ldr	r0, [r3, #16]
 800bcda:	f000 fe95 	bl	800ca08 <__hi0bits>
 800bcde:	f1c0 0020 	rsb	r0, r0, #32
 800bce2:	9b05      	ldr	r3, [sp, #20]
 800bce4:	4418      	add	r0, r3
 800bce6:	f010 001f 	ands.w	r0, r0, #31
 800bcea:	f000 8092 	beq.w	800be12 <_dtoa_r+0x90a>
 800bcee:	f1c0 0320 	rsb	r3, r0, #32
 800bcf2:	2b04      	cmp	r3, #4
 800bcf4:	f340 808a 	ble.w	800be0c <_dtoa_r+0x904>
 800bcf8:	f1c0 001c 	rsb	r0, r0, #28
 800bcfc:	9b04      	ldr	r3, [sp, #16]
 800bcfe:	4403      	add	r3, r0
 800bd00:	9304      	str	r3, [sp, #16]
 800bd02:	9b05      	ldr	r3, [sp, #20]
 800bd04:	4403      	add	r3, r0
 800bd06:	4405      	add	r5, r0
 800bd08:	9305      	str	r3, [sp, #20]
 800bd0a:	9b04      	ldr	r3, [sp, #16]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	dd07      	ble.n	800bd20 <_dtoa_r+0x818>
 800bd10:	ee18 1a10 	vmov	r1, s16
 800bd14:	461a      	mov	r2, r3
 800bd16:	4620      	mov	r0, r4
 800bd18:	f000 ffe0 	bl	800ccdc <__lshift>
 800bd1c:	ee08 0a10 	vmov	s16, r0
 800bd20:	9b05      	ldr	r3, [sp, #20]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	dd05      	ble.n	800bd32 <_dtoa_r+0x82a>
 800bd26:	4631      	mov	r1, r6
 800bd28:	461a      	mov	r2, r3
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f000 ffd6 	bl	800ccdc <__lshift>
 800bd30:	4606      	mov	r6, r0
 800bd32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d06e      	beq.n	800be16 <_dtoa_r+0x90e>
 800bd38:	ee18 0a10 	vmov	r0, s16
 800bd3c:	4631      	mov	r1, r6
 800bd3e:	f001 f83d 	bl	800cdbc <__mcmp>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	da67      	bge.n	800be16 <_dtoa_r+0x90e>
 800bd46:	9b00      	ldr	r3, [sp, #0]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	ee18 1a10 	vmov	r1, s16
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	220a      	movs	r2, #10
 800bd52:	2300      	movs	r3, #0
 800bd54:	4620      	mov	r0, r4
 800bd56:	f000 fdc7 	bl	800c8e8 <__multadd>
 800bd5a:	9b08      	ldr	r3, [sp, #32]
 800bd5c:	ee08 0a10 	vmov	s16, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	f000 81b1 	beq.w	800c0c8 <_dtoa_r+0xbc0>
 800bd66:	2300      	movs	r3, #0
 800bd68:	4639      	mov	r1, r7
 800bd6a:	220a      	movs	r2, #10
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f000 fdbb 	bl	800c8e8 <__multadd>
 800bd72:	9b02      	ldr	r3, [sp, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	4607      	mov	r7, r0
 800bd78:	f300 808e 	bgt.w	800be98 <_dtoa_r+0x990>
 800bd7c:	9b06      	ldr	r3, [sp, #24]
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	dc51      	bgt.n	800be26 <_dtoa_r+0x91e>
 800bd82:	e089      	b.n	800be98 <_dtoa_r+0x990>
 800bd84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd8a:	e74b      	b.n	800bc24 <_dtoa_r+0x71c>
 800bd8c:	9b03      	ldr	r3, [sp, #12]
 800bd8e:	1e5e      	subs	r6, r3, #1
 800bd90:	9b07      	ldr	r3, [sp, #28]
 800bd92:	42b3      	cmp	r3, r6
 800bd94:	bfbf      	itttt	lt
 800bd96:	9b07      	ldrlt	r3, [sp, #28]
 800bd98:	9607      	strlt	r6, [sp, #28]
 800bd9a:	1af2      	sublt	r2, r6, r3
 800bd9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bd9e:	bfb6      	itet	lt
 800bda0:	189b      	addlt	r3, r3, r2
 800bda2:	1b9e      	subge	r6, r3, r6
 800bda4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bda6:	9b03      	ldr	r3, [sp, #12]
 800bda8:	bfb8      	it	lt
 800bdaa:	2600      	movlt	r6, #0
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	bfb7      	itett	lt
 800bdb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bdb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bdb8:	1a9d      	sublt	r5, r3, r2
 800bdba:	2300      	movlt	r3, #0
 800bdbc:	e734      	b.n	800bc28 <_dtoa_r+0x720>
 800bdbe:	9e07      	ldr	r6, [sp, #28]
 800bdc0:	9d04      	ldr	r5, [sp, #16]
 800bdc2:	9f08      	ldr	r7, [sp, #32]
 800bdc4:	e73b      	b.n	800bc3e <_dtoa_r+0x736>
 800bdc6:	9a07      	ldr	r2, [sp, #28]
 800bdc8:	e767      	b.n	800bc9a <_dtoa_r+0x792>
 800bdca:	9b06      	ldr	r3, [sp, #24]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	dc18      	bgt.n	800be02 <_dtoa_r+0x8fa>
 800bdd0:	f1ba 0f00 	cmp.w	sl, #0
 800bdd4:	d115      	bne.n	800be02 <_dtoa_r+0x8fa>
 800bdd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdda:	b993      	cbnz	r3, 800be02 <_dtoa_r+0x8fa>
 800bddc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bde0:	0d1b      	lsrs	r3, r3, #20
 800bde2:	051b      	lsls	r3, r3, #20
 800bde4:	b183      	cbz	r3, 800be08 <_dtoa_r+0x900>
 800bde6:	9b04      	ldr	r3, [sp, #16]
 800bde8:	3301      	adds	r3, #1
 800bdea:	9304      	str	r3, [sp, #16]
 800bdec:	9b05      	ldr	r3, [sp, #20]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	9305      	str	r3, [sp, #20]
 800bdf2:	f04f 0801 	mov.w	r8, #1
 800bdf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f47f af6a 	bne.w	800bcd2 <_dtoa_r+0x7ca>
 800bdfe:	2001      	movs	r0, #1
 800be00:	e76f      	b.n	800bce2 <_dtoa_r+0x7da>
 800be02:	f04f 0800 	mov.w	r8, #0
 800be06:	e7f6      	b.n	800bdf6 <_dtoa_r+0x8ee>
 800be08:	4698      	mov	r8, r3
 800be0a:	e7f4      	b.n	800bdf6 <_dtoa_r+0x8ee>
 800be0c:	f43f af7d 	beq.w	800bd0a <_dtoa_r+0x802>
 800be10:	4618      	mov	r0, r3
 800be12:	301c      	adds	r0, #28
 800be14:	e772      	b.n	800bcfc <_dtoa_r+0x7f4>
 800be16:	9b03      	ldr	r3, [sp, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	dc37      	bgt.n	800be8c <_dtoa_r+0x984>
 800be1c:	9b06      	ldr	r3, [sp, #24]
 800be1e:	2b02      	cmp	r3, #2
 800be20:	dd34      	ble.n	800be8c <_dtoa_r+0x984>
 800be22:	9b03      	ldr	r3, [sp, #12]
 800be24:	9302      	str	r3, [sp, #8]
 800be26:	9b02      	ldr	r3, [sp, #8]
 800be28:	b96b      	cbnz	r3, 800be46 <_dtoa_r+0x93e>
 800be2a:	4631      	mov	r1, r6
 800be2c:	2205      	movs	r2, #5
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 fd5a 	bl	800c8e8 <__multadd>
 800be34:	4601      	mov	r1, r0
 800be36:	4606      	mov	r6, r0
 800be38:	ee18 0a10 	vmov	r0, s16
 800be3c:	f000 ffbe 	bl	800cdbc <__mcmp>
 800be40:	2800      	cmp	r0, #0
 800be42:	f73f adbb 	bgt.w	800b9bc <_dtoa_r+0x4b4>
 800be46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be48:	9d01      	ldr	r5, [sp, #4]
 800be4a:	43db      	mvns	r3, r3
 800be4c:	9300      	str	r3, [sp, #0]
 800be4e:	f04f 0800 	mov.w	r8, #0
 800be52:	4631      	mov	r1, r6
 800be54:	4620      	mov	r0, r4
 800be56:	f000 fd25 	bl	800c8a4 <_Bfree>
 800be5a:	2f00      	cmp	r7, #0
 800be5c:	f43f aea4 	beq.w	800bba8 <_dtoa_r+0x6a0>
 800be60:	f1b8 0f00 	cmp.w	r8, #0
 800be64:	d005      	beq.n	800be72 <_dtoa_r+0x96a>
 800be66:	45b8      	cmp	r8, r7
 800be68:	d003      	beq.n	800be72 <_dtoa_r+0x96a>
 800be6a:	4641      	mov	r1, r8
 800be6c:	4620      	mov	r0, r4
 800be6e:	f000 fd19 	bl	800c8a4 <_Bfree>
 800be72:	4639      	mov	r1, r7
 800be74:	4620      	mov	r0, r4
 800be76:	f000 fd15 	bl	800c8a4 <_Bfree>
 800be7a:	e695      	b.n	800bba8 <_dtoa_r+0x6a0>
 800be7c:	2600      	movs	r6, #0
 800be7e:	4637      	mov	r7, r6
 800be80:	e7e1      	b.n	800be46 <_dtoa_r+0x93e>
 800be82:	9700      	str	r7, [sp, #0]
 800be84:	4637      	mov	r7, r6
 800be86:	e599      	b.n	800b9bc <_dtoa_r+0x4b4>
 800be88:	40240000 	.word	0x40240000
 800be8c:	9b08      	ldr	r3, [sp, #32]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f000 80ca 	beq.w	800c028 <_dtoa_r+0xb20>
 800be94:	9b03      	ldr	r3, [sp, #12]
 800be96:	9302      	str	r3, [sp, #8]
 800be98:	2d00      	cmp	r5, #0
 800be9a:	dd05      	ble.n	800bea8 <_dtoa_r+0x9a0>
 800be9c:	4639      	mov	r1, r7
 800be9e:	462a      	mov	r2, r5
 800bea0:	4620      	mov	r0, r4
 800bea2:	f000 ff1b 	bl	800ccdc <__lshift>
 800bea6:	4607      	mov	r7, r0
 800bea8:	f1b8 0f00 	cmp.w	r8, #0
 800beac:	d05b      	beq.n	800bf66 <_dtoa_r+0xa5e>
 800beae:	6879      	ldr	r1, [r7, #4]
 800beb0:	4620      	mov	r0, r4
 800beb2:	f000 fcb7 	bl	800c824 <_Balloc>
 800beb6:	4605      	mov	r5, r0
 800beb8:	b928      	cbnz	r0, 800bec6 <_dtoa_r+0x9be>
 800beba:	4b87      	ldr	r3, [pc, #540]	; (800c0d8 <_dtoa_r+0xbd0>)
 800bebc:	4602      	mov	r2, r0
 800bebe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bec2:	f7ff bb3b 	b.w	800b53c <_dtoa_r+0x34>
 800bec6:	693a      	ldr	r2, [r7, #16]
 800bec8:	3202      	adds	r2, #2
 800beca:	0092      	lsls	r2, r2, #2
 800becc:	f107 010c 	add.w	r1, r7, #12
 800bed0:	300c      	adds	r0, #12
 800bed2:	f7fd fc33 	bl	800973c <memcpy>
 800bed6:	2201      	movs	r2, #1
 800bed8:	4629      	mov	r1, r5
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 fefe 	bl	800ccdc <__lshift>
 800bee0:	9b01      	ldr	r3, [sp, #4]
 800bee2:	f103 0901 	add.w	r9, r3, #1
 800bee6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800beea:	4413      	add	r3, r2
 800beec:	9305      	str	r3, [sp, #20]
 800beee:	f00a 0301 	and.w	r3, sl, #1
 800bef2:	46b8      	mov	r8, r7
 800bef4:	9304      	str	r3, [sp, #16]
 800bef6:	4607      	mov	r7, r0
 800bef8:	4631      	mov	r1, r6
 800befa:	ee18 0a10 	vmov	r0, s16
 800befe:	f7ff fa77 	bl	800b3f0 <quorem>
 800bf02:	4641      	mov	r1, r8
 800bf04:	9002      	str	r0, [sp, #8]
 800bf06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bf0a:	ee18 0a10 	vmov	r0, s16
 800bf0e:	f000 ff55 	bl	800cdbc <__mcmp>
 800bf12:	463a      	mov	r2, r7
 800bf14:	9003      	str	r0, [sp, #12]
 800bf16:	4631      	mov	r1, r6
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f000 ff6b 	bl	800cdf4 <__mdiff>
 800bf1e:	68c2      	ldr	r2, [r0, #12]
 800bf20:	f109 3bff 	add.w	fp, r9, #4294967295
 800bf24:	4605      	mov	r5, r0
 800bf26:	bb02      	cbnz	r2, 800bf6a <_dtoa_r+0xa62>
 800bf28:	4601      	mov	r1, r0
 800bf2a:	ee18 0a10 	vmov	r0, s16
 800bf2e:	f000 ff45 	bl	800cdbc <__mcmp>
 800bf32:	4602      	mov	r2, r0
 800bf34:	4629      	mov	r1, r5
 800bf36:	4620      	mov	r0, r4
 800bf38:	9207      	str	r2, [sp, #28]
 800bf3a:	f000 fcb3 	bl	800c8a4 <_Bfree>
 800bf3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bf42:	ea43 0102 	orr.w	r1, r3, r2
 800bf46:	9b04      	ldr	r3, [sp, #16]
 800bf48:	430b      	orrs	r3, r1
 800bf4a:	464d      	mov	r5, r9
 800bf4c:	d10f      	bne.n	800bf6e <_dtoa_r+0xa66>
 800bf4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf52:	d02a      	beq.n	800bfaa <_dtoa_r+0xaa2>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	dd02      	ble.n	800bf60 <_dtoa_r+0xa58>
 800bf5a:	9b02      	ldr	r3, [sp, #8]
 800bf5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bf60:	f88b a000 	strb.w	sl, [fp]
 800bf64:	e775      	b.n	800be52 <_dtoa_r+0x94a>
 800bf66:	4638      	mov	r0, r7
 800bf68:	e7ba      	b.n	800bee0 <_dtoa_r+0x9d8>
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	e7e2      	b.n	800bf34 <_dtoa_r+0xa2c>
 800bf6e:	9b03      	ldr	r3, [sp, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	db04      	blt.n	800bf7e <_dtoa_r+0xa76>
 800bf74:	9906      	ldr	r1, [sp, #24]
 800bf76:	430b      	orrs	r3, r1
 800bf78:	9904      	ldr	r1, [sp, #16]
 800bf7a:	430b      	orrs	r3, r1
 800bf7c:	d122      	bne.n	800bfc4 <_dtoa_r+0xabc>
 800bf7e:	2a00      	cmp	r2, #0
 800bf80:	ddee      	ble.n	800bf60 <_dtoa_r+0xa58>
 800bf82:	ee18 1a10 	vmov	r1, s16
 800bf86:	2201      	movs	r2, #1
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f000 fea7 	bl	800ccdc <__lshift>
 800bf8e:	4631      	mov	r1, r6
 800bf90:	ee08 0a10 	vmov	s16, r0
 800bf94:	f000 ff12 	bl	800cdbc <__mcmp>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	dc03      	bgt.n	800bfa4 <_dtoa_r+0xa9c>
 800bf9c:	d1e0      	bne.n	800bf60 <_dtoa_r+0xa58>
 800bf9e:	f01a 0f01 	tst.w	sl, #1
 800bfa2:	d0dd      	beq.n	800bf60 <_dtoa_r+0xa58>
 800bfa4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bfa8:	d1d7      	bne.n	800bf5a <_dtoa_r+0xa52>
 800bfaa:	2339      	movs	r3, #57	; 0x39
 800bfac:	f88b 3000 	strb.w	r3, [fp]
 800bfb0:	462b      	mov	r3, r5
 800bfb2:	461d      	mov	r5, r3
 800bfb4:	3b01      	subs	r3, #1
 800bfb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bfba:	2a39      	cmp	r2, #57	; 0x39
 800bfbc:	d071      	beq.n	800c0a2 <_dtoa_r+0xb9a>
 800bfbe:	3201      	adds	r2, #1
 800bfc0:	701a      	strb	r2, [r3, #0]
 800bfc2:	e746      	b.n	800be52 <_dtoa_r+0x94a>
 800bfc4:	2a00      	cmp	r2, #0
 800bfc6:	dd07      	ble.n	800bfd8 <_dtoa_r+0xad0>
 800bfc8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bfcc:	d0ed      	beq.n	800bfaa <_dtoa_r+0xaa2>
 800bfce:	f10a 0301 	add.w	r3, sl, #1
 800bfd2:	f88b 3000 	strb.w	r3, [fp]
 800bfd6:	e73c      	b.n	800be52 <_dtoa_r+0x94a>
 800bfd8:	9b05      	ldr	r3, [sp, #20]
 800bfda:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bfde:	4599      	cmp	r9, r3
 800bfe0:	d047      	beq.n	800c072 <_dtoa_r+0xb6a>
 800bfe2:	ee18 1a10 	vmov	r1, s16
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	220a      	movs	r2, #10
 800bfea:	4620      	mov	r0, r4
 800bfec:	f000 fc7c 	bl	800c8e8 <__multadd>
 800bff0:	45b8      	cmp	r8, r7
 800bff2:	ee08 0a10 	vmov	s16, r0
 800bff6:	f04f 0300 	mov.w	r3, #0
 800bffa:	f04f 020a 	mov.w	r2, #10
 800bffe:	4641      	mov	r1, r8
 800c000:	4620      	mov	r0, r4
 800c002:	d106      	bne.n	800c012 <_dtoa_r+0xb0a>
 800c004:	f000 fc70 	bl	800c8e8 <__multadd>
 800c008:	4680      	mov	r8, r0
 800c00a:	4607      	mov	r7, r0
 800c00c:	f109 0901 	add.w	r9, r9, #1
 800c010:	e772      	b.n	800bef8 <_dtoa_r+0x9f0>
 800c012:	f000 fc69 	bl	800c8e8 <__multadd>
 800c016:	4639      	mov	r1, r7
 800c018:	4680      	mov	r8, r0
 800c01a:	2300      	movs	r3, #0
 800c01c:	220a      	movs	r2, #10
 800c01e:	4620      	mov	r0, r4
 800c020:	f000 fc62 	bl	800c8e8 <__multadd>
 800c024:	4607      	mov	r7, r0
 800c026:	e7f1      	b.n	800c00c <_dtoa_r+0xb04>
 800c028:	9b03      	ldr	r3, [sp, #12]
 800c02a:	9302      	str	r3, [sp, #8]
 800c02c:	9d01      	ldr	r5, [sp, #4]
 800c02e:	ee18 0a10 	vmov	r0, s16
 800c032:	4631      	mov	r1, r6
 800c034:	f7ff f9dc 	bl	800b3f0 <quorem>
 800c038:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c03c:	9b01      	ldr	r3, [sp, #4]
 800c03e:	f805 ab01 	strb.w	sl, [r5], #1
 800c042:	1aea      	subs	r2, r5, r3
 800c044:	9b02      	ldr	r3, [sp, #8]
 800c046:	4293      	cmp	r3, r2
 800c048:	dd09      	ble.n	800c05e <_dtoa_r+0xb56>
 800c04a:	ee18 1a10 	vmov	r1, s16
 800c04e:	2300      	movs	r3, #0
 800c050:	220a      	movs	r2, #10
 800c052:	4620      	mov	r0, r4
 800c054:	f000 fc48 	bl	800c8e8 <__multadd>
 800c058:	ee08 0a10 	vmov	s16, r0
 800c05c:	e7e7      	b.n	800c02e <_dtoa_r+0xb26>
 800c05e:	9b02      	ldr	r3, [sp, #8]
 800c060:	2b00      	cmp	r3, #0
 800c062:	bfc8      	it	gt
 800c064:	461d      	movgt	r5, r3
 800c066:	9b01      	ldr	r3, [sp, #4]
 800c068:	bfd8      	it	le
 800c06a:	2501      	movle	r5, #1
 800c06c:	441d      	add	r5, r3
 800c06e:	f04f 0800 	mov.w	r8, #0
 800c072:	ee18 1a10 	vmov	r1, s16
 800c076:	2201      	movs	r2, #1
 800c078:	4620      	mov	r0, r4
 800c07a:	f000 fe2f 	bl	800ccdc <__lshift>
 800c07e:	4631      	mov	r1, r6
 800c080:	ee08 0a10 	vmov	s16, r0
 800c084:	f000 fe9a 	bl	800cdbc <__mcmp>
 800c088:	2800      	cmp	r0, #0
 800c08a:	dc91      	bgt.n	800bfb0 <_dtoa_r+0xaa8>
 800c08c:	d102      	bne.n	800c094 <_dtoa_r+0xb8c>
 800c08e:	f01a 0f01 	tst.w	sl, #1
 800c092:	d18d      	bne.n	800bfb0 <_dtoa_r+0xaa8>
 800c094:	462b      	mov	r3, r5
 800c096:	461d      	mov	r5, r3
 800c098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c09c:	2a30      	cmp	r2, #48	; 0x30
 800c09e:	d0fa      	beq.n	800c096 <_dtoa_r+0xb8e>
 800c0a0:	e6d7      	b.n	800be52 <_dtoa_r+0x94a>
 800c0a2:	9a01      	ldr	r2, [sp, #4]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d184      	bne.n	800bfb2 <_dtoa_r+0xaaa>
 800c0a8:	9b00      	ldr	r3, [sp, #0]
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	2331      	movs	r3, #49	; 0x31
 800c0b0:	7013      	strb	r3, [r2, #0]
 800c0b2:	e6ce      	b.n	800be52 <_dtoa_r+0x94a>
 800c0b4:	4b09      	ldr	r3, [pc, #36]	; (800c0dc <_dtoa_r+0xbd4>)
 800c0b6:	f7ff ba95 	b.w	800b5e4 <_dtoa_r+0xdc>
 800c0ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f47f aa6e 	bne.w	800b59e <_dtoa_r+0x96>
 800c0c2:	4b07      	ldr	r3, [pc, #28]	; (800c0e0 <_dtoa_r+0xbd8>)
 800c0c4:	f7ff ba8e 	b.w	800b5e4 <_dtoa_r+0xdc>
 800c0c8:	9b02      	ldr	r3, [sp, #8]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	dcae      	bgt.n	800c02c <_dtoa_r+0xb24>
 800c0ce:	9b06      	ldr	r3, [sp, #24]
 800c0d0:	2b02      	cmp	r3, #2
 800c0d2:	f73f aea8 	bgt.w	800be26 <_dtoa_r+0x91e>
 800c0d6:	e7a9      	b.n	800c02c <_dtoa_r+0xb24>
 800c0d8:	0800e579 	.word	0x0800e579
 800c0dc:	0800e2e4 	.word	0x0800e2e4
 800c0e0:	0800e511 	.word	0x0800e511

0800c0e4 <fiprintf>:
 800c0e4:	b40e      	push	{r1, r2, r3}
 800c0e6:	b503      	push	{r0, r1, lr}
 800c0e8:	4601      	mov	r1, r0
 800c0ea:	ab03      	add	r3, sp, #12
 800c0ec:	4805      	ldr	r0, [pc, #20]	; (800c104 <fiprintf+0x20>)
 800c0ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0f2:	6800      	ldr	r0, [r0, #0]
 800c0f4:	9301      	str	r3, [sp, #4]
 800c0f6:	f001 fad3 	bl	800d6a0 <_vfiprintf_r>
 800c0fa:	b002      	add	sp, #8
 800c0fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c100:	b003      	add	sp, #12
 800c102:	4770      	bx	lr
 800c104:	2000001c 	.word	0x2000001c

0800c108 <rshift>:
 800c108:	6903      	ldr	r3, [r0, #16]
 800c10a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c10e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c112:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c116:	f100 0414 	add.w	r4, r0, #20
 800c11a:	dd45      	ble.n	800c1a8 <rshift+0xa0>
 800c11c:	f011 011f 	ands.w	r1, r1, #31
 800c120:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c124:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c128:	d10c      	bne.n	800c144 <rshift+0x3c>
 800c12a:	f100 0710 	add.w	r7, r0, #16
 800c12e:	4629      	mov	r1, r5
 800c130:	42b1      	cmp	r1, r6
 800c132:	d334      	bcc.n	800c19e <rshift+0x96>
 800c134:	1a9b      	subs	r3, r3, r2
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	1eea      	subs	r2, r5, #3
 800c13a:	4296      	cmp	r6, r2
 800c13c:	bf38      	it	cc
 800c13e:	2300      	movcc	r3, #0
 800c140:	4423      	add	r3, r4
 800c142:	e015      	b.n	800c170 <rshift+0x68>
 800c144:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c148:	f1c1 0820 	rsb	r8, r1, #32
 800c14c:	40cf      	lsrs	r7, r1
 800c14e:	f105 0e04 	add.w	lr, r5, #4
 800c152:	46a1      	mov	r9, r4
 800c154:	4576      	cmp	r6, lr
 800c156:	46f4      	mov	ip, lr
 800c158:	d815      	bhi.n	800c186 <rshift+0x7e>
 800c15a:	1a9a      	subs	r2, r3, r2
 800c15c:	0092      	lsls	r2, r2, #2
 800c15e:	3a04      	subs	r2, #4
 800c160:	3501      	adds	r5, #1
 800c162:	42ae      	cmp	r6, r5
 800c164:	bf38      	it	cc
 800c166:	2200      	movcc	r2, #0
 800c168:	18a3      	adds	r3, r4, r2
 800c16a:	50a7      	str	r7, [r4, r2]
 800c16c:	b107      	cbz	r7, 800c170 <rshift+0x68>
 800c16e:	3304      	adds	r3, #4
 800c170:	1b1a      	subs	r2, r3, r4
 800c172:	42a3      	cmp	r3, r4
 800c174:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c178:	bf08      	it	eq
 800c17a:	2300      	moveq	r3, #0
 800c17c:	6102      	str	r2, [r0, #16]
 800c17e:	bf08      	it	eq
 800c180:	6143      	streq	r3, [r0, #20]
 800c182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c186:	f8dc c000 	ldr.w	ip, [ip]
 800c18a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c18e:	ea4c 0707 	orr.w	r7, ip, r7
 800c192:	f849 7b04 	str.w	r7, [r9], #4
 800c196:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c19a:	40cf      	lsrs	r7, r1
 800c19c:	e7da      	b.n	800c154 <rshift+0x4c>
 800c19e:	f851 cb04 	ldr.w	ip, [r1], #4
 800c1a2:	f847 cf04 	str.w	ip, [r7, #4]!
 800c1a6:	e7c3      	b.n	800c130 <rshift+0x28>
 800c1a8:	4623      	mov	r3, r4
 800c1aa:	e7e1      	b.n	800c170 <rshift+0x68>

0800c1ac <__hexdig_fun>:
 800c1ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c1b0:	2b09      	cmp	r3, #9
 800c1b2:	d802      	bhi.n	800c1ba <__hexdig_fun+0xe>
 800c1b4:	3820      	subs	r0, #32
 800c1b6:	b2c0      	uxtb	r0, r0
 800c1b8:	4770      	bx	lr
 800c1ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c1be:	2b05      	cmp	r3, #5
 800c1c0:	d801      	bhi.n	800c1c6 <__hexdig_fun+0x1a>
 800c1c2:	3847      	subs	r0, #71	; 0x47
 800c1c4:	e7f7      	b.n	800c1b6 <__hexdig_fun+0xa>
 800c1c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c1ca:	2b05      	cmp	r3, #5
 800c1cc:	d801      	bhi.n	800c1d2 <__hexdig_fun+0x26>
 800c1ce:	3827      	subs	r0, #39	; 0x27
 800c1d0:	e7f1      	b.n	800c1b6 <__hexdig_fun+0xa>
 800c1d2:	2000      	movs	r0, #0
 800c1d4:	4770      	bx	lr
	...

0800c1d8 <__gethex>:
 800c1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1dc:	ed2d 8b02 	vpush	{d8}
 800c1e0:	b089      	sub	sp, #36	; 0x24
 800c1e2:	ee08 0a10 	vmov	s16, r0
 800c1e6:	9304      	str	r3, [sp, #16]
 800c1e8:	4bb4      	ldr	r3, [pc, #720]	; (800c4bc <__gethex+0x2e4>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	9301      	str	r3, [sp, #4]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	468b      	mov	fp, r1
 800c1f2:	4690      	mov	r8, r2
 800c1f4:	f7f4 f814 	bl	8000220 <strlen>
 800c1f8:	9b01      	ldr	r3, [sp, #4]
 800c1fa:	f8db 2000 	ldr.w	r2, [fp]
 800c1fe:	4403      	add	r3, r0
 800c200:	4682      	mov	sl, r0
 800c202:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c206:	9305      	str	r3, [sp, #20]
 800c208:	1c93      	adds	r3, r2, #2
 800c20a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c20e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c212:	32fe      	adds	r2, #254	; 0xfe
 800c214:	18d1      	adds	r1, r2, r3
 800c216:	461f      	mov	r7, r3
 800c218:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c21c:	9100      	str	r1, [sp, #0]
 800c21e:	2830      	cmp	r0, #48	; 0x30
 800c220:	d0f8      	beq.n	800c214 <__gethex+0x3c>
 800c222:	f7ff ffc3 	bl	800c1ac <__hexdig_fun>
 800c226:	4604      	mov	r4, r0
 800c228:	2800      	cmp	r0, #0
 800c22a:	d13a      	bne.n	800c2a2 <__gethex+0xca>
 800c22c:	9901      	ldr	r1, [sp, #4]
 800c22e:	4652      	mov	r2, sl
 800c230:	4638      	mov	r0, r7
 800c232:	f001 fb7d 	bl	800d930 <strncmp>
 800c236:	4605      	mov	r5, r0
 800c238:	2800      	cmp	r0, #0
 800c23a:	d168      	bne.n	800c30e <__gethex+0x136>
 800c23c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c240:	eb07 060a 	add.w	r6, r7, sl
 800c244:	f7ff ffb2 	bl	800c1ac <__hexdig_fun>
 800c248:	2800      	cmp	r0, #0
 800c24a:	d062      	beq.n	800c312 <__gethex+0x13a>
 800c24c:	4633      	mov	r3, r6
 800c24e:	7818      	ldrb	r0, [r3, #0]
 800c250:	2830      	cmp	r0, #48	; 0x30
 800c252:	461f      	mov	r7, r3
 800c254:	f103 0301 	add.w	r3, r3, #1
 800c258:	d0f9      	beq.n	800c24e <__gethex+0x76>
 800c25a:	f7ff ffa7 	bl	800c1ac <__hexdig_fun>
 800c25e:	2301      	movs	r3, #1
 800c260:	fab0 f480 	clz	r4, r0
 800c264:	0964      	lsrs	r4, r4, #5
 800c266:	4635      	mov	r5, r6
 800c268:	9300      	str	r3, [sp, #0]
 800c26a:	463a      	mov	r2, r7
 800c26c:	4616      	mov	r6, r2
 800c26e:	3201      	adds	r2, #1
 800c270:	7830      	ldrb	r0, [r6, #0]
 800c272:	f7ff ff9b 	bl	800c1ac <__hexdig_fun>
 800c276:	2800      	cmp	r0, #0
 800c278:	d1f8      	bne.n	800c26c <__gethex+0x94>
 800c27a:	9901      	ldr	r1, [sp, #4]
 800c27c:	4652      	mov	r2, sl
 800c27e:	4630      	mov	r0, r6
 800c280:	f001 fb56 	bl	800d930 <strncmp>
 800c284:	b980      	cbnz	r0, 800c2a8 <__gethex+0xd0>
 800c286:	b94d      	cbnz	r5, 800c29c <__gethex+0xc4>
 800c288:	eb06 050a 	add.w	r5, r6, sl
 800c28c:	462a      	mov	r2, r5
 800c28e:	4616      	mov	r6, r2
 800c290:	3201      	adds	r2, #1
 800c292:	7830      	ldrb	r0, [r6, #0]
 800c294:	f7ff ff8a 	bl	800c1ac <__hexdig_fun>
 800c298:	2800      	cmp	r0, #0
 800c29a:	d1f8      	bne.n	800c28e <__gethex+0xb6>
 800c29c:	1bad      	subs	r5, r5, r6
 800c29e:	00ad      	lsls	r5, r5, #2
 800c2a0:	e004      	b.n	800c2ac <__gethex+0xd4>
 800c2a2:	2400      	movs	r4, #0
 800c2a4:	4625      	mov	r5, r4
 800c2a6:	e7e0      	b.n	800c26a <__gethex+0x92>
 800c2a8:	2d00      	cmp	r5, #0
 800c2aa:	d1f7      	bne.n	800c29c <__gethex+0xc4>
 800c2ac:	7833      	ldrb	r3, [r6, #0]
 800c2ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c2b2:	2b50      	cmp	r3, #80	; 0x50
 800c2b4:	d13b      	bne.n	800c32e <__gethex+0x156>
 800c2b6:	7873      	ldrb	r3, [r6, #1]
 800c2b8:	2b2b      	cmp	r3, #43	; 0x2b
 800c2ba:	d02c      	beq.n	800c316 <__gethex+0x13e>
 800c2bc:	2b2d      	cmp	r3, #45	; 0x2d
 800c2be:	d02e      	beq.n	800c31e <__gethex+0x146>
 800c2c0:	1c71      	adds	r1, r6, #1
 800c2c2:	f04f 0900 	mov.w	r9, #0
 800c2c6:	7808      	ldrb	r0, [r1, #0]
 800c2c8:	f7ff ff70 	bl	800c1ac <__hexdig_fun>
 800c2cc:	1e43      	subs	r3, r0, #1
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	2b18      	cmp	r3, #24
 800c2d2:	d82c      	bhi.n	800c32e <__gethex+0x156>
 800c2d4:	f1a0 0210 	sub.w	r2, r0, #16
 800c2d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c2dc:	f7ff ff66 	bl	800c1ac <__hexdig_fun>
 800c2e0:	1e43      	subs	r3, r0, #1
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	2b18      	cmp	r3, #24
 800c2e6:	d91d      	bls.n	800c324 <__gethex+0x14c>
 800c2e8:	f1b9 0f00 	cmp.w	r9, #0
 800c2ec:	d000      	beq.n	800c2f0 <__gethex+0x118>
 800c2ee:	4252      	negs	r2, r2
 800c2f0:	4415      	add	r5, r2
 800c2f2:	f8cb 1000 	str.w	r1, [fp]
 800c2f6:	b1e4      	cbz	r4, 800c332 <__gethex+0x15a>
 800c2f8:	9b00      	ldr	r3, [sp, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	bf14      	ite	ne
 800c2fe:	2700      	movne	r7, #0
 800c300:	2706      	moveq	r7, #6
 800c302:	4638      	mov	r0, r7
 800c304:	b009      	add	sp, #36	; 0x24
 800c306:	ecbd 8b02 	vpop	{d8}
 800c30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30e:	463e      	mov	r6, r7
 800c310:	4625      	mov	r5, r4
 800c312:	2401      	movs	r4, #1
 800c314:	e7ca      	b.n	800c2ac <__gethex+0xd4>
 800c316:	f04f 0900 	mov.w	r9, #0
 800c31a:	1cb1      	adds	r1, r6, #2
 800c31c:	e7d3      	b.n	800c2c6 <__gethex+0xee>
 800c31e:	f04f 0901 	mov.w	r9, #1
 800c322:	e7fa      	b.n	800c31a <__gethex+0x142>
 800c324:	230a      	movs	r3, #10
 800c326:	fb03 0202 	mla	r2, r3, r2, r0
 800c32a:	3a10      	subs	r2, #16
 800c32c:	e7d4      	b.n	800c2d8 <__gethex+0x100>
 800c32e:	4631      	mov	r1, r6
 800c330:	e7df      	b.n	800c2f2 <__gethex+0x11a>
 800c332:	1bf3      	subs	r3, r6, r7
 800c334:	3b01      	subs	r3, #1
 800c336:	4621      	mov	r1, r4
 800c338:	2b07      	cmp	r3, #7
 800c33a:	dc0b      	bgt.n	800c354 <__gethex+0x17c>
 800c33c:	ee18 0a10 	vmov	r0, s16
 800c340:	f000 fa70 	bl	800c824 <_Balloc>
 800c344:	4604      	mov	r4, r0
 800c346:	b940      	cbnz	r0, 800c35a <__gethex+0x182>
 800c348:	4b5d      	ldr	r3, [pc, #372]	; (800c4c0 <__gethex+0x2e8>)
 800c34a:	4602      	mov	r2, r0
 800c34c:	21de      	movs	r1, #222	; 0xde
 800c34e:	485d      	ldr	r0, [pc, #372]	; (800c4c4 <__gethex+0x2ec>)
 800c350:	f7ff f830 	bl	800b3b4 <__assert_func>
 800c354:	3101      	adds	r1, #1
 800c356:	105b      	asrs	r3, r3, #1
 800c358:	e7ee      	b.n	800c338 <__gethex+0x160>
 800c35a:	f100 0914 	add.w	r9, r0, #20
 800c35e:	f04f 0b00 	mov.w	fp, #0
 800c362:	f1ca 0301 	rsb	r3, sl, #1
 800c366:	f8cd 9008 	str.w	r9, [sp, #8]
 800c36a:	f8cd b000 	str.w	fp, [sp]
 800c36e:	9306      	str	r3, [sp, #24]
 800c370:	42b7      	cmp	r7, r6
 800c372:	d340      	bcc.n	800c3f6 <__gethex+0x21e>
 800c374:	9802      	ldr	r0, [sp, #8]
 800c376:	9b00      	ldr	r3, [sp, #0]
 800c378:	f840 3b04 	str.w	r3, [r0], #4
 800c37c:	eba0 0009 	sub.w	r0, r0, r9
 800c380:	1080      	asrs	r0, r0, #2
 800c382:	0146      	lsls	r6, r0, #5
 800c384:	6120      	str	r0, [r4, #16]
 800c386:	4618      	mov	r0, r3
 800c388:	f000 fb3e 	bl	800ca08 <__hi0bits>
 800c38c:	1a30      	subs	r0, r6, r0
 800c38e:	f8d8 6000 	ldr.w	r6, [r8]
 800c392:	42b0      	cmp	r0, r6
 800c394:	dd63      	ble.n	800c45e <__gethex+0x286>
 800c396:	1b87      	subs	r7, r0, r6
 800c398:	4639      	mov	r1, r7
 800c39a:	4620      	mov	r0, r4
 800c39c:	f000 fee2 	bl	800d164 <__any_on>
 800c3a0:	4682      	mov	sl, r0
 800c3a2:	b1a8      	cbz	r0, 800c3d0 <__gethex+0x1f8>
 800c3a4:	1e7b      	subs	r3, r7, #1
 800c3a6:	1159      	asrs	r1, r3, #5
 800c3a8:	f003 021f 	and.w	r2, r3, #31
 800c3ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c3b0:	f04f 0a01 	mov.w	sl, #1
 800c3b4:	fa0a f202 	lsl.w	r2, sl, r2
 800c3b8:	420a      	tst	r2, r1
 800c3ba:	d009      	beq.n	800c3d0 <__gethex+0x1f8>
 800c3bc:	4553      	cmp	r3, sl
 800c3be:	dd05      	ble.n	800c3cc <__gethex+0x1f4>
 800c3c0:	1eb9      	subs	r1, r7, #2
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	f000 fece 	bl	800d164 <__any_on>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	d145      	bne.n	800c458 <__gethex+0x280>
 800c3cc:	f04f 0a02 	mov.w	sl, #2
 800c3d0:	4639      	mov	r1, r7
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f7ff fe98 	bl	800c108 <rshift>
 800c3d8:	443d      	add	r5, r7
 800c3da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c3de:	42ab      	cmp	r3, r5
 800c3e0:	da4c      	bge.n	800c47c <__gethex+0x2a4>
 800c3e2:	ee18 0a10 	vmov	r0, s16
 800c3e6:	4621      	mov	r1, r4
 800c3e8:	f000 fa5c 	bl	800c8a4 <_Bfree>
 800c3ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	6013      	str	r3, [r2, #0]
 800c3f2:	27a3      	movs	r7, #163	; 0xa3
 800c3f4:	e785      	b.n	800c302 <__gethex+0x12a>
 800c3f6:	1e73      	subs	r3, r6, #1
 800c3f8:	9a05      	ldr	r2, [sp, #20]
 800c3fa:	9303      	str	r3, [sp, #12]
 800c3fc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c400:	4293      	cmp	r3, r2
 800c402:	d019      	beq.n	800c438 <__gethex+0x260>
 800c404:	f1bb 0f20 	cmp.w	fp, #32
 800c408:	d107      	bne.n	800c41a <__gethex+0x242>
 800c40a:	9b02      	ldr	r3, [sp, #8]
 800c40c:	9a00      	ldr	r2, [sp, #0]
 800c40e:	f843 2b04 	str.w	r2, [r3], #4
 800c412:	9302      	str	r3, [sp, #8]
 800c414:	2300      	movs	r3, #0
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	469b      	mov	fp, r3
 800c41a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c41e:	f7ff fec5 	bl	800c1ac <__hexdig_fun>
 800c422:	9b00      	ldr	r3, [sp, #0]
 800c424:	f000 000f 	and.w	r0, r0, #15
 800c428:	fa00 f00b 	lsl.w	r0, r0, fp
 800c42c:	4303      	orrs	r3, r0
 800c42e:	9300      	str	r3, [sp, #0]
 800c430:	f10b 0b04 	add.w	fp, fp, #4
 800c434:	9b03      	ldr	r3, [sp, #12]
 800c436:	e00d      	b.n	800c454 <__gethex+0x27c>
 800c438:	9b03      	ldr	r3, [sp, #12]
 800c43a:	9a06      	ldr	r2, [sp, #24]
 800c43c:	4413      	add	r3, r2
 800c43e:	42bb      	cmp	r3, r7
 800c440:	d3e0      	bcc.n	800c404 <__gethex+0x22c>
 800c442:	4618      	mov	r0, r3
 800c444:	9901      	ldr	r1, [sp, #4]
 800c446:	9307      	str	r3, [sp, #28]
 800c448:	4652      	mov	r2, sl
 800c44a:	f001 fa71 	bl	800d930 <strncmp>
 800c44e:	9b07      	ldr	r3, [sp, #28]
 800c450:	2800      	cmp	r0, #0
 800c452:	d1d7      	bne.n	800c404 <__gethex+0x22c>
 800c454:	461e      	mov	r6, r3
 800c456:	e78b      	b.n	800c370 <__gethex+0x198>
 800c458:	f04f 0a03 	mov.w	sl, #3
 800c45c:	e7b8      	b.n	800c3d0 <__gethex+0x1f8>
 800c45e:	da0a      	bge.n	800c476 <__gethex+0x29e>
 800c460:	1a37      	subs	r7, r6, r0
 800c462:	4621      	mov	r1, r4
 800c464:	ee18 0a10 	vmov	r0, s16
 800c468:	463a      	mov	r2, r7
 800c46a:	f000 fc37 	bl	800ccdc <__lshift>
 800c46e:	1bed      	subs	r5, r5, r7
 800c470:	4604      	mov	r4, r0
 800c472:	f100 0914 	add.w	r9, r0, #20
 800c476:	f04f 0a00 	mov.w	sl, #0
 800c47a:	e7ae      	b.n	800c3da <__gethex+0x202>
 800c47c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c480:	42a8      	cmp	r0, r5
 800c482:	dd72      	ble.n	800c56a <__gethex+0x392>
 800c484:	1b45      	subs	r5, r0, r5
 800c486:	42ae      	cmp	r6, r5
 800c488:	dc36      	bgt.n	800c4f8 <__gethex+0x320>
 800c48a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d02a      	beq.n	800c4e8 <__gethex+0x310>
 800c492:	2b03      	cmp	r3, #3
 800c494:	d02c      	beq.n	800c4f0 <__gethex+0x318>
 800c496:	2b01      	cmp	r3, #1
 800c498:	d11c      	bne.n	800c4d4 <__gethex+0x2fc>
 800c49a:	42ae      	cmp	r6, r5
 800c49c:	d11a      	bne.n	800c4d4 <__gethex+0x2fc>
 800c49e:	2e01      	cmp	r6, #1
 800c4a0:	d112      	bne.n	800c4c8 <__gethex+0x2f0>
 800c4a2:	9a04      	ldr	r2, [sp, #16]
 800c4a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c4a8:	6013      	str	r3, [r2, #0]
 800c4aa:	2301      	movs	r3, #1
 800c4ac:	6123      	str	r3, [r4, #16]
 800c4ae:	f8c9 3000 	str.w	r3, [r9]
 800c4b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4b4:	2762      	movs	r7, #98	; 0x62
 800c4b6:	601c      	str	r4, [r3, #0]
 800c4b8:	e723      	b.n	800c302 <__gethex+0x12a>
 800c4ba:	bf00      	nop
 800c4bc:	0800e5f0 	.word	0x0800e5f0
 800c4c0:	0800e579 	.word	0x0800e579
 800c4c4:	0800e58a 	.word	0x0800e58a
 800c4c8:	1e71      	subs	r1, r6, #1
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 fe4a 	bl	800d164 <__any_on>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d1e6      	bne.n	800c4a2 <__gethex+0x2ca>
 800c4d4:	ee18 0a10 	vmov	r0, s16
 800c4d8:	4621      	mov	r1, r4
 800c4da:	f000 f9e3 	bl	800c8a4 <_Bfree>
 800c4de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	6013      	str	r3, [r2, #0]
 800c4e4:	2750      	movs	r7, #80	; 0x50
 800c4e6:	e70c      	b.n	800c302 <__gethex+0x12a>
 800c4e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1f2      	bne.n	800c4d4 <__gethex+0x2fc>
 800c4ee:	e7d8      	b.n	800c4a2 <__gethex+0x2ca>
 800c4f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d1d5      	bne.n	800c4a2 <__gethex+0x2ca>
 800c4f6:	e7ed      	b.n	800c4d4 <__gethex+0x2fc>
 800c4f8:	1e6f      	subs	r7, r5, #1
 800c4fa:	f1ba 0f00 	cmp.w	sl, #0
 800c4fe:	d131      	bne.n	800c564 <__gethex+0x38c>
 800c500:	b127      	cbz	r7, 800c50c <__gethex+0x334>
 800c502:	4639      	mov	r1, r7
 800c504:	4620      	mov	r0, r4
 800c506:	f000 fe2d 	bl	800d164 <__any_on>
 800c50a:	4682      	mov	sl, r0
 800c50c:	117b      	asrs	r3, r7, #5
 800c50e:	2101      	movs	r1, #1
 800c510:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c514:	f007 071f 	and.w	r7, r7, #31
 800c518:	fa01 f707 	lsl.w	r7, r1, r7
 800c51c:	421f      	tst	r7, r3
 800c51e:	4629      	mov	r1, r5
 800c520:	4620      	mov	r0, r4
 800c522:	bf18      	it	ne
 800c524:	f04a 0a02 	orrne.w	sl, sl, #2
 800c528:	1b76      	subs	r6, r6, r5
 800c52a:	f7ff fded 	bl	800c108 <rshift>
 800c52e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c532:	2702      	movs	r7, #2
 800c534:	f1ba 0f00 	cmp.w	sl, #0
 800c538:	d048      	beq.n	800c5cc <__gethex+0x3f4>
 800c53a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c53e:	2b02      	cmp	r3, #2
 800c540:	d015      	beq.n	800c56e <__gethex+0x396>
 800c542:	2b03      	cmp	r3, #3
 800c544:	d017      	beq.n	800c576 <__gethex+0x39e>
 800c546:	2b01      	cmp	r3, #1
 800c548:	d109      	bne.n	800c55e <__gethex+0x386>
 800c54a:	f01a 0f02 	tst.w	sl, #2
 800c54e:	d006      	beq.n	800c55e <__gethex+0x386>
 800c550:	f8d9 0000 	ldr.w	r0, [r9]
 800c554:	ea4a 0a00 	orr.w	sl, sl, r0
 800c558:	f01a 0f01 	tst.w	sl, #1
 800c55c:	d10e      	bne.n	800c57c <__gethex+0x3a4>
 800c55e:	f047 0710 	orr.w	r7, r7, #16
 800c562:	e033      	b.n	800c5cc <__gethex+0x3f4>
 800c564:	f04f 0a01 	mov.w	sl, #1
 800c568:	e7d0      	b.n	800c50c <__gethex+0x334>
 800c56a:	2701      	movs	r7, #1
 800c56c:	e7e2      	b.n	800c534 <__gethex+0x35c>
 800c56e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c570:	f1c3 0301 	rsb	r3, r3, #1
 800c574:	9315      	str	r3, [sp, #84]	; 0x54
 800c576:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d0f0      	beq.n	800c55e <__gethex+0x386>
 800c57c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c580:	f104 0314 	add.w	r3, r4, #20
 800c584:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c588:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c58c:	f04f 0c00 	mov.w	ip, #0
 800c590:	4618      	mov	r0, r3
 800c592:	f853 2b04 	ldr.w	r2, [r3], #4
 800c596:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c59a:	d01c      	beq.n	800c5d6 <__gethex+0x3fe>
 800c59c:	3201      	adds	r2, #1
 800c59e:	6002      	str	r2, [r0, #0]
 800c5a0:	2f02      	cmp	r7, #2
 800c5a2:	f104 0314 	add.w	r3, r4, #20
 800c5a6:	d13f      	bne.n	800c628 <__gethex+0x450>
 800c5a8:	f8d8 2000 	ldr.w	r2, [r8]
 800c5ac:	3a01      	subs	r2, #1
 800c5ae:	42b2      	cmp	r2, r6
 800c5b0:	d10a      	bne.n	800c5c8 <__gethex+0x3f0>
 800c5b2:	1171      	asrs	r1, r6, #5
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c5ba:	f006 061f 	and.w	r6, r6, #31
 800c5be:	fa02 f606 	lsl.w	r6, r2, r6
 800c5c2:	421e      	tst	r6, r3
 800c5c4:	bf18      	it	ne
 800c5c6:	4617      	movne	r7, r2
 800c5c8:	f047 0720 	orr.w	r7, r7, #32
 800c5cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5ce:	601c      	str	r4, [r3, #0]
 800c5d0:	9b04      	ldr	r3, [sp, #16]
 800c5d2:	601d      	str	r5, [r3, #0]
 800c5d4:	e695      	b.n	800c302 <__gethex+0x12a>
 800c5d6:	4299      	cmp	r1, r3
 800c5d8:	f843 cc04 	str.w	ip, [r3, #-4]
 800c5dc:	d8d8      	bhi.n	800c590 <__gethex+0x3b8>
 800c5de:	68a3      	ldr	r3, [r4, #8]
 800c5e0:	459b      	cmp	fp, r3
 800c5e2:	db19      	blt.n	800c618 <__gethex+0x440>
 800c5e4:	6861      	ldr	r1, [r4, #4]
 800c5e6:	ee18 0a10 	vmov	r0, s16
 800c5ea:	3101      	adds	r1, #1
 800c5ec:	f000 f91a 	bl	800c824 <_Balloc>
 800c5f0:	4681      	mov	r9, r0
 800c5f2:	b918      	cbnz	r0, 800c5fc <__gethex+0x424>
 800c5f4:	4b1a      	ldr	r3, [pc, #104]	; (800c660 <__gethex+0x488>)
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	2184      	movs	r1, #132	; 0x84
 800c5fa:	e6a8      	b.n	800c34e <__gethex+0x176>
 800c5fc:	6922      	ldr	r2, [r4, #16]
 800c5fe:	3202      	adds	r2, #2
 800c600:	f104 010c 	add.w	r1, r4, #12
 800c604:	0092      	lsls	r2, r2, #2
 800c606:	300c      	adds	r0, #12
 800c608:	f7fd f898 	bl	800973c <memcpy>
 800c60c:	4621      	mov	r1, r4
 800c60e:	ee18 0a10 	vmov	r0, s16
 800c612:	f000 f947 	bl	800c8a4 <_Bfree>
 800c616:	464c      	mov	r4, r9
 800c618:	6923      	ldr	r3, [r4, #16]
 800c61a:	1c5a      	adds	r2, r3, #1
 800c61c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c620:	6122      	str	r2, [r4, #16]
 800c622:	2201      	movs	r2, #1
 800c624:	615a      	str	r2, [r3, #20]
 800c626:	e7bb      	b.n	800c5a0 <__gethex+0x3c8>
 800c628:	6922      	ldr	r2, [r4, #16]
 800c62a:	455a      	cmp	r2, fp
 800c62c:	dd0b      	ble.n	800c646 <__gethex+0x46e>
 800c62e:	2101      	movs	r1, #1
 800c630:	4620      	mov	r0, r4
 800c632:	f7ff fd69 	bl	800c108 <rshift>
 800c636:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c63a:	3501      	adds	r5, #1
 800c63c:	42ab      	cmp	r3, r5
 800c63e:	f6ff aed0 	blt.w	800c3e2 <__gethex+0x20a>
 800c642:	2701      	movs	r7, #1
 800c644:	e7c0      	b.n	800c5c8 <__gethex+0x3f0>
 800c646:	f016 061f 	ands.w	r6, r6, #31
 800c64a:	d0fa      	beq.n	800c642 <__gethex+0x46a>
 800c64c:	4453      	add	r3, sl
 800c64e:	f1c6 0620 	rsb	r6, r6, #32
 800c652:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c656:	f000 f9d7 	bl	800ca08 <__hi0bits>
 800c65a:	42b0      	cmp	r0, r6
 800c65c:	dbe7      	blt.n	800c62e <__gethex+0x456>
 800c65e:	e7f0      	b.n	800c642 <__gethex+0x46a>
 800c660:	0800e579 	.word	0x0800e579

0800c664 <L_shift>:
 800c664:	f1c2 0208 	rsb	r2, r2, #8
 800c668:	0092      	lsls	r2, r2, #2
 800c66a:	b570      	push	{r4, r5, r6, lr}
 800c66c:	f1c2 0620 	rsb	r6, r2, #32
 800c670:	6843      	ldr	r3, [r0, #4]
 800c672:	6804      	ldr	r4, [r0, #0]
 800c674:	fa03 f506 	lsl.w	r5, r3, r6
 800c678:	432c      	orrs	r4, r5
 800c67a:	40d3      	lsrs	r3, r2
 800c67c:	6004      	str	r4, [r0, #0]
 800c67e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c682:	4288      	cmp	r0, r1
 800c684:	d3f4      	bcc.n	800c670 <L_shift+0xc>
 800c686:	bd70      	pop	{r4, r5, r6, pc}

0800c688 <__match>:
 800c688:	b530      	push	{r4, r5, lr}
 800c68a:	6803      	ldr	r3, [r0, #0]
 800c68c:	3301      	adds	r3, #1
 800c68e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c692:	b914      	cbnz	r4, 800c69a <__match+0x12>
 800c694:	6003      	str	r3, [r0, #0]
 800c696:	2001      	movs	r0, #1
 800c698:	bd30      	pop	{r4, r5, pc}
 800c69a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c69e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c6a2:	2d19      	cmp	r5, #25
 800c6a4:	bf98      	it	ls
 800c6a6:	3220      	addls	r2, #32
 800c6a8:	42a2      	cmp	r2, r4
 800c6aa:	d0f0      	beq.n	800c68e <__match+0x6>
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	e7f3      	b.n	800c698 <__match+0x10>

0800c6b0 <__hexnan>:
 800c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	680b      	ldr	r3, [r1, #0]
 800c6b6:	115e      	asrs	r6, r3, #5
 800c6b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c6bc:	f013 031f 	ands.w	r3, r3, #31
 800c6c0:	b087      	sub	sp, #28
 800c6c2:	bf18      	it	ne
 800c6c4:	3604      	addne	r6, #4
 800c6c6:	2500      	movs	r5, #0
 800c6c8:	1f37      	subs	r7, r6, #4
 800c6ca:	4690      	mov	r8, r2
 800c6cc:	6802      	ldr	r2, [r0, #0]
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	4682      	mov	sl, r0
 800c6d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c6d6:	46b9      	mov	r9, r7
 800c6d8:	463c      	mov	r4, r7
 800c6da:	9502      	str	r5, [sp, #8]
 800c6dc:	46ab      	mov	fp, r5
 800c6de:	7851      	ldrb	r1, [r2, #1]
 800c6e0:	1c53      	adds	r3, r2, #1
 800c6e2:	9303      	str	r3, [sp, #12]
 800c6e4:	b341      	cbz	r1, 800c738 <__hexnan+0x88>
 800c6e6:	4608      	mov	r0, r1
 800c6e8:	9205      	str	r2, [sp, #20]
 800c6ea:	9104      	str	r1, [sp, #16]
 800c6ec:	f7ff fd5e 	bl	800c1ac <__hexdig_fun>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	d14f      	bne.n	800c794 <__hexnan+0xe4>
 800c6f4:	9904      	ldr	r1, [sp, #16]
 800c6f6:	9a05      	ldr	r2, [sp, #20]
 800c6f8:	2920      	cmp	r1, #32
 800c6fa:	d818      	bhi.n	800c72e <__hexnan+0x7e>
 800c6fc:	9b02      	ldr	r3, [sp, #8]
 800c6fe:	459b      	cmp	fp, r3
 800c700:	dd13      	ble.n	800c72a <__hexnan+0x7a>
 800c702:	454c      	cmp	r4, r9
 800c704:	d206      	bcs.n	800c714 <__hexnan+0x64>
 800c706:	2d07      	cmp	r5, #7
 800c708:	dc04      	bgt.n	800c714 <__hexnan+0x64>
 800c70a:	462a      	mov	r2, r5
 800c70c:	4649      	mov	r1, r9
 800c70e:	4620      	mov	r0, r4
 800c710:	f7ff ffa8 	bl	800c664 <L_shift>
 800c714:	4544      	cmp	r4, r8
 800c716:	d950      	bls.n	800c7ba <__hexnan+0x10a>
 800c718:	2300      	movs	r3, #0
 800c71a:	f1a4 0904 	sub.w	r9, r4, #4
 800c71e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c722:	f8cd b008 	str.w	fp, [sp, #8]
 800c726:	464c      	mov	r4, r9
 800c728:	461d      	mov	r5, r3
 800c72a:	9a03      	ldr	r2, [sp, #12]
 800c72c:	e7d7      	b.n	800c6de <__hexnan+0x2e>
 800c72e:	2929      	cmp	r1, #41	; 0x29
 800c730:	d156      	bne.n	800c7e0 <__hexnan+0x130>
 800c732:	3202      	adds	r2, #2
 800c734:	f8ca 2000 	str.w	r2, [sl]
 800c738:	f1bb 0f00 	cmp.w	fp, #0
 800c73c:	d050      	beq.n	800c7e0 <__hexnan+0x130>
 800c73e:	454c      	cmp	r4, r9
 800c740:	d206      	bcs.n	800c750 <__hexnan+0xa0>
 800c742:	2d07      	cmp	r5, #7
 800c744:	dc04      	bgt.n	800c750 <__hexnan+0xa0>
 800c746:	462a      	mov	r2, r5
 800c748:	4649      	mov	r1, r9
 800c74a:	4620      	mov	r0, r4
 800c74c:	f7ff ff8a 	bl	800c664 <L_shift>
 800c750:	4544      	cmp	r4, r8
 800c752:	d934      	bls.n	800c7be <__hexnan+0x10e>
 800c754:	f1a8 0204 	sub.w	r2, r8, #4
 800c758:	4623      	mov	r3, r4
 800c75a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c75e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c762:	429f      	cmp	r7, r3
 800c764:	d2f9      	bcs.n	800c75a <__hexnan+0xaa>
 800c766:	1b3b      	subs	r3, r7, r4
 800c768:	f023 0303 	bic.w	r3, r3, #3
 800c76c:	3304      	adds	r3, #4
 800c76e:	3401      	adds	r4, #1
 800c770:	3e03      	subs	r6, #3
 800c772:	42b4      	cmp	r4, r6
 800c774:	bf88      	it	hi
 800c776:	2304      	movhi	r3, #4
 800c778:	4443      	add	r3, r8
 800c77a:	2200      	movs	r2, #0
 800c77c:	f843 2b04 	str.w	r2, [r3], #4
 800c780:	429f      	cmp	r7, r3
 800c782:	d2fb      	bcs.n	800c77c <__hexnan+0xcc>
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	b91b      	cbnz	r3, 800c790 <__hexnan+0xe0>
 800c788:	4547      	cmp	r7, r8
 800c78a:	d127      	bne.n	800c7dc <__hexnan+0x12c>
 800c78c:	2301      	movs	r3, #1
 800c78e:	603b      	str	r3, [r7, #0]
 800c790:	2005      	movs	r0, #5
 800c792:	e026      	b.n	800c7e2 <__hexnan+0x132>
 800c794:	3501      	adds	r5, #1
 800c796:	2d08      	cmp	r5, #8
 800c798:	f10b 0b01 	add.w	fp, fp, #1
 800c79c:	dd06      	ble.n	800c7ac <__hexnan+0xfc>
 800c79e:	4544      	cmp	r4, r8
 800c7a0:	d9c3      	bls.n	800c72a <__hexnan+0x7a>
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	f844 3c04 	str.w	r3, [r4, #-4]
 800c7a8:	2501      	movs	r5, #1
 800c7aa:	3c04      	subs	r4, #4
 800c7ac:	6822      	ldr	r2, [r4, #0]
 800c7ae:	f000 000f 	and.w	r0, r0, #15
 800c7b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c7b6:	6022      	str	r2, [r4, #0]
 800c7b8:	e7b7      	b.n	800c72a <__hexnan+0x7a>
 800c7ba:	2508      	movs	r5, #8
 800c7bc:	e7b5      	b.n	800c72a <__hexnan+0x7a>
 800c7be:	9b01      	ldr	r3, [sp, #4]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d0df      	beq.n	800c784 <__hexnan+0xd4>
 800c7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c8:	f1c3 0320 	rsb	r3, r3, #32
 800c7cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c7d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c7d4:	401a      	ands	r2, r3
 800c7d6:	f846 2c04 	str.w	r2, [r6, #-4]
 800c7da:	e7d3      	b.n	800c784 <__hexnan+0xd4>
 800c7dc:	3f04      	subs	r7, #4
 800c7de:	e7d1      	b.n	800c784 <__hexnan+0xd4>
 800c7e0:	2004      	movs	r0, #4
 800c7e2:	b007      	add	sp, #28
 800c7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7e8 <_localeconv_r>:
 800c7e8:	4800      	ldr	r0, [pc, #0]	; (800c7ec <_localeconv_r+0x4>)
 800c7ea:	4770      	bx	lr
 800c7ec:	20000174 	.word	0x20000174

0800c7f0 <malloc>:
 800c7f0:	4b02      	ldr	r3, [pc, #8]	; (800c7fc <malloc+0xc>)
 800c7f2:	4601      	mov	r1, r0
 800c7f4:	6818      	ldr	r0, [r3, #0]
 800c7f6:	f000 bd59 	b.w	800d2ac <_malloc_r>
 800c7fa:	bf00      	nop
 800c7fc:	2000001c 	.word	0x2000001c

0800c800 <__ascii_mbtowc>:
 800c800:	b082      	sub	sp, #8
 800c802:	b901      	cbnz	r1, 800c806 <__ascii_mbtowc+0x6>
 800c804:	a901      	add	r1, sp, #4
 800c806:	b142      	cbz	r2, 800c81a <__ascii_mbtowc+0x1a>
 800c808:	b14b      	cbz	r3, 800c81e <__ascii_mbtowc+0x1e>
 800c80a:	7813      	ldrb	r3, [r2, #0]
 800c80c:	600b      	str	r3, [r1, #0]
 800c80e:	7812      	ldrb	r2, [r2, #0]
 800c810:	1e10      	subs	r0, r2, #0
 800c812:	bf18      	it	ne
 800c814:	2001      	movne	r0, #1
 800c816:	b002      	add	sp, #8
 800c818:	4770      	bx	lr
 800c81a:	4610      	mov	r0, r2
 800c81c:	e7fb      	b.n	800c816 <__ascii_mbtowc+0x16>
 800c81e:	f06f 0001 	mvn.w	r0, #1
 800c822:	e7f8      	b.n	800c816 <__ascii_mbtowc+0x16>

0800c824 <_Balloc>:
 800c824:	b570      	push	{r4, r5, r6, lr}
 800c826:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c828:	4604      	mov	r4, r0
 800c82a:	460d      	mov	r5, r1
 800c82c:	b976      	cbnz	r6, 800c84c <_Balloc+0x28>
 800c82e:	2010      	movs	r0, #16
 800c830:	f7ff ffde 	bl	800c7f0 <malloc>
 800c834:	4602      	mov	r2, r0
 800c836:	6260      	str	r0, [r4, #36]	; 0x24
 800c838:	b920      	cbnz	r0, 800c844 <_Balloc+0x20>
 800c83a:	4b18      	ldr	r3, [pc, #96]	; (800c89c <_Balloc+0x78>)
 800c83c:	4818      	ldr	r0, [pc, #96]	; (800c8a0 <_Balloc+0x7c>)
 800c83e:	2166      	movs	r1, #102	; 0x66
 800c840:	f7fe fdb8 	bl	800b3b4 <__assert_func>
 800c844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c848:	6006      	str	r6, [r0, #0]
 800c84a:	60c6      	str	r6, [r0, #12]
 800c84c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c84e:	68f3      	ldr	r3, [r6, #12]
 800c850:	b183      	cbz	r3, 800c874 <_Balloc+0x50>
 800c852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c854:	68db      	ldr	r3, [r3, #12]
 800c856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c85a:	b9b8      	cbnz	r0, 800c88c <_Balloc+0x68>
 800c85c:	2101      	movs	r1, #1
 800c85e:	fa01 f605 	lsl.w	r6, r1, r5
 800c862:	1d72      	adds	r2, r6, #5
 800c864:	0092      	lsls	r2, r2, #2
 800c866:	4620      	mov	r0, r4
 800c868:	f000 fc9d 	bl	800d1a6 <_calloc_r>
 800c86c:	b160      	cbz	r0, 800c888 <_Balloc+0x64>
 800c86e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c872:	e00e      	b.n	800c892 <_Balloc+0x6e>
 800c874:	2221      	movs	r2, #33	; 0x21
 800c876:	2104      	movs	r1, #4
 800c878:	4620      	mov	r0, r4
 800c87a:	f000 fc94 	bl	800d1a6 <_calloc_r>
 800c87e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c880:	60f0      	str	r0, [r6, #12]
 800c882:	68db      	ldr	r3, [r3, #12]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d1e4      	bne.n	800c852 <_Balloc+0x2e>
 800c888:	2000      	movs	r0, #0
 800c88a:	bd70      	pop	{r4, r5, r6, pc}
 800c88c:	6802      	ldr	r2, [r0, #0]
 800c88e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c892:	2300      	movs	r3, #0
 800c894:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c898:	e7f7      	b.n	800c88a <_Balloc+0x66>
 800c89a:	bf00      	nop
 800c89c:	0800e360 	.word	0x0800e360
 800c8a0:	0800e604 	.word	0x0800e604

0800c8a4 <_Bfree>:
 800c8a4:	b570      	push	{r4, r5, r6, lr}
 800c8a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c8a8:	4605      	mov	r5, r0
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	b976      	cbnz	r6, 800c8cc <_Bfree+0x28>
 800c8ae:	2010      	movs	r0, #16
 800c8b0:	f7ff ff9e 	bl	800c7f0 <malloc>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	6268      	str	r0, [r5, #36]	; 0x24
 800c8b8:	b920      	cbnz	r0, 800c8c4 <_Bfree+0x20>
 800c8ba:	4b09      	ldr	r3, [pc, #36]	; (800c8e0 <_Bfree+0x3c>)
 800c8bc:	4809      	ldr	r0, [pc, #36]	; (800c8e4 <_Bfree+0x40>)
 800c8be:	218a      	movs	r1, #138	; 0x8a
 800c8c0:	f7fe fd78 	bl	800b3b4 <__assert_func>
 800c8c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8c8:	6006      	str	r6, [r0, #0]
 800c8ca:	60c6      	str	r6, [r0, #12]
 800c8cc:	b13c      	cbz	r4, 800c8de <_Bfree+0x3a>
 800c8ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c8d0:	6862      	ldr	r2, [r4, #4]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8d8:	6021      	str	r1, [r4, #0]
 800c8da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8de:	bd70      	pop	{r4, r5, r6, pc}
 800c8e0:	0800e360 	.word	0x0800e360
 800c8e4:	0800e604 	.word	0x0800e604

0800c8e8 <__multadd>:
 800c8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ec:	690d      	ldr	r5, [r1, #16]
 800c8ee:	4607      	mov	r7, r0
 800c8f0:	460c      	mov	r4, r1
 800c8f2:	461e      	mov	r6, r3
 800c8f4:	f101 0c14 	add.w	ip, r1, #20
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	f8dc 3000 	ldr.w	r3, [ip]
 800c8fe:	b299      	uxth	r1, r3
 800c900:	fb02 6101 	mla	r1, r2, r1, r6
 800c904:	0c1e      	lsrs	r6, r3, #16
 800c906:	0c0b      	lsrs	r3, r1, #16
 800c908:	fb02 3306 	mla	r3, r2, r6, r3
 800c90c:	b289      	uxth	r1, r1
 800c90e:	3001      	adds	r0, #1
 800c910:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c914:	4285      	cmp	r5, r0
 800c916:	f84c 1b04 	str.w	r1, [ip], #4
 800c91a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c91e:	dcec      	bgt.n	800c8fa <__multadd+0x12>
 800c920:	b30e      	cbz	r6, 800c966 <__multadd+0x7e>
 800c922:	68a3      	ldr	r3, [r4, #8]
 800c924:	42ab      	cmp	r3, r5
 800c926:	dc19      	bgt.n	800c95c <__multadd+0x74>
 800c928:	6861      	ldr	r1, [r4, #4]
 800c92a:	4638      	mov	r0, r7
 800c92c:	3101      	adds	r1, #1
 800c92e:	f7ff ff79 	bl	800c824 <_Balloc>
 800c932:	4680      	mov	r8, r0
 800c934:	b928      	cbnz	r0, 800c942 <__multadd+0x5a>
 800c936:	4602      	mov	r2, r0
 800c938:	4b0c      	ldr	r3, [pc, #48]	; (800c96c <__multadd+0x84>)
 800c93a:	480d      	ldr	r0, [pc, #52]	; (800c970 <__multadd+0x88>)
 800c93c:	21b5      	movs	r1, #181	; 0xb5
 800c93e:	f7fe fd39 	bl	800b3b4 <__assert_func>
 800c942:	6922      	ldr	r2, [r4, #16]
 800c944:	3202      	adds	r2, #2
 800c946:	f104 010c 	add.w	r1, r4, #12
 800c94a:	0092      	lsls	r2, r2, #2
 800c94c:	300c      	adds	r0, #12
 800c94e:	f7fc fef5 	bl	800973c <memcpy>
 800c952:	4621      	mov	r1, r4
 800c954:	4638      	mov	r0, r7
 800c956:	f7ff ffa5 	bl	800c8a4 <_Bfree>
 800c95a:	4644      	mov	r4, r8
 800c95c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c960:	3501      	adds	r5, #1
 800c962:	615e      	str	r6, [r3, #20]
 800c964:	6125      	str	r5, [r4, #16]
 800c966:	4620      	mov	r0, r4
 800c968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c96c:	0800e579 	.word	0x0800e579
 800c970:	0800e604 	.word	0x0800e604

0800c974 <__s2b>:
 800c974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c978:	460c      	mov	r4, r1
 800c97a:	4615      	mov	r5, r2
 800c97c:	461f      	mov	r7, r3
 800c97e:	2209      	movs	r2, #9
 800c980:	3308      	adds	r3, #8
 800c982:	4606      	mov	r6, r0
 800c984:	fb93 f3f2 	sdiv	r3, r3, r2
 800c988:	2100      	movs	r1, #0
 800c98a:	2201      	movs	r2, #1
 800c98c:	429a      	cmp	r2, r3
 800c98e:	db09      	blt.n	800c9a4 <__s2b+0x30>
 800c990:	4630      	mov	r0, r6
 800c992:	f7ff ff47 	bl	800c824 <_Balloc>
 800c996:	b940      	cbnz	r0, 800c9aa <__s2b+0x36>
 800c998:	4602      	mov	r2, r0
 800c99a:	4b19      	ldr	r3, [pc, #100]	; (800ca00 <__s2b+0x8c>)
 800c99c:	4819      	ldr	r0, [pc, #100]	; (800ca04 <__s2b+0x90>)
 800c99e:	21ce      	movs	r1, #206	; 0xce
 800c9a0:	f7fe fd08 	bl	800b3b4 <__assert_func>
 800c9a4:	0052      	lsls	r2, r2, #1
 800c9a6:	3101      	adds	r1, #1
 800c9a8:	e7f0      	b.n	800c98c <__s2b+0x18>
 800c9aa:	9b08      	ldr	r3, [sp, #32]
 800c9ac:	6143      	str	r3, [r0, #20]
 800c9ae:	2d09      	cmp	r5, #9
 800c9b0:	f04f 0301 	mov.w	r3, #1
 800c9b4:	6103      	str	r3, [r0, #16]
 800c9b6:	dd16      	ble.n	800c9e6 <__s2b+0x72>
 800c9b8:	f104 0909 	add.w	r9, r4, #9
 800c9bc:	46c8      	mov	r8, r9
 800c9be:	442c      	add	r4, r5
 800c9c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c9c4:	4601      	mov	r1, r0
 800c9c6:	3b30      	subs	r3, #48	; 0x30
 800c9c8:	220a      	movs	r2, #10
 800c9ca:	4630      	mov	r0, r6
 800c9cc:	f7ff ff8c 	bl	800c8e8 <__multadd>
 800c9d0:	45a0      	cmp	r8, r4
 800c9d2:	d1f5      	bne.n	800c9c0 <__s2b+0x4c>
 800c9d4:	f1a5 0408 	sub.w	r4, r5, #8
 800c9d8:	444c      	add	r4, r9
 800c9da:	1b2d      	subs	r5, r5, r4
 800c9dc:	1963      	adds	r3, r4, r5
 800c9de:	42bb      	cmp	r3, r7
 800c9e0:	db04      	blt.n	800c9ec <__s2b+0x78>
 800c9e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9e6:	340a      	adds	r4, #10
 800c9e8:	2509      	movs	r5, #9
 800c9ea:	e7f6      	b.n	800c9da <__s2b+0x66>
 800c9ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9f0:	4601      	mov	r1, r0
 800c9f2:	3b30      	subs	r3, #48	; 0x30
 800c9f4:	220a      	movs	r2, #10
 800c9f6:	4630      	mov	r0, r6
 800c9f8:	f7ff ff76 	bl	800c8e8 <__multadd>
 800c9fc:	e7ee      	b.n	800c9dc <__s2b+0x68>
 800c9fe:	bf00      	nop
 800ca00:	0800e579 	.word	0x0800e579
 800ca04:	0800e604 	.word	0x0800e604

0800ca08 <__hi0bits>:
 800ca08:	0c03      	lsrs	r3, r0, #16
 800ca0a:	041b      	lsls	r3, r3, #16
 800ca0c:	b9d3      	cbnz	r3, 800ca44 <__hi0bits+0x3c>
 800ca0e:	0400      	lsls	r0, r0, #16
 800ca10:	2310      	movs	r3, #16
 800ca12:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ca16:	bf04      	itt	eq
 800ca18:	0200      	lsleq	r0, r0, #8
 800ca1a:	3308      	addeq	r3, #8
 800ca1c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ca20:	bf04      	itt	eq
 800ca22:	0100      	lsleq	r0, r0, #4
 800ca24:	3304      	addeq	r3, #4
 800ca26:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ca2a:	bf04      	itt	eq
 800ca2c:	0080      	lsleq	r0, r0, #2
 800ca2e:	3302      	addeq	r3, #2
 800ca30:	2800      	cmp	r0, #0
 800ca32:	db05      	blt.n	800ca40 <__hi0bits+0x38>
 800ca34:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ca38:	f103 0301 	add.w	r3, r3, #1
 800ca3c:	bf08      	it	eq
 800ca3e:	2320      	moveq	r3, #32
 800ca40:	4618      	mov	r0, r3
 800ca42:	4770      	bx	lr
 800ca44:	2300      	movs	r3, #0
 800ca46:	e7e4      	b.n	800ca12 <__hi0bits+0xa>

0800ca48 <__lo0bits>:
 800ca48:	6803      	ldr	r3, [r0, #0]
 800ca4a:	f013 0207 	ands.w	r2, r3, #7
 800ca4e:	4601      	mov	r1, r0
 800ca50:	d00b      	beq.n	800ca6a <__lo0bits+0x22>
 800ca52:	07da      	lsls	r2, r3, #31
 800ca54:	d423      	bmi.n	800ca9e <__lo0bits+0x56>
 800ca56:	0798      	lsls	r0, r3, #30
 800ca58:	bf49      	itett	mi
 800ca5a:	085b      	lsrmi	r3, r3, #1
 800ca5c:	089b      	lsrpl	r3, r3, #2
 800ca5e:	2001      	movmi	r0, #1
 800ca60:	600b      	strmi	r3, [r1, #0]
 800ca62:	bf5c      	itt	pl
 800ca64:	600b      	strpl	r3, [r1, #0]
 800ca66:	2002      	movpl	r0, #2
 800ca68:	4770      	bx	lr
 800ca6a:	b298      	uxth	r0, r3
 800ca6c:	b9a8      	cbnz	r0, 800ca9a <__lo0bits+0x52>
 800ca6e:	0c1b      	lsrs	r3, r3, #16
 800ca70:	2010      	movs	r0, #16
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	b90a      	cbnz	r2, 800ca7a <__lo0bits+0x32>
 800ca76:	3008      	adds	r0, #8
 800ca78:	0a1b      	lsrs	r3, r3, #8
 800ca7a:	071a      	lsls	r2, r3, #28
 800ca7c:	bf04      	itt	eq
 800ca7e:	091b      	lsreq	r3, r3, #4
 800ca80:	3004      	addeq	r0, #4
 800ca82:	079a      	lsls	r2, r3, #30
 800ca84:	bf04      	itt	eq
 800ca86:	089b      	lsreq	r3, r3, #2
 800ca88:	3002      	addeq	r0, #2
 800ca8a:	07da      	lsls	r2, r3, #31
 800ca8c:	d403      	bmi.n	800ca96 <__lo0bits+0x4e>
 800ca8e:	085b      	lsrs	r3, r3, #1
 800ca90:	f100 0001 	add.w	r0, r0, #1
 800ca94:	d005      	beq.n	800caa2 <__lo0bits+0x5a>
 800ca96:	600b      	str	r3, [r1, #0]
 800ca98:	4770      	bx	lr
 800ca9a:	4610      	mov	r0, r2
 800ca9c:	e7e9      	b.n	800ca72 <__lo0bits+0x2a>
 800ca9e:	2000      	movs	r0, #0
 800caa0:	4770      	bx	lr
 800caa2:	2020      	movs	r0, #32
 800caa4:	4770      	bx	lr
	...

0800caa8 <__i2b>:
 800caa8:	b510      	push	{r4, lr}
 800caaa:	460c      	mov	r4, r1
 800caac:	2101      	movs	r1, #1
 800caae:	f7ff feb9 	bl	800c824 <_Balloc>
 800cab2:	4602      	mov	r2, r0
 800cab4:	b928      	cbnz	r0, 800cac2 <__i2b+0x1a>
 800cab6:	4b05      	ldr	r3, [pc, #20]	; (800cacc <__i2b+0x24>)
 800cab8:	4805      	ldr	r0, [pc, #20]	; (800cad0 <__i2b+0x28>)
 800caba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cabe:	f7fe fc79 	bl	800b3b4 <__assert_func>
 800cac2:	2301      	movs	r3, #1
 800cac4:	6144      	str	r4, [r0, #20]
 800cac6:	6103      	str	r3, [r0, #16]
 800cac8:	bd10      	pop	{r4, pc}
 800caca:	bf00      	nop
 800cacc:	0800e579 	.word	0x0800e579
 800cad0:	0800e604 	.word	0x0800e604

0800cad4 <__multiply>:
 800cad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad8:	4691      	mov	r9, r2
 800cada:	690a      	ldr	r2, [r1, #16]
 800cadc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	bfb8      	it	lt
 800cae4:	460b      	movlt	r3, r1
 800cae6:	460c      	mov	r4, r1
 800cae8:	bfbc      	itt	lt
 800caea:	464c      	movlt	r4, r9
 800caec:	4699      	movlt	r9, r3
 800caee:	6927      	ldr	r7, [r4, #16]
 800caf0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800caf4:	68a3      	ldr	r3, [r4, #8]
 800caf6:	6861      	ldr	r1, [r4, #4]
 800caf8:	eb07 060a 	add.w	r6, r7, sl
 800cafc:	42b3      	cmp	r3, r6
 800cafe:	b085      	sub	sp, #20
 800cb00:	bfb8      	it	lt
 800cb02:	3101      	addlt	r1, #1
 800cb04:	f7ff fe8e 	bl	800c824 <_Balloc>
 800cb08:	b930      	cbnz	r0, 800cb18 <__multiply+0x44>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	4b44      	ldr	r3, [pc, #272]	; (800cc20 <__multiply+0x14c>)
 800cb0e:	4845      	ldr	r0, [pc, #276]	; (800cc24 <__multiply+0x150>)
 800cb10:	f240 115d 	movw	r1, #349	; 0x15d
 800cb14:	f7fe fc4e 	bl	800b3b4 <__assert_func>
 800cb18:	f100 0514 	add.w	r5, r0, #20
 800cb1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cb20:	462b      	mov	r3, r5
 800cb22:	2200      	movs	r2, #0
 800cb24:	4543      	cmp	r3, r8
 800cb26:	d321      	bcc.n	800cb6c <__multiply+0x98>
 800cb28:	f104 0314 	add.w	r3, r4, #20
 800cb2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cb30:	f109 0314 	add.w	r3, r9, #20
 800cb34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cb38:	9202      	str	r2, [sp, #8]
 800cb3a:	1b3a      	subs	r2, r7, r4
 800cb3c:	3a15      	subs	r2, #21
 800cb3e:	f022 0203 	bic.w	r2, r2, #3
 800cb42:	3204      	adds	r2, #4
 800cb44:	f104 0115 	add.w	r1, r4, #21
 800cb48:	428f      	cmp	r7, r1
 800cb4a:	bf38      	it	cc
 800cb4c:	2204      	movcc	r2, #4
 800cb4e:	9201      	str	r2, [sp, #4]
 800cb50:	9a02      	ldr	r2, [sp, #8]
 800cb52:	9303      	str	r3, [sp, #12]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d80c      	bhi.n	800cb72 <__multiply+0x9e>
 800cb58:	2e00      	cmp	r6, #0
 800cb5a:	dd03      	ble.n	800cb64 <__multiply+0x90>
 800cb5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d05a      	beq.n	800cc1a <__multiply+0x146>
 800cb64:	6106      	str	r6, [r0, #16]
 800cb66:	b005      	add	sp, #20
 800cb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb6c:	f843 2b04 	str.w	r2, [r3], #4
 800cb70:	e7d8      	b.n	800cb24 <__multiply+0x50>
 800cb72:	f8b3 a000 	ldrh.w	sl, [r3]
 800cb76:	f1ba 0f00 	cmp.w	sl, #0
 800cb7a:	d024      	beq.n	800cbc6 <__multiply+0xf2>
 800cb7c:	f104 0e14 	add.w	lr, r4, #20
 800cb80:	46a9      	mov	r9, r5
 800cb82:	f04f 0c00 	mov.w	ip, #0
 800cb86:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cb8a:	f8d9 1000 	ldr.w	r1, [r9]
 800cb8e:	fa1f fb82 	uxth.w	fp, r2
 800cb92:	b289      	uxth	r1, r1
 800cb94:	fb0a 110b 	mla	r1, sl, fp, r1
 800cb98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cb9c:	f8d9 2000 	ldr.w	r2, [r9]
 800cba0:	4461      	add	r1, ip
 800cba2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cba6:	fb0a c20b 	mla	r2, sl, fp, ip
 800cbaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cbae:	b289      	uxth	r1, r1
 800cbb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cbb4:	4577      	cmp	r7, lr
 800cbb6:	f849 1b04 	str.w	r1, [r9], #4
 800cbba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cbbe:	d8e2      	bhi.n	800cb86 <__multiply+0xb2>
 800cbc0:	9a01      	ldr	r2, [sp, #4]
 800cbc2:	f845 c002 	str.w	ip, [r5, r2]
 800cbc6:	9a03      	ldr	r2, [sp, #12]
 800cbc8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cbcc:	3304      	adds	r3, #4
 800cbce:	f1b9 0f00 	cmp.w	r9, #0
 800cbd2:	d020      	beq.n	800cc16 <__multiply+0x142>
 800cbd4:	6829      	ldr	r1, [r5, #0]
 800cbd6:	f104 0c14 	add.w	ip, r4, #20
 800cbda:	46ae      	mov	lr, r5
 800cbdc:	f04f 0a00 	mov.w	sl, #0
 800cbe0:	f8bc b000 	ldrh.w	fp, [ip]
 800cbe4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cbe8:	fb09 220b 	mla	r2, r9, fp, r2
 800cbec:	4492      	add	sl, r2
 800cbee:	b289      	uxth	r1, r1
 800cbf0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cbf4:	f84e 1b04 	str.w	r1, [lr], #4
 800cbf8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cbfc:	f8be 1000 	ldrh.w	r1, [lr]
 800cc00:	0c12      	lsrs	r2, r2, #16
 800cc02:	fb09 1102 	mla	r1, r9, r2, r1
 800cc06:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cc0a:	4567      	cmp	r7, ip
 800cc0c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cc10:	d8e6      	bhi.n	800cbe0 <__multiply+0x10c>
 800cc12:	9a01      	ldr	r2, [sp, #4]
 800cc14:	50a9      	str	r1, [r5, r2]
 800cc16:	3504      	adds	r5, #4
 800cc18:	e79a      	b.n	800cb50 <__multiply+0x7c>
 800cc1a:	3e01      	subs	r6, #1
 800cc1c:	e79c      	b.n	800cb58 <__multiply+0x84>
 800cc1e:	bf00      	nop
 800cc20:	0800e579 	.word	0x0800e579
 800cc24:	0800e604 	.word	0x0800e604

0800cc28 <__pow5mult>:
 800cc28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc2c:	4615      	mov	r5, r2
 800cc2e:	f012 0203 	ands.w	r2, r2, #3
 800cc32:	4606      	mov	r6, r0
 800cc34:	460f      	mov	r7, r1
 800cc36:	d007      	beq.n	800cc48 <__pow5mult+0x20>
 800cc38:	4c25      	ldr	r4, [pc, #148]	; (800ccd0 <__pow5mult+0xa8>)
 800cc3a:	3a01      	subs	r2, #1
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc42:	f7ff fe51 	bl	800c8e8 <__multadd>
 800cc46:	4607      	mov	r7, r0
 800cc48:	10ad      	asrs	r5, r5, #2
 800cc4a:	d03d      	beq.n	800ccc8 <__pow5mult+0xa0>
 800cc4c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cc4e:	b97c      	cbnz	r4, 800cc70 <__pow5mult+0x48>
 800cc50:	2010      	movs	r0, #16
 800cc52:	f7ff fdcd 	bl	800c7f0 <malloc>
 800cc56:	4602      	mov	r2, r0
 800cc58:	6270      	str	r0, [r6, #36]	; 0x24
 800cc5a:	b928      	cbnz	r0, 800cc68 <__pow5mult+0x40>
 800cc5c:	4b1d      	ldr	r3, [pc, #116]	; (800ccd4 <__pow5mult+0xac>)
 800cc5e:	481e      	ldr	r0, [pc, #120]	; (800ccd8 <__pow5mult+0xb0>)
 800cc60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cc64:	f7fe fba6 	bl	800b3b4 <__assert_func>
 800cc68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc6c:	6004      	str	r4, [r0, #0]
 800cc6e:	60c4      	str	r4, [r0, #12]
 800cc70:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cc74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc78:	b94c      	cbnz	r4, 800cc8e <__pow5mult+0x66>
 800cc7a:	f240 2171 	movw	r1, #625	; 0x271
 800cc7e:	4630      	mov	r0, r6
 800cc80:	f7ff ff12 	bl	800caa8 <__i2b>
 800cc84:	2300      	movs	r3, #0
 800cc86:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	6003      	str	r3, [r0, #0]
 800cc8e:	f04f 0900 	mov.w	r9, #0
 800cc92:	07eb      	lsls	r3, r5, #31
 800cc94:	d50a      	bpl.n	800ccac <__pow5mult+0x84>
 800cc96:	4639      	mov	r1, r7
 800cc98:	4622      	mov	r2, r4
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f7ff ff1a 	bl	800cad4 <__multiply>
 800cca0:	4639      	mov	r1, r7
 800cca2:	4680      	mov	r8, r0
 800cca4:	4630      	mov	r0, r6
 800cca6:	f7ff fdfd 	bl	800c8a4 <_Bfree>
 800ccaa:	4647      	mov	r7, r8
 800ccac:	106d      	asrs	r5, r5, #1
 800ccae:	d00b      	beq.n	800ccc8 <__pow5mult+0xa0>
 800ccb0:	6820      	ldr	r0, [r4, #0]
 800ccb2:	b938      	cbnz	r0, 800ccc4 <__pow5mult+0x9c>
 800ccb4:	4622      	mov	r2, r4
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4630      	mov	r0, r6
 800ccba:	f7ff ff0b 	bl	800cad4 <__multiply>
 800ccbe:	6020      	str	r0, [r4, #0]
 800ccc0:	f8c0 9000 	str.w	r9, [r0]
 800ccc4:	4604      	mov	r4, r0
 800ccc6:	e7e4      	b.n	800cc92 <__pow5mult+0x6a>
 800ccc8:	4638      	mov	r0, r7
 800ccca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccce:	bf00      	nop
 800ccd0:	0800e750 	.word	0x0800e750
 800ccd4:	0800e360 	.word	0x0800e360
 800ccd8:	0800e604 	.word	0x0800e604

0800ccdc <__lshift>:
 800ccdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cce0:	460c      	mov	r4, r1
 800cce2:	6849      	ldr	r1, [r1, #4]
 800cce4:	6923      	ldr	r3, [r4, #16]
 800cce6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ccea:	68a3      	ldr	r3, [r4, #8]
 800ccec:	4607      	mov	r7, r0
 800ccee:	4691      	mov	r9, r2
 800ccf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ccf4:	f108 0601 	add.w	r6, r8, #1
 800ccf8:	42b3      	cmp	r3, r6
 800ccfa:	db0b      	blt.n	800cd14 <__lshift+0x38>
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	f7ff fd91 	bl	800c824 <_Balloc>
 800cd02:	4605      	mov	r5, r0
 800cd04:	b948      	cbnz	r0, 800cd1a <__lshift+0x3e>
 800cd06:	4602      	mov	r2, r0
 800cd08:	4b2a      	ldr	r3, [pc, #168]	; (800cdb4 <__lshift+0xd8>)
 800cd0a:	482b      	ldr	r0, [pc, #172]	; (800cdb8 <__lshift+0xdc>)
 800cd0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cd10:	f7fe fb50 	bl	800b3b4 <__assert_func>
 800cd14:	3101      	adds	r1, #1
 800cd16:	005b      	lsls	r3, r3, #1
 800cd18:	e7ee      	b.n	800ccf8 <__lshift+0x1c>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	f100 0114 	add.w	r1, r0, #20
 800cd20:	f100 0210 	add.w	r2, r0, #16
 800cd24:	4618      	mov	r0, r3
 800cd26:	4553      	cmp	r3, sl
 800cd28:	db37      	blt.n	800cd9a <__lshift+0xbe>
 800cd2a:	6920      	ldr	r0, [r4, #16]
 800cd2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd30:	f104 0314 	add.w	r3, r4, #20
 800cd34:	f019 091f 	ands.w	r9, r9, #31
 800cd38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cd40:	d02f      	beq.n	800cda2 <__lshift+0xc6>
 800cd42:	f1c9 0e20 	rsb	lr, r9, #32
 800cd46:	468a      	mov	sl, r1
 800cd48:	f04f 0c00 	mov.w	ip, #0
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	fa02 f209 	lsl.w	r2, r2, r9
 800cd52:	ea42 020c 	orr.w	r2, r2, ip
 800cd56:	f84a 2b04 	str.w	r2, [sl], #4
 800cd5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd5e:	4298      	cmp	r0, r3
 800cd60:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cd64:	d8f2      	bhi.n	800cd4c <__lshift+0x70>
 800cd66:	1b03      	subs	r3, r0, r4
 800cd68:	3b15      	subs	r3, #21
 800cd6a:	f023 0303 	bic.w	r3, r3, #3
 800cd6e:	3304      	adds	r3, #4
 800cd70:	f104 0215 	add.w	r2, r4, #21
 800cd74:	4290      	cmp	r0, r2
 800cd76:	bf38      	it	cc
 800cd78:	2304      	movcc	r3, #4
 800cd7a:	f841 c003 	str.w	ip, [r1, r3]
 800cd7e:	f1bc 0f00 	cmp.w	ip, #0
 800cd82:	d001      	beq.n	800cd88 <__lshift+0xac>
 800cd84:	f108 0602 	add.w	r6, r8, #2
 800cd88:	3e01      	subs	r6, #1
 800cd8a:	4638      	mov	r0, r7
 800cd8c:	612e      	str	r6, [r5, #16]
 800cd8e:	4621      	mov	r1, r4
 800cd90:	f7ff fd88 	bl	800c8a4 <_Bfree>
 800cd94:	4628      	mov	r0, r5
 800cd96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd9a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd9e:	3301      	adds	r3, #1
 800cda0:	e7c1      	b.n	800cd26 <__lshift+0x4a>
 800cda2:	3904      	subs	r1, #4
 800cda4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cda8:	f841 2f04 	str.w	r2, [r1, #4]!
 800cdac:	4298      	cmp	r0, r3
 800cdae:	d8f9      	bhi.n	800cda4 <__lshift+0xc8>
 800cdb0:	e7ea      	b.n	800cd88 <__lshift+0xac>
 800cdb2:	bf00      	nop
 800cdb4:	0800e579 	.word	0x0800e579
 800cdb8:	0800e604 	.word	0x0800e604

0800cdbc <__mcmp>:
 800cdbc:	b530      	push	{r4, r5, lr}
 800cdbe:	6902      	ldr	r2, [r0, #16]
 800cdc0:	690c      	ldr	r4, [r1, #16]
 800cdc2:	1b12      	subs	r2, r2, r4
 800cdc4:	d10e      	bne.n	800cde4 <__mcmp+0x28>
 800cdc6:	f100 0314 	add.w	r3, r0, #20
 800cdca:	3114      	adds	r1, #20
 800cdcc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cdd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cdd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cdd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cddc:	42a5      	cmp	r5, r4
 800cdde:	d003      	beq.n	800cde8 <__mcmp+0x2c>
 800cde0:	d305      	bcc.n	800cdee <__mcmp+0x32>
 800cde2:	2201      	movs	r2, #1
 800cde4:	4610      	mov	r0, r2
 800cde6:	bd30      	pop	{r4, r5, pc}
 800cde8:	4283      	cmp	r3, r0
 800cdea:	d3f3      	bcc.n	800cdd4 <__mcmp+0x18>
 800cdec:	e7fa      	b.n	800cde4 <__mcmp+0x28>
 800cdee:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf2:	e7f7      	b.n	800cde4 <__mcmp+0x28>

0800cdf4 <__mdiff>:
 800cdf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdf8:	460c      	mov	r4, r1
 800cdfa:	4606      	mov	r6, r0
 800cdfc:	4611      	mov	r1, r2
 800cdfe:	4620      	mov	r0, r4
 800ce00:	4690      	mov	r8, r2
 800ce02:	f7ff ffdb 	bl	800cdbc <__mcmp>
 800ce06:	1e05      	subs	r5, r0, #0
 800ce08:	d110      	bne.n	800ce2c <__mdiff+0x38>
 800ce0a:	4629      	mov	r1, r5
 800ce0c:	4630      	mov	r0, r6
 800ce0e:	f7ff fd09 	bl	800c824 <_Balloc>
 800ce12:	b930      	cbnz	r0, 800ce22 <__mdiff+0x2e>
 800ce14:	4b3a      	ldr	r3, [pc, #232]	; (800cf00 <__mdiff+0x10c>)
 800ce16:	4602      	mov	r2, r0
 800ce18:	f240 2132 	movw	r1, #562	; 0x232
 800ce1c:	4839      	ldr	r0, [pc, #228]	; (800cf04 <__mdiff+0x110>)
 800ce1e:	f7fe fac9 	bl	800b3b4 <__assert_func>
 800ce22:	2301      	movs	r3, #1
 800ce24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ce28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce2c:	bfa4      	itt	ge
 800ce2e:	4643      	movge	r3, r8
 800ce30:	46a0      	movge	r8, r4
 800ce32:	4630      	mov	r0, r6
 800ce34:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ce38:	bfa6      	itte	ge
 800ce3a:	461c      	movge	r4, r3
 800ce3c:	2500      	movge	r5, #0
 800ce3e:	2501      	movlt	r5, #1
 800ce40:	f7ff fcf0 	bl	800c824 <_Balloc>
 800ce44:	b920      	cbnz	r0, 800ce50 <__mdiff+0x5c>
 800ce46:	4b2e      	ldr	r3, [pc, #184]	; (800cf00 <__mdiff+0x10c>)
 800ce48:	4602      	mov	r2, r0
 800ce4a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ce4e:	e7e5      	b.n	800ce1c <__mdiff+0x28>
 800ce50:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ce54:	6926      	ldr	r6, [r4, #16]
 800ce56:	60c5      	str	r5, [r0, #12]
 800ce58:	f104 0914 	add.w	r9, r4, #20
 800ce5c:	f108 0514 	add.w	r5, r8, #20
 800ce60:	f100 0e14 	add.w	lr, r0, #20
 800ce64:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ce68:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ce6c:	f108 0210 	add.w	r2, r8, #16
 800ce70:	46f2      	mov	sl, lr
 800ce72:	2100      	movs	r1, #0
 800ce74:	f859 3b04 	ldr.w	r3, [r9], #4
 800ce78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ce7c:	fa1f f883 	uxth.w	r8, r3
 800ce80:	fa11 f18b 	uxtah	r1, r1, fp
 800ce84:	0c1b      	lsrs	r3, r3, #16
 800ce86:	eba1 0808 	sub.w	r8, r1, r8
 800ce8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ce8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ce92:	fa1f f888 	uxth.w	r8, r8
 800ce96:	1419      	asrs	r1, r3, #16
 800ce98:	454e      	cmp	r6, r9
 800ce9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ce9e:	f84a 3b04 	str.w	r3, [sl], #4
 800cea2:	d8e7      	bhi.n	800ce74 <__mdiff+0x80>
 800cea4:	1b33      	subs	r3, r6, r4
 800cea6:	3b15      	subs	r3, #21
 800cea8:	f023 0303 	bic.w	r3, r3, #3
 800ceac:	3304      	adds	r3, #4
 800ceae:	3415      	adds	r4, #21
 800ceb0:	42a6      	cmp	r6, r4
 800ceb2:	bf38      	it	cc
 800ceb4:	2304      	movcc	r3, #4
 800ceb6:	441d      	add	r5, r3
 800ceb8:	4473      	add	r3, lr
 800ceba:	469e      	mov	lr, r3
 800cebc:	462e      	mov	r6, r5
 800cebe:	4566      	cmp	r6, ip
 800cec0:	d30e      	bcc.n	800cee0 <__mdiff+0xec>
 800cec2:	f10c 0203 	add.w	r2, ip, #3
 800cec6:	1b52      	subs	r2, r2, r5
 800cec8:	f022 0203 	bic.w	r2, r2, #3
 800cecc:	3d03      	subs	r5, #3
 800cece:	45ac      	cmp	ip, r5
 800ced0:	bf38      	it	cc
 800ced2:	2200      	movcc	r2, #0
 800ced4:	441a      	add	r2, r3
 800ced6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ceda:	b17b      	cbz	r3, 800cefc <__mdiff+0x108>
 800cedc:	6107      	str	r7, [r0, #16]
 800cede:	e7a3      	b.n	800ce28 <__mdiff+0x34>
 800cee0:	f856 8b04 	ldr.w	r8, [r6], #4
 800cee4:	fa11 f288 	uxtah	r2, r1, r8
 800cee8:	1414      	asrs	r4, r2, #16
 800ceea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ceee:	b292      	uxth	r2, r2
 800cef0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cef4:	f84e 2b04 	str.w	r2, [lr], #4
 800cef8:	1421      	asrs	r1, r4, #16
 800cefa:	e7e0      	b.n	800cebe <__mdiff+0xca>
 800cefc:	3f01      	subs	r7, #1
 800cefe:	e7ea      	b.n	800ced6 <__mdiff+0xe2>
 800cf00:	0800e579 	.word	0x0800e579
 800cf04:	0800e604 	.word	0x0800e604

0800cf08 <__ulp>:
 800cf08:	b082      	sub	sp, #8
 800cf0a:	ed8d 0b00 	vstr	d0, [sp]
 800cf0e:	9b01      	ldr	r3, [sp, #4]
 800cf10:	4912      	ldr	r1, [pc, #72]	; (800cf5c <__ulp+0x54>)
 800cf12:	4019      	ands	r1, r3
 800cf14:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cf18:	2900      	cmp	r1, #0
 800cf1a:	dd05      	ble.n	800cf28 <__ulp+0x20>
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	460b      	mov	r3, r1
 800cf20:	ec43 2b10 	vmov	d0, r2, r3
 800cf24:	b002      	add	sp, #8
 800cf26:	4770      	bx	lr
 800cf28:	4249      	negs	r1, r1
 800cf2a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cf2e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cf32:	f04f 0200 	mov.w	r2, #0
 800cf36:	f04f 0300 	mov.w	r3, #0
 800cf3a:	da04      	bge.n	800cf46 <__ulp+0x3e>
 800cf3c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cf40:	fa41 f300 	asr.w	r3, r1, r0
 800cf44:	e7ec      	b.n	800cf20 <__ulp+0x18>
 800cf46:	f1a0 0114 	sub.w	r1, r0, #20
 800cf4a:	291e      	cmp	r1, #30
 800cf4c:	bfda      	itte	le
 800cf4e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cf52:	fa20 f101 	lsrle.w	r1, r0, r1
 800cf56:	2101      	movgt	r1, #1
 800cf58:	460a      	mov	r2, r1
 800cf5a:	e7e1      	b.n	800cf20 <__ulp+0x18>
 800cf5c:	7ff00000 	.word	0x7ff00000

0800cf60 <__b2d>:
 800cf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf62:	6905      	ldr	r5, [r0, #16]
 800cf64:	f100 0714 	add.w	r7, r0, #20
 800cf68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cf6c:	1f2e      	subs	r6, r5, #4
 800cf6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cf72:	4620      	mov	r0, r4
 800cf74:	f7ff fd48 	bl	800ca08 <__hi0bits>
 800cf78:	f1c0 0320 	rsb	r3, r0, #32
 800cf7c:	280a      	cmp	r0, #10
 800cf7e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cffc <__b2d+0x9c>
 800cf82:	600b      	str	r3, [r1, #0]
 800cf84:	dc14      	bgt.n	800cfb0 <__b2d+0x50>
 800cf86:	f1c0 0e0b 	rsb	lr, r0, #11
 800cf8a:	fa24 f10e 	lsr.w	r1, r4, lr
 800cf8e:	42b7      	cmp	r7, r6
 800cf90:	ea41 030c 	orr.w	r3, r1, ip
 800cf94:	bf34      	ite	cc
 800cf96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cf9a:	2100      	movcs	r1, #0
 800cf9c:	3015      	adds	r0, #21
 800cf9e:	fa04 f000 	lsl.w	r0, r4, r0
 800cfa2:	fa21 f10e 	lsr.w	r1, r1, lr
 800cfa6:	ea40 0201 	orr.w	r2, r0, r1
 800cfaa:	ec43 2b10 	vmov	d0, r2, r3
 800cfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfb0:	42b7      	cmp	r7, r6
 800cfb2:	bf3a      	itte	cc
 800cfb4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cfb8:	f1a5 0608 	subcc.w	r6, r5, #8
 800cfbc:	2100      	movcs	r1, #0
 800cfbe:	380b      	subs	r0, #11
 800cfc0:	d017      	beq.n	800cff2 <__b2d+0x92>
 800cfc2:	f1c0 0c20 	rsb	ip, r0, #32
 800cfc6:	fa04 f500 	lsl.w	r5, r4, r0
 800cfca:	42be      	cmp	r6, r7
 800cfcc:	fa21 f40c 	lsr.w	r4, r1, ip
 800cfd0:	ea45 0504 	orr.w	r5, r5, r4
 800cfd4:	bf8c      	ite	hi
 800cfd6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cfda:	2400      	movls	r4, #0
 800cfdc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cfe0:	fa01 f000 	lsl.w	r0, r1, r0
 800cfe4:	fa24 f40c 	lsr.w	r4, r4, ip
 800cfe8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cfec:	ea40 0204 	orr.w	r2, r0, r4
 800cff0:	e7db      	b.n	800cfaa <__b2d+0x4a>
 800cff2:	ea44 030c 	orr.w	r3, r4, ip
 800cff6:	460a      	mov	r2, r1
 800cff8:	e7d7      	b.n	800cfaa <__b2d+0x4a>
 800cffa:	bf00      	nop
 800cffc:	3ff00000 	.word	0x3ff00000

0800d000 <__d2b>:
 800d000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d004:	4689      	mov	r9, r1
 800d006:	2101      	movs	r1, #1
 800d008:	ec57 6b10 	vmov	r6, r7, d0
 800d00c:	4690      	mov	r8, r2
 800d00e:	f7ff fc09 	bl	800c824 <_Balloc>
 800d012:	4604      	mov	r4, r0
 800d014:	b930      	cbnz	r0, 800d024 <__d2b+0x24>
 800d016:	4602      	mov	r2, r0
 800d018:	4b25      	ldr	r3, [pc, #148]	; (800d0b0 <__d2b+0xb0>)
 800d01a:	4826      	ldr	r0, [pc, #152]	; (800d0b4 <__d2b+0xb4>)
 800d01c:	f240 310a 	movw	r1, #778	; 0x30a
 800d020:	f7fe f9c8 	bl	800b3b4 <__assert_func>
 800d024:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d028:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d02c:	bb35      	cbnz	r5, 800d07c <__d2b+0x7c>
 800d02e:	2e00      	cmp	r6, #0
 800d030:	9301      	str	r3, [sp, #4]
 800d032:	d028      	beq.n	800d086 <__d2b+0x86>
 800d034:	4668      	mov	r0, sp
 800d036:	9600      	str	r6, [sp, #0]
 800d038:	f7ff fd06 	bl	800ca48 <__lo0bits>
 800d03c:	9900      	ldr	r1, [sp, #0]
 800d03e:	b300      	cbz	r0, 800d082 <__d2b+0x82>
 800d040:	9a01      	ldr	r2, [sp, #4]
 800d042:	f1c0 0320 	rsb	r3, r0, #32
 800d046:	fa02 f303 	lsl.w	r3, r2, r3
 800d04a:	430b      	orrs	r3, r1
 800d04c:	40c2      	lsrs	r2, r0
 800d04e:	6163      	str	r3, [r4, #20]
 800d050:	9201      	str	r2, [sp, #4]
 800d052:	9b01      	ldr	r3, [sp, #4]
 800d054:	61a3      	str	r3, [r4, #24]
 800d056:	2b00      	cmp	r3, #0
 800d058:	bf14      	ite	ne
 800d05a:	2202      	movne	r2, #2
 800d05c:	2201      	moveq	r2, #1
 800d05e:	6122      	str	r2, [r4, #16]
 800d060:	b1d5      	cbz	r5, 800d098 <__d2b+0x98>
 800d062:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d066:	4405      	add	r5, r0
 800d068:	f8c9 5000 	str.w	r5, [r9]
 800d06c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d070:	f8c8 0000 	str.w	r0, [r8]
 800d074:	4620      	mov	r0, r4
 800d076:	b003      	add	sp, #12
 800d078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d07c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d080:	e7d5      	b.n	800d02e <__d2b+0x2e>
 800d082:	6161      	str	r1, [r4, #20]
 800d084:	e7e5      	b.n	800d052 <__d2b+0x52>
 800d086:	a801      	add	r0, sp, #4
 800d088:	f7ff fcde 	bl	800ca48 <__lo0bits>
 800d08c:	9b01      	ldr	r3, [sp, #4]
 800d08e:	6163      	str	r3, [r4, #20]
 800d090:	2201      	movs	r2, #1
 800d092:	6122      	str	r2, [r4, #16]
 800d094:	3020      	adds	r0, #32
 800d096:	e7e3      	b.n	800d060 <__d2b+0x60>
 800d098:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d09c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d0a0:	f8c9 0000 	str.w	r0, [r9]
 800d0a4:	6918      	ldr	r0, [r3, #16]
 800d0a6:	f7ff fcaf 	bl	800ca08 <__hi0bits>
 800d0aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d0ae:	e7df      	b.n	800d070 <__d2b+0x70>
 800d0b0:	0800e579 	.word	0x0800e579
 800d0b4:	0800e604 	.word	0x0800e604

0800d0b8 <__ratio>:
 800d0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0bc:	4688      	mov	r8, r1
 800d0be:	4669      	mov	r1, sp
 800d0c0:	4681      	mov	r9, r0
 800d0c2:	f7ff ff4d 	bl	800cf60 <__b2d>
 800d0c6:	a901      	add	r1, sp, #4
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	ec55 4b10 	vmov	r4, r5, d0
 800d0ce:	f7ff ff47 	bl	800cf60 <__b2d>
 800d0d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d0da:	eba3 0c02 	sub.w	ip, r3, r2
 800d0de:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d0e2:	1a9b      	subs	r3, r3, r2
 800d0e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d0e8:	ec51 0b10 	vmov	r0, r1, d0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	bfd6      	itet	le
 800d0f0:	460a      	movle	r2, r1
 800d0f2:	462a      	movgt	r2, r5
 800d0f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d0f8:	468b      	mov	fp, r1
 800d0fa:	462f      	mov	r7, r5
 800d0fc:	bfd4      	ite	le
 800d0fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d102:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d106:	4620      	mov	r0, r4
 800d108:	ee10 2a10 	vmov	r2, s0
 800d10c:	465b      	mov	r3, fp
 800d10e:	4639      	mov	r1, r7
 800d110:	f7f3 fbc4 	bl	800089c <__aeabi_ddiv>
 800d114:	ec41 0b10 	vmov	d0, r0, r1
 800d118:	b003      	add	sp, #12
 800d11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d11e <__copybits>:
 800d11e:	3901      	subs	r1, #1
 800d120:	b570      	push	{r4, r5, r6, lr}
 800d122:	1149      	asrs	r1, r1, #5
 800d124:	6914      	ldr	r4, [r2, #16]
 800d126:	3101      	adds	r1, #1
 800d128:	f102 0314 	add.w	r3, r2, #20
 800d12c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d130:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d134:	1f05      	subs	r5, r0, #4
 800d136:	42a3      	cmp	r3, r4
 800d138:	d30c      	bcc.n	800d154 <__copybits+0x36>
 800d13a:	1aa3      	subs	r3, r4, r2
 800d13c:	3b11      	subs	r3, #17
 800d13e:	f023 0303 	bic.w	r3, r3, #3
 800d142:	3211      	adds	r2, #17
 800d144:	42a2      	cmp	r2, r4
 800d146:	bf88      	it	hi
 800d148:	2300      	movhi	r3, #0
 800d14a:	4418      	add	r0, r3
 800d14c:	2300      	movs	r3, #0
 800d14e:	4288      	cmp	r0, r1
 800d150:	d305      	bcc.n	800d15e <__copybits+0x40>
 800d152:	bd70      	pop	{r4, r5, r6, pc}
 800d154:	f853 6b04 	ldr.w	r6, [r3], #4
 800d158:	f845 6f04 	str.w	r6, [r5, #4]!
 800d15c:	e7eb      	b.n	800d136 <__copybits+0x18>
 800d15e:	f840 3b04 	str.w	r3, [r0], #4
 800d162:	e7f4      	b.n	800d14e <__copybits+0x30>

0800d164 <__any_on>:
 800d164:	f100 0214 	add.w	r2, r0, #20
 800d168:	6900      	ldr	r0, [r0, #16]
 800d16a:	114b      	asrs	r3, r1, #5
 800d16c:	4298      	cmp	r0, r3
 800d16e:	b510      	push	{r4, lr}
 800d170:	db11      	blt.n	800d196 <__any_on+0x32>
 800d172:	dd0a      	ble.n	800d18a <__any_on+0x26>
 800d174:	f011 011f 	ands.w	r1, r1, #31
 800d178:	d007      	beq.n	800d18a <__any_on+0x26>
 800d17a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d17e:	fa24 f001 	lsr.w	r0, r4, r1
 800d182:	fa00 f101 	lsl.w	r1, r0, r1
 800d186:	428c      	cmp	r4, r1
 800d188:	d10b      	bne.n	800d1a2 <__any_on+0x3e>
 800d18a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d18e:	4293      	cmp	r3, r2
 800d190:	d803      	bhi.n	800d19a <__any_on+0x36>
 800d192:	2000      	movs	r0, #0
 800d194:	bd10      	pop	{r4, pc}
 800d196:	4603      	mov	r3, r0
 800d198:	e7f7      	b.n	800d18a <__any_on+0x26>
 800d19a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d19e:	2900      	cmp	r1, #0
 800d1a0:	d0f5      	beq.n	800d18e <__any_on+0x2a>
 800d1a2:	2001      	movs	r0, #1
 800d1a4:	e7f6      	b.n	800d194 <__any_on+0x30>

0800d1a6 <_calloc_r>:
 800d1a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1a8:	fba1 2402 	umull	r2, r4, r1, r2
 800d1ac:	b94c      	cbnz	r4, 800d1c2 <_calloc_r+0x1c>
 800d1ae:	4611      	mov	r1, r2
 800d1b0:	9201      	str	r2, [sp, #4]
 800d1b2:	f000 f87b 	bl	800d2ac <_malloc_r>
 800d1b6:	9a01      	ldr	r2, [sp, #4]
 800d1b8:	4605      	mov	r5, r0
 800d1ba:	b930      	cbnz	r0, 800d1ca <_calloc_r+0x24>
 800d1bc:	4628      	mov	r0, r5
 800d1be:	b003      	add	sp, #12
 800d1c0:	bd30      	pop	{r4, r5, pc}
 800d1c2:	220c      	movs	r2, #12
 800d1c4:	6002      	str	r2, [r0, #0]
 800d1c6:	2500      	movs	r5, #0
 800d1c8:	e7f8      	b.n	800d1bc <_calloc_r+0x16>
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	f7fc fac4 	bl	8009758 <memset>
 800d1d0:	e7f4      	b.n	800d1bc <_calloc_r+0x16>
	...

0800d1d4 <_free_r>:
 800d1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1d6:	2900      	cmp	r1, #0
 800d1d8:	d044      	beq.n	800d264 <_free_r+0x90>
 800d1da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1de:	9001      	str	r0, [sp, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f1a1 0404 	sub.w	r4, r1, #4
 800d1e6:	bfb8      	it	lt
 800d1e8:	18e4      	addlt	r4, r4, r3
 800d1ea:	f000 fec5 	bl	800df78 <__malloc_lock>
 800d1ee:	4a1e      	ldr	r2, [pc, #120]	; (800d268 <_free_r+0x94>)
 800d1f0:	9801      	ldr	r0, [sp, #4]
 800d1f2:	6813      	ldr	r3, [r2, #0]
 800d1f4:	b933      	cbnz	r3, 800d204 <_free_r+0x30>
 800d1f6:	6063      	str	r3, [r4, #4]
 800d1f8:	6014      	str	r4, [r2, #0]
 800d1fa:	b003      	add	sp, #12
 800d1fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d200:	f000 bec0 	b.w	800df84 <__malloc_unlock>
 800d204:	42a3      	cmp	r3, r4
 800d206:	d908      	bls.n	800d21a <_free_r+0x46>
 800d208:	6825      	ldr	r5, [r4, #0]
 800d20a:	1961      	adds	r1, r4, r5
 800d20c:	428b      	cmp	r3, r1
 800d20e:	bf01      	itttt	eq
 800d210:	6819      	ldreq	r1, [r3, #0]
 800d212:	685b      	ldreq	r3, [r3, #4]
 800d214:	1949      	addeq	r1, r1, r5
 800d216:	6021      	streq	r1, [r4, #0]
 800d218:	e7ed      	b.n	800d1f6 <_free_r+0x22>
 800d21a:	461a      	mov	r2, r3
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	b10b      	cbz	r3, 800d224 <_free_r+0x50>
 800d220:	42a3      	cmp	r3, r4
 800d222:	d9fa      	bls.n	800d21a <_free_r+0x46>
 800d224:	6811      	ldr	r1, [r2, #0]
 800d226:	1855      	adds	r5, r2, r1
 800d228:	42a5      	cmp	r5, r4
 800d22a:	d10b      	bne.n	800d244 <_free_r+0x70>
 800d22c:	6824      	ldr	r4, [r4, #0]
 800d22e:	4421      	add	r1, r4
 800d230:	1854      	adds	r4, r2, r1
 800d232:	42a3      	cmp	r3, r4
 800d234:	6011      	str	r1, [r2, #0]
 800d236:	d1e0      	bne.n	800d1fa <_free_r+0x26>
 800d238:	681c      	ldr	r4, [r3, #0]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	6053      	str	r3, [r2, #4]
 800d23e:	4421      	add	r1, r4
 800d240:	6011      	str	r1, [r2, #0]
 800d242:	e7da      	b.n	800d1fa <_free_r+0x26>
 800d244:	d902      	bls.n	800d24c <_free_r+0x78>
 800d246:	230c      	movs	r3, #12
 800d248:	6003      	str	r3, [r0, #0]
 800d24a:	e7d6      	b.n	800d1fa <_free_r+0x26>
 800d24c:	6825      	ldr	r5, [r4, #0]
 800d24e:	1961      	adds	r1, r4, r5
 800d250:	428b      	cmp	r3, r1
 800d252:	bf04      	itt	eq
 800d254:	6819      	ldreq	r1, [r3, #0]
 800d256:	685b      	ldreq	r3, [r3, #4]
 800d258:	6063      	str	r3, [r4, #4]
 800d25a:	bf04      	itt	eq
 800d25c:	1949      	addeq	r1, r1, r5
 800d25e:	6021      	streq	r1, [r4, #0]
 800d260:	6054      	str	r4, [r2, #4]
 800d262:	e7ca      	b.n	800d1fa <_free_r+0x26>
 800d264:	b003      	add	sp, #12
 800d266:	bd30      	pop	{r4, r5, pc}
 800d268:	200004c4 	.word	0x200004c4

0800d26c <sbrk_aligned>:
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	4e0e      	ldr	r6, [pc, #56]	; (800d2a8 <sbrk_aligned+0x3c>)
 800d270:	460c      	mov	r4, r1
 800d272:	6831      	ldr	r1, [r6, #0]
 800d274:	4605      	mov	r5, r0
 800d276:	b911      	cbnz	r1, 800d27e <sbrk_aligned+0x12>
 800d278:	f000 fb4a 	bl	800d910 <_sbrk_r>
 800d27c:	6030      	str	r0, [r6, #0]
 800d27e:	4621      	mov	r1, r4
 800d280:	4628      	mov	r0, r5
 800d282:	f000 fb45 	bl	800d910 <_sbrk_r>
 800d286:	1c43      	adds	r3, r0, #1
 800d288:	d00a      	beq.n	800d2a0 <sbrk_aligned+0x34>
 800d28a:	1cc4      	adds	r4, r0, #3
 800d28c:	f024 0403 	bic.w	r4, r4, #3
 800d290:	42a0      	cmp	r0, r4
 800d292:	d007      	beq.n	800d2a4 <sbrk_aligned+0x38>
 800d294:	1a21      	subs	r1, r4, r0
 800d296:	4628      	mov	r0, r5
 800d298:	f000 fb3a 	bl	800d910 <_sbrk_r>
 800d29c:	3001      	adds	r0, #1
 800d29e:	d101      	bne.n	800d2a4 <sbrk_aligned+0x38>
 800d2a0:	f04f 34ff 	mov.w	r4, #4294967295
 800d2a4:	4620      	mov	r0, r4
 800d2a6:	bd70      	pop	{r4, r5, r6, pc}
 800d2a8:	200004c8 	.word	0x200004c8

0800d2ac <_malloc_r>:
 800d2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b0:	1ccd      	adds	r5, r1, #3
 800d2b2:	f025 0503 	bic.w	r5, r5, #3
 800d2b6:	3508      	adds	r5, #8
 800d2b8:	2d0c      	cmp	r5, #12
 800d2ba:	bf38      	it	cc
 800d2bc:	250c      	movcc	r5, #12
 800d2be:	2d00      	cmp	r5, #0
 800d2c0:	4607      	mov	r7, r0
 800d2c2:	db01      	blt.n	800d2c8 <_malloc_r+0x1c>
 800d2c4:	42a9      	cmp	r1, r5
 800d2c6:	d905      	bls.n	800d2d4 <_malloc_r+0x28>
 800d2c8:	230c      	movs	r3, #12
 800d2ca:	603b      	str	r3, [r7, #0]
 800d2cc:	2600      	movs	r6, #0
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2d4:	4e2e      	ldr	r6, [pc, #184]	; (800d390 <_malloc_r+0xe4>)
 800d2d6:	f000 fe4f 	bl	800df78 <__malloc_lock>
 800d2da:	6833      	ldr	r3, [r6, #0]
 800d2dc:	461c      	mov	r4, r3
 800d2de:	bb34      	cbnz	r4, 800d32e <_malloc_r+0x82>
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	4638      	mov	r0, r7
 800d2e4:	f7ff ffc2 	bl	800d26c <sbrk_aligned>
 800d2e8:	1c43      	adds	r3, r0, #1
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	d14d      	bne.n	800d38a <_malloc_r+0xde>
 800d2ee:	6834      	ldr	r4, [r6, #0]
 800d2f0:	4626      	mov	r6, r4
 800d2f2:	2e00      	cmp	r6, #0
 800d2f4:	d140      	bne.n	800d378 <_malloc_r+0xcc>
 800d2f6:	6823      	ldr	r3, [r4, #0]
 800d2f8:	4631      	mov	r1, r6
 800d2fa:	4638      	mov	r0, r7
 800d2fc:	eb04 0803 	add.w	r8, r4, r3
 800d300:	f000 fb06 	bl	800d910 <_sbrk_r>
 800d304:	4580      	cmp	r8, r0
 800d306:	d13a      	bne.n	800d37e <_malloc_r+0xd2>
 800d308:	6821      	ldr	r1, [r4, #0]
 800d30a:	3503      	adds	r5, #3
 800d30c:	1a6d      	subs	r5, r5, r1
 800d30e:	f025 0503 	bic.w	r5, r5, #3
 800d312:	3508      	adds	r5, #8
 800d314:	2d0c      	cmp	r5, #12
 800d316:	bf38      	it	cc
 800d318:	250c      	movcc	r5, #12
 800d31a:	4629      	mov	r1, r5
 800d31c:	4638      	mov	r0, r7
 800d31e:	f7ff ffa5 	bl	800d26c <sbrk_aligned>
 800d322:	3001      	adds	r0, #1
 800d324:	d02b      	beq.n	800d37e <_malloc_r+0xd2>
 800d326:	6823      	ldr	r3, [r4, #0]
 800d328:	442b      	add	r3, r5
 800d32a:	6023      	str	r3, [r4, #0]
 800d32c:	e00e      	b.n	800d34c <_malloc_r+0xa0>
 800d32e:	6822      	ldr	r2, [r4, #0]
 800d330:	1b52      	subs	r2, r2, r5
 800d332:	d41e      	bmi.n	800d372 <_malloc_r+0xc6>
 800d334:	2a0b      	cmp	r2, #11
 800d336:	d916      	bls.n	800d366 <_malloc_r+0xba>
 800d338:	1961      	adds	r1, r4, r5
 800d33a:	42a3      	cmp	r3, r4
 800d33c:	6025      	str	r5, [r4, #0]
 800d33e:	bf18      	it	ne
 800d340:	6059      	strne	r1, [r3, #4]
 800d342:	6863      	ldr	r3, [r4, #4]
 800d344:	bf08      	it	eq
 800d346:	6031      	streq	r1, [r6, #0]
 800d348:	5162      	str	r2, [r4, r5]
 800d34a:	604b      	str	r3, [r1, #4]
 800d34c:	4638      	mov	r0, r7
 800d34e:	f104 060b 	add.w	r6, r4, #11
 800d352:	f000 fe17 	bl	800df84 <__malloc_unlock>
 800d356:	f026 0607 	bic.w	r6, r6, #7
 800d35a:	1d23      	adds	r3, r4, #4
 800d35c:	1af2      	subs	r2, r6, r3
 800d35e:	d0b6      	beq.n	800d2ce <_malloc_r+0x22>
 800d360:	1b9b      	subs	r3, r3, r6
 800d362:	50a3      	str	r3, [r4, r2]
 800d364:	e7b3      	b.n	800d2ce <_malloc_r+0x22>
 800d366:	6862      	ldr	r2, [r4, #4]
 800d368:	42a3      	cmp	r3, r4
 800d36a:	bf0c      	ite	eq
 800d36c:	6032      	streq	r2, [r6, #0]
 800d36e:	605a      	strne	r2, [r3, #4]
 800d370:	e7ec      	b.n	800d34c <_malloc_r+0xa0>
 800d372:	4623      	mov	r3, r4
 800d374:	6864      	ldr	r4, [r4, #4]
 800d376:	e7b2      	b.n	800d2de <_malloc_r+0x32>
 800d378:	4634      	mov	r4, r6
 800d37a:	6876      	ldr	r6, [r6, #4]
 800d37c:	e7b9      	b.n	800d2f2 <_malloc_r+0x46>
 800d37e:	230c      	movs	r3, #12
 800d380:	603b      	str	r3, [r7, #0]
 800d382:	4638      	mov	r0, r7
 800d384:	f000 fdfe 	bl	800df84 <__malloc_unlock>
 800d388:	e7a1      	b.n	800d2ce <_malloc_r+0x22>
 800d38a:	6025      	str	r5, [r4, #0]
 800d38c:	e7de      	b.n	800d34c <_malloc_r+0xa0>
 800d38e:	bf00      	nop
 800d390:	200004c4 	.word	0x200004c4

0800d394 <__ssputs_r>:
 800d394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d398:	688e      	ldr	r6, [r1, #8]
 800d39a:	429e      	cmp	r6, r3
 800d39c:	4682      	mov	sl, r0
 800d39e:	460c      	mov	r4, r1
 800d3a0:	4690      	mov	r8, r2
 800d3a2:	461f      	mov	r7, r3
 800d3a4:	d838      	bhi.n	800d418 <__ssputs_r+0x84>
 800d3a6:	898a      	ldrh	r2, [r1, #12]
 800d3a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3ac:	d032      	beq.n	800d414 <__ssputs_r+0x80>
 800d3ae:	6825      	ldr	r5, [r4, #0]
 800d3b0:	6909      	ldr	r1, [r1, #16]
 800d3b2:	eba5 0901 	sub.w	r9, r5, r1
 800d3b6:	6965      	ldr	r5, [r4, #20]
 800d3b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3c0:	3301      	adds	r3, #1
 800d3c2:	444b      	add	r3, r9
 800d3c4:	106d      	asrs	r5, r5, #1
 800d3c6:	429d      	cmp	r5, r3
 800d3c8:	bf38      	it	cc
 800d3ca:	461d      	movcc	r5, r3
 800d3cc:	0553      	lsls	r3, r2, #21
 800d3ce:	d531      	bpl.n	800d434 <__ssputs_r+0xa0>
 800d3d0:	4629      	mov	r1, r5
 800d3d2:	f7ff ff6b 	bl	800d2ac <_malloc_r>
 800d3d6:	4606      	mov	r6, r0
 800d3d8:	b950      	cbnz	r0, 800d3f0 <__ssputs_r+0x5c>
 800d3da:	230c      	movs	r3, #12
 800d3dc:	f8ca 3000 	str.w	r3, [sl]
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3e6:	81a3      	strh	r3, [r4, #12]
 800d3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3f0:	6921      	ldr	r1, [r4, #16]
 800d3f2:	464a      	mov	r2, r9
 800d3f4:	f7fc f9a2 	bl	800973c <memcpy>
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d402:	81a3      	strh	r3, [r4, #12]
 800d404:	6126      	str	r6, [r4, #16]
 800d406:	6165      	str	r5, [r4, #20]
 800d408:	444e      	add	r6, r9
 800d40a:	eba5 0509 	sub.w	r5, r5, r9
 800d40e:	6026      	str	r6, [r4, #0]
 800d410:	60a5      	str	r5, [r4, #8]
 800d412:	463e      	mov	r6, r7
 800d414:	42be      	cmp	r6, r7
 800d416:	d900      	bls.n	800d41a <__ssputs_r+0x86>
 800d418:	463e      	mov	r6, r7
 800d41a:	6820      	ldr	r0, [r4, #0]
 800d41c:	4632      	mov	r2, r6
 800d41e:	4641      	mov	r1, r8
 800d420:	f000 fd90 	bl	800df44 <memmove>
 800d424:	68a3      	ldr	r3, [r4, #8]
 800d426:	1b9b      	subs	r3, r3, r6
 800d428:	60a3      	str	r3, [r4, #8]
 800d42a:	6823      	ldr	r3, [r4, #0]
 800d42c:	4433      	add	r3, r6
 800d42e:	6023      	str	r3, [r4, #0]
 800d430:	2000      	movs	r0, #0
 800d432:	e7db      	b.n	800d3ec <__ssputs_r+0x58>
 800d434:	462a      	mov	r2, r5
 800d436:	f000 fdab 	bl	800df90 <_realloc_r>
 800d43a:	4606      	mov	r6, r0
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d1e1      	bne.n	800d404 <__ssputs_r+0x70>
 800d440:	6921      	ldr	r1, [r4, #16]
 800d442:	4650      	mov	r0, sl
 800d444:	f7ff fec6 	bl	800d1d4 <_free_r>
 800d448:	e7c7      	b.n	800d3da <__ssputs_r+0x46>
	...

0800d44c <_svfiprintf_r>:
 800d44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d450:	4698      	mov	r8, r3
 800d452:	898b      	ldrh	r3, [r1, #12]
 800d454:	061b      	lsls	r3, r3, #24
 800d456:	b09d      	sub	sp, #116	; 0x74
 800d458:	4607      	mov	r7, r0
 800d45a:	460d      	mov	r5, r1
 800d45c:	4614      	mov	r4, r2
 800d45e:	d50e      	bpl.n	800d47e <_svfiprintf_r+0x32>
 800d460:	690b      	ldr	r3, [r1, #16]
 800d462:	b963      	cbnz	r3, 800d47e <_svfiprintf_r+0x32>
 800d464:	2140      	movs	r1, #64	; 0x40
 800d466:	f7ff ff21 	bl	800d2ac <_malloc_r>
 800d46a:	6028      	str	r0, [r5, #0]
 800d46c:	6128      	str	r0, [r5, #16]
 800d46e:	b920      	cbnz	r0, 800d47a <_svfiprintf_r+0x2e>
 800d470:	230c      	movs	r3, #12
 800d472:	603b      	str	r3, [r7, #0]
 800d474:	f04f 30ff 	mov.w	r0, #4294967295
 800d478:	e0d1      	b.n	800d61e <_svfiprintf_r+0x1d2>
 800d47a:	2340      	movs	r3, #64	; 0x40
 800d47c:	616b      	str	r3, [r5, #20]
 800d47e:	2300      	movs	r3, #0
 800d480:	9309      	str	r3, [sp, #36]	; 0x24
 800d482:	2320      	movs	r3, #32
 800d484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d488:	f8cd 800c 	str.w	r8, [sp, #12]
 800d48c:	2330      	movs	r3, #48	; 0x30
 800d48e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d638 <_svfiprintf_r+0x1ec>
 800d492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d496:	f04f 0901 	mov.w	r9, #1
 800d49a:	4623      	mov	r3, r4
 800d49c:	469a      	mov	sl, r3
 800d49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4a2:	b10a      	cbz	r2, 800d4a8 <_svfiprintf_r+0x5c>
 800d4a4:	2a25      	cmp	r2, #37	; 0x25
 800d4a6:	d1f9      	bne.n	800d49c <_svfiprintf_r+0x50>
 800d4a8:	ebba 0b04 	subs.w	fp, sl, r4
 800d4ac:	d00b      	beq.n	800d4c6 <_svfiprintf_r+0x7a>
 800d4ae:	465b      	mov	r3, fp
 800d4b0:	4622      	mov	r2, r4
 800d4b2:	4629      	mov	r1, r5
 800d4b4:	4638      	mov	r0, r7
 800d4b6:	f7ff ff6d 	bl	800d394 <__ssputs_r>
 800d4ba:	3001      	adds	r0, #1
 800d4bc:	f000 80aa 	beq.w	800d614 <_svfiprintf_r+0x1c8>
 800d4c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4c2:	445a      	add	r2, fp
 800d4c4:	9209      	str	r2, [sp, #36]	; 0x24
 800d4c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f000 80a2 	beq.w	800d614 <_svfiprintf_r+0x1c8>
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4da:	f10a 0a01 	add.w	sl, sl, #1
 800d4de:	9304      	str	r3, [sp, #16]
 800d4e0:	9307      	str	r3, [sp, #28]
 800d4e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4e6:	931a      	str	r3, [sp, #104]	; 0x68
 800d4e8:	4654      	mov	r4, sl
 800d4ea:	2205      	movs	r2, #5
 800d4ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4f0:	4851      	ldr	r0, [pc, #324]	; (800d638 <_svfiprintf_r+0x1ec>)
 800d4f2:	f7f2 fe9d 	bl	8000230 <memchr>
 800d4f6:	9a04      	ldr	r2, [sp, #16]
 800d4f8:	b9d8      	cbnz	r0, 800d532 <_svfiprintf_r+0xe6>
 800d4fa:	06d0      	lsls	r0, r2, #27
 800d4fc:	bf44      	itt	mi
 800d4fe:	2320      	movmi	r3, #32
 800d500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d504:	0711      	lsls	r1, r2, #28
 800d506:	bf44      	itt	mi
 800d508:	232b      	movmi	r3, #43	; 0x2b
 800d50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d50e:	f89a 3000 	ldrb.w	r3, [sl]
 800d512:	2b2a      	cmp	r3, #42	; 0x2a
 800d514:	d015      	beq.n	800d542 <_svfiprintf_r+0xf6>
 800d516:	9a07      	ldr	r2, [sp, #28]
 800d518:	4654      	mov	r4, sl
 800d51a:	2000      	movs	r0, #0
 800d51c:	f04f 0c0a 	mov.w	ip, #10
 800d520:	4621      	mov	r1, r4
 800d522:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d526:	3b30      	subs	r3, #48	; 0x30
 800d528:	2b09      	cmp	r3, #9
 800d52a:	d94e      	bls.n	800d5ca <_svfiprintf_r+0x17e>
 800d52c:	b1b0      	cbz	r0, 800d55c <_svfiprintf_r+0x110>
 800d52e:	9207      	str	r2, [sp, #28]
 800d530:	e014      	b.n	800d55c <_svfiprintf_r+0x110>
 800d532:	eba0 0308 	sub.w	r3, r0, r8
 800d536:	fa09 f303 	lsl.w	r3, r9, r3
 800d53a:	4313      	orrs	r3, r2
 800d53c:	9304      	str	r3, [sp, #16]
 800d53e:	46a2      	mov	sl, r4
 800d540:	e7d2      	b.n	800d4e8 <_svfiprintf_r+0x9c>
 800d542:	9b03      	ldr	r3, [sp, #12]
 800d544:	1d19      	adds	r1, r3, #4
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	9103      	str	r1, [sp, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	bfbb      	ittet	lt
 800d54e:	425b      	neglt	r3, r3
 800d550:	f042 0202 	orrlt.w	r2, r2, #2
 800d554:	9307      	strge	r3, [sp, #28]
 800d556:	9307      	strlt	r3, [sp, #28]
 800d558:	bfb8      	it	lt
 800d55a:	9204      	strlt	r2, [sp, #16]
 800d55c:	7823      	ldrb	r3, [r4, #0]
 800d55e:	2b2e      	cmp	r3, #46	; 0x2e
 800d560:	d10c      	bne.n	800d57c <_svfiprintf_r+0x130>
 800d562:	7863      	ldrb	r3, [r4, #1]
 800d564:	2b2a      	cmp	r3, #42	; 0x2a
 800d566:	d135      	bne.n	800d5d4 <_svfiprintf_r+0x188>
 800d568:	9b03      	ldr	r3, [sp, #12]
 800d56a:	1d1a      	adds	r2, r3, #4
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	9203      	str	r2, [sp, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	bfb8      	it	lt
 800d574:	f04f 33ff 	movlt.w	r3, #4294967295
 800d578:	3402      	adds	r4, #2
 800d57a:	9305      	str	r3, [sp, #20]
 800d57c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d648 <_svfiprintf_r+0x1fc>
 800d580:	7821      	ldrb	r1, [r4, #0]
 800d582:	2203      	movs	r2, #3
 800d584:	4650      	mov	r0, sl
 800d586:	f7f2 fe53 	bl	8000230 <memchr>
 800d58a:	b140      	cbz	r0, 800d59e <_svfiprintf_r+0x152>
 800d58c:	2340      	movs	r3, #64	; 0x40
 800d58e:	eba0 000a 	sub.w	r0, r0, sl
 800d592:	fa03 f000 	lsl.w	r0, r3, r0
 800d596:	9b04      	ldr	r3, [sp, #16]
 800d598:	4303      	orrs	r3, r0
 800d59a:	3401      	adds	r4, #1
 800d59c:	9304      	str	r3, [sp, #16]
 800d59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5a2:	4826      	ldr	r0, [pc, #152]	; (800d63c <_svfiprintf_r+0x1f0>)
 800d5a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5a8:	2206      	movs	r2, #6
 800d5aa:	f7f2 fe41 	bl	8000230 <memchr>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	d038      	beq.n	800d624 <_svfiprintf_r+0x1d8>
 800d5b2:	4b23      	ldr	r3, [pc, #140]	; (800d640 <_svfiprintf_r+0x1f4>)
 800d5b4:	bb1b      	cbnz	r3, 800d5fe <_svfiprintf_r+0x1b2>
 800d5b6:	9b03      	ldr	r3, [sp, #12]
 800d5b8:	3307      	adds	r3, #7
 800d5ba:	f023 0307 	bic.w	r3, r3, #7
 800d5be:	3308      	adds	r3, #8
 800d5c0:	9303      	str	r3, [sp, #12]
 800d5c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5c4:	4433      	add	r3, r6
 800d5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5c8:	e767      	b.n	800d49a <_svfiprintf_r+0x4e>
 800d5ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	2001      	movs	r0, #1
 800d5d2:	e7a5      	b.n	800d520 <_svfiprintf_r+0xd4>
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	3401      	adds	r4, #1
 800d5d8:	9305      	str	r3, [sp, #20]
 800d5da:	4619      	mov	r1, r3
 800d5dc:	f04f 0c0a 	mov.w	ip, #10
 800d5e0:	4620      	mov	r0, r4
 800d5e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5e6:	3a30      	subs	r2, #48	; 0x30
 800d5e8:	2a09      	cmp	r2, #9
 800d5ea:	d903      	bls.n	800d5f4 <_svfiprintf_r+0x1a8>
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d0c5      	beq.n	800d57c <_svfiprintf_r+0x130>
 800d5f0:	9105      	str	r1, [sp, #20]
 800d5f2:	e7c3      	b.n	800d57c <_svfiprintf_r+0x130>
 800d5f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5f8:	4604      	mov	r4, r0
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e7f0      	b.n	800d5e0 <_svfiprintf_r+0x194>
 800d5fe:	ab03      	add	r3, sp, #12
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	462a      	mov	r2, r5
 800d604:	4b0f      	ldr	r3, [pc, #60]	; (800d644 <_svfiprintf_r+0x1f8>)
 800d606:	a904      	add	r1, sp, #16
 800d608:	4638      	mov	r0, r7
 800d60a:	f7fc f94d 	bl	80098a8 <_printf_float>
 800d60e:	1c42      	adds	r2, r0, #1
 800d610:	4606      	mov	r6, r0
 800d612:	d1d6      	bne.n	800d5c2 <_svfiprintf_r+0x176>
 800d614:	89ab      	ldrh	r3, [r5, #12]
 800d616:	065b      	lsls	r3, r3, #25
 800d618:	f53f af2c 	bmi.w	800d474 <_svfiprintf_r+0x28>
 800d61c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d61e:	b01d      	add	sp, #116	; 0x74
 800d620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d624:	ab03      	add	r3, sp, #12
 800d626:	9300      	str	r3, [sp, #0]
 800d628:	462a      	mov	r2, r5
 800d62a:	4b06      	ldr	r3, [pc, #24]	; (800d644 <_svfiprintf_r+0x1f8>)
 800d62c:	a904      	add	r1, sp, #16
 800d62e:	4638      	mov	r0, r7
 800d630:	f7fc fbde 	bl	8009df0 <_printf_i>
 800d634:	e7eb      	b.n	800d60e <_svfiprintf_r+0x1c2>
 800d636:	bf00      	nop
 800d638:	0800e75c 	.word	0x0800e75c
 800d63c:	0800e766 	.word	0x0800e766
 800d640:	080098a9 	.word	0x080098a9
 800d644:	0800d395 	.word	0x0800d395
 800d648:	0800e762 	.word	0x0800e762

0800d64c <__sfputc_r>:
 800d64c:	6893      	ldr	r3, [r2, #8]
 800d64e:	3b01      	subs	r3, #1
 800d650:	2b00      	cmp	r3, #0
 800d652:	b410      	push	{r4}
 800d654:	6093      	str	r3, [r2, #8]
 800d656:	da08      	bge.n	800d66a <__sfputc_r+0x1e>
 800d658:	6994      	ldr	r4, [r2, #24]
 800d65a:	42a3      	cmp	r3, r4
 800d65c:	db01      	blt.n	800d662 <__sfputc_r+0x16>
 800d65e:	290a      	cmp	r1, #10
 800d660:	d103      	bne.n	800d66a <__sfputc_r+0x1e>
 800d662:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d666:	f000 b977 	b.w	800d958 <__swbuf_r>
 800d66a:	6813      	ldr	r3, [r2, #0]
 800d66c:	1c58      	adds	r0, r3, #1
 800d66e:	6010      	str	r0, [r2, #0]
 800d670:	7019      	strb	r1, [r3, #0]
 800d672:	4608      	mov	r0, r1
 800d674:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <__sfputs_r>:
 800d67a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67c:	4606      	mov	r6, r0
 800d67e:	460f      	mov	r7, r1
 800d680:	4614      	mov	r4, r2
 800d682:	18d5      	adds	r5, r2, r3
 800d684:	42ac      	cmp	r4, r5
 800d686:	d101      	bne.n	800d68c <__sfputs_r+0x12>
 800d688:	2000      	movs	r0, #0
 800d68a:	e007      	b.n	800d69c <__sfputs_r+0x22>
 800d68c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d690:	463a      	mov	r2, r7
 800d692:	4630      	mov	r0, r6
 800d694:	f7ff ffda 	bl	800d64c <__sfputc_r>
 800d698:	1c43      	adds	r3, r0, #1
 800d69a:	d1f3      	bne.n	800d684 <__sfputs_r+0xa>
 800d69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d6a0 <_vfiprintf_r>:
 800d6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a4:	460d      	mov	r5, r1
 800d6a6:	b09d      	sub	sp, #116	; 0x74
 800d6a8:	4614      	mov	r4, r2
 800d6aa:	4698      	mov	r8, r3
 800d6ac:	4606      	mov	r6, r0
 800d6ae:	b118      	cbz	r0, 800d6b8 <_vfiprintf_r+0x18>
 800d6b0:	6983      	ldr	r3, [r0, #24]
 800d6b2:	b90b      	cbnz	r3, 800d6b8 <_vfiprintf_r+0x18>
 800d6b4:	f000 fb40 	bl	800dd38 <__sinit>
 800d6b8:	4b89      	ldr	r3, [pc, #548]	; (800d8e0 <_vfiprintf_r+0x240>)
 800d6ba:	429d      	cmp	r5, r3
 800d6bc:	d11b      	bne.n	800d6f6 <_vfiprintf_r+0x56>
 800d6be:	6875      	ldr	r5, [r6, #4]
 800d6c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6c2:	07d9      	lsls	r1, r3, #31
 800d6c4:	d405      	bmi.n	800d6d2 <_vfiprintf_r+0x32>
 800d6c6:	89ab      	ldrh	r3, [r5, #12]
 800d6c8:	059a      	lsls	r2, r3, #22
 800d6ca:	d402      	bmi.n	800d6d2 <_vfiprintf_r+0x32>
 800d6cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6ce:	f000 fbd1 	bl	800de74 <__retarget_lock_acquire_recursive>
 800d6d2:	89ab      	ldrh	r3, [r5, #12]
 800d6d4:	071b      	lsls	r3, r3, #28
 800d6d6:	d501      	bpl.n	800d6dc <_vfiprintf_r+0x3c>
 800d6d8:	692b      	ldr	r3, [r5, #16]
 800d6da:	b9eb      	cbnz	r3, 800d718 <_vfiprintf_r+0x78>
 800d6dc:	4629      	mov	r1, r5
 800d6de:	4630      	mov	r0, r6
 800d6e0:	f000 f99a 	bl	800da18 <__swsetup_r>
 800d6e4:	b1c0      	cbz	r0, 800d718 <_vfiprintf_r+0x78>
 800d6e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6e8:	07dc      	lsls	r4, r3, #31
 800d6ea:	d50e      	bpl.n	800d70a <_vfiprintf_r+0x6a>
 800d6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f0:	b01d      	add	sp, #116	; 0x74
 800d6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f6:	4b7b      	ldr	r3, [pc, #492]	; (800d8e4 <_vfiprintf_r+0x244>)
 800d6f8:	429d      	cmp	r5, r3
 800d6fa:	d101      	bne.n	800d700 <_vfiprintf_r+0x60>
 800d6fc:	68b5      	ldr	r5, [r6, #8]
 800d6fe:	e7df      	b.n	800d6c0 <_vfiprintf_r+0x20>
 800d700:	4b79      	ldr	r3, [pc, #484]	; (800d8e8 <_vfiprintf_r+0x248>)
 800d702:	429d      	cmp	r5, r3
 800d704:	bf08      	it	eq
 800d706:	68f5      	ldreq	r5, [r6, #12]
 800d708:	e7da      	b.n	800d6c0 <_vfiprintf_r+0x20>
 800d70a:	89ab      	ldrh	r3, [r5, #12]
 800d70c:	0598      	lsls	r0, r3, #22
 800d70e:	d4ed      	bmi.n	800d6ec <_vfiprintf_r+0x4c>
 800d710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d712:	f000 fbb0 	bl	800de76 <__retarget_lock_release_recursive>
 800d716:	e7e9      	b.n	800d6ec <_vfiprintf_r+0x4c>
 800d718:	2300      	movs	r3, #0
 800d71a:	9309      	str	r3, [sp, #36]	; 0x24
 800d71c:	2320      	movs	r3, #32
 800d71e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d722:	f8cd 800c 	str.w	r8, [sp, #12]
 800d726:	2330      	movs	r3, #48	; 0x30
 800d728:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d8ec <_vfiprintf_r+0x24c>
 800d72c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d730:	f04f 0901 	mov.w	r9, #1
 800d734:	4623      	mov	r3, r4
 800d736:	469a      	mov	sl, r3
 800d738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d73c:	b10a      	cbz	r2, 800d742 <_vfiprintf_r+0xa2>
 800d73e:	2a25      	cmp	r2, #37	; 0x25
 800d740:	d1f9      	bne.n	800d736 <_vfiprintf_r+0x96>
 800d742:	ebba 0b04 	subs.w	fp, sl, r4
 800d746:	d00b      	beq.n	800d760 <_vfiprintf_r+0xc0>
 800d748:	465b      	mov	r3, fp
 800d74a:	4622      	mov	r2, r4
 800d74c:	4629      	mov	r1, r5
 800d74e:	4630      	mov	r0, r6
 800d750:	f7ff ff93 	bl	800d67a <__sfputs_r>
 800d754:	3001      	adds	r0, #1
 800d756:	f000 80aa 	beq.w	800d8ae <_vfiprintf_r+0x20e>
 800d75a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d75c:	445a      	add	r2, fp
 800d75e:	9209      	str	r2, [sp, #36]	; 0x24
 800d760:	f89a 3000 	ldrb.w	r3, [sl]
 800d764:	2b00      	cmp	r3, #0
 800d766:	f000 80a2 	beq.w	800d8ae <_vfiprintf_r+0x20e>
 800d76a:	2300      	movs	r3, #0
 800d76c:	f04f 32ff 	mov.w	r2, #4294967295
 800d770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d774:	f10a 0a01 	add.w	sl, sl, #1
 800d778:	9304      	str	r3, [sp, #16]
 800d77a:	9307      	str	r3, [sp, #28]
 800d77c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d780:	931a      	str	r3, [sp, #104]	; 0x68
 800d782:	4654      	mov	r4, sl
 800d784:	2205      	movs	r2, #5
 800d786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d78a:	4858      	ldr	r0, [pc, #352]	; (800d8ec <_vfiprintf_r+0x24c>)
 800d78c:	f7f2 fd50 	bl	8000230 <memchr>
 800d790:	9a04      	ldr	r2, [sp, #16]
 800d792:	b9d8      	cbnz	r0, 800d7cc <_vfiprintf_r+0x12c>
 800d794:	06d1      	lsls	r1, r2, #27
 800d796:	bf44      	itt	mi
 800d798:	2320      	movmi	r3, #32
 800d79a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d79e:	0713      	lsls	r3, r2, #28
 800d7a0:	bf44      	itt	mi
 800d7a2:	232b      	movmi	r3, #43	; 0x2b
 800d7a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7a8:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d7ae:	d015      	beq.n	800d7dc <_vfiprintf_r+0x13c>
 800d7b0:	9a07      	ldr	r2, [sp, #28]
 800d7b2:	4654      	mov	r4, sl
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	f04f 0c0a 	mov.w	ip, #10
 800d7ba:	4621      	mov	r1, r4
 800d7bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7c0:	3b30      	subs	r3, #48	; 0x30
 800d7c2:	2b09      	cmp	r3, #9
 800d7c4:	d94e      	bls.n	800d864 <_vfiprintf_r+0x1c4>
 800d7c6:	b1b0      	cbz	r0, 800d7f6 <_vfiprintf_r+0x156>
 800d7c8:	9207      	str	r2, [sp, #28]
 800d7ca:	e014      	b.n	800d7f6 <_vfiprintf_r+0x156>
 800d7cc:	eba0 0308 	sub.w	r3, r0, r8
 800d7d0:	fa09 f303 	lsl.w	r3, r9, r3
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	9304      	str	r3, [sp, #16]
 800d7d8:	46a2      	mov	sl, r4
 800d7da:	e7d2      	b.n	800d782 <_vfiprintf_r+0xe2>
 800d7dc:	9b03      	ldr	r3, [sp, #12]
 800d7de:	1d19      	adds	r1, r3, #4
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	9103      	str	r1, [sp, #12]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	bfbb      	ittet	lt
 800d7e8:	425b      	neglt	r3, r3
 800d7ea:	f042 0202 	orrlt.w	r2, r2, #2
 800d7ee:	9307      	strge	r3, [sp, #28]
 800d7f0:	9307      	strlt	r3, [sp, #28]
 800d7f2:	bfb8      	it	lt
 800d7f4:	9204      	strlt	r2, [sp, #16]
 800d7f6:	7823      	ldrb	r3, [r4, #0]
 800d7f8:	2b2e      	cmp	r3, #46	; 0x2e
 800d7fa:	d10c      	bne.n	800d816 <_vfiprintf_r+0x176>
 800d7fc:	7863      	ldrb	r3, [r4, #1]
 800d7fe:	2b2a      	cmp	r3, #42	; 0x2a
 800d800:	d135      	bne.n	800d86e <_vfiprintf_r+0x1ce>
 800d802:	9b03      	ldr	r3, [sp, #12]
 800d804:	1d1a      	adds	r2, r3, #4
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	9203      	str	r2, [sp, #12]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	bfb8      	it	lt
 800d80e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d812:	3402      	adds	r4, #2
 800d814:	9305      	str	r3, [sp, #20]
 800d816:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d8fc <_vfiprintf_r+0x25c>
 800d81a:	7821      	ldrb	r1, [r4, #0]
 800d81c:	2203      	movs	r2, #3
 800d81e:	4650      	mov	r0, sl
 800d820:	f7f2 fd06 	bl	8000230 <memchr>
 800d824:	b140      	cbz	r0, 800d838 <_vfiprintf_r+0x198>
 800d826:	2340      	movs	r3, #64	; 0x40
 800d828:	eba0 000a 	sub.w	r0, r0, sl
 800d82c:	fa03 f000 	lsl.w	r0, r3, r0
 800d830:	9b04      	ldr	r3, [sp, #16]
 800d832:	4303      	orrs	r3, r0
 800d834:	3401      	adds	r4, #1
 800d836:	9304      	str	r3, [sp, #16]
 800d838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d83c:	482c      	ldr	r0, [pc, #176]	; (800d8f0 <_vfiprintf_r+0x250>)
 800d83e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d842:	2206      	movs	r2, #6
 800d844:	f7f2 fcf4 	bl	8000230 <memchr>
 800d848:	2800      	cmp	r0, #0
 800d84a:	d03f      	beq.n	800d8cc <_vfiprintf_r+0x22c>
 800d84c:	4b29      	ldr	r3, [pc, #164]	; (800d8f4 <_vfiprintf_r+0x254>)
 800d84e:	bb1b      	cbnz	r3, 800d898 <_vfiprintf_r+0x1f8>
 800d850:	9b03      	ldr	r3, [sp, #12]
 800d852:	3307      	adds	r3, #7
 800d854:	f023 0307 	bic.w	r3, r3, #7
 800d858:	3308      	adds	r3, #8
 800d85a:	9303      	str	r3, [sp, #12]
 800d85c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d85e:	443b      	add	r3, r7
 800d860:	9309      	str	r3, [sp, #36]	; 0x24
 800d862:	e767      	b.n	800d734 <_vfiprintf_r+0x94>
 800d864:	fb0c 3202 	mla	r2, ip, r2, r3
 800d868:	460c      	mov	r4, r1
 800d86a:	2001      	movs	r0, #1
 800d86c:	e7a5      	b.n	800d7ba <_vfiprintf_r+0x11a>
 800d86e:	2300      	movs	r3, #0
 800d870:	3401      	adds	r4, #1
 800d872:	9305      	str	r3, [sp, #20]
 800d874:	4619      	mov	r1, r3
 800d876:	f04f 0c0a 	mov.w	ip, #10
 800d87a:	4620      	mov	r0, r4
 800d87c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d880:	3a30      	subs	r2, #48	; 0x30
 800d882:	2a09      	cmp	r2, #9
 800d884:	d903      	bls.n	800d88e <_vfiprintf_r+0x1ee>
 800d886:	2b00      	cmp	r3, #0
 800d888:	d0c5      	beq.n	800d816 <_vfiprintf_r+0x176>
 800d88a:	9105      	str	r1, [sp, #20]
 800d88c:	e7c3      	b.n	800d816 <_vfiprintf_r+0x176>
 800d88e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d892:	4604      	mov	r4, r0
 800d894:	2301      	movs	r3, #1
 800d896:	e7f0      	b.n	800d87a <_vfiprintf_r+0x1da>
 800d898:	ab03      	add	r3, sp, #12
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	462a      	mov	r2, r5
 800d89e:	4b16      	ldr	r3, [pc, #88]	; (800d8f8 <_vfiprintf_r+0x258>)
 800d8a0:	a904      	add	r1, sp, #16
 800d8a2:	4630      	mov	r0, r6
 800d8a4:	f7fc f800 	bl	80098a8 <_printf_float>
 800d8a8:	4607      	mov	r7, r0
 800d8aa:	1c78      	adds	r0, r7, #1
 800d8ac:	d1d6      	bne.n	800d85c <_vfiprintf_r+0x1bc>
 800d8ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8b0:	07d9      	lsls	r1, r3, #31
 800d8b2:	d405      	bmi.n	800d8c0 <_vfiprintf_r+0x220>
 800d8b4:	89ab      	ldrh	r3, [r5, #12]
 800d8b6:	059a      	lsls	r2, r3, #22
 800d8b8:	d402      	bmi.n	800d8c0 <_vfiprintf_r+0x220>
 800d8ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8bc:	f000 fadb 	bl	800de76 <__retarget_lock_release_recursive>
 800d8c0:	89ab      	ldrh	r3, [r5, #12]
 800d8c2:	065b      	lsls	r3, r3, #25
 800d8c4:	f53f af12 	bmi.w	800d6ec <_vfiprintf_r+0x4c>
 800d8c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8ca:	e711      	b.n	800d6f0 <_vfiprintf_r+0x50>
 800d8cc:	ab03      	add	r3, sp, #12
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	462a      	mov	r2, r5
 800d8d2:	4b09      	ldr	r3, [pc, #36]	; (800d8f8 <_vfiprintf_r+0x258>)
 800d8d4:	a904      	add	r1, sp, #16
 800d8d6:	4630      	mov	r0, r6
 800d8d8:	f7fc fa8a 	bl	8009df0 <_printf_i>
 800d8dc:	e7e4      	b.n	800d8a8 <_vfiprintf_r+0x208>
 800d8de:	bf00      	nop
 800d8e0:	0800e790 	.word	0x0800e790
 800d8e4:	0800e7b0 	.word	0x0800e7b0
 800d8e8:	0800e770 	.word	0x0800e770
 800d8ec:	0800e75c 	.word	0x0800e75c
 800d8f0:	0800e766 	.word	0x0800e766
 800d8f4:	080098a9 	.word	0x080098a9
 800d8f8:	0800d67b 	.word	0x0800d67b
 800d8fc:	0800e762 	.word	0x0800e762

0800d900 <nan>:
 800d900:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d908 <nan+0x8>
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop
 800d908:	00000000 	.word	0x00000000
 800d90c:	7ff80000 	.word	0x7ff80000

0800d910 <_sbrk_r>:
 800d910:	b538      	push	{r3, r4, r5, lr}
 800d912:	4d06      	ldr	r5, [pc, #24]	; (800d92c <_sbrk_r+0x1c>)
 800d914:	2300      	movs	r3, #0
 800d916:	4604      	mov	r4, r0
 800d918:	4608      	mov	r0, r1
 800d91a:	602b      	str	r3, [r5, #0]
 800d91c:	f7f4 fa16 	bl	8001d4c <_sbrk>
 800d920:	1c43      	adds	r3, r0, #1
 800d922:	d102      	bne.n	800d92a <_sbrk_r+0x1a>
 800d924:	682b      	ldr	r3, [r5, #0]
 800d926:	b103      	cbz	r3, 800d92a <_sbrk_r+0x1a>
 800d928:	6023      	str	r3, [r4, #0]
 800d92a:	bd38      	pop	{r3, r4, r5, pc}
 800d92c:	200004d0 	.word	0x200004d0

0800d930 <strncmp>:
 800d930:	b510      	push	{r4, lr}
 800d932:	b17a      	cbz	r2, 800d954 <strncmp+0x24>
 800d934:	4603      	mov	r3, r0
 800d936:	3901      	subs	r1, #1
 800d938:	1884      	adds	r4, r0, r2
 800d93a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d93e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d942:	4290      	cmp	r0, r2
 800d944:	d101      	bne.n	800d94a <strncmp+0x1a>
 800d946:	42a3      	cmp	r3, r4
 800d948:	d101      	bne.n	800d94e <strncmp+0x1e>
 800d94a:	1a80      	subs	r0, r0, r2
 800d94c:	bd10      	pop	{r4, pc}
 800d94e:	2800      	cmp	r0, #0
 800d950:	d1f3      	bne.n	800d93a <strncmp+0xa>
 800d952:	e7fa      	b.n	800d94a <strncmp+0x1a>
 800d954:	4610      	mov	r0, r2
 800d956:	e7f9      	b.n	800d94c <strncmp+0x1c>

0800d958 <__swbuf_r>:
 800d958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95a:	460e      	mov	r6, r1
 800d95c:	4614      	mov	r4, r2
 800d95e:	4605      	mov	r5, r0
 800d960:	b118      	cbz	r0, 800d96a <__swbuf_r+0x12>
 800d962:	6983      	ldr	r3, [r0, #24]
 800d964:	b90b      	cbnz	r3, 800d96a <__swbuf_r+0x12>
 800d966:	f000 f9e7 	bl	800dd38 <__sinit>
 800d96a:	4b21      	ldr	r3, [pc, #132]	; (800d9f0 <__swbuf_r+0x98>)
 800d96c:	429c      	cmp	r4, r3
 800d96e:	d12b      	bne.n	800d9c8 <__swbuf_r+0x70>
 800d970:	686c      	ldr	r4, [r5, #4]
 800d972:	69a3      	ldr	r3, [r4, #24]
 800d974:	60a3      	str	r3, [r4, #8]
 800d976:	89a3      	ldrh	r3, [r4, #12]
 800d978:	071a      	lsls	r2, r3, #28
 800d97a:	d52f      	bpl.n	800d9dc <__swbuf_r+0x84>
 800d97c:	6923      	ldr	r3, [r4, #16]
 800d97e:	b36b      	cbz	r3, 800d9dc <__swbuf_r+0x84>
 800d980:	6923      	ldr	r3, [r4, #16]
 800d982:	6820      	ldr	r0, [r4, #0]
 800d984:	1ac0      	subs	r0, r0, r3
 800d986:	6963      	ldr	r3, [r4, #20]
 800d988:	b2f6      	uxtb	r6, r6
 800d98a:	4283      	cmp	r3, r0
 800d98c:	4637      	mov	r7, r6
 800d98e:	dc04      	bgt.n	800d99a <__swbuf_r+0x42>
 800d990:	4621      	mov	r1, r4
 800d992:	4628      	mov	r0, r5
 800d994:	f000 f93c 	bl	800dc10 <_fflush_r>
 800d998:	bb30      	cbnz	r0, 800d9e8 <__swbuf_r+0x90>
 800d99a:	68a3      	ldr	r3, [r4, #8]
 800d99c:	3b01      	subs	r3, #1
 800d99e:	60a3      	str	r3, [r4, #8]
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	1c5a      	adds	r2, r3, #1
 800d9a4:	6022      	str	r2, [r4, #0]
 800d9a6:	701e      	strb	r6, [r3, #0]
 800d9a8:	6963      	ldr	r3, [r4, #20]
 800d9aa:	3001      	adds	r0, #1
 800d9ac:	4283      	cmp	r3, r0
 800d9ae:	d004      	beq.n	800d9ba <__swbuf_r+0x62>
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	07db      	lsls	r3, r3, #31
 800d9b4:	d506      	bpl.n	800d9c4 <__swbuf_r+0x6c>
 800d9b6:	2e0a      	cmp	r6, #10
 800d9b8:	d104      	bne.n	800d9c4 <__swbuf_r+0x6c>
 800d9ba:	4621      	mov	r1, r4
 800d9bc:	4628      	mov	r0, r5
 800d9be:	f000 f927 	bl	800dc10 <_fflush_r>
 800d9c2:	b988      	cbnz	r0, 800d9e8 <__swbuf_r+0x90>
 800d9c4:	4638      	mov	r0, r7
 800d9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9c8:	4b0a      	ldr	r3, [pc, #40]	; (800d9f4 <__swbuf_r+0x9c>)
 800d9ca:	429c      	cmp	r4, r3
 800d9cc:	d101      	bne.n	800d9d2 <__swbuf_r+0x7a>
 800d9ce:	68ac      	ldr	r4, [r5, #8]
 800d9d0:	e7cf      	b.n	800d972 <__swbuf_r+0x1a>
 800d9d2:	4b09      	ldr	r3, [pc, #36]	; (800d9f8 <__swbuf_r+0xa0>)
 800d9d4:	429c      	cmp	r4, r3
 800d9d6:	bf08      	it	eq
 800d9d8:	68ec      	ldreq	r4, [r5, #12]
 800d9da:	e7ca      	b.n	800d972 <__swbuf_r+0x1a>
 800d9dc:	4621      	mov	r1, r4
 800d9de:	4628      	mov	r0, r5
 800d9e0:	f000 f81a 	bl	800da18 <__swsetup_r>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	d0cb      	beq.n	800d980 <__swbuf_r+0x28>
 800d9e8:	f04f 37ff 	mov.w	r7, #4294967295
 800d9ec:	e7ea      	b.n	800d9c4 <__swbuf_r+0x6c>
 800d9ee:	bf00      	nop
 800d9f0:	0800e790 	.word	0x0800e790
 800d9f4:	0800e7b0 	.word	0x0800e7b0
 800d9f8:	0800e770 	.word	0x0800e770

0800d9fc <__ascii_wctomb>:
 800d9fc:	b149      	cbz	r1, 800da12 <__ascii_wctomb+0x16>
 800d9fe:	2aff      	cmp	r2, #255	; 0xff
 800da00:	bf85      	ittet	hi
 800da02:	238a      	movhi	r3, #138	; 0x8a
 800da04:	6003      	strhi	r3, [r0, #0]
 800da06:	700a      	strbls	r2, [r1, #0]
 800da08:	f04f 30ff 	movhi.w	r0, #4294967295
 800da0c:	bf98      	it	ls
 800da0e:	2001      	movls	r0, #1
 800da10:	4770      	bx	lr
 800da12:	4608      	mov	r0, r1
 800da14:	4770      	bx	lr
	...

0800da18 <__swsetup_r>:
 800da18:	4b32      	ldr	r3, [pc, #200]	; (800dae4 <__swsetup_r+0xcc>)
 800da1a:	b570      	push	{r4, r5, r6, lr}
 800da1c:	681d      	ldr	r5, [r3, #0]
 800da1e:	4606      	mov	r6, r0
 800da20:	460c      	mov	r4, r1
 800da22:	b125      	cbz	r5, 800da2e <__swsetup_r+0x16>
 800da24:	69ab      	ldr	r3, [r5, #24]
 800da26:	b913      	cbnz	r3, 800da2e <__swsetup_r+0x16>
 800da28:	4628      	mov	r0, r5
 800da2a:	f000 f985 	bl	800dd38 <__sinit>
 800da2e:	4b2e      	ldr	r3, [pc, #184]	; (800dae8 <__swsetup_r+0xd0>)
 800da30:	429c      	cmp	r4, r3
 800da32:	d10f      	bne.n	800da54 <__swsetup_r+0x3c>
 800da34:	686c      	ldr	r4, [r5, #4]
 800da36:	89a3      	ldrh	r3, [r4, #12]
 800da38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da3c:	0719      	lsls	r1, r3, #28
 800da3e:	d42c      	bmi.n	800da9a <__swsetup_r+0x82>
 800da40:	06dd      	lsls	r5, r3, #27
 800da42:	d411      	bmi.n	800da68 <__swsetup_r+0x50>
 800da44:	2309      	movs	r3, #9
 800da46:	6033      	str	r3, [r6, #0]
 800da48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800da4c:	81a3      	strh	r3, [r4, #12]
 800da4e:	f04f 30ff 	mov.w	r0, #4294967295
 800da52:	e03e      	b.n	800dad2 <__swsetup_r+0xba>
 800da54:	4b25      	ldr	r3, [pc, #148]	; (800daec <__swsetup_r+0xd4>)
 800da56:	429c      	cmp	r4, r3
 800da58:	d101      	bne.n	800da5e <__swsetup_r+0x46>
 800da5a:	68ac      	ldr	r4, [r5, #8]
 800da5c:	e7eb      	b.n	800da36 <__swsetup_r+0x1e>
 800da5e:	4b24      	ldr	r3, [pc, #144]	; (800daf0 <__swsetup_r+0xd8>)
 800da60:	429c      	cmp	r4, r3
 800da62:	bf08      	it	eq
 800da64:	68ec      	ldreq	r4, [r5, #12]
 800da66:	e7e6      	b.n	800da36 <__swsetup_r+0x1e>
 800da68:	0758      	lsls	r0, r3, #29
 800da6a:	d512      	bpl.n	800da92 <__swsetup_r+0x7a>
 800da6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800da6e:	b141      	cbz	r1, 800da82 <__swsetup_r+0x6a>
 800da70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800da74:	4299      	cmp	r1, r3
 800da76:	d002      	beq.n	800da7e <__swsetup_r+0x66>
 800da78:	4630      	mov	r0, r6
 800da7a:	f7ff fbab 	bl	800d1d4 <_free_r>
 800da7e:	2300      	movs	r3, #0
 800da80:	6363      	str	r3, [r4, #52]	; 0x34
 800da82:	89a3      	ldrh	r3, [r4, #12]
 800da84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800da88:	81a3      	strh	r3, [r4, #12]
 800da8a:	2300      	movs	r3, #0
 800da8c:	6063      	str	r3, [r4, #4]
 800da8e:	6923      	ldr	r3, [r4, #16]
 800da90:	6023      	str	r3, [r4, #0]
 800da92:	89a3      	ldrh	r3, [r4, #12]
 800da94:	f043 0308 	orr.w	r3, r3, #8
 800da98:	81a3      	strh	r3, [r4, #12]
 800da9a:	6923      	ldr	r3, [r4, #16]
 800da9c:	b94b      	cbnz	r3, 800dab2 <__swsetup_r+0x9a>
 800da9e:	89a3      	ldrh	r3, [r4, #12]
 800daa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800daa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800daa8:	d003      	beq.n	800dab2 <__swsetup_r+0x9a>
 800daaa:	4621      	mov	r1, r4
 800daac:	4630      	mov	r0, r6
 800daae:	f000 fa09 	bl	800dec4 <__smakebuf_r>
 800dab2:	89a0      	ldrh	r0, [r4, #12]
 800dab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dab8:	f010 0301 	ands.w	r3, r0, #1
 800dabc:	d00a      	beq.n	800dad4 <__swsetup_r+0xbc>
 800dabe:	2300      	movs	r3, #0
 800dac0:	60a3      	str	r3, [r4, #8]
 800dac2:	6963      	ldr	r3, [r4, #20]
 800dac4:	425b      	negs	r3, r3
 800dac6:	61a3      	str	r3, [r4, #24]
 800dac8:	6923      	ldr	r3, [r4, #16]
 800daca:	b943      	cbnz	r3, 800dade <__swsetup_r+0xc6>
 800dacc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dad0:	d1ba      	bne.n	800da48 <__swsetup_r+0x30>
 800dad2:	bd70      	pop	{r4, r5, r6, pc}
 800dad4:	0781      	lsls	r1, r0, #30
 800dad6:	bf58      	it	pl
 800dad8:	6963      	ldrpl	r3, [r4, #20]
 800dada:	60a3      	str	r3, [r4, #8]
 800dadc:	e7f4      	b.n	800dac8 <__swsetup_r+0xb0>
 800dade:	2000      	movs	r0, #0
 800dae0:	e7f7      	b.n	800dad2 <__swsetup_r+0xba>
 800dae2:	bf00      	nop
 800dae4:	2000001c 	.word	0x2000001c
 800dae8:	0800e790 	.word	0x0800e790
 800daec:	0800e7b0 	.word	0x0800e7b0
 800daf0:	0800e770 	.word	0x0800e770

0800daf4 <abort>:
 800daf4:	b508      	push	{r3, lr}
 800daf6:	2006      	movs	r0, #6
 800daf8:	f000 faa2 	bl	800e040 <raise>
 800dafc:	2001      	movs	r0, #1
 800dafe:	f7f4 f8ad 	bl	8001c5c <_exit>
	...

0800db04 <__sflush_r>:
 800db04:	898a      	ldrh	r2, [r1, #12]
 800db06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db0a:	4605      	mov	r5, r0
 800db0c:	0710      	lsls	r0, r2, #28
 800db0e:	460c      	mov	r4, r1
 800db10:	d458      	bmi.n	800dbc4 <__sflush_r+0xc0>
 800db12:	684b      	ldr	r3, [r1, #4]
 800db14:	2b00      	cmp	r3, #0
 800db16:	dc05      	bgt.n	800db24 <__sflush_r+0x20>
 800db18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	dc02      	bgt.n	800db24 <__sflush_r+0x20>
 800db1e:	2000      	movs	r0, #0
 800db20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db26:	2e00      	cmp	r6, #0
 800db28:	d0f9      	beq.n	800db1e <__sflush_r+0x1a>
 800db2a:	2300      	movs	r3, #0
 800db2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800db30:	682f      	ldr	r7, [r5, #0]
 800db32:	602b      	str	r3, [r5, #0]
 800db34:	d032      	beq.n	800db9c <__sflush_r+0x98>
 800db36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db38:	89a3      	ldrh	r3, [r4, #12]
 800db3a:	075a      	lsls	r2, r3, #29
 800db3c:	d505      	bpl.n	800db4a <__sflush_r+0x46>
 800db3e:	6863      	ldr	r3, [r4, #4]
 800db40:	1ac0      	subs	r0, r0, r3
 800db42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db44:	b10b      	cbz	r3, 800db4a <__sflush_r+0x46>
 800db46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db48:	1ac0      	subs	r0, r0, r3
 800db4a:	2300      	movs	r3, #0
 800db4c:	4602      	mov	r2, r0
 800db4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db50:	6a21      	ldr	r1, [r4, #32]
 800db52:	4628      	mov	r0, r5
 800db54:	47b0      	blx	r6
 800db56:	1c43      	adds	r3, r0, #1
 800db58:	89a3      	ldrh	r3, [r4, #12]
 800db5a:	d106      	bne.n	800db6a <__sflush_r+0x66>
 800db5c:	6829      	ldr	r1, [r5, #0]
 800db5e:	291d      	cmp	r1, #29
 800db60:	d82c      	bhi.n	800dbbc <__sflush_r+0xb8>
 800db62:	4a2a      	ldr	r2, [pc, #168]	; (800dc0c <__sflush_r+0x108>)
 800db64:	40ca      	lsrs	r2, r1
 800db66:	07d6      	lsls	r6, r2, #31
 800db68:	d528      	bpl.n	800dbbc <__sflush_r+0xb8>
 800db6a:	2200      	movs	r2, #0
 800db6c:	6062      	str	r2, [r4, #4]
 800db6e:	04d9      	lsls	r1, r3, #19
 800db70:	6922      	ldr	r2, [r4, #16]
 800db72:	6022      	str	r2, [r4, #0]
 800db74:	d504      	bpl.n	800db80 <__sflush_r+0x7c>
 800db76:	1c42      	adds	r2, r0, #1
 800db78:	d101      	bne.n	800db7e <__sflush_r+0x7a>
 800db7a:	682b      	ldr	r3, [r5, #0]
 800db7c:	b903      	cbnz	r3, 800db80 <__sflush_r+0x7c>
 800db7e:	6560      	str	r0, [r4, #84]	; 0x54
 800db80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db82:	602f      	str	r7, [r5, #0]
 800db84:	2900      	cmp	r1, #0
 800db86:	d0ca      	beq.n	800db1e <__sflush_r+0x1a>
 800db88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db8c:	4299      	cmp	r1, r3
 800db8e:	d002      	beq.n	800db96 <__sflush_r+0x92>
 800db90:	4628      	mov	r0, r5
 800db92:	f7ff fb1f 	bl	800d1d4 <_free_r>
 800db96:	2000      	movs	r0, #0
 800db98:	6360      	str	r0, [r4, #52]	; 0x34
 800db9a:	e7c1      	b.n	800db20 <__sflush_r+0x1c>
 800db9c:	6a21      	ldr	r1, [r4, #32]
 800db9e:	2301      	movs	r3, #1
 800dba0:	4628      	mov	r0, r5
 800dba2:	47b0      	blx	r6
 800dba4:	1c41      	adds	r1, r0, #1
 800dba6:	d1c7      	bne.n	800db38 <__sflush_r+0x34>
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d0c4      	beq.n	800db38 <__sflush_r+0x34>
 800dbae:	2b1d      	cmp	r3, #29
 800dbb0:	d001      	beq.n	800dbb6 <__sflush_r+0xb2>
 800dbb2:	2b16      	cmp	r3, #22
 800dbb4:	d101      	bne.n	800dbba <__sflush_r+0xb6>
 800dbb6:	602f      	str	r7, [r5, #0]
 800dbb8:	e7b1      	b.n	800db1e <__sflush_r+0x1a>
 800dbba:	89a3      	ldrh	r3, [r4, #12]
 800dbbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbc0:	81a3      	strh	r3, [r4, #12]
 800dbc2:	e7ad      	b.n	800db20 <__sflush_r+0x1c>
 800dbc4:	690f      	ldr	r7, [r1, #16]
 800dbc6:	2f00      	cmp	r7, #0
 800dbc8:	d0a9      	beq.n	800db1e <__sflush_r+0x1a>
 800dbca:	0793      	lsls	r3, r2, #30
 800dbcc:	680e      	ldr	r6, [r1, #0]
 800dbce:	bf08      	it	eq
 800dbd0:	694b      	ldreq	r3, [r1, #20]
 800dbd2:	600f      	str	r7, [r1, #0]
 800dbd4:	bf18      	it	ne
 800dbd6:	2300      	movne	r3, #0
 800dbd8:	eba6 0807 	sub.w	r8, r6, r7
 800dbdc:	608b      	str	r3, [r1, #8]
 800dbde:	f1b8 0f00 	cmp.w	r8, #0
 800dbe2:	dd9c      	ble.n	800db1e <__sflush_r+0x1a>
 800dbe4:	6a21      	ldr	r1, [r4, #32]
 800dbe6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dbe8:	4643      	mov	r3, r8
 800dbea:	463a      	mov	r2, r7
 800dbec:	4628      	mov	r0, r5
 800dbee:	47b0      	blx	r6
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	dc06      	bgt.n	800dc02 <__sflush_r+0xfe>
 800dbf4:	89a3      	ldrh	r3, [r4, #12]
 800dbf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbfa:	81a3      	strh	r3, [r4, #12]
 800dbfc:	f04f 30ff 	mov.w	r0, #4294967295
 800dc00:	e78e      	b.n	800db20 <__sflush_r+0x1c>
 800dc02:	4407      	add	r7, r0
 800dc04:	eba8 0800 	sub.w	r8, r8, r0
 800dc08:	e7e9      	b.n	800dbde <__sflush_r+0xda>
 800dc0a:	bf00      	nop
 800dc0c:	20400001 	.word	0x20400001

0800dc10 <_fflush_r>:
 800dc10:	b538      	push	{r3, r4, r5, lr}
 800dc12:	690b      	ldr	r3, [r1, #16]
 800dc14:	4605      	mov	r5, r0
 800dc16:	460c      	mov	r4, r1
 800dc18:	b913      	cbnz	r3, 800dc20 <_fflush_r+0x10>
 800dc1a:	2500      	movs	r5, #0
 800dc1c:	4628      	mov	r0, r5
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	b118      	cbz	r0, 800dc2a <_fflush_r+0x1a>
 800dc22:	6983      	ldr	r3, [r0, #24]
 800dc24:	b90b      	cbnz	r3, 800dc2a <_fflush_r+0x1a>
 800dc26:	f000 f887 	bl	800dd38 <__sinit>
 800dc2a:	4b14      	ldr	r3, [pc, #80]	; (800dc7c <_fflush_r+0x6c>)
 800dc2c:	429c      	cmp	r4, r3
 800dc2e:	d11b      	bne.n	800dc68 <_fflush_r+0x58>
 800dc30:	686c      	ldr	r4, [r5, #4]
 800dc32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d0ef      	beq.n	800dc1a <_fflush_r+0xa>
 800dc3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc3c:	07d0      	lsls	r0, r2, #31
 800dc3e:	d404      	bmi.n	800dc4a <_fflush_r+0x3a>
 800dc40:	0599      	lsls	r1, r3, #22
 800dc42:	d402      	bmi.n	800dc4a <_fflush_r+0x3a>
 800dc44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc46:	f000 f915 	bl	800de74 <__retarget_lock_acquire_recursive>
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	4621      	mov	r1, r4
 800dc4e:	f7ff ff59 	bl	800db04 <__sflush_r>
 800dc52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc54:	07da      	lsls	r2, r3, #31
 800dc56:	4605      	mov	r5, r0
 800dc58:	d4e0      	bmi.n	800dc1c <_fflush_r+0xc>
 800dc5a:	89a3      	ldrh	r3, [r4, #12]
 800dc5c:	059b      	lsls	r3, r3, #22
 800dc5e:	d4dd      	bmi.n	800dc1c <_fflush_r+0xc>
 800dc60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc62:	f000 f908 	bl	800de76 <__retarget_lock_release_recursive>
 800dc66:	e7d9      	b.n	800dc1c <_fflush_r+0xc>
 800dc68:	4b05      	ldr	r3, [pc, #20]	; (800dc80 <_fflush_r+0x70>)
 800dc6a:	429c      	cmp	r4, r3
 800dc6c:	d101      	bne.n	800dc72 <_fflush_r+0x62>
 800dc6e:	68ac      	ldr	r4, [r5, #8]
 800dc70:	e7df      	b.n	800dc32 <_fflush_r+0x22>
 800dc72:	4b04      	ldr	r3, [pc, #16]	; (800dc84 <_fflush_r+0x74>)
 800dc74:	429c      	cmp	r4, r3
 800dc76:	bf08      	it	eq
 800dc78:	68ec      	ldreq	r4, [r5, #12]
 800dc7a:	e7da      	b.n	800dc32 <_fflush_r+0x22>
 800dc7c:	0800e790 	.word	0x0800e790
 800dc80:	0800e7b0 	.word	0x0800e7b0
 800dc84:	0800e770 	.word	0x0800e770

0800dc88 <std>:
 800dc88:	2300      	movs	r3, #0
 800dc8a:	b510      	push	{r4, lr}
 800dc8c:	4604      	mov	r4, r0
 800dc8e:	e9c0 3300 	strd	r3, r3, [r0]
 800dc92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc96:	6083      	str	r3, [r0, #8]
 800dc98:	8181      	strh	r1, [r0, #12]
 800dc9a:	6643      	str	r3, [r0, #100]	; 0x64
 800dc9c:	81c2      	strh	r2, [r0, #14]
 800dc9e:	6183      	str	r3, [r0, #24]
 800dca0:	4619      	mov	r1, r3
 800dca2:	2208      	movs	r2, #8
 800dca4:	305c      	adds	r0, #92	; 0x5c
 800dca6:	f7fb fd57 	bl	8009758 <memset>
 800dcaa:	4b05      	ldr	r3, [pc, #20]	; (800dcc0 <std+0x38>)
 800dcac:	6263      	str	r3, [r4, #36]	; 0x24
 800dcae:	4b05      	ldr	r3, [pc, #20]	; (800dcc4 <std+0x3c>)
 800dcb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dcb2:	4b05      	ldr	r3, [pc, #20]	; (800dcc8 <std+0x40>)
 800dcb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dcb6:	4b05      	ldr	r3, [pc, #20]	; (800dccc <std+0x44>)
 800dcb8:	6224      	str	r4, [r4, #32]
 800dcba:	6323      	str	r3, [r4, #48]	; 0x30
 800dcbc:	bd10      	pop	{r4, pc}
 800dcbe:	bf00      	nop
 800dcc0:	0800e079 	.word	0x0800e079
 800dcc4:	0800e09b 	.word	0x0800e09b
 800dcc8:	0800e0d3 	.word	0x0800e0d3
 800dccc:	0800e0f7 	.word	0x0800e0f7

0800dcd0 <_cleanup_r>:
 800dcd0:	4901      	ldr	r1, [pc, #4]	; (800dcd8 <_cleanup_r+0x8>)
 800dcd2:	f000 b8af 	b.w	800de34 <_fwalk_reent>
 800dcd6:	bf00      	nop
 800dcd8:	0800dc11 	.word	0x0800dc11

0800dcdc <__sfmoreglue>:
 800dcdc:	b570      	push	{r4, r5, r6, lr}
 800dcde:	2268      	movs	r2, #104	; 0x68
 800dce0:	1e4d      	subs	r5, r1, #1
 800dce2:	4355      	muls	r5, r2
 800dce4:	460e      	mov	r6, r1
 800dce6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dcea:	f7ff fadf 	bl	800d2ac <_malloc_r>
 800dcee:	4604      	mov	r4, r0
 800dcf0:	b140      	cbz	r0, 800dd04 <__sfmoreglue+0x28>
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	e9c0 1600 	strd	r1, r6, [r0]
 800dcf8:	300c      	adds	r0, #12
 800dcfa:	60a0      	str	r0, [r4, #8]
 800dcfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dd00:	f7fb fd2a 	bl	8009758 <memset>
 800dd04:	4620      	mov	r0, r4
 800dd06:	bd70      	pop	{r4, r5, r6, pc}

0800dd08 <__sfp_lock_acquire>:
 800dd08:	4801      	ldr	r0, [pc, #4]	; (800dd10 <__sfp_lock_acquire+0x8>)
 800dd0a:	f000 b8b3 	b.w	800de74 <__retarget_lock_acquire_recursive>
 800dd0e:	bf00      	nop
 800dd10:	200004cd 	.word	0x200004cd

0800dd14 <__sfp_lock_release>:
 800dd14:	4801      	ldr	r0, [pc, #4]	; (800dd1c <__sfp_lock_release+0x8>)
 800dd16:	f000 b8ae 	b.w	800de76 <__retarget_lock_release_recursive>
 800dd1a:	bf00      	nop
 800dd1c:	200004cd 	.word	0x200004cd

0800dd20 <__sinit_lock_acquire>:
 800dd20:	4801      	ldr	r0, [pc, #4]	; (800dd28 <__sinit_lock_acquire+0x8>)
 800dd22:	f000 b8a7 	b.w	800de74 <__retarget_lock_acquire_recursive>
 800dd26:	bf00      	nop
 800dd28:	200004ce 	.word	0x200004ce

0800dd2c <__sinit_lock_release>:
 800dd2c:	4801      	ldr	r0, [pc, #4]	; (800dd34 <__sinit_lock_release+0x8>)
 800dd2e:	f000 b8a2 	b.w	800de76 <__retarget_lock_release_recursive>
 800dd32:	bf00      	nop
 800dd34:	200004ce 	.word	0x200004ce

0800dd38 <__sinit>:
 800dd38:	b510      	push	{r4, lr}
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	f7ff fff0 	bl	800dd20 <__sinit_lock_acquire>
 800dd40:	69a3      	ldr	r3, [r4, #24]
 800dd42:	b11b      	cbz	r3, 800dd4c <__sinit+0x14>
 800dd44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd48:	f7ff bff0 	b.w	800dd2c <__sinit_lock_release>
 800dd4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dd50:	6523      	str	r3, [r4, #80]	; 0x50
 800dd52:	4b13      	ldr	r3, [pc, #76]	; (800dda0 <__sinit+0x68>)
 800dd54:	4a13      	ldr	r2, [pc, #76]	; (800dda4 <__sinit+0x6c>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	62a2      	str	r2, [r4, #40]	; 0x28
 800dd5a:	42a3      	cmp	r3, r4
 800dd5c:	bf04      	itt	eq
 800dd5e:	2301      	moveq	r3, #1
 800dd60:	61a3      	streq	r3, [r4, #24]
 800dd62:	4620      	mov	r0, r4
 800dd64:	f000 f820 	bl	800dda8 <__sfp>
 800dd68:	6060      	str	r0, [r4, #4]
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	f000 f81c 	bl	800dda8 <__sfp>
 800dd70:	60a0      	str	r0, [r4, #8]
 800dd72:	4620      	mov	r0, r4
 800dd74:	f000 f818 	bl	800dda8 <__sfp>
 800dd78:	2200      	movs	r2, #0
 800dd7a:	60e0      	str	r0, [r4, #12]
 800dd7c:	2104      	movs	r1, #4
 800dd7e:	6860      	ldr	r0, [r4, #4]
 800dd80:	f7ff ff82 	bl	800dc88 <std>
 800dd84:	68a0      	ldr	r0, [r4, #8]
 800dd86:	2201      	movs	r2, #1
 800dd88:	2109      	movs	r1, #9
 800dd8a:	f7ff ff7d 	bl	800dc88 <std>
 800dd8e:	68e0      	ldr	r0, [r4, #12]
 800dd90:	2202      	movs	r2, #2
 800dd92:	2112      	movs	r1, #18
 800dd94:	f7ff ff78 	bl	800dc88 <std>
 800dd98:	2301      	movs	r3, #1
 800dd9a:	61a3      	str	r3, [r4, #24]
 800dd9c:	e7d2      	b.n	800dd44 <__sinit+0xc>
 800dd9e:	bf00      	nop
 800dda0:	0800e2d0 	.word	0x0800e2d0
 800dda4:	0800dcd1 	.word	0x0800dcd1

0800dda8 <__sfp>:
 800dda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddaa:	4607      	mov	r7, r0
 800ddac:	f7ff ffac 	bl	800dd08 <__sfp_lock_acquire>
 800ddb0:	4b1e      	ldr	r3, [pc, #120]	; (800de2c <__sfp+0x84>)
 800ddb2:	681e      	ldr	r6, [r3, #0]
 800ddb4:	69b3      	ldr	r3, [r6, #24]
 800ddb6:	b913      	cbnz	r3, 800ddbe <__sfp+0x16>
 800ddb8:	4630      	mov	r0, r6
 800ddba:	f7ff ffbd 	bl	800dd38 <__sinit>
 800ddbe:	3648      	adds	r6, #72	; 0x48
 800ddc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ddc4:	3b01      	subs	r3, #1
 800ddc6:	d503      	bpl.n	800ddd0 <__sfp+0x28>
 800ddc8:	6833      	ldr	r3, [r6, #0]
 800ddca:	b30b      	cbz	r3, 800de10 <__sfp+0x68>
 800ddcc:	6836      	ldr	r6, [r6, #0]
 800ddce:	e7f7      	b.n	800ddc0 <__sfp+0x18>
 800ddd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ddd4:	b9d5      	cbnz	r5, 800de0c <__sfp+0x64>
 800ddd6:	4b16      	ldr	r3, [pc, #88]	; (800de30 <__sfp+0x88>)
 800ddd8:	60e3      	str	r3, [r4, #12]
 800ddda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ddde:	6665      	str	r5, [r4, #100]	; 0x64
 800dde0:	f000 f847 	bl	800de72 <__retarget_lock_init_recursive>
 800dde4:	f7ff ff96 	bl	800dd14 <__sfp_lock_release>
 800dde8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ddec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ddf0:	6025      	str	r5, [r4, #0]
 800ddf2:	61a5      	str	r5, [r4, #24]
 800ddf4:	2208      	movs	r2, #8
 800ddf6:	4629      	mov	r1, r5
 800ddf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ddfc:	f7fb fcac 	bl	8009758 <memset>
 800de00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800de04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800de08:	4620      	mov	r0, r4
 800de0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de0c:	3468      	adds	r4, #104	; 0x68
 800de0e:	e7d9      	b.n	800ddc4 <__sfp+0x1c>
 800de10:	2104      	movs	r1, #4
 800de12:	4638      	mov	r0, r7
 800de14:	f7ff ff62 	bl	800dcdc <__sfmoreglue>
 800de18:	4604      	mov	r4, r0
 800de1a:	6030      	str	r0, [r6, #0]
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d1d5      	bne.n	800ddcc <__sfp+0x24>
 800de20:	f7ff ff78 	bl	800dd14 <__sfp_lock_release>
 800de24:	230c      	movs	r3, #12
 800de26:	603b      	str	r3, [r7, #0]
 800de28:	e7ee      	b.n	800de08 <__sfp+0x60>
 800de2a:	bf00      	nop
 800de2c:	0800e2d0 	.word	0x0800e2d0
 800de30:	ffff0001 	.word	0xffff0001

0800de34 <_fwalk_reent>:
 800de34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de38:	4606      	mov	r6, r0
 800de3a:	4688      	mov	r8, r1
 800de3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800de40:	2700      	movs	r7, #0
 800de42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de46:	f1b9 0901 	subs.w	r9, r9, #1
 800de4a:	d505      	bpl.n	800de58 <_fwalk_reent+0x24>
 800de4c:	6824      	ldr	r4, [r4, #0]
 800de4e:	2c00      	cmp	r4, #0
 800de50:	d1f7      	bne.n	800de42 <_fwalk_reent+0xe>
 800de52:	4638      	mov	r0, r7
 800de54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de58:	89ab      	ldrh	r3, [r5, #12]
 800de5a:	2b01      	cmp	r3, #1
 800de5c:	d907      	bls.n	800de6e <_fwalk_reent+0x3a>
 800de5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de62:	3301      	adds	r3, #1
 800de64:	d003      	beq.n	800de6e <_fwalk_reent+0x3a>
 800de66:	4629      	mov	r1, r5
 800de68:	4630      	mov	r0, r6
 800de6a:	47c0      	blx	r8
 800de6c:	4307      	orrs	r7, r0
 800de6e:	3568      	adds	r5, #104	; 0x68
 800de70:	e7e9      	b.n	800de46 <_fwalk_reent+0x12>

0800de72 <__retarget_lock_init_recursive>:
 800de72:	4770      	bx	lr

0800de74 <__retarget_lock_acquire_recursive>:
 800de74:	4770      	bx	lr

0800de76 <__retarget_lock_release_recursive>:
 800de76:	4770      	bx	lr

0800de78 <__swhatbuf_r>:
 800de78:	b570      	push	{r4, r5, r6, lr}
 800de7a:	460e      	mov	r6, r1
 800de7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de80:	2900      	cmp	r1, #0
 800de82:	b096      	sub	sp, #88	; 0x58
 800de84:	4614      	mov	r4, r2
 800de86:	461d      	mov	r5, r3
 800de88:	da08      	bge.n	800de9c <__swhatbuf_r+0x24>
 800de8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800de8e:	2200      	movs	r2, #0
 800de90:	602a      	str	r2, [r5, #0]
 800de92:	061a      	lsls	r2, r3, #24
 800de94:	d410      	bmi.n	800deb8 <__swhatbuf_r+0x40>
 800de96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de9a:	e00e      	b.n	800deba <__swhatbuf_r+0x42>
 800de9c:	466a      	mov	r2, sp
 800de9e:	f000 f951 	bl	800e144 <_fstat_r>
 800dea2:	2800      	cmp	r0, #0
 800dea4:	dbf1      	blt.n	800de8a <__swhatbuf_r+0x12>
 800dea6:	9a01      	ldr	r2, [sp, #4]
 800dea8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800deac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800deb0:	425a      	negs	r2, r3
 800deb2:	415a      	adcs	r2, r3
 800deb4:	602a      	str	r2, [r5, #0]
 800deb6:	e7ee      	b.n	800de96 <__swhatbuf_r+0x1e>
 800deb8:	2340      	movs	r3, #64	; 0x40
 800deba:	2000      	movs	r0, #0
 800debc:	6023      	str	r3, [r4, #0]
 800debe:	b016      	add	sp, #88	; 0x58
 800dec0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dec4 <__smakebuf_r>:
 800dec4:	898b      	ldrh	r3, [r1, #12]
 800dec6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dec8:	079d      	lsls	r5, r3, #30
 800deca:	4606      	mov	r6, r0
 800decc:	460c      	mov	r4, r1
 800dece:	d507      	bpl.n	800dee0 <__smakebuf_r+0x1c>
 800ded0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ded4:	6023      	str	r3, [r4, #0]
 800ded6:	6123      	str	r3, [r4, #16]
 800ded8:	2301      	movs	r3, #1
 800deda:	6163      	str	r3, [r4, #20]
 800dedc:	b002      	add	sp, #8
 800dede:	bd70      	pop	{r4, r5, r6, pc}
 800dee0:	ab01      	add	r3, sp, #4
 800dee2:	466a      	mov	r2, sp
 800dee4:	f7ff ffc8 	bl	800de78 <__swhatbuf_r>
 800dee8:	9900      	ldr	r1, [sp, #0]
 800deea:	4605      	mov	r5, r0
 800deec:	4630      	mov	r0, r6
 800deee:	f7ff f9dd 	bl	800d2ac <_malloc_r>
 800def2:	b948      	cbnz	r0, 800df08 <__smakebuf_r+0x44>
 800def4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800def8:	059a      	lsls	r2, r3, #22
 800defa:	d4ef      	bmi.n	800dedc <__smakebuf_r+0x18>
 800defc:	f023 0303 	bic.w	r3, r3, #3
 800df00:	f043 0302 	orr.w	r3, r3, #2
 800df04:	81a3      	strh	r3, [r4, #12]
 800df06:	e7e3      	b.n	800ded0 <__smakebuf_r+0xc>
 800df08:	4b0d      	ldr	r3, [pc, #52]	; (800df40 <__smakebuf_r+0x7c>)
 800df0a:	62b3      	str	r3, [r6, #40]	; 0x28
 800df0c:	89a3      	ldrh	r3, [r4, #12]
 800df0e:	6020      	str	r0, [r4, #0]
 800df10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df14:	81a3      	strh	r3, [r4, #12]
 800df16:	9b00      	ldr	r3, [sp, #0]
 800df18:	6163      	str	r3, [r4, #20]
 800df1a:	9b01      	ldr	r3, [sp, #4]
 800df1c:	6120      	str	r0, [r4, #16]
 800df1e:	b15b      	cbz	r3, 800df38 <__smakebuf_r+0x74>
 800df20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df24:	4630      	mov	r0, r6
 800df26:	f000 f91f 	bl	800e168 <_isatty_r>
 800df2a:	b128      	cbz	r0, 800df38 <__smakebuf_r+0x74>
 800df2c:	89a3      	ldrh	r3, [r4, #12]
 800df2e:	f023 0303 	bic.w	r3, r3, #3
 800df32:	f043 0301 	orr.w	r3, r3, #1
 800df36:	81a3      	strh	r3, [r4, #12]
 800df38:	89a0      	ldrh	r0, [r4, #12]
 800df3a:	4305      	orrs	r5, r0
 800df3c:	81a5      	strh	r5, [r4, #12]
 800df3e:	e7cd      	b.n	800dedc <__smakebuf_r+0x18>
 800df40:	0800dcd1 	.word	0x0800dcd1

0800df44 <memmove>:
 800df44:	4288      	cmp	r0, r1
 800df46:	b510      	push	{r4, lr}
 800df48:	eb01 0402 	add.w	r4, r1, r2
 800df4c:	d902      	bls.n	800df54 <memmove+0x10>
 800df4e:	4284      	cmp	r4, r0
 800df50:	4623      	mov	r3, r4
 800df52:	d807      	bhi.n	800df64 <memmove+0x20>
 800df54:	1e43      	subs	r3, r0, #1
 800df56:	42a1      	cmp	r1, r4
 800df58:	d008      	beq.n	800df6c <memmove+0x28>
 800df5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df62:	e7f8      	b.n	800df56 <memmove+0x12>
 800df64:	4402      	add	r2, r0
 800df66:	4601      	mov	r1, r0
 800df68:	428a      	cmp	r2, r1
 800df6a:	d100      	bne.n	800df6e <memmove+0x2a>
 800df6c:	bd10      	pop	{r4, pc}
 800df6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df76:	e7f7      	b.n	800df68 <memmove+0x24>

0800df78 <__malloc_lock>:
 800df78:	4801      	ldr	r0, [pc, #4]	; (800df80 <__malloc_lock+0x8>)
 800df7a:	f7ff bf7b 	b.w	800de74 <__retarget_lock_acquire_recursive>
 800df7e:	bf00      	nop
 800df80:	200004cc 	.word	0x200004cc

0800df84 <__malloc_unlock>:
 800df84:	4801      	ldr	r0, [pc, #4]	; (800df8c <__malloc_unlock+0x8>)
 800df86:	f7ff bf76 	b.w	800de76 <__retarget_lock_release_recursive>
 800df8a:	bf00      	nop
 800df8c:	200004cc 	.word	0x200004cc

0800df90 <_realloc_r>:
 800df90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df94:	4680      	mov	r8, r0
 800df96:	4614      	mov	r4, r2
 800df98:	460e      	mov	r6, r1
 800df9a:	b921      	cbnz	r1, 800dfa6 <_realloc_r+0x16>
 800df9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfa0:	4611      	mov	r1, r2
 800dfa2:	f7ff b983 	b.w	800d2ac <_malloc_r>
 800dfa6:	b92a      	cbnz	r2, 800dfb4 <_realloc_r+0x24>
 800dfa8:	f7ff f914 	bl	800d1d4 <_free_r>
 800dfac:	4625      	mov	r5, r4
 800dfae:	4628      	mov	r0, r5
 800dfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb4:	f000 f8fa 	bl	800e1ac <_malloc_usable_size_r>
 800dfb8:	4284      	cmp	r4, r0
 800dfba:	4607      	mov	r7, r0
 800dfbc:	d802      	bhi.n	800dfc4 <_realloc_r+0x34>
 800dfbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfc2:	d812      	bhi.n	800dfea <_realloc_r+0x5a>
 800dfc4:	4621      	mov	r1, r4
 800dfc6:	4640      	mov	r0, r8
 800dfc8:	f7ff f970 	bl	800d2ac <_malloc_r>
 800dfcc:	4605      	mov	r5, r0
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d0ed      	beq.n	800dfae <_realloc_r+0x1e>
 800dfd2:	42bc      	cmp	r4, r7
 800dfd4:	4622      	mov	r2, r4
 800dfd6:	4631      	mov	r1, r6
 800dfd8:	bf28      	it	cs
 800dfda:	463a      	movcs	r2, r7
 800dfdc:	f7fb fbae 	bl	800973c <memcpy>
 800dfe0:	4631      	mov	r1, r6
 800dfe2:	4640      	mov	r0, r8
 800dfe4:	f7ff f8f6 	bl	800d1d4 <_free_r>
 800dfe8:	e7e1      	b.n	800dfae <_realloc_r+0x1e>
 800dfea:	4635      	mov	r5, r6
 800dfec:	e7df      	b.n	800dfae <_realloc_r+0x1e>

0800dfee <_raise_r>:
 800dfee:	291f      	cmp	r1, #31
 800dff0:	b538      	push	{r3, r4, r5, lr}
 800dff2:	4604      	mov	r4, r0
 800dff4:	460d      	mov	r5, r1
 800dff6:	d904      	bls.n	800e002 <_raise_r+0x14>
 800dff8:	2316      	movs	r3, #22
 800dffa:	6003      	str	r3, [r0, #0]
 800dffc:	f04f 30ff 	mov.w	r0, #4294967295
 800e000:	bd38      	pop	{r3, r4, r5, pc}
 800e002:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e004:	b112      	cbz	r2, 800e00c <_raise_r+0x1e>
 800e006:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e00a:	b94b      	cbnz	r3, 800e020 <_raise_r+0x32>
 800e00c:	4620      	mov	r0, r4
 800e00e:	f000 f831 	bl	800e074 <_getpid_r>
 800e012:	462a      	mov	r2, r5
 800e014:	4601      	mov	r1, r0
 800e016:	4620      	mov	r0, r4
 800e018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e01c:	f000 b818 	b.w	800e050 <_kill_r>
 800e020:	2b01      	cmp	r3, #1
 800e022:	d00a      	beq.n	800e03a <_raise_r+0x4c>
 800e024:	1c59      	adds	r1, r3, #1
 800e026:	d103      	bne.n	800e030 <_raise_r+0x42>
 800e028:	2316      	movs	r3, #22
 800e02a:	6003      	str	r3, [r0, #0]
 800e02c:	2001      	movs	r0, #1
 800e02e:	e7e7      	b.n	800e000 <_raise_r+0x12>
 800e030:	2400      	movs	r4, #0
 800e032:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e036:	4628      	mov	r0, r5
 800e038:	4798      	blx	r3
 800e03a:	2000      	movs	r0, #0
 800e03c:	e7e0      	b.n	800e000 <_raise_r+0x12>
	...

0800e040 <raise>:
 800e040:	4b02      	ldr	r3, [pc, #8]	; (800e04c <raise+0xc>)
 800e042:	4601      	mov	r1, r0
 800e044:	6818      	ldr	r0, [r3, #0]
 800e046:	f7ff bfd2 	b.w	800dfee <_raise_r>
 800e04a:	bf00      	nop
 800e04c:	2000001c 	.word	0x2000001c

0800e050 <_kill_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	4d07      	ldr	r5, [pc, #28]	; (800e070 <_kill_r+0x20>)
 800e054:	2300      	movs	r3, #0
 800e056:	4604      	mov	r4, r0
 800e058:	4608      	mov	r0, r1
 800e05a:	4611      	mov	r1, r2
 800e05c:	602b      	str	r3, [r5, #0]
 800e05e:	f7f3 fded 	bl	8001c3c <_kill>
 800e062:	1c43      	adds	r3, r0, #1
 800e064:	d102      	bne.n	800e06c <_kill_r+0x1c>
 800e066:	682b      	ldr	r3, [r5, #0]
 800e068:	b103      	cbz	r3, 800e06c <_kill_r+0x1c>
 800e06a:	6023      	str	r3, [r4, #0]
 800e06c:	bd38      	pop	{r3, r4, r5, pc}
 800e06e:	bf00      	nop
 800e070:	200004d0 	.word	0x200004d0

0800e074 <_getpid_r>:
 800e074:	f7f3 bdda 	b.w	8001c2c <_getpid>

0800e078 <__sread>:
 800e078:	b510      	push	{r4, lr}
 800e07a:	460c      	mov	r4, r1
 800e07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e080:	f000 f89c 	bl	800e1bc <_read_r>
 800e084:	2800      	cmp	r0, #0
 800e086:	bfab      	itete	ge
 800e088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e08a:	89a3      	ldrhlt	r3, [r4, #12]
 800e08c:	181b      	addge	r3, r3, r0
 800e08e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e092:	bfac      	ite	ge
 800e094:	6563      	strge	r3, [r4, #84]	; 0x54
 800e096:	81a3      	strhlt	r3, [r4, #12]
 800e098:	bd10      	pop	{r4, pc}

0800e09a <__swrite>:
 800e09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e09e:	461f      	mov	r7, r3
 800e0a0:	898b      	ldrh	r3, [r1, #12]
 800e0a2:	05db      	lsls	r3, r3, #23
 800e0a4:	4605      	mov	r5, r0
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	4616      	mov	r6, r2
 800e0aa:	d505      	bpl.n	800e0b8 <__swrite+0x1e>
 800e0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0b0:	2302      	movs	r3, #2
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f000 f868 	bl	800e188 <_lseek_r>
 800e0b8:	89a3      	ldrh	r3, [r4, #12]
 800e0ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0c2:	81a3      	strh	r3, [r4, #12]
 800e0c4:	4632      	mov	r2, r6
 800e0c6:	463b      	mov	r3, r7
 800e0c8:	4628      	mov	r0, r5
 800e0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ce:	f000 b817 	b.w	800e100 <_write_r>

0800e0d2 <__sseek>:
 800e0d2:	b510      	push	{r4, lr}
 800e0d4:	460c      	mov	r4, r1
 800e0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0da:	f000 f855 	bl	800e188 <_lseek_r>
 800e0de:	1c43      	adds	r3, r0, #1
 800e0e0:	89a3      	ldrh	r3, [r4, #12]
 800e0e2:	bf15      	itete	ne
 800e0e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e0e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e0ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e0ee:	81a3      	strheq	r3, [r4, #12]
 800e0f0:	bf18      	it	ne
 800e0f2:	81a3      	strhne	r3, [r4, #12]
 800e0f4:	bd10      	pop	{r4, pc}

0800e0f6 <__sclose>:
 800e0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0fa:	f000 b813 	b.w	800e124 <_close_r>
	...

0800e100 <_write_r>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4d07      	ldr	r5, [pc, #28]	; (800e120 <_write_r+0x20>)
 800e104:	4604      	mov	r4, r0
 800e106:	4608      	mov	r0, r1
 800e108:	4611      	mov	r1, r2
 800e10a:	2200      	movs	r2, #0
 800e10c:	602a      	str	r2, [r5, #0]
 800e10e:	461a      	mov	r2, r3
 800e110:	f7f3 fdcb 	bl	8001caa <_write>
 800e114:	1c43      	adds	r3, r0, #1
 800e116:	d102      	bne.n	800e11e <_write_r+0x1e>
 800e118:	682b      	ldr	r3, [r5, #0]
 800e11a:	b103      	cbz	r3, 800e11e <_write_r+0x1e>
 800e11c:	6023      	str	r3, [r4, #0]
 800e11e:	bd38      	pop	{r3, r4, r5, pc}
 800e120:	200004d0 	.word	0x200004d0

0800e124 <_close_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	4d06      	ldr	r5, [pc, #24]	; (800e140 <_close_r+0x1c>)
 800e128:	2300      	movs	r3, #0
 800e12a:	4604      	mov	r4, r0
 800e12c:	4608      	mov	r0, r1
 800e12e:	602b      	str	r3, [r5, #0]
 800e130:	f7f3 fdd7 	bl	8001ce2 <_close>
 800e134:	1c43      	adds	r3, r0, #1
 800e136:	d102      	bne.n	800e13e <_close_r+0x1a>
 800e138:	682b      	ldr	r3, [r5, #0]
 800e13a:	b103      	cbz	r3, 800e13e <_close_r+0x1a>
 800e13c:	6023      	str	r3, [r4, #0]
 800e13e:	bd38      	pop	{r3, r4, r5, pc}
 800e140:	200004d0 	.word	0x200004d0

0800e144 <_fstat_r>:
 800e144:	b538      	push	{r3, r4, r5, lr}
 800e146:	4d07      	ldr	r5, [pc, #28]	; (800e164 <_fstat_r+0x20>)
 800e148:	2300      	movs	r3, #0
 800e14a:	4604      	mov	r4, r0
 800e14c:	4608      	mov	r0, r1
 800e14e:	4611      	mov	r1, r2
 800e150:	602b      	str	r3, [r5, #0]
 800e152:	f7f3 fdd2 	bl	8001cfa <_fstat>
 800e156:	1c43      	adds	r3, r0, #1
 800e158:	d102      	bne.n	800e160 <_fstat_r+0x1c>
 800e15a:	682b      	ldr	r3, [r5, #0]
 800e15c:	b103      	cbz	r3, 800e160 <_fstat_r+0x1c>
 800e15e:	6023      	str	r3, [r4, #0]
 800e160:	bd38      	pop	{r3, r4, r5, pc}
 800e162:	bf00      	nop
 800e164:	200004d0 	.word	0x200004d0

0800e168 <_isatty_r>:
 800e168:	b538      	push	{r3, r4, r5, lr}
 800e16a:	4d06      	ldr	r5, [pc, #24]	; (800e184 <_isatty_r+0x1c>)
 800e16c:	2300      	movs	r3, #0
 800e16e:	4604      	mov	r4, r0
 800e170:	4608      	mov	r0, r1
 800e172:	602b      	str	r3, [r5, #0]
 800e174:	f7f3 fdd1 	bl	8001d1a <_isatty>
 800e178:	1c43      	adds	r3, r0, #1
 800e17a:	d102      	bne.n	800e182 <_isatty_r+0x1a>
 800e17c:	682b      	ldr	r3, [r5, #0]
 800e17e:	b103      	cbz	r3, 800e182 <_isatty_r+0x1a>
 800e180:	6023      	str	r3, [r4, #0]
 800e182:	bd38      	pop	{r3, r4, r5, pc}
 800e184:	200004d0 	.word	0x200004d0

0800e188 <_lseek_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	4d07      	ldr	r5, [pc, #28]	; (800e1a8 <_lseek_r+0x20>)
 800e18c:	4604      	mov	r4, r0
 800e18e:	4608      	mov	r0, r1
 800e190:	4611      	mov	r1, r2
 800e192:	2200      	movs	r2, #0
 800e194:	602a      	str	r2, [r5, #0]
 800e196:	461a      	mov	r2, r3
 800e198:	f7f3 fdca 	bl	8001d30 <_lseek>
 800e19c:	1c43      	adds	r3, r0, #1
 800e19e:	d102      	bne.n	800e1a6 <_lseek_r+0x1e>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	b103      	cbz	r3, 800e1a6 <_lseek_r+0x1e>
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	200004d0 	.word	0x200004d0

0800e1ac <_malloc_usable_size_r>:
 800e1ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1b0:	1f18      	subs	r0, r3, #4
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	bfbc      	itt	lt
 800e1b6:	580b      	ldrlt	r3, [r1, r0]
 800e1b8:	18c0      	addlt	r0, r0, r3
 800e1ba:	4770      	bx	lr

0800e1bc <_read_r>:
 800e1bc:	b538      	push	{r3, r4, r5, lr}
 800e1be:	4d07      	ldr	r5, [pc, #28]	; (800e1dc <_read_r+0x20>)
 800e1c0:	4604      	mov	r4, r0
 800e1c2:	4608      	mov	r0, r1
 800e1c4:	4611      	mov	r1, r2
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	602a      	str	r2, [r5, #0]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	f7f3 fd50 	bl	8001c70 <_read>
 800e1d0:	1c43      	adds	r3, r0, #1
 800e1d2:	d102      	bne.n	800e1da <_read_r+0x1e>
 800e1d4:	682b      	ldr	r3, [r5, #0]
 800e1d6:	b103      	cbz	r3, 800e1da <_read_r+0x1e>
 800e1d8:	6023      	str	r3, [r4, #0]
 800e1da:	bd38      	pop	{r3, r4, r5, pc}
 800e1dc:	200004d0 	.word	0x200004d0

0800e1e0 <_init>:
 800e1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1e2:	bf00      	nop
 800e1e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1e6:	bc08      	pop	{r3}
 800e1e8:	469e      	mov	lr, r3
 800e1ea:	4770      	bx	lr

0800e1ec <_fini>:
 800e1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ee:	bf00      	nop
 800e1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1f2:	bc08      	pop	{r3}
 800e1f4:	469e      	mov	lr, r3
 800e1f6:	4770      	bx	lr


V1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e6e0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800e8c0  0800e8c0  0001e8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eda8  0800eda8  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800eda8  0800eda8  0001eda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edb0  0800edb0  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edb0  0800edb0  0001edb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edb4  0800edb4  0001edb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800edb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000210  0800efc8  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000564  0800efc8  00020564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5c8  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a8  00000000  00000000  0003b808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f0  00000000  00000000  0003ecb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a8  00000000  00000000  000403a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a055  00000000  00000000  00041948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a73b  00000000  00000000  0006b99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114d9d  00000000  00000000  000860d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019ae75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007818  00000000  00000000  0019aec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000210 	.word	0x20000210
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e8a8 	.word	0x0800e8a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000214 	.word	0x20000214
 800021c:	0800e8a8 	.word	0x0800e8a8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104c:	f000 ff69 	bl	8001f22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001050:	f000 f850 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001054:	f000 fbae 	bl	80017b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001058:	f000 fa4a 	bl	80014f0 <MX_TIM2_Init>
  MX_DMA_Init();
 800105c:	f000 fb80 	bl	8001760 <MX_DMA_Init>
  MX_ADC1_Init();
 8001060:	f000 f894 	bl	800118c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001064:	f000 f90c 	bl	8001280 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001068:	f000 fab8 	bl	80015dc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800106c:	f000 fb2c 	bl	80016c8 <MX_USART2_UART_Init>
  MX_ADC4_Init();
 8001070:	f000 f9a0 	bl	80013b4 <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */
  USER_CALLBACK_init();
 8001074:	f008 fccc 	bl	8009a10 <USER_CALLBACK_init>

  EraseInit.Banks = FLASH_BANK_2;
 8001078:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <main+0x98>)
 800107a:	2202      	movs	r2, #2
 800107c:	605a      	str	r2, [r3, #4]
  EraseInit.NbPages = 63;
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <main+0x98>)
 8001080:	223f      	movs	r2, #63	; 0x3f
 8001082:	60da      	str	r2, [r3, #12]
  EraseInit.Page = 1;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <main+0x98>)
 8001086:	2201      	movs	r2, #1
 8001088:	609a      	str	r2, [r3, #8]
  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <main+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
  USER_FLASH_ErasePage(EraseInit);
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <main+0x98>)
 8001092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001094:	f008 fd34 	bl	8009b00 <USER_FLASH_ErasePage>
  USER_FLASH_Write_IntType(Address,578437695752307201);
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <main+0x9c>)
 800109a:	6819      	ldr	r1, [r3, #0]
 800109c:	a30e      	add	r3, pc, #56	; (adr r3, 80010d8 <main+0x90>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	4608      	mov	r0, r1
 80010a4:	f008 ff46 	bl	8009f34 <USER_FLASH_Write_IntType>
//  valueOfFlash = USER_FLASH_Read_IntType(ADDRESS_DATA_STORAGE(123));
 // EraseInit.NbPages = 124;
  USER_FLASH_ErasePage(EraseInit);
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <main+0x98>)
 80010aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010ac:	f008 fd28 	bl	8009b00 <USER_FLASH_ErasePage>
//  USER_FLASH_Write_DoubleType(ADDRESS_DATA_STORAGE(125),5.14);
//  valueOfFlashDouble = USER_FLASH_Read_double(ADDRESS_DATA_STORAGE(125));
//  	USER_FLASH_Write_Array(ADDRESS_DATA_STORAGE(127), array_w, 10);
//  	USER_FLASH_Read_Array(ADDRESS_DATA_STORAGE(127), array_r, 10);
  USER_FLASH_Write(Address, array_w, 10);
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <main+0x9c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	220a      	movs	r2, #10
 80010b6:	490c      	ldr	r1, [pc, #48]	; (80010e8 <main+0xa0>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f008 fd35 	bl	8009b28 <USER_FLASH_Write>
  memcpy(array_r,USER_FLASH_Read_DoubleWord(ADDRESS_DATA_STORAGE(126)),10);
 80010be:	480b      	ldr	r0, [pc, #44]	; (80010ec <main+0xa4>)
 80010c0:	f04f 0100 	mov.w	r1, #0
 80010c4:	f008 fef0 	bl	8009ea8 <USER_FLASH_Read_DoubleWord>
 80010c8:	4602      	mov	r2, r0
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <main+0xa8>)
 80010cc:	6810      	ldr	r0, [r2, #0]
 80010ce:	6851      	ldr	r1, [r2, #4]
 80010d0:	c303      	stmia	r3!, {r0, r1}
 80010d2:	8912      	ldrh	r2, [r2, #8]
 80010d4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <main+0x8e>
 80010d8:	04030201 	.word	0x04030201
 80010dc:	08070605 	.word	0x08070605
 80010e0:	200004f8 	.word	0x200004f8
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000004 	.word	0x20000004
 80010ec:	0807f000 	.word	0x0807f000
 80010f0:	20000508 	.word	0x20000508

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0318 	add.w	r3, r7, #24
 80010fe:	2238      	movs	r2, #56	; 0x38
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f008 ff62 	bl	8009fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001116:	f44f 7000 	mov.w	r0, #512	; 0x200
 800111a:	f004 fb45 	bl	80057a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2340      	movs	r3, #64	; 0x40
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001130:	2302      	movs	r3, #2
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001134:	2304      	movs	r3, #4
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001138:	234b      	movs	r3, #75	; 0x4b
 800113a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113c:	2302      	movs	r3, #2
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001140:	2302      	movs	r3, #2
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0318 	add.w	r3, r7, #24
 800114c:	4618      	mov	r0, r3
 800114e:	f004 fbdf 	bl	8005910 <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001158:	f000 fb6a 	bl	8001830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001160:	2303      	movs	r3, #3
 8001162:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2104      	movs	r1, #4
 8001174:	4618      	mov	r0, r3
 8001176:	f004 fee3 	bl	8005f40 <HAL_RCC_ClockConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001180:	f000 fb56 	bl	8001830 <Error_Handler>
  }
}
 8001184:	bf00      	nop
 8001186:	3750      	adds	r7, #80	; 0x50
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2220      	movs	r2, #32
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f008 ff11 	bl	8009fcc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <MX_ADC1_Init+0xec>)
 80011ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80011b2:	4b31      	ldr	r3, [pc, #196]	; (8001278 <MX_ADC1_Init+0xec>)
 80011b4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ba:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <MX_ADC1_Init+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <MX_ADC1_Init+0xec>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80011c6:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <MX_ADC1_Init+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <MX_ADC1_Init+0xec>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d2:	4b29      	ldr	r3, [pc, #164]	; (8001278 <MX_ADC1_Init+0xec>)
 80011d4:	2204      	movs	r2, #4
 80011d6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <MX_ADC1_Init+0xec>)
 80011da:	2200      	movs	r2, #0
 80011dc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011de:	4b26      	ldr	r3, [pc, #152]	; (8001278 <MX_ADC1_Init+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <MX_ADC1_Init+0xec>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ea:	4b23      	ldr	r3, [pc, #140]	; (8001278 <MX_ADC1_Init+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_CC2;
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <MX_ADC1_Init+0xec>)
 80011f4:	f44f 628c 	mov.w	r2, #1120	; 0x460
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_ADC1_Init+0xec>)
 80011fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001200:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001202:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_ADC1_Init+0xec>)
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <MX_ADC1_Init+0xec>)
 800120c:	2200      	movs	r2, #0
 800120e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_ADC1_Init+0xec>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001218:	4817      	ldr	r0, [pc, #92]	; (8001278 <MX_ADC1_Init+0xec>)
 800121a:	f001 f937 	bl	800248c <HAL_ADC_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8001224:	f000 fb04 	bl	8001830 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800122c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001230:	4619      	mov	r1, r3
 8001232:	4811      	ldr	r0, [pc, #68]	; (8001278 <MX_ADC1_Init+0xec>)
 8001234:	f003 fa20 	bl	8004678 <HAL_ADCEx_MultiModeConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800123e:	f000 faf7 	bl	8001830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <MX_ADC1_Init+0xf0>)
 8001244:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001246:	2306      	movs	r3, #6
 8001248:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800124e:	237f      	movs	r3, #127	; 0x7f
 8001250:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001252:	2304      	movs	r3, #4
 8001254:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	; (8001278 <MX_ADC1_Init+0xec>)
 8001260:	f001 fe28 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800126a:	f000 fae1 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3730      	adds	r7, #48	; 0x30
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000022c 	.word	0x2000022c
 800127c:	04300002 	.word	0x04300002

08001280 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2220      	movs	r2, #32
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f008 fe97 	bl	8009fcc <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800129e:	4b40      	ldr	r3, [pc, #256]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012a0:	4a40      	ldr	r2, [pc, #256]	; (80013a4 <MX_ADC3_Init+0x124>)
 80012a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80012a4:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012a6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80012ac:	4b3c      	ldr	r3, [pc, #240]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80012b8:	4b39      	ldr	r3, [pc, #228]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012c6:	2204      	movs	r2, #4
 80012c8:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80012ca:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80012d0:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 3;
 80012d6:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012d8:	2203      	movs	r2, #3
 80012da:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_CC1;
 80012e4:	4b2e      	ldr	r3, [pc, #184]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80012f4:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <MX_ADC3_Init+0x120>)
 80012fe:	2200      	movs	r2, #0
 8001300:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001302:	4b27      	ldr	r3, [pc, #156]	; (80013a0 <MX_ADC3_Init+0x120>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800130a:	4825      	ldr	r0, [pc, #148]	; (80013a0 <MX_ADC3_Init+0x120>)
 800130c:	f001 f8be 	bl	800248c <HAL_ADC_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8001316:	f000 fa8b 	bl	8001830 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	481e      	ldr	r0, [pc, #120]	; (80013a0 <MX_ADC3_Init+0x120>)
 8001326:	f003 f9a7 	bl	8004678 <HAL_ADCEx_MultiModeConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8001330:	f000 fa7e 	bl	8001830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <MX_ADC3_Init+0x128>)
 8001336:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001338:	2306      	movs	r3, #6
 800133a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001340:	237f      	movs	r3, #127	; 0x7f
 8001342:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001344:	2304      	movs	r3, #4
 8001346:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4813      	ldr	r0, [pc, #76]	; (80013a0 <MX_ADC3_Init+0x120>)
 8001352:	f001 fdaf 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_ADC3_Init+0xe0>
  {
    Error_Handler();
 800135c:	f000 fa68 	bl	8001830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_ADC3_Init+0x12c>)
 8001362:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001364:	230c      	movs	r3, #12
 8001366:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <MX_ADC3_Init+0x120>)
 800136e:	f001 fda1 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC3_Init+0xfc>
  {
    Error_Handler();
 8001378:	f000 fa5a 	bl	8001830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_ADC3_Init+0x130>)
 800137e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001380:	2312      	movs	r3, #18
 8001382:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_ADC3_Init+0x120>)
 800138a:	f001 fd93 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC3_Init+0x118>
  {
    Error_Handler();
 8001394:	f000 fa4c 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	; 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000298 	.word	0x20000298
 80013a4:	50000400 	.word	0x50000400
 80013a8:	04300002 	.word	0x04300002
 80013ac:	14f00020 	.word	0x14f00020
 80013b0:	32601000 	.word	0x32601000

080013b4 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b098      	sub	sp, #96	; 0x60
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013be:	2220      	movs	r2, #32
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f008 fe02 	bl	8009fcc <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	223c      	movs	r2, #60	; 0x3c
 80013cc:	2100      	movs	r1, #0
 80013ce:	4618      	mov	r0, r3
 80013d0:	f008 fdfc 	bl	8009fcc <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <MX_ADC4_Init+0x130>)
 80013d6:	4a44      	ldr	r2, [pc, #272]	; (80014e8 <MX_ADC4_Init+0x134>)
 80013d8:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80013da:	4b42      	ldr	r3, [pc, #264]	; (80014e4 <MX_ADC4_Init+0x130>)
 80013dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013e0:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80013e2:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <MX_ADC4_Init+0x130>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e8:	4b3e      	ldr	r3, [pc, #248]	; (80014e4 <MX_ADC4_Init+0x130>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <MX_ADC4_Init+0x130>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013f4:	4b3b      	ldr	r3, [pc, #236]	; (80014e4 <MX_ADC4_Init+0x130>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013fa:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <MX_ADC4_Init+0x130>)
 80013fc:	2204      	movs	r2, #4
 80013fe:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001400:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <MX_ADC4_Init+0x130>)
 8001402:	2200      	movs	r2, #0
 8001404:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001406:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <MX_ADC4_Init+0x130>)
 8001408:	2200      	movs	r2, #0
 800140a:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800140c:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <MX_ADC4_Init+0x130>)
 800140e:	2201      	movs	r2, #1
 8001410:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <MX_ADC4_Init+0x130>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800141a:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <MX_ADC4_Init+0x130>)
 800141c:	2200      	movs	r2, #0
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001420:	4b30      	ldr	r3, [pc, #192]	; (80014e4 <MX_ADC4_Init+0x130>)
 8001422:	2200      	movs	r2, #0
 8001424:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001426:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <MX_ADC4_Init+0x130>)
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800142e:	4b2d      	ldr	r3, [pc, #180]	; (80014e4 <MX_ADC4_Init+0x130>)
 8001430:	2200      	movs	r2, #0
 8001432:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001434:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <MX_ADC4_Init+0x130>)
 8001436:	2200      	movs	r2, #0
 8001438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800143c:	4829      	ldr	r0, [pc, #164]	; (80014e4 <MX_ADC4_Init+0x130>)
 800143e:	f001 f825 	bl	800248c <HAL_ADC_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_ADC4_Init+0x98>
  {
    Error_Handler();
 8001448:	f000 f9f2 	bl	8001830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <MX_ADC4_Init+0x138>)
 800144e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001450:	2306      	movs	r3, #6
 8001452:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001454:	2300      	movs	r3, #0
 8001456:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001458:	237f      	movs	r3, #127	; 0x7f
 800145a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800145c:	2304      	movs	r3, #4
 800145e:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.Offset = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001464:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001468:	4619      	mov	r1, r3
 800146a:	481e      	ldr	r0, [pc, #120]	; (80014e4 <MX_ADC4_Init+0x130>)
 800146c:	f001 fd22 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_ADC4_Init+0xc6>
  {
    Error_Handler();
 8001476:	f000 f9db 	bl	8001830 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <MX_ADC4_Init+0x138>)
 800147c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800147e:	2309      	movs	r3, #9
 8001480:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001486:	237f      	movs	r3, #127	; 0x7f
 8001488:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800148a:	2304      	movs	r3, #4
 800148c:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001492:	2301      	movs	r3, #1
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T3_TRGO;
 80014a8:	23b0      	movs	r3, #176	; 0xb0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc4, &sConfigInjected) != HAL_OK)
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	4619      	mov	r1, r3
 80014ba:	480a      	ldr	r0, [pc, #40]	; (80014e4 <MX_ADC4_Init+0x130>)
 80014bc:	f002 fbb0 	bl	8003c20 <HAL_ADCEx_InjectedConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC4_Init+0x116>
  {
    Error_Handler();
 80014c6:	f000 f9b3 	bl	8001830 <Error_Handler>
  }
  if (HAL_ADCEx_EnableInjectedQueue(&hadc4) != HAL_OK)
 80014ca:	4806      	ldr	r0, [pc, #24]	; (80014e4 <MX_ADC4_Init+0x130>)
 80014cc:	f003 f9dc 	bl	8004888 <HAL_ADCEx_EnableInjectedQueue>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_ADC4_Init+0x126>
  {
    Error_Handler();
 80014d6:	f000 f9ab 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	3760      	adds	r7, #96	; 0x60
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000304 	.word	0x20000304
 80014e8:	50000500 	.word	0x50000500
 80014ec:	0c900008 	.word	0x0c900008

080014f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	; 0x38
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001522:	4b2d      	ldr	r3, [pc, #180]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001524:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001528:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <MX_TIM2_Init+0xe8>)
 800152c:	2209      	movs	r2, #9
 800152e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 149;
 8001536:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001538:	2295      	movs	r2, #149	; 0x95
 800153a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <MX_TIM2_Init+0xe8>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001548:	4823      	ldr	r0, [pc, #140]	; (80015d8 <MX_TIM2_Init+0xe8>)
 800154a:	f005 f963 	bl	8006814 <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001554:	f000 f96c 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800155e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001562:	4619      	mov	r1, r3
 8001564:	481c      	ldr	r0, [pc, #112]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001566:	f005 fc33 	bl	8006dd0 <HAL_TIM_ConfigClockSource>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001570:	f000 f95e 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001574:	4818      	ldr	r0, [pc, #96]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001576:	f005 f9a4 	bl	80068c2 <HAL_TIM_PWM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001580:	f000 f956 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001584:	2320      	movs	r3, #32
 8001586:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <MX_TIM2_Init+0xe8>)
 8001594:	f006 f9c6 	bl	8007924 <HAL_TIMEx_MasterConfigSynchronization>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800159e:	f000 f947 	bl	8001830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a2:	2360      	movs	r3, #96	; 0x60
 80015a4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	2204      	movs	r2, #4
 80015b6:	4619      	mov	r1, r3
 80015b8:	4807      	ldr	r0, [pc, #28]	; (80015d8 <MX_TIM2_Init+0xe8>)
 80015ba:	f005 faf5 	bl	8006ba8 <HAL_TIM_PWM_ConfigChannel>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80015c4:	f000 f934 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015c8:	4803      	ldr	r0, [pc, #12]	; (80015d8 <MX_TIM2_Init+0xe8>)
 80015ca:	f000 faa7 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 80015ce:	bf00      	nop
 80015d0:	3738      	adds	r7, #56	; 0x38
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200003d0 	.word	0x200003d0

080015dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08e      	sub	sp, #56	; 0x38
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fc:	463b      	mov	r3, r7
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
 800160a:	615a      	str	r2, [r3, #20]
 800160c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800160e:	4b2c      	ldr	r3, [pc, #176]	; (80016c0 <MX_TIM3_Init+0xe4>)
 8001610:	4a2c      	ldr	r2, [pc, #176]	; (80016c4 <MX_TIM3_Init+0xe8>)
 8001612:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8001614:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <MX_TIM3_Init+0xe4>)
 8001616:	2209      	movs	r2, #9
 8001618:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161a:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <MX_TIM3_Init+0xe4>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 149;
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <MX_TIM3_Init+0xe4>)
 8001622:	2295      	movs	r2, #149	; 0x95
 8001624:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	4b26      	ldr	r3, [pc, #152]	; (80016c0 <MX_TIM3_Init+0xe4>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <MX_TIM3_Init+0xe4>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001632:	4823      	ldr	r0, [pc, #140]	; (80016c0 <MX_TIM3_Init+0xe4>)
 8001634:	f005 f8ee 	bl	8006814 <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800163e:	f000 f8f7 	bl	8001830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800164c:	4619      	mov	r1, r3
 800164e:	481c      	ldr	r0, [pc, #112]	; (80016c0 <MX_TIM3_Init+0xe4>)
 8001650:	f005 fbbe 	bl	8006dd0 <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800165a:	f000 f8e9 	bl	8001830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800165e:	4818      	ldr	r0, [pc, #96]	; (80016c0 <MX_TIM3_Init+0xe4>)
 8001660:	f005 f92f 	bl	80068c2 <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800166a:	f000 f8e1 	bl	8001830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800166e:	2320      	movs	r3, #32
 8001670:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	4810      	ldr	r0, [pc, #64]	; (80016c0 <MX_TIM3_Init+0xe4>)
 800167e:	f006 f951 	bl	8007924 <HAL_TIMEx_MasterConfigSynchronization>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001688:	f000 f8d2 	bl	8001830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168c:	2360      	movs	r3, #96	; 0x60
 800168e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169c:	463b      	mov	r3, r7
 800169e:	2200      	movs	r2, #0
 80016a0:	4619      	mov	r1, r3
 80016a2:	4807      	ldr	r0, [pc, #28]	; (80016c0 <MX_TIM3_Init+0xe4>)
 80016a4:	f005 fa80 	bl	8006ba8 <HAL_TIM_PWM_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80016ae:	f000 f8bf 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016b2:	4803      	ldr	r0, [pc, #12]	; (80016c0 <MX_TIM3_Init+0xe4>)
 80016b4:	f000 fa32 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 80016b8:	bf00      	nop
 80016ba:	3738      	adds	r7, #56	; 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	2000041c 	.word	0x2000041c
 80016c4:	40000400 	.word	0x40000400

080016c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <MX_USART2_UART_Init+0x90>)
 80016ce:	4a23      	ldr	r2, [pc, #140]	; (800175c <MX_USART2_UART_Init+0x94>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <MX_USART2_UART_Init+0x90>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <MX_USART2_UART_Init+0x90>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_USART2_UART_Init+0x90>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_USART2_UART_Init+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_USART2_UART_Init+0x90>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_USART2_UART_Init+0x90>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_USART2_UART_Init+0x90>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_USART2_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_USART2_UART_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_USART2_UART_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001710:	4811      	ldr	r0, [pc, #68]	; (8001758 <MX_USART2_UART_Init+0x90>)
 8001712:	f006 f99d 	bl	8007a50 <HAL_UART_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800171c:	f000 f888 	bl	8001830 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001720:	2100      	movs	r1, #0
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_USART2_UART_Init+0x90>)
 8001724:	f008 f8a9 	bl	800987a <HAL_UARTEx_SetTxFifoThreshold>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800172e:	f000 f87f 	bl	8001830 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001732:	2100      	movs	r1, #0
 8001734:	4808      	ldr	r0, [pc, #32]	; (8001758 <MX_USART2_UART_Init+0x90>)
 8001736:	f008 f8de 	bl	80098f6 <HAL_UARTEx_SetRxFifoThreshold>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001740:	f000 f876 	bl	8001830 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <MX_USART2_UART_Init+0x90>)
 8001746:	f008 f85f 	bl	8009808 <HAL_UARTEx_DisableFifoMode>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001750:	f000 f86e 	bl	8001830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000468 	.word	0x20000468
 800175c:	40004400 	.word	0x40004400

08001760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_DMA_Init+0x50>)
 8001768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176a:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <MX_DMA_Init+0x50>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6493      	str	r3, [r2, #72]	; 0x48
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <MX_DMA_Init+0x50>)
 8001774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <MX_DMA_Init+0x50>)
 8001780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001782:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <MX_DMA_Init+0x50>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6493      	str	r3, [r2, #72]	; 0x48
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <MX_DMA_Init+0x50>)
 800178c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2100      	movs	r1, #0
 800179a:	200b      	movs	r0, #11
 800179c:	f003 f97d 	bl	8004a9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017a0:	200b      	movs	r0, #11
 80017a2:	f003 f994 	bl	8004ace <HAL_NVIC_EnableIRQ>

}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40021000 	.word	0x40021000

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <MX_GPIO_Init+0x78>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <MX_GPIO_Init+0x78>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <MX_GPIO_Init+0x78>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <MX_GPIO_Init+0x78>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a11      	ldr	r2, [pc, #68]	; (800182c <MX_GPIO_Init+0x78>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_GPIO_Init+0x78>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_ADC_GPIO_Port, TEST_ADC_Pin, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001802:	f003 ffb9 	bl	8005778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_ADC_Pin */
  GPIO_InitStruct.Pin = TEST_ADC_Pin;
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST_ADC_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	4619      	mov	r1, r3
 800181c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001820:	f003 fe28 	bl	8005474 <HAL_GPIO_Init>

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000

08001830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001834:	b672      	cpsid	i
}
 8001836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001838:	e7fe      	b.n	8001838 <Error_Handler+0x8>
	...

0800183c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <HAL_MspInit+0x44>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001846:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <HAL_MspInit+0x44>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6613      	str	r3, [r2, #96]	; 0x60
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_MspInit+0x44>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_MspInit+0x44>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	4a08      	ldr	r2, [pc, #32]	; (8001880 <HAL_MspInit+0x44>)
 8001860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001864:	6593      	str	r3, [r2, #88]	; 0x58
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_MspInit+0x44>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	603b      	str	r3, [r7, #0]
 8001870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001872:	f004 f83d 	bl	80058f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b0a2      	sub	sp, #136	; 0x88
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800189c:	f107 0320 	add.w	r3, r7, #32
 80018a0:	2254      	movs	r2, #84	; 0x54
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f008 fb91 	bl	8009fcc <memset>
  if(hadc->Instance==ADC1)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018b2:	d13d      	bne.n	8001930 <HAL_ADC_MspInit+0xac>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80018b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018b8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80018ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80018be:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4618      	mov	r0, r3
 80018c6:	f004 fd57 	bl	8006378 <HAL_RCCEx_PeriphCLKConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80018d0:	f7ff ffae 	bl	8001830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80018d4:	4b71      	ldr	r3, [pc, #452]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d8:	4a70      	ldr	r2, [pc, #448]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 80018da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e0:	4b6e      	ldr	r3, [pc, #440]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b6b      	ldr	r3, [pc, #428]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f0:	4a6a      	ldr	r2, [pc, #424]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f8:	4b68      	ldr	r3, [pc, #416]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 80018fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001904:	2301      	movs	r3, #1
 8001906:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001908:	2303      	movs	r3, #3
 800190a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001914:	4619      	mov	r1, r3
 8001916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800191a:	f003 fdab 	bl	8005474 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2100      	movs	r1, #0
 8001922:	2012      	movs	r0, #18
 8001924:	f003 f8b9 	bl	8004a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001928:	2012      	movs	r0, #18
 800192a:	f003 f8d0 	bl	8004ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800192e:	e0b1      	b.n	8001a94 <HAL_ADC_MspInit+0x210>
  else if(hadc->Instance==ADC3)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a5a      	ldr	r2, [pc, #360]	; (8001aa0 <HAL_ADC_MspInit+0x21c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d169      	bne.n	8001a0e <HAL_ADC_MspInit+0x18a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800193a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800193e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001940:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001944:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001946:	f107 0320 	add.w	r3, r7, #32
 800194a:	4618      	mov	r0, r3
 800194c:	f004 fd14 	bl	8006378 <HAL_RCCEx_PeriphCLKConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 8001956:	f7ff ff6b 	bl	8001830 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800195a:	4b52      	ldr	r3, [pc, #328]	; (8001aa4 <HAL_ADC_MspInit+0x220>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	3301      	adds	r3, #1
 8001960:	4a50      	ldr	r2, [pc, #320]	; (8001aa4 <HAL_ADC_MspInit+0x220>)
 8001962:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001964:	4b4f      	ldr	r3, [pc, #316]	; (8001aa4 <HAL_ADC_MspInit+0x220>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d10b      	bne.n	8001984 <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800196c:	4b4b      	ldr	r3, [pc, #300]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001970:	4a4a      	ldr	r2, [pc, #296]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 8001972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001976:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001978:	4b48      	ldr	r3, [pc, #288]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 800197a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	4b45      	ldr	r3, [pc, #276]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001988:	4a44      	ldr	r2, [pc, #272]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 800198a:	f043 0302 	orr.w	r3, r3, #2
 800198e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_13;
 800199c:	f242 0303 	movw	r3, #8195	; 0x2003
 80019a0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a2:	2303      	movs	r3, #3
 80019a4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019ae:	4619      	mov	r1, r3
 80019b0:	483d      	ldr	r0, [pc, #244]	; (8001aa8 <HAL_ADC_MspInit+0x224>)
 80019b2:	f003 fd5f 	bl	8005474 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_ADC_MspInit+0x228>)
 80019b8:	4a3d      	ldr	r2, [pc, #244]	; (8001ab0 <HAL_ADC_MspInit+0x22c>)
 80019ba:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80019bc:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <HAL_ADC_MspInit+0x228>)
 80019be:	2225      	movs	r2, #37	; 0x25
 80019c0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019c2:	4b3a      	ldr	r3, [pc, #232]	; (8001aac <HAL_ADC_MspInit+0x228>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <HAL_ADC_MspInit+0x228>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80019ce:	4b37      	ldr	r3, [pc, #220]	; (8001aac <HAL_ADC_MspInit+0x228>)
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019d4:	4b35      	ldr	r3, [pc, #212]	; (8001aac <HAL_ADC_MspInit+0x228>)
 80019d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019da:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019dc:	4b33      	ldr	r3, [pc, #204]	; (8001aac <HAL_ADC_MspInit+0x228>)
 80019de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019e2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80019e4:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_ADC_MspInit+0x228>)
 80019e6:	2220      	movs	r2, #32
 80019e8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80019ea:	4b30      	ldr	r3, [pc, #192]	; (8001aac <HAL_ADC_MspInit+0x228>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80019f0:	482e      	ldr	r0, [pc, #184]	; (8001aac <HAL_ADC_MspInit+0x228>)
 80019f2:	f003 f887 	bl	8004b04 <HAL_DMA_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_ADC_MspInit+0x17c>
      Error_Handler();
 80019fc:	f7ff ff18 	bl	8001830 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a2a      	ldr	r2, [pc, #168]	; (8001aac <HAL_ADC_MspInit+0x228>)
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
 8001a06:	4a29      	ldr	r2, [pc, #164]	; (8001aac <HAL_ADC_MspInit+0x228>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001a0c:	e042      	b.n	8001a94 <HAL_ADC_MspInit+0x210>
  else if(hadc->Instance==ADC4)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a28      	ldr	r2, [pc, #160]	; (8001ab4 <HAL_ADC_MspInit+0x230>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d13d      	bne.n	8001a94 <HAL_ADC_MspInit+0x210>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a1c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001a1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a22:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a24:	f107 0320 	add.w	r3, r7, #32
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f004 fca5 	bl	8006378 <HAL_RCCEx_PeriphCLKConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_ADC_MspInit+0x1b4>
      Error_Handler();
 8001a34:	f7ff fefc 	bl	8001830 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_ADC_MspInit+0x220>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a19      	ldr	r2, [pc, #100]	; (8001aa4 <HAL_ADC_MspInit+0x220>)
 8001a40:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <HAL_ADC_MspInit+0x220>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d10b      	bne.n	8001a62 <HAL_ADC_MspInit+0x1de>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <HAL_ADC_MspInit+0x218>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	60bb      	str	r3, [r7, #8]
 8001a78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a80:	2303      	movs	r3, #3
 8001a82:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <HAL_ADC_MspInit+0x224>)
 8001a90:	f003 fcf0 	bl	8005474 <HAL_GPIO_Init>
}
 8001a94:	bf00      	nop
 8001a96:	3788      	adds	r7, #136	; 0x88
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	50000400 	.word	0x50000400
 8001aa4:	20000514 	.word	0x20000514
 8001aa8:	48000400 	.word	0x48000400
 8001aac:	20000370 	.word	0x20000370
 8001ab0:	40020008 	.word	0x40020008
 8001ab4:	50000500 	.word	0x50000500

08001ab8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <HAL_TIM_Base_MspInit+0x5c>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a11      	ldr	r2, [pc, #68]	; (8001b14 <HAL_TIM_Base_MspInit+0x5c>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_TIM_Base_MspInit+0x5c>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ae2:	e010      	b.n	8001b06 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <HAL_TIM_Base_MspInit+0x60>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10b      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_TIM_Base_MspInit+0x5c>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <HAL_TIM_Base_MspInit+0x5c>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	6593      	str	r3, [r2, #88]	; 0x58
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_TIM_Base_MspInit+0x5c>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40000400 	.word	0x40000400

08001b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3c:	d11d      	bne.n	8001b7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b22      	ldr	r3, [pc, #136]	; (8001bc8 <HAL_TIM_MspPostInit+0xac>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <HAL_TIM_MspPostInit+0xac>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	; (8001bc8 <HAL_TIM_MspPostInit+0xac>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b56:	2302      	movs	r3, #2
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b66:	2301      	movs	r3, #1
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b74:	f003 fc7e 	bl	8005474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b78:	e021      	b.n	8001bbe <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <HAL_TIM_MspPostInit+0xb0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d11c      	bne.n	8001bbe <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_TIM_MspPostInit+0xac>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b88:	4a0f      	ldr	r2, [pc, #60]	; (8001bc8 <HAL_TIM_MspPostInit+0xac>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_TIM_MspPostInit+0xac>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b9c:	2340      	movs	r3, #64	; 0x40
 8001b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bac:	2302      	movs	r3, #2
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bba:	f003 fc5b 	bl	8005474 <HAL_GPIO_Init>
}
 8001bbe:	bf00      	nop
 8001bc0:	3728      	adds	r7, #40	; 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40000400 	.word	0x40000400

08001bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b09e      	sub	sp, #120	; 0x78
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be8:	f107 0310 	add.w	r3, r7, #16
 8001bec:	2254      	movs	r2, #84	; 0x54
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f008 f9eb 	bl	8009fcc <memset>
  if(huart->Instance==USART2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <HAL_UART_MspInit+0xb8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d13e      	bne.n	8001c7e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c00:	2302      	movs	r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f004 fbb3 	bl	8006378 <HAL_RCCEx_PeriphCLKConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c18:	f7ff fe0a 	bl	8001830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_UART_MspInit+0xbc>)
 8001c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c20:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <HAL_UART_MspInit+0xbc>)
 8001c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c26:	6593      	str	r3, [r2, #88]	; 0x58
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_UART_MspInit+0xbc>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c34:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <HAL_UART_MspInit+0xbc>)
 8001c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <HAL_UART_MspInit+0xbc>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <HAL_UART_MspInit+0xbc>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c4c:	230c      	movs	r3, #12
 8001c4e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c6a:	f003 fc03 	bl	8005474 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	2026      	movs	r0, #38	; 0x26
 8001c74:	f002 ff11 	bl	8004a9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c78:	2026      	movs	r0, #38	; 0x26
 8001c7a:	f002 ff28 	bl	8004ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c7e:	bf00      	nop
 8001c80:	3778      	adds	r7, #120	; 0x78
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40004400 	.word	0x40004400
 8001c8c:	40021000 	.word	0x40021000

08001c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <NMI_Handler+0x4>

08001c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <BusFault_Handler+0x4>

08001ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <UsageFault_Handler+0x4>

08001cae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cdc:	f000 f974 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <DMA1_Channel1_IRQHandler+0x10>)
 8001cea:	f003 f8ee 	bl	8004eca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000370 	.word	0x20000370

08001cf8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <ADC1_2_IRQHandler+0x10>)
 8001cfe:	f000 fe5b 	bl	80029b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000022c 	.word	0x2000022c

08001d0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <USART2_IRQHandler+0x10>)
 8001d12:	f005 ff43 	bl	8007b9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000468 	.word	0x20000468

08001d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
	return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_kill>:

int _kill(int pid, int sig)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d3a:	f008 f90f 	bl	8009f5c <__errno>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2216      	movs	r2, #22
 8001d42:	601a      	str	r2, [r3, #0]
	return -1;
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <_exit>:

void _exit (int status)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d58:	f04f 31ff 	mov.w	r1, #4294967295
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff ffe7 	bl	8001d30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d62:	e7fe      	b.n	8001d62 <_exit+0x12>

08001d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
 8001d74:	e00a      	b.n	8001d8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d76:	f3af 8000 	nop.w
 8001d7a:	4601      	mov	r1, r0
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	60ba      	str	r2, [r7, #8]
 8001d82:	b2ca      	uxtb	r2, r1
 8001d84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	dbf0      	blt.n	8001d76 <_read+0x12>
	}

return len;
 8001d94:	687b      	ldr	r3, [r7, #4]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	e009      	b.n	8001dc4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	60ba      	str	r2, [r7, #8]
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	dbf1      	blt.n	8001db0 <_write+0x12>
	}
	return len;
 8001dcc:	687b      	ldr	r3, [r7, #4]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <_close>:

int _close(int file)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b083      	sub	sp, #12
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
	return -1;
 8001dde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dfe:	605a      	str	r2, [r3, #4]
	return 0;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_isatty>:

int _isatty(int file)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
	return 1;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <_sbrk+0x5c>)
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <_sbrk+0x60>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <_sbrk+0x64>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <_sbrk+0x64>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <_sbrk+0x68>)
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d207      	bcs.n	8001e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e70:	f008 f874 	bl	8009f5c <__errno>
 8001e74:	4603      	mov	r3, r0
 8001e76:	220c      	movs	r2, #12
 8001e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	e009      	b.n	8001e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	4a05      	ldr	r2, [pc, #20]	; (8001ea4 <_sbrk+0x64>)
 8001e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e92:	68fb      	ldr	r3, [r7, #12]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20020000 	.word	0x20020000
 8001ea0:	00000400 	.word	0x00000400
 8001ea4:	20000518 	.word	0x20000518
 8001ea8:	20000568 	.word	0x20000568

08001eac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <SystemInit+0x20>)
 8001eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb6:	4a05      	ldr	r2, [pc, #20]	; (8001ecc <SystemInit+0x20>)
 8001eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ed2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ed4:	480d      	ldr	r0, [pc, #52]	; (8001f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001ed6:	490e      	ldr	r1, [pc, #56]	; (8001f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <LoopForever+0xe>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eec:	4c0b      	ldr	r4, [pc, #44]	; (8001f1c <LoopForever+0x16>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001efa:	f7ff ffd7 	bl	8001eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f008 f833 	bl	8009f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f02:	f7ff f8a1 	bl	8001048 <main>

08001f06 <LoopForever>:

LoopForever:
    b LoopForever
 8001f06:	e7fe      	b.n	8001f06 <LoopForever>
  ldr   r0, =_estack
 8001f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001f14:	0800edb8 	.word	0x0800edb8
  ldr r2, =_sbss
 8001f18:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001f1c:	20000564 	.word	0x20000564

08001f20 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC3_IRQHandler>

08001f22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f002 fda9 	bl	8004a84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f32:	200f      	movs	r0, #15
 8001f34:	f000 f80e 	bl	8001f54 <HAL_InitTick>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	71fb      	strb	r3, [r7, #7]
 8001f42:	e001      	b.n	8001f48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f44:	f7ff fc7a 	bl	800183c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f48:	79fb      	ldrb	r3, [r7, #7]

}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_InitTick+0x68>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d022      	beq.n	8001fae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <HAL_InitTick+0x6c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <HAL_InitTick+0x68>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 fdb4 	bl	8004aea <HAL_SYSTICK_Config>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10f      	bne.n	8001fa8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	d809      	bhi.n	8001fa2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	f04f 30ff 	mov.w	r0, #4294967295
 8001f96:	f002 fd80 	bl	8004a9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	; (8001fc4 <HAL_InitTick+0x70>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	e007      	b.n	8001fb2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	e004      	b.n	8001fb2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e001      	b.n	8001fb2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000018 	.word	0x20000018
 8001fc0:	20000010 	.word	0x20000010
 8001fc4:	20000014 	.word	0x20000014

08001fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	; (8001fe4 <HAL_IncTick+0x1c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	4a03      	ldr	r2, [pc, #12]	; (8001fe4 <HAL_IncTick+0x1c>)
 8001fd8:	6013      	str	r3, [r2, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	2000051c 	.word	0x2000051c
 8001fe8:	20000018 	.word	0x20000018

08001fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_GetTick+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	2000051c 	.word	0x2000051c

08002004 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	609a      	str	r2, [r3, #8]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3360      	adds	r3, #96	; 0x60
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <LL_ADC_SetOffset+0x44>)
 800208e:	4013      	ands	r3, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	4313      	orrs	r3, r2
 800209c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020a4:	bf00      	nop
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	03fff000 	.word	0x03fff000

080020b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3360      	adds	r3, #96	; 0x60
 80020c2:	461a      	mov	r2, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b087      	sub	sp, #28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3360      	adds	r3, #96	; 0x60
 80020f0:	461a      	mov	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	431a      	orrs	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002116:	b480      	push	{r7}
 8002118:	b087      	sub	sp, #28
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3360      	adds	r3, #96	; 0x60
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	431a      	orrs	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002140:	bf00      	nop
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3360      	adds	r3, #96	; 0x60
 800215c:	461a      	mov	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	431a      	orrs	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002176:	bf00      	nop
 8002178:	371c      	adds	r7, #28
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	615a      	str	r2, [r3, #20]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b087      	sub	sp, #28
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3330      	adds	r3, #48	; 0x30
 80021de:	461a      	mov	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	4413      	add	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f003 031f 	and.w	r3, r3, #31
 80021f8:	211f      	movs	r1, #31
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	401a      	ands	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0e9b      	lsrs	r3, r3, #26
 8002206:	f003 011f 	and.w	r1, r3, #31
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	431a      	orrs	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800221a:	bf00      	nop
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002232:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3314      	adds	r3, #20
 800225c:	461a      	mov	r2, r3
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	0e5b      	lsrs	r3, r3, #25
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	4413      	add	r3, r2
 800226a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	0d1b      	lsrs	r3, r3, #20
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2107      	movs	r1, #7
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	43db      	mvns	r3, r3
 8002280:	401a      	ands	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	0d1b      	lsrs	r3, r3, #20
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	431a      	orrs	r2, r3
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a0f      	ldr	r2, [pc, #60]	; (80022f0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d10a      	bne.n	80022ce <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c4:	431a      	orrs	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80022cc:	e00a      	b.n	80022e4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022da:	43db      	mvns	r3, r3
 80022dc:	401a      	ands	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	407f0000 	.word	0x407f0000

080022f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 031f 	and.w	r3, r3, #31
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800233c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6093      	str	r3, [r2, #8]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002364:	d101      	bne.n	800236a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002388:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800238c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023b4:	d101      	bne.n	80023ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023dc:	f043 0201 	orr.w	r2, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <LL_ADC_IsEnabled+0x18>
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <LL_ADC_IsEnabled+0x1a>
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002416:	b480      	push	{r7}
 8002418:	b083      	sub	sp, #12
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002426:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800242a:	f043 0204 	orr.w	r2, r3, #4
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b04      	cmp	r3, #4
 8002450:	d101      	bne.n	8002456 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b08      	cmp	r3, #8
 8002476:	d101      	bne.n	800247c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b089      	sub	sp, #36	; 0x24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e1af      	b.n	8002806 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff f9e5 	bl	8001884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff3f 	bl	8002350 <LL_ADC_IsDeepPowerDownEnabled>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d004      	beq.n	80024e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff25 	bl	800232c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff ff5a 	bl	80023a0 <LL_ADC_IsInternalRegulatorEnabled>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d115      	bne.n	800251e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff3e 	bl	8002378 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024fc:	4b9f      	ldr	r3, [pc, #636]	; (800277c <HAL_ADC_Init+0x2f0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	099b      	lsrs	r3, r3, #6
 8002502:	4a9f      	ldr	r2, [pc, #636]	; (8002780 <HAL_ADC_Init+0x2f4>)
 8002504:	fba2 2303 	umull	r2, r3, r2, r3
 8002508:	099b      	lsrs	r3, r3, #6
 800250a:	3301      	adds	r3, #1
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002510:	e002      	b.n	8002518 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3b01      	subs	r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f9      	bne.n	8002512 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff3c 	bl	80023a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10d      	bne.n	800254a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	f043 0210 	orr.w	r2, r3, #16
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff75 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 8002554:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	f040 8148 	bne.w	80027f4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 8144 	bne.w	80027f4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002574:	f043 0202 	orr.w	r2, r3, #2
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff35 	bl	80023f0 <LL_ADC_IsEnabled>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d141      	bne.n	8002610 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002594:	d004      	beq.n	80025a0 <HAL_ADC_Init+0x114>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7a      	ldr	r2, [pc, #488]	; (8002784 <HAL_ADC_Init+0x2f8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d10f      	bne.n	80025c0 <HAL_ADC_Init+0x134>
 80025a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025a4:	f7ff ff24 	bl	80023f0 <LL_ADC_IsEnabled>
 80025a8:	4604      	mov	r4, r0
 80025aa:	4876      	ldr	r0, [pc, #472]	; (8002784 <HAL_ADC_Init+0x2f8>)
 80025ac:	f7ff ff20 	bl	80023f0 <LL_ADC_IsEnabled>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4323      	orrs	r3, r4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e012      	b.n	80025e6 <HAL_ADC_Init+0x15a>
 80025c0:	4871      	ldr	r0, [pc, #452]	; (8002788 <HAL_ADC_Init+0x2fc>)
 80025c2:	f7ff ff15 	bl	80023f0 <LL_ADC_IsEnabled>
 80025c6:	4604      	mov	r4, r0
 80025c8:	4870      	ldr	r0, [pc, #448]	; (800278c <HAL_ADC_Init+0x300>)
 80025ca:	f7ff ff11 	bl	80023f0 <LL_ADC_IsEnabled>
 80025ce:	4603      	mov	r3, r0
 80025d0:	431c      	orrs	r4, r3
 80025d2:	486f      	ldr	r0, [pc, #444]	; (8002790 <HAL_ADC_Init+0x304>)
 80025d4:	f7ff ff0c 	bl	80023f0 <LL_ADC_IsEnabled>
 80025d8:	4603      	mov	r3, r0
 80025da:	4323      	orrs	r3, r4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d012      	beq.n	8002610 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f2:	d004      	beq.n	80025fe <HAL_ADC_Init+0x172>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a62      	ldr	r2, [pc, #392]	; (8002784 <HAL_ADC_Init+0x2f8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_Init+0x176>
 80025fe:	4a65      	ldr	r2, [pc, #404]	; (8002794 <HAL_ADC_Init+0x308>)
 8002600:	e000      	b.n	8002604 <HAL_ADC_Init+0x178>
 8002602:	4a65      	ldr	r2, [pc, #404]	; (8002798 <HAL_ADC_Init+0x30c>)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f7ff fcfa 	bl	8002004 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7f5b      	ldrb	r3, [r3, #29]
 8002614:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800261a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002620:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002626:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800262e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800263a:	2b01      	cmp	r3, #1
 800263c:	d106      	bne.n	800264c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002642:	3b01      	subs	r3, #1
 8002644:	045b      	lsls	r3, r3, #17
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	4b4b      	ldr	r3, [pc, #300]	; (800279c <HAL_ADC_Init+0x310>)
 8002670:	4013      	ands	r3, r2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	69b9      	ldr	r1, [r7, #24]
 8002678:	430b      	orrs	r3, r1
 800267a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fed1 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 800269c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fede 	bl	8002464 <LL_ADC_INJ_IsConversionOngoing>
 80026a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d17f      	bne.n	80027b0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d17c      	bne.n	80027b0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026ba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026c2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026d2:	f023 0302 	bic.w	r3, r3, #2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	69b9      	ldr	r1, [r7, #24]
 80026dc:	430b      	orrs	r3, r1
 80026de:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d017      	beq.n	8002718 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80026f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002700:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002704:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6911      	ldr	r1, [r2, #16]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	430b      	orrs	r3, r1
 8002712:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002716:	e013      	b.n	8002740 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691a      	ldr	r2, [r3, #16]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002726:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002738:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800273c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002746:	2b01      	cmp	r3, #1
 8002748:	d12a      	bne.n	80027a0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002754:	f023 0304 	bic.w	r3, r3, #4
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002760:	4311      	orrs	r1, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002766:	4311      	orrs	r1, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800276c:	430a      	orrs	r2, r1
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0201 	orr.w	r2, r2, #1
 8002778:	611a      	str	r2, [r3, #16]
 800277a:	e019      	b.n	80027b0 <HAL_ADC_Init+0x324>
 800277c:	20000010 	.word	0x20000010
 8002780:	053e2d63 	.word	0x053e2d63
 8002784:	50000100 	.word	0x50000100
 8002788:	50000400 	.word	0x50000400
 800278c:	50000500 	.word	0x50000500
 8002790:	50000600 	.word	0x50000600
 8002794:	50000300 	.word	0x50000300
 8002798:	50000700 	.word	0x50000700
 800279c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d10c      	bne.n	80027d2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f023 010f 	bic.w	r1, r3, #15
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	1e5a      	subs	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
 80027d0:	e007      	b.n	80027e2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 020f 	bic.w	r2, r2, #15
 80027e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	f023 0303 	bic.w	r3, r3, #3
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80027f2:	e007      	b.n	8002804 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f8:	f043 0210 	orr.w	r2, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002804:	7ffb      	ldrb	r3, [r7, #31]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3724      	adds	r7, #36	; 0x24
 800280a:	46bd      	mov	sp, r7
 800280c:	bd90      	pop	{r4, r7, pc}
 800280e:	bf00      	nop

08002810 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002824:	d004      	beq.n	8002830 <HAL_ADC_Start_DMA+0x20>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_ADC_Start_DMA+0x184>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d101      	bne.n	8002834 <HAL_ADC_Start_DMA+0x24>
 8002830:	4b59      	ldr	r3, [pc, #356]	; (8002998 <HAL_ADC_Start_DMA+0x188>)
 8002832:	e000      	b.n	8002836 <HAL_ADC_Start_DMA+0x26>
 8002834:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_ADC_Start_DMA+0x18c>)
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff fd5c 	bl	80022f4 <LL_ADC_GetMultimode>
 800283c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fdfb 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	f040 809b 	bne.w	8002986 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_ADC_Start_DMA+0x4e>
 800285a:	2302      	movs	r3, #2
 800285c:	e096      	b.n	800298c <HAL_ADC_Start_DMA+0x17c>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a4d      	ldr	r2, [pc, #308]	; (80029a0 <HAL_ADC_Start_DMA+0x190>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d008      	beq.n	8002882 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d002      	beq.n	8002882 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b09      	cmp	r3, #9
 8002880:	d17a      	bne.n	8002978 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 ff56 	bl	8003734 <ADC_Enable>
 8002888:	4603      	mov	r3, r0
 800288a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d16d      	bne.n	800296e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800289a:	f023 0301 	bic.w	r3, r3, #1
 800289e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a3a      	ldr	r2, [pc, #232]	; (8002994 <HAL_ADC_Start_DMA+0x184>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d009      	beq.n	80028c4 <HAL_ADC_Start_DMA+0xb4>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a3b      	ldr	r2, [pc, #236]	; (80029a4 <HAL_ADC_Start_DMA+0x194>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d002      	beq.n	80028c0 <HAL_ADC_Start_DMA+0xb0>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	e003      	b.n	80028c8 <HAL_ADC_Start_DMA+0xb8>
 80028c0:	4b39      	ldr	r3, [pc, #228]	; (80029a8 <HAL_ADC_Start_DMA+0x198>)
 80028c2:	e001      	b.n	80028c8 <HAL_ADC_Start_DMA+0xb8>
 80028c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d002      	beq.n	80028d6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d105      	bne.n	80028e2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d006      	beq.n	80028fc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f2:	f023 0206 	bic.w	r2, r3, #6
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	661a      	str	r2, [r3, #96]	; 0x60
 80028fa:	e002      	b.n	8002902 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	4a29      	ldr	r2, [pc, #164]	; (80029ac <HAL_ADC_Start_DMA+0x19c>)
 8002908:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290e:	4a28      	ldr	r2, [pc, #160]	; (80029b0 <HAL_ADC_Start_DMA+0x1a0>)
 8002910:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002916:	4a27      	ldr	r2, [pc, #156]	; (80029b4 <HAL_ADC_Start_DMA+0x1a4>)
 8002918:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	221c      	movs	r2, #28
 8002920:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0210 	orr.w	r2, r2, #16
 8002938:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3340      	adds	r3, #64	; 0x40
 8002954:	4619      	mov	r1, r3
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f002 f97b 	bl	8004c54 <HAL_DMA_Start_IT>
 800295e:	4603      	mov	r3, r0
 8002960:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fd55 	bl	8002416 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800296c:	e00d      	b.n	800298a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002976:	e008      	b.n	800298a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002984:	e001      	b.n	800298a <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002986:	2302      	movs	r3, #2
 8002988:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800298a:	7dfb      	ldrb	r3, [r7, #23]
}
 800298c:	4618      	mov	r0, r3
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	50000100 	.word	0x50000100
 8002998:	50000300 	.word	0x50000300
 800299c:	50000700 	.word	0x50000700
 80029a0:	50000600 	.word	0x50000600
 80029a4:	50000500 	.word	0x50000500
 80029a8:	50000400 	.word	0x50000400
 80029ac:	080037f9 	.word	0x080037f9
 80029b0:	080038d1 	.word	0x080038d1
 80029b4:	080038ed 	.word	0x080038ed

080029b8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	; 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80029c0:	2300      	movs	r3, #0
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029dc:	d004      	beq.n	80029e8 <HAL_ADC_IRQHandler+0x30>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a8e      	ldr	r2, [pc, #568]	; (8002c1c <HAL_ADC_IRQHandler+0x264>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_IRQHandler+0x34>
 80029e8:	4b8d      	ldr	r3, [pc, #564]	; (8002c20 <HAL_ADC_IRQHandler+0x268>)
 80029ea:	e000      	b.n	80029ee <HAL_ADC_IRQHandler+0x36>
 80029ec:	4b8d      	ldr	r3, [pc, #564]	; (8002c24 <HAL_ADC_IRQHandler+0x26c>)
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fc80 	bl	80022f4 <LL_ADC_GetMultimode>
 80029f4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d017      	beq.n	8002a30 <HAL_ADC_IRQHandler+0x78>
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d012      	beq.n	8002a30 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d105      	bne.n	8002a22 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f001 f8f1 	bl	8003c0a <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0304 	and.w	r3, r3, #4
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d004      	beq.n	8002a44 <HAL_ADC_IRQHandler+0x8c>
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10b      	bne.n	8002a5c <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8094 	beq.w	8002b78 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 808e 	beq.w	8002b78 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d105      	bne.n	8002a74 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fb95 	bl	80021a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d072      	beq.n	8002b6a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a64      	ldr	r2, [pc, #400]	; (8002c1c <HAL_ADC_IRQHandler+0x264>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_ADC_IRQHandler+0xea>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a65      	ldr	r2, [pc, #404]	; (8002c28 <HAL_ADC_IRQHandler+0x270>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d002      	beq.n	8002a9e <HAL_ADC_IRQHandler+0xe6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	e003      	b.n	8002aa6 <HAL_ADC_IRQHandler+0xee>
 8002a9e:	4b63      	ldr	r3, [pc, #396]	; (8002c2c <HAL_ADC_IRQHandler+0x274>)
 8002aa0:	e001      	b.n	8002aa6 <HAL_ADC_IRQHandler+0xee>
 8002aa2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d008      	beq.n	8002ac0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d002      	beq.n	8002ac0 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b09      	cmp	r3, #9
 8002abe:	d104      	bne.n	8002aca <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	623b      	str	r3, [r7, #32]
 8002ac8:	e014      	b.n	8002af4 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a53      	ldr	r2, [pc, #332]	; (8002c1c <HAL_ADC_IRQHandler+0x264>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d009      	beq.n	8002ae8 <HAL_ADC_IRQHandler+0x130>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a53      	ldr	r2, [pc, #332]	; (8002c28 <HAL_ADC_IRQHandler+0x270>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d002      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x12c>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_IRQHandler+0x134>
 8002ae4:	4b51      	ldr	r3, [pc, #324]	; (8002c2c <HAL_ADC_IRQHandler+0x274>)
 8002ae6:	e001      	b.n	8002aec <HAL_ADC_IRQHandler+0x134>
 8002ae8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002aec:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d135      	bne.n	8002b6a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d12e      	bne.n	8002b6a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fc94 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d11a      	bne.n	8002b52 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 020c 	bic.w	r2, r2, #12
 8002b2a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d112      	bne.n	8002b6a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b50:	e00b      	b.n	8002b6a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b56:	f043 0210 	orr.w	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f006 ffa6 	bl	8009abc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	220c      	movs	r2, #12
 8002b76:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d004      	beq.n	8002b8c <HAL_ADC_IRQHandler+0x1d4>
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80b3 	beq.w	8002cfe <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 80ad 	beq.w	8002cfe <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fb30 	bl	8002226 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002bc6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff faeb 	bl	80021a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bd2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a10      	ldr	r2, [pc, #64]	; (8002c1c <HAL_ADC_IRQHandler+0x264>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_ADC_IRQHandler+0x23a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <HAL_ADC_IRQHandler+0x270>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d002      	beq.n	8002bee <HAL_ADC_IRQHandler+0x236>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	e003      	b.n	8002bf6 <HAL_ADC_IRQHandler+0x23e>
 8002bee:	4b0f      	ldr	r3, [pc, #60]	; (8002c2c <HAL_ADC_IRQHandler+0x274>)
 8002bf0:	e001      	b.n	8002bf6 <HAL_ADC_IRQHandler+0x23e>
 8002bf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6812      	ldr	r2, [r2, #0]
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d008      	beq.n	8002c10 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d002      	beq.n	8002c10 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b07      	cmp	r3, #7
 8002c0e:	d10f      	bne.n	8002c30 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	623b      	str	r3, [r7, #32]
 8002c18:	e01f      	b.n	8002c5a <HAL_ADC_IRQHandler+0x2a2>
 8002c1a:	bf00      	nop
 8002c1c:	50000100 	.word	0x50000100
 8002c20:	50000300 	.word	0x50000300
 8002c24:	50000700 	.word	0x50000700
 8002c28:	50000500 	.word	0x50000500
 8002c2c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a8b      	ldr	r2, [pc, #556]	; (8002e64 <HAL_ADC_IRQHandler+0x4ac>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d009      	beq.n	8002c4e <HAL_ADC_IRQHandler+0x296>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a8a      	ldr	r2, [pc, #552]	; (8002e68 <HAL_ADC_IRQHandler+0x4b0>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d002      	beq.n	8002c4a <HAL_ADC_IRQHandler+0x292>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	e003      	b.n	8002c52 <HAL_ADC_IRQHandler+0x29a>
 8002c4a:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <HAL_ADC_IRQHandler+0x4b4>)
 8002c4c:	e001      	b.n	8002c52 <HAL_ADC_IRQHandler+0x29a>
 8002c4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c52:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d047      	beq.n	8002cf0 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d007      	beq.n	8002c7a <HAL_ADC_IRQHandler+0x2c2>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d03f      	beq.n	8002cf0 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d13a      	bne.n	8002cf0 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d133      	bne.n	8002cf0 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d12e      	bne.n	8002cf0 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fbe4 	bl	8002464 <LL_ADC_INJ_IsConversionOngoing>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11a      	bne.n	8002cd8 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cb0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d112      	bne.n	8002cf0 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	f043 0201 	orr.w	r2, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cd6:	e00b      	b.n	8002cf0 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	f043 0210 	orr.w	r2, r3, #16
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 ff62 	bl	8003bba <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2260      	movs	r2, #96	; 0x60
 8002cfc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d011      	beq.n	8002d2c <HAL_ADC_IRQHandler+0x374>
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00c      	beq.n	8002d2c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f8b4 	bl	8002e8c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2280      	movs	r2, #128	; 0x80
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d012      	beq.n	8002d5c <HAL_ADC_IRQHandler+0x3a4>
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00d      	beq.n	8002d5c <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 ff48 	bl	8003be2 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d012      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x3d4>
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00d      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 ff3a 	bl	8003bf6 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d043      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x466>
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d03e      	beq.n	8002e1e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d102      	bne.n	8002dae <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002da8:	2301      	movs	r3, #1
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dac:	e021      	b.n	8002df2 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d015      	beq.n	8002de0 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dbc:	d004      	beq.n	8002dc8 <HAL_ADC_IRQHandler+0x410>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a28      	ldr	r2, [pc, #160]	; (8002e64 <HAL_ADC_IRQHandler+0x4ac>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_IRQHandler+0x414>
 8002dc8:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <HAL_ADC_IRQHandler+0x4b8>)
 8002dca:	e000      	b.n	8002dce <HAL_ADC_IRQHandler+0x416>
 8002dcc:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <HAL_ADC_IRQHandler+0x4bc>)
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fa9e 	bl	8002310 <LL_ADC_GetMultiDMATransfer>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00b      	beq.n	8002df2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dde:	e008      	b.n	8002df2 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002dee:	2301      	movs	r3, #1
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d10e      	bne.n	8002e16 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e08:	f043 0202 	orr.w	r2, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f845 	bl	8002ea0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d018      	beq.n	8002e5a <HAL_ADC_IRQHandler+0x4a2>
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d013      	beq.n	8002e5a <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e36:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e42:	f043 0208 	orr.w	r2, r3, #8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e52:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 feba 	bl	8003bce <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002e5a:	bf00      	nop
 8002e5c:	3728      	adds	r7, #40	; 0x28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	50000100 	.word	0x50000100
 8002e68:	50000500 	.word	0x50000500
 8002e6c:	50000400 	.word	0x50000400
 8002e70:	50000300 	.word	0x50000300
 8002e74:	50000700 	.word	0x50000700

08002e78 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b0b6      	sub	sp, #216	; 0xd8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x24>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f000 bc13 	b.w	80036fe <HAL_ADC_ConfigChannel+0x84a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff faaa 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 83f3 	bne.w	80036d8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f7ff f965 	bl	80021ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fa98 	bl	800243e <LL_ADC_REG_IsConversionOngoing>
 8002f0e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff faa4 	bl	8002464 <LL_ADC_INJ_IsConversionOngoing>
 8002f1c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 81d9 	bne.w	80032dc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 81d4 	bne.w	80032dc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f3c:	d10f      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2200      	movs	r2, #0
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f7ff f97f 	bl	800224c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff f913 	bl	8002182 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f5c:	e00e      	b.n	8002f7c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6819      	ldr	r1, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f7ff f96e 	bl	800224c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff f903 	bl	8002182 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d022      	beq.n	8002fe4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6919      	ldr	r1, [r3, #16]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fae:	f7ff f85d 	bl	800206c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6919      	ldr	r1, [r3, #16]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f7ff f8a9 	bl	8002116 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6919      	ldr	r1, [r3, #16]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	7f1b      	ldrb	r3, [r3, #28]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x126>
 8002fd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fd8:	e000      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x128>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f7ff f8b5 	bl	800214c <LL_ADC_SetOffsetSaturation>
 8002fe2:	e17b      	b.n	80032dc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff f862 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x15c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff f857 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8003006:	4603      	mov	r3, r0
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	f003 021f 	and.w	r2, r3, #31
 800300e:	e01e      	b.n	800304e <HAL_ADC_ConfigChannel+0x19a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff f84c 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 800301c:	4603      	mov	r3, r0
 800301e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800302e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003032:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e004      	b.n	800304c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x1b2>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	e018      	b.n	8003098 <HAL_ADC_ConfigChannel+0x1e4>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800307a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800307e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003082:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e004      	b.n	8003098 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800308e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003098:	429a      	cmp	r2, r3
 800309a:	d106      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff f81b 	bl	80020e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fe ffff 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x222>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fe fff4 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 80030cc:	4603      	mov	r3, r0
 80030ce:	0e9b      	lsrs	r3, r3, #26
 80030d0:	f003 021f 	and.w	r2, r3, #31
 80030d4:	e01e      	b.n	8003114 <HAL_ADC_ConfigChannel+0x260>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2101      	movs	r1, #1
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe ffe9 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80030f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80030fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e004      	b.n	8003112 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003108:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_ADC_ConfigChannel+0x278>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	0e9b      	lsrs	r3, r3, #26
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	e018      	b.n	800315e <HAL_ADC_ConfigChannel+0x2aa>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003140:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e004      	b.n	800315e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003154:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800315e:	429a      	cmp	r2, r3
 8003160:	d106      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe ffb8 	bl	80020e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2102      	movs	r1, #2
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe ff9c 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 800317c:	4603      	mov	r3, r0
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_ADC_ConfigChannel+0x2e8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2102      	movs	r1, #2
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe ff91 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8003192:	4603      	mov	r3, r0
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	f003 021f 	and.w	r2, r3, #31
 800319a:	e01e      	b.n	80031da <HAL_ADC_ConfigChannel+0x326>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2102      	movs	r1, #2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe ff86 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80031ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80031c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80031ca:	2320      	movs	r3, #32
 80031cc:	e004      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80031ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x33e>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	0e9b      	lsrs	r3, r3, #26
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	e016      	b.n	8003220 <HAL_ADC_ConfigChannel+0x36c>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003204:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003206:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800320a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003212:	2320      	movs	r3, #32
 8003214:	e004      	b.n	8003220 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003220:	429a      	cmp	r2, r3
 8003222:	d106      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	2102      	movs	r1, #2
 800322c:	4618      	mov	r0, r3
 800322e:	f7fe ff57 	bl	80020e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2103      	movs	r1, #3
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe ff3b 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 800323e:	4603      	mov	r3, r0
 8003240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <HAL_ADC_ConfigChannel+0x3aa>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2103      	movs	r1, #3
 800324e:	4618      	mov	r0, r3
 8003250:	f7fe ff30 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 8003254:	4603      	mov	r3, r0
 8003256:	0e9b      	lsrs	r3, r3, #26
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	e017      	b.n	800328e <HAL_ADC_ConfigChannel+0x3da>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2103      	movs	r1, #3
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe ff25 	bl	80020b4 <LL_ADC_GetOffsetChannel>
 800326a:	4603      	mov	r3, r0
 800326c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003276:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003278:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800327a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003280:	2320      	movs	r3, #32
 8003282:	e003      	b.n	800328c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003284:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x3f2>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0e9b      	lsrs	r3, r3, #26
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	e011      	b.n	80032ca <HAL_ADC_ConfigChannel+0x416>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80032b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e003      	b.n	80032ca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80032c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d106      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2103      	movs	r1, #3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe ff02 	bl	80020e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff f885 	bl	80023f0 <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 813d 	bne.w	8003568 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f7fe ffd2 	bl	80022a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4aa2      	ldr	r2, [pc, #648]	; (8003590 <HAL_ADC_ConfigChannel+0x6dc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	f040 812e 	bne.w	8003568 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10b      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x480>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0e9b      	lsrs	r3, r3, #26
 8003322:	3301      	adds	r3, #1
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	2b09      	cmp	r3, #9
 800332a:	bf94      	ite	ls
 800332c:	2301      	movls	r3, #1
 800332e:	2300      	movhi	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e019      	b.n	8003368 <HAL_ADC_ConfigChannel+0x4b4>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003344:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800334c:	2320      	movs	r3, #32
 800334e:	e003      	b.n	8003358 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003350:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	3301      	adds	r3, #1
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2b09      	cmp	r3, #9
 8003360:	bf94      	ite	ls
 8003362:	2301      	movls	r3, #1
 8003364:	2300      	movhi	r3, #0
 8003366:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003368:	2b00      	cmp	r3, #0
 800336a:	d079      	beq.n	8003460 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x4d4>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	3301      	adds	r3, #1
 8003380:	069b      	lsls	r3, r3, #26
 8003382:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003386:	e015      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x500>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003398:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800339a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	e003      	b.n	80033ac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80033a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	069b      	lsls	r3, r3, #26
 80033b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x520>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0e9b      	lsrs	r3, r3, #26
 80033c6:	3301      	adds	r3, #1
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	e017      	b.n	8003404 <HAL_ADC_ConfigChannel+0x550>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80033e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80033e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80033ec:	2320      	movs	r3, #32
 80033ee:	e003      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80033f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	3301      	adds	r3, #1
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	ea42 0103 	orr.w	r1, r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <HAL_ADC_ConfigChannel+0x576>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	3301      	adds	r3, #1
 800341c:	f003 021f 	and.w	r2, r3, #31
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	051b      	lsls	r3, r3, #20
 8003428:	e018      	b.n	800345c <HAL_ADC_ConfigChannel+0x5a8>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800343c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003442:	2320      	movs	r3, #32
 8003444:	e003      	b.n	800344e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f003 021f 	and.w	r2, r3, #31
 8003454:	4613      	mov	r3, r2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800345c:	430b      	orrs	r3, r1
 800345e:	e07e      	b.n	800355e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003468:	2b00      	cmp	r3, #0
 800346a:	d107      	bne.n	800347c <HAL_ADC_ConfigChannel+0x5c8>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	3301      	adds	r3, #1
 8003474:	069b      	lsls	r3, r3, #26
 8003476:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800347a:	e015      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x5f4>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003494:	2320      	movs	r3, #32
 8003496:	e003      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	069b      	lsls	r3, r3, #26
 80034a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x614>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	0e9b      	lsrs	r3, r3, #26
 80034ba:	3301      	adds	r3, #1
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2101      	movs	r1, #1
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	e017      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x644>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	61fb      	str	r3, [r7, #28]
  return result;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80034e0:	2320      	movs	r3, #32
 80034e2:	e003      	b.n	80034ec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2101      	movs	r1, #1
 80034f4:	fa01 f303 	lsl.w	r3, r1, r3
 80034f8:	ea42 0103 	orr.w	r1, r2, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10d      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x670>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0e9b      	lsrs	r3, r3, #26
 800350e:	3301      	adds	r3, #1
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	3b1e      	subs	r3, #30
 800351c:	051b      	lsls	r3, r3, #20
 800351e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003522:	e01b      	b.n	800355c <HAL_ADC_ConfigChannel+0x6a8>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	613b      	str	r3, [r7, #16]
  return result;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800353c:	2320      	movs	r3, #32
 800353e:	e003      	b.n	8003548 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	3301      	adds	r3, #1
 800354a:	f003 021f 	and.w	r2, r3, #31
 800354e:	4613      	mov	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	3b1e      	subs	r3, #30
 8003556:	051b      	lsls	r3, r3, #20
 8003558:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800355c:	430b      	orrs	r3, r1
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	6892      	ldr	r2, [r2, #8]
 8003562:	4619      	mov	r1, r3
 8003564:	f7fe fe72 	bl	800224c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_ADC_ConfigChannel+0x6e0>)
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80be 	beq.w	80036f2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800357e:	d004      	beq.n	800358a <HAL_ADC_ConfigChannel+0x6d6>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a04      	ldr	r2, [pc, #16]	; (8003598 <HAL_ADC_ConfigChannel+0x6e4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x6ec>
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <HAL_ADC_ConfigChannel+0x6e8>)
 800358c:	e009      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x6ee>
 800358e:	bf00      	nop
 8003590:	407f0000 	.word	0x407f0000
 8003594:	80080000 	.word	0x80080000
 8003598:	50000100 	.word	0x50000100
 800359c:	50000300 	.word	0x50000300
 80035a0:	4b59      	ldr	r3, [pc, #356]	; (8003708 <HAL_ADC_ConfigChannel+0x854>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fd54 	bl	8002050 <LL_ADC_GetCommonPathInternalCh>
 80035a8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a56      	ldr	r2, [pc, #344]	; (800370c <HAL_ADC_ConfigChannel+0x858>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_ADC_ConfigChannel+0x70c>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a55      	ldr	r2, [pc, #340]	; (8003710 <HAL_ADC_ConfigChannel+0x85c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d13a      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80035c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d134      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d4:	d005      	beq.n	80035e2 <HAL_ADC_ConfigChannel+0x72e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a4e      	ldr	r2, [pc, #312]	; (8003714 <HAL_ADC_ConfigChannel+0x860>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	f040 8085 	bne.w	80036ec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ea:	d004      	beq.n	80035f6 <HAL_ADC_ConfigChannel+0x742>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a49      	ldr	r2, [pc, #292]	; (8003718 <HAL_ADC_ConfigChannel+0x864>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x746>
 80035f6:	4a49      	ldr	r2, [pc, #292]	; (800371c <HAL_ADC_ConfigChannel+0x868>)
 80035f8:	e000      	b.n	80035fc <HAL_ADC_ConfigChannel+0x748>
 80035fa:	4a43      	ldr	r2, [pc, #268]	; (8003708 <HAL_ADC_ConfigChannel+0x854>)
 80035fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003600:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f7fe fd0f 	bl	800202a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800360c:	4b44      	ldr	r3, [pc, #272]	; (8003720 <HAL_ADC_ConfigChannel+0x86c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	4a44      	ldr	r2, [pc, #272]	; (8003724 <HAL_ADC_ConfigChannel+0x870>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003626:	e002      	b.n	800362e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3b01      	subs	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f9      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003634:	e05a      	b.n	80036ec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3b      	ldr	r2, [pc, #236]	; (8003728 <HAL_ADC_ConfigChannel+0x874>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d125      	bne.n	800368c <HAL_ADC_ConfigChannel+0x7d8>
 8003640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d11f      	bne.n	800368c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a31      	ldr	r2, [pc, #196]	; (8003718 <HAL_ADC_ConfigChannel+0x864>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d104      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x7ac>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a34      	ldr	r2, [pc, #208]	; (800372c <HAL_ADC_ConfigChannel+0x878>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d047      	beq.n	80036f0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003668:	d004      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x7c0>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2a      	ldr	r2, [pc, #168]	; (8003718 <HAL_ADC_ConfigChannel+0x864>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x7c4>
 8003674:	4a29      	ldr	r2, [pc, #164]	; (800371c <HAL_ADC_ConfigChannel+0x868>)
 8003676:	e000      	b.n	800367a <HAL_ADC_ConfigChannel+0x7c6>
 8003678:	4a23      	ldr	r2, [pc, #140]	; (8003708 <HAL_ADC_ConfigChannel+0x854>)
 800367a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800367e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7fe fcd0 	bl	800202a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800368a:	e031      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a27      	ldr	r2, [pc, #156]	; (8003730 <HAL_ADC_ConfigChannel+0x87c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d12d      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800369a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d127      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <HAL_ADC_ConfigChannel+0x864>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d022      	beq.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036b4:	d004      	beq.n	80036c0 <HAL_ADC_ConfigChannel+0x80c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a17      	ldr	r2, [pc, #92]	; (8003718 <HAL_ADC_ConfigChannel+0x864>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d101      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x810>
 80036c0:	4a16      	ldr	r2, [pc, #88]	; (800371c <HAL_ADC_ConfigChannel+0x868>)
 80036c2:	e000      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x812>
 80036c4:	4a10      	ldr	r2, [pc, #64]	; (8003708 <HAL_ADC_ConfigChannel+0x854>)
 80036c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f7fe fcaa 	bl	800202a <LL_ADC_SetCommonPathInternalCh>
 80036d6:	e00c      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80036ea:	e002      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ec:	bf00      	nop
 80036ee:	e000      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80036fe:	4618      	mov	r0, r3
 8003700:	37d8      	adds	r7, #216	; 0xd8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	50000700 	.word	0x50000700
 800370c:	c3210000 	.word	0xc3210000
 8003710:	90c00010 	.word	0x90c00010
 8003714:	50000600 	.word	0x50000600
 8003718:	50000100 	.word	0x50000100
 800371c:	50000300 	.word	0x50000300
 8003720:	20000010 	.word	0x20000010
 8003724:	053e2d63 	.word	0x053e2d63
 8003728:	c7520000 	.word	0xc7520000
 800372c:	50000500 	.word	0x50000500
 8003730:	cb840000 	.word	0xcb840000

08003734 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe fe55 	bl	80023f0 <LL_ADC_IsEnabled>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d14d      	bne.n	80037e8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689a      	ldr	r2, [r3, #8]
 8003752:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <ADC_Enable+0xc0>)
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00d      	beq.n	8003776 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	f043 0210 	orr.w	r2, r3, #16
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e039      	b.n	80037ea <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe fe24 	bl	80023c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003780:	f7fe fc34 	bl	8001fec <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003786:	e028      	b.n	80037da <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7fe fe2f 	bl	80023f0 <LL_ADC_IsEnabled>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe fe13 	bl	80023c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037a2:	f7fe fc23 	bl	8001fec <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d914      	bls.n	80037da <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d00d      	beq.n	80037da <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	f043 0210 	orr.w	r2, r3, #16
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ce:	f043 0201 	orr.w	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e007      	b.n	80037ea <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d1cf      	bne.n	8003788 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	8000003f 	.word	0x8000003f

080037f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800380e:	2b00      	cmp	r3, #0
 8003810:	d14b      	bne.n	80038aa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003816:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b00      	cmp	r3, #0
 800382a:	d021      	beq.n	8003870 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fcb9 	bl	80021a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d032      	beq.n	80038a2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d12b      	bne.n	80038a2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d11f      	bne.n	80038a2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	65da      	str	r2, [r3, #92]	; 0x5c
 800386e:	e018      	b.n	80038a2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d111      	bne.n	80038a2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d105      	bne.n	80038a2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	f043 0201 	orr.w	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f006 f90a 	bl	8009abc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038a8:	e00e      	b.n	80038c8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff faf2 	bl	8002ea0 <HAL_ADC_ErrorCallback>
}
 80038bc:	e004      	b.n	80038c8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
}
 80038c8:	bf00      	nop
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f7ff faca 	bl	8002e78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038e4:	bf00      	nop
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390a:	f043 0204 	orr.w	r2, r3, #4
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f7ff fac4 	bl	8002ea0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003918:	bf00      	nop
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <LL_ADC_SetCommonPathInternalCh>:
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	609a      	str	r2, [r3, #8]
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <LL_ADC_GetCommonPathInternalCh>:
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <LL_ADC_SetOffset>:
{
 8003964:	b480      	push	{r7}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3360      	adds	r3, #96	; 0x60
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <LL_ADC_SetOffset+0x44>)
 8003986:	4013      	ands	r3, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	4313      	orrs	r3, r2
 8003994:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	601a      	str	r2, [r3, #0]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	03fff000 	.word	0x03fff000

080039ac <LL_ADC_GetOffsetChannel>:
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3360      	adds	r3, #96	; 0x60
 80039ba:	461a      	mov	r2, r3
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_ADC_SetOffsetState>:
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	3360      	adds	r3, #96	; 0x60
 80039e8:	461a      	mov	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	431a      	orrs	r2, r3
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	601a      	str	r2, [r3, #0]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <LL_ADC_SetOffsetSign>:
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b087      	sub	sp, #28
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3360      	adds	r3, #96	; 0x60
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	601a      	str	r2, [r3, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	371c      	adds	r7, #28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LL_ADC_SetOffsetSaturation>:
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3360      	adds	r3, #96	; 0x60
 8003a54:	461a      	mov	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	601a      	str	r2, [r3, #0]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	615a      	str	r2, [r3, #20]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_ADC_SetChannelSamplingTime>:
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3314      	adds	r3, #20
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	0e5b      	lsrs	r3, r3, #25
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	4413      	add	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	0d1b      	lsrs	r3, r3, #20
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	2107      	movs	r1, #7
 8003ace:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	401a      	ands	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	0d1b      	lsrs	r3, r3, #20
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <LL_ADC_SetChannelSingleDiff>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a0f      	ldr	r2, [pc, #60]	; (8003b44 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d10a      	bne.n	8003b22 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003b20:	e00a      	b.n	8003b38 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	401a      	ands	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	407f0000 	.word	0x407f0000

08003b48 <LL_ADC_IsEnabled>:
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <LL_ADC_IsEnabled+0x18>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <LL_ADC_IsEnabled+0x1a>
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <LL_ADC_REG_IsConversionOngoing>:
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b083      	sub	sp, #12
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d101      	bne.n	8003b86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <LL_ADC_INJ_IsConversionOngoing>:
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d101      	bne.n	8003bac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b0b6      	sub	sp, #216	; 0xd8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003c30:	2300      	movs	r3, #0
 8003c32:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d102      	bne.n	8003c4a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003c44:	2302      	movs	r3, #2
 8003c46:	f000 bcfd 	b.w	8004644 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d130      	bne.n	8003cc4 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b09      	cmp	r3, #9
 8003c68:	d179      	bne.n	8003d5e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d010      	beq.n	8003c94 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	0e9b      	lsrs	r3, r3, #26
 8003c78:	025b      	lsls	r3, r3, #9
 8003c7a:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c82:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003c86:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c92:	e007      	b.n	8003ca4 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	0e9b      	lsrs	r3, r3, #26
 8003c9a:	025b      	lsls	r3, r3, #9
 8003c9c:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8003ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003caa:	4b84      	ldr	r3, [pc, #528]	; (8003ebc <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003cc0:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003cc2:	e04c      	b.n	8003d5e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d11d      	bne.n	8003d08 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	6a1a      	ldr	r2, [r3, #32]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00d      	beq.n	8003cfe <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003cf0:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003cfc:	e004      	b.n	8003d08 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	0e9b      	lsrs	r3, r3, #26
 8003d0e:	f003 021f 	and.w	r2, r3, #31
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d22:	4313      	orrs	r3, r2
 8003d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d2c:	1e5a      	subs	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003d36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10a      	bne.n	8003d5e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d4e:	4b5b      	ldr	r3, [pc, #364]	; (8003ebc <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6812      	ldr	r2, [r2, #0]
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff ff16 	bl	8003b94 <LL_ADC_INJ_IsConversionOngoing>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d124      	bne.n	8003db8 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d112      	bne.n	8003d9e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003d88:	055a      	lsls	r2, r3, #21
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d90:	051b      	lsls	r3, r3, #20
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	60da      	str	r2, [r3, #12]
 8003d9c:	e00c      	b.n	8003db8 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003dae:	055a      	lsls	r2, r3, #21
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fed6 	bl	8003b6e <LL_ADC_REG_IsConversionOngoing>
 8003dc2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fee2 	bl	8003b94 <LL_ADC_INJ_IsConversionOngoing>
 8003dd0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f040 822e 	bne.w	800423a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 8229 	bne.w	800423a <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d003      	beq.n	8003df8 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d116      	bne.n	8003e26 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d108      	bne.n	8003e14 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003e10:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003e12:	e01f      	b.n	8003e54 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003e22:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003e24:	e016      	b.n	8003e54 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d109      	bne.n	8003e44 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e34:	f043 0220 	orr.w	r2, r3, #32
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003e42:	e007      	b.n	8003e54 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003e52:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d110      	bne.n	8003e80 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	430b      	orrs	r3, r1
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0202 	orr.w	r2, r2, #2
 8003e7c:	611a      	str	r2, [r3, #16]
 8003e7e:	e007      	b.n	8003e90 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0202 	bic.w	r2, r2, #2
 8003e8e:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e98:	d112      	bne.n	8003ec0 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6818      	ldr	r0, [r3, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f7ff fdfb 	bl	8003aa0 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7ff fde1 	bl	8003a7a <LL_ADC_SetSamplingTimeCommonConfig>
 8003eb8:	e011      	b.n	8003ede <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8003eba:	bf00      	nop
 8003ebc:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	6819      	ldr	r1, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f7ff fde7 	bl	8003aa0 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fdce 	bl	8003a7a <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	08db      	lsrs	r3, r3, #3
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d022      	beq.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	6919      	ldr	r1, [r3, #16]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003f10:	f7ff fd28 	bl	8003964 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	6919      	ldr	r1, [r3, #16]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	461a      	mov	r2, r3
 8003f22:	f7ff fd74 	bl	8003a0e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d102      	bne.n	8003f3c <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f3a:	e000      	b.n	8003f3e <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f7ff fd80 	bl	8003a44 <LL_ADC_SetOffsetSaturation>
 8003f44:	e179      	b.n	800423a <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fd2d 	bl	80039ac <LL_ADC_GetOffsetChannel>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fd22 	bl	80039ac <LL_ADC_GetOffsetChannel>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	0e9b      	lsrs	r3, r3, #26
 8003f6c:	f003 021f 	and.w	r2, r3, #31
 8003f70:	e01e      	b.n	8003fb0 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fd17 	bl	80039ac <LL_ADC_GetOffsetChannel>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f88:	fa93 f3a3 	rbit	r3, r3
 8003f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003f90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003f98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8003fa0:	2320      	movs	r3, #32
 8003fa2:	e004      	b.n	8003fae <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8003fa4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fa8:	fab3 f383 	clz	r3, r3
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d105      	bne.n	8003fc8 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	0e9b      	lsrs	r3, r3, #26
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	e018      	b.n	8003ffa <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003fd4:	fa93 f3a3 	rbit	r3, r3
 8003fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003fdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003fec:	2320      	movs	r3, #32
 8003fee:	e004      	b.n	8003ffa <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d106      	bne.n	800400c <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	2100      	movs	r1, #0
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fce6 	bl	80039d8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2101      	movs	r1, #1
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff fcca 	bl	80039ac <LL_ADC_GetOffsetChannel>
 8004018:	4603      	mov	r3, r0
 800401a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10a      	bne.n	8004038 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2101      	movs	r1, #1
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fcbf 	bl	80039ac <LL_ADC_GetOffsetChannel>
 800402e:	4603      	mov	r3, r0
 8004030:	0e9b      	lsrs	r3, r3, #26
 8004032:	f003 021f 	and.w	r2, r3, #31
 8004036:	e01e      	b.n	8004076 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fcb4 	bl	80039ac <LL_ADC_GetOffsetChannel>
 8004044:	4603      	mov	r3, r0
 8004046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004056:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800405a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800405e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8004066:	2320      	movs	r3, #32
 8004068:	e004      	b.n	8004074 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800406a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800406e:	fab3 f383 	clz	r3, r3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800407e:	2b00      	cmp	r3, #0
 8004080:	d105      	bne.n	800408e <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	0e9b      	lsrs	r3, r3, #26
 8004088:	f003 031f 	and.w	r3, r3, #31
 800408c:	e018      	b.n	80040c0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80040a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80040a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80040aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80040b2:	2320      	movs	r3, #32
 80040b4:	e004      	b.n	80040c0 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 80040b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040ba:	fab3 f383 	clz	r3, r3
 80040be:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d106      	bne.n	80040d2 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2200      	movs	r2, #0
 80040ca:	2101      	movs	r1, #1
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fc83 	bl	80039d8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2102      	movs	r1, #2
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff fc67 	bl	80039ac <LL_ADC_GetOffsetChannel>
 80040de:	4603      	mov	r3, r0
 80040e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2102      	movs	r1, #2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fc5c 	bl	80039ac <LL_ADC_GetOffsetChannel>
 80040f4:	4603      	mov	r3, r0
 80040f6:	0e9b      	lsrs	r3, r3, #26
 80040f8:	f003 021f 	and.w	r2, r3, #31
 80040fc:	e01e      	b.n	800413c <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2102      	movs	r1, #2
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fc51 	bl	80039ac <LL_ADC_GetOffsetChannel>
 800410a:	4603      	mov	r3, r0
 800410c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004110:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800411c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 800412c:	2320      	movs	r3, #32
 800412e:	e004      	b.n	800413a <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8004130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004134:	fab3 f383 	clz	r3, r3
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004144:	2b00      	cmp	r3, #0
 8004146:	d105      	bne.n	8004154 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	0e9b      	lsrs	r3, r3, #26
 800414e:	f003 031f 	and.w	r3, r3, #31
 8004152:	e014      	b.n	800417e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800415c:	fa93 f3a3 	rbit	r3, r3
 8004160:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004168:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8004170:	2320      	movs	r3, #32
 8004172:	e004      	b.n	800417e <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8004174:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800417e:	429a      	cmp	r2, r3
 8004180:	d106      	bne.n	8004190 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2200      	movs	r2, #0
 8004188:	2102      	movs	r1, #2
 800418a:	4618      	mov	r0, r3
 800418c:	f7ff fc24 	bl	80039d8 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2103      	movs	r1, #3
 8004196:	4618      	mov	r0, r3
 8004198:	f7ff fc08 	bl	80039ac <LL_ADC_GetOffsetChannel>
 800419c:	4603      	mov	r3, r0
 800419e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10a      	bne.n	80041bc <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2103      	movs	r1, #3
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff fbfd 	bl	80039ac <LL_ADC_GetOffsetChannel>
 80041b2:	4603      	mov	r3, r0
 80041b4:	0e9b      	lsrs	r3, r3, #26
 80041b6:	f003 021f 	and.w	r2, r3, #31
 80041ba:	e017      	b.n	80041ec <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2103      	movs	r1, #3
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fbf2 	bl	80039ac <LL_ADC_GetOffsetChannel>
 80041c8:	4603      	mov	r3, r0
 80041ca:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ce:	fa93 f3a3 	rbit	r3, r3
 80041d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041d6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80041d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80041de:	2320      	movs	r3, #32
 80041e0:	e003      	b.n	80041ea <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80041e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e4:	fab3 f383 	clz	r3, r3
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	0e9b      	lsrs	r3, r3, #26
 80041fe:	f003 031f 	and.w	r3, r3, #31
 8004202:	e011      	b.n	8004228 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800420c:	fa93 f3a3 	rbit	r3, r3
 8004210:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004214:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 800421c:	2320      	movs	r3, #32
 800421e:	e003      	b.n	8004228 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8004220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004222:	fab3 f383 	clz	r3, r3
 8004226:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004228:	429a      	cmp	r2, r3
 800422a:	d106      	bne.n	800423a <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2200      	movs	r2, #0
 8004232:	2103      	movs	r1, #3
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fbcf 	bl	80039d8 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fc82 	bl	8003b48 <LL_ADC_IsEnabled>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	f040 813d 	bne.w	80044c6 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6819      	ldr	r1, [r3, #0]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	461a      	mov	r2, r3
 800425a:	f7ff fc4d 	bl	8003af8 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	4aa2      	ldr	r2, [pc, #648]	; (80044ec <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	f040 812e 	bne.w	80044c6 <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10b      	bne.n	8004292 <HAL_ADCEx_InjectedConfigChannel+0x672>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	0e9b      	lsrs	r3, r3, #26
 8004280:	3301      	adds	r3, #1
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	2b09      	cmp	r3, #9
 8004288:	bf94      	ite	ls
 800428a:	2301      	movls	r3, #1
 800428c:	2300      	movhi	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e019      	b.n	80042c6 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800429a:	fa93 f3a3 	rbit	r3, r3
 800429e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80042a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80042a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80042aa:	2320      	movs	r3, #32
 80042ac:	e003      	b.n	80042b6 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80042ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b0:	fab3 f383 	clz	r3, r3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	3301      	adds	r3, #1
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2b09      	cmp	r3, #9
 80042be:	bf94      	ite	ls
 80042c0:	2301      	movls	r3, #1
 80042c2:	2300      	movhi	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d079      	beq.n	80043be <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d107      	bne.n	80042e6 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	0e9b      	lsrs	r3, r3, #26
 80042dc:	3301      	adds	r3, #1
 80042de:	069b      	lsls	r3, r3, #26
 80042e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042e4:	e015      	b.n	8004312 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80042f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042f6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80042f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80042fe:	2320      	movs	r3, #32
 8004300:	e003      	b.n	800430a <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8004302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004304:	fab3 f383 	clz	r3, r3
 8004308:	b2db      	uxtb	r3, r3
 800430a:	3301      	adds	r3, #1
 800430c:	069b      	lsls	r3, r3, #26
 800430e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <HAL_ADCEx_InjectedConfigChannel+0x712>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	0e9b      	lsrs	r3, r3, #26
 8004324:	3301      	adds	r3, #1
 8004326:	f003 031f 	and.w	r3, r3, #31
 800432a:	2101      	movs	r1, #1
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	e017      	b.n	8004362 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004342:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800434a:	2320      	movs	r3, #32
 800434c:	e003      	b.n	8004356 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800434e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004350:	fab3 f383 	clz	r3, r3
 8004354:	b2db      	uxtb	r3, r3
 8004356:	3301      	adds	r3, #1
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	2101      	movs	r1, #1
 800435e:	fa01 f303 	lsl.w	r3, r1, r3
 8004362:	ea42 0103 	orr.w	r1, r2, r3
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	0e9b      	lsrs	r3, r3, #26
 8004378:	3301      	adds	r3, #1
 800437a:	f003 021f 	and.w	r2, r3, #31
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	051b      	lsls	r3, r3, #20
 8004386:	e018      	b.n	80043ba <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004390:	fa93 f3a3 	rbit	r3, r3
 8004394:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80043a0:	2320      	movs	r3, #32
 80043a2:	e003      	b.n	80043ac <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80043a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a6:	fab3 f383 	clz	r3, r3
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	3301      	adds	r3, #1
 80043ae:	f003 021f 	and.w	r2, r3, #31
 80043b2:	4613      	mov	r3, r2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043ba:	430b      	orrs	r3, r1
 80043bc:	e07e      	b.n	80044bc <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d107      	bne.n	80043da <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	0e9b      	lsrs	r3, r3, #26
 80043d0:	3301      	adds	r3, #1
 80043d2:	069b      	lsls	r3, r3, #26
 80043d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80043d8:	e015      	b.n	8004406 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80043f2:	2320      	movs	r3, #32
 80043f4:	e003      	b.n	80043fe <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80043f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	3301      	adds	r3, #1
 8004400:	069b      	lsls	r3, r3, #26
 8004402:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	0e9b      	lsrs	r3, r3, #26
 8004418:	3301      	adds	r3, #1
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	2101      	movs	r1, #1
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	e017      	b.n	8004456 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	fa93 f3a3 	rbit	r3, r3
 8004432:	61bb      	str	r3, [r7, #24]
  return result;
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800443e:	2320      	movs	r3, #32
 8004440:	e003      	b.n	800444a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	fab3 f383 	clz	r3, r3
 8004448:	b2db      	uxtb	r3, r3
 800444a:	3301      	adds	r3, #1
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	2101      	movs	r1, #1
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	ea42 0103 	orr.w	r1, r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10d      	bne.n	8004482 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	0e9b      	lsrs	r3, r3, #26
 800446c:	3301      	adds	r3, #1
 800446e:	f003 021f 	and.w	r2, r3, #31
 8004472:	4613      	mov	r3, r2
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	4413      	add	r3, r2
 8004478:	3b1e      	subs	r3, #30
 800447a:	051b      	lsls	r3, r3, #20
 800447c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004480:	e01b      	b.n	80044ba <HAL_ADCEx_InjectedConfigChannel+0x89a>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	fa93 f3a3 	rbit	r3, r3
 800448e:	60fb      	str	r3, [r7, #12]
  return result;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 800449a:	2320      	movs	r3, #32
 800449c:	e003      	b.n	80044a6 <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	fab3 f383 	clz	r3, r3
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	3301      	adds	r3, #1
 80044a8:	f003 021f 	and.w	r2, r3, #31
 80044ac:	4613      	mov	r3, r2
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	4413      	add	r3, r2
 80044b2:	3b1e      	subs	r3, #30
 80044b4:	051b      	lsls	r3, r3, #20
 80044b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044ba:	430b      	orrs	r3, r1
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	6892      	ldr	r2, [r2, #8]
 80044c0:	4619      	mov	r1, r3
 80044c2:	f7ff faed 	bl	8003aa0 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4b09      	ldr	r3, [pc, #36]	; (80044f0 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 80b2 	beq.w	8004638 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044dc:	d004      	beq.n	80044e8 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d109      	bne.n	80044fc <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 80044e8:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 80044ea:	e008      	b.n	80044fe <HAL_ADCEx_InjectedConfigChannel+0x8de>
 80044ec:	407f0000 	.word	0x407f0000
 80044f0:	80080000 	.word	0x80080000
 80044f4:	50000100 	.word	0x50000100
 80044f8:	50000300 	.word	0x50000300
 80044fc:	4b53      	ldr	r3, [pc, #332]	; (800464c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff fa21 	bl	8003946 <LL_ADC_GetCommonPathInternalCh>
 8004504:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a50      	ldr	r2, [pc, #320]	; (8004650 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a4f      	ldr	r2, [pc, #316]	; (8004654 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d139      	bne.n	8004590 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800451c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d133      	bne.n	8004590 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004530:	d004      	beq.n	800453c <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a48      	ldr	r2, [pc, #288]	; (8004658 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d17a      	bne.n	8004632 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004544:	d004      	beq.n	8004550 <HAL_ADCEx_InjectedConfigChannel+0x930>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a44      	ldr	r2, [pc, #272]	; (800465c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d101      	bne.n	8004554 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8004550:	4a43      	ldr	r2, [pc, #268]	; (8004660 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004552:	e000      	b.n	8004556 <HAL_ADCEx_InjectedConfigChannel+0x936>
 8004554:	4a3d      	ldr	r2, [pc, #244]	; (800464c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004556:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800455a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f7ff f9dd 	bl	8003920 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004566:	4b3f      	ldr	r3, [pc, #252]	; (8004664 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	099b      	lsrs	r3, r3, #6
 800456c:	4a3e      	ldr	r2, [pc, #248]	; (8004668 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	099a      	lsrs	r2, r3, #6
 8004574:	4613      	mov	r3, r2
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	3318      	adds	r3, #24
 800457e:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004580:	e002      	b.n	8004588 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3b01      	subs	r3, #1
 8004586:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f9      	bne.n	8004582 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800458e:	e050      	b.n	8004632 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a35      	ldr	r2, [pc, #212]	; (800466c <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d125      	bne.n	80045e6 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800459a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800459e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d11f      	bne.n	80045e6 <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a2c      	ldr	r2, [pc, #176]	; (800465c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d104      	bne.n	80045ba <HAL_ADCEx_InjectedConfigChannel+0x99a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a2e      	ldr	r2, [pc, #184]	; (8004670 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d03d      	beq.n	8004636 <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c2:	d004      	beq.n	80045ce <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a24      	ldr	r2, [pc, #144]	; (800465c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d101      	bne.n	80045d2 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 80045ce:	4a24      	ldr	r2, [pc, #144]	; (8004660 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80045d0:	e000      	b.n	80045d4 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 80045d2:	4a1e      	ldr	r2, [pc, #120]	; (800464c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80045d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045dc:	4619      	mov	r1, r3
 80045de:	4610      	mov	r0, r2
 80045e0:	f7ff f99e 	bl	8003920 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80045e4:	e027      	b.n	8004636 <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a22      	ldr	r2, [pc, #136]	; (8004674 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d123      	bne.n	8004638 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80045f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11d      	bne.n	8004638 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a16      	ldr	r2, [pc, #88]	; (800465c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d018      	beq.n	8004638 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800460e:	d004      	beq.n	800461a <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a11      	ldr	r2, [pc, #68]	; (800465c <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 800461a:	4a11      	ldr	r2, [pc, #68]	; (8004660 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 800461c:	e000      	b.n	8004620 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 800461e:	4a0b      	ldr	r2, [pc, #44]	; (800464c <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004620:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004624:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f7ff f978 	bl	8003920 <LL_ADC_SetCommonPathInternalCh>
 8004630:	e002      	b.n	8004638 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004632:	bf00      	nop
 8004634:	e000      	b.n	8004638 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004636:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004640:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004644:	4618      	mov	r0, r3
 8004646:	37d8      	adds	r7, #216	; 0xd8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	50000700 	.word	0x50000700
 8004650:	c3210000 	.word	0xc3210000
 8004654:	90c00010 	.word	0x90c00010
 8004658:	50000600 	.word	0x50000600
 800465c:	50000100 	.word	0x50000100
 8004660:	50000300 	.word	0x50000300
 8004664:	20000010 	.word	0x20000010
 8004668:	053e2d63 	.word	0x053e2d63
 800466c:	c7520000 	.word	0xc7520000
 8004670:	50000500 	.word	0x50000500
 8004674:	cb840000 	.word	0xcb840000

08004678 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b0a1      	sub	sp, #132	; 0x84
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800468e:	2b01      	cmp	r3, #1
 8004690:	d101      	bne.n	8004696 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004692:	2302      	movs	r3, #2
 8004694:	e0e7      	b.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800469e:	2300      	movs	r3, #0
 80046a0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80046a2:	2300      	movs	r3, #0
 80046a4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046ae:	d102      	bne.n	80046b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80046b0:	4b6f      	ldr	r3, [pc, #444]	; (8004870 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	e009      	b.n	80046ca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a6e      	ldr	r2, [pc, #440]	; (8004874 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d102      	bne.n	80046c6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80046c0:	4b6d      	ldr	r3, [pc, #436]	; (8004878 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80046c2:	60bb      	str	r3, [r7, #8]
 80046c4:	e001      	b.n	80046ca <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80046c6:	2300      	movs	r3, #0
 80046c8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10b      	bne.n	80046e8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d4:	f043 0220 	orr.w	r2, r3, #32
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0be      	b.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fa3f 	bl	8003b6e <LL_ADC_REG_IsConversionOngoing>
 80046f0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff fa39 	bl	8003b6e <LL_ADC_REG_IsConversionOngoing>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f040 80a0 	bne.w	8004844 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004704:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004706:	2b00      	cmp	r3, #0
 8004708:	f040 809c 	bne.w	8004844 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004714:	d004      	beq.n	8004720 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a55      	ldr	r2, [pc, #340]	; (8004870 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d101      	bne.n	8004724 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004720:	4b56      	ldr	r3, [pc, #344]	; (800487c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004722:	e000      	b.n	8004726 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004724:	4b56      	ldr	r3, [pc, #344]	; (8004880 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004726:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d04b      	beq.n	80047c8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	6859      	ldr	r1, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004742:	035b      	lsls	r3, r3, #13
 8004744:	430b      	orrs	r3, r1
 8004746:	431a      	orrs	r2, r3
 8004748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800474a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004754:	d004      	beq.n	8004760 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a45      	ldr	r2, [pc, #276]	; (8004870 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d10f      	bne.n	8004780 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004760:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004764:	f7ff f9f0 	bl	8003b48 <LL_ADC_IsEnabled>
 8004768:	4604      	mov	r4, r0
 800476a:	4841      	ldr	r0, [pc, #260]	; (8004870 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800476c:	f7ff f9ec 	bl	8003b48 <LL_ADC_IsEnabled>
 8004770:	4603      	mov	r3, r0
 8004772:	4323      	orrs	r3, r4
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e012      	b.n	80047a6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004780:	483c      	ldr	r0, [pc, #240]	; (8004874 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004782:	f7ff f9e1 	bl	8003b48 <LL_ADC_IsEnabled>
 8004786:	4604      	mov	r4, r0
 8004788:	483b      	ldr	r0, [pc, #236]	; (8004878 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800478a:	f7ff f9dd 	bl	8003b48 <LL_ADC_IsEnabled>
 800478e:	4603      	mov	r3, r0
 8004790:	431c      	orrs	r4, r3
 8004792:	483c      	ldr	r0, [pc, #240]	; (8004884 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004794:	f7ff f9d8 	bl	8003b48 <LL_ADC_IsEnabled>
 8004798:	4603      	mov	r3, r0
 800479a:	4323      	orrs	r3, r4
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d056      	beq.n	8004858 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80047b2:	f023 030f 	bic.w	r3, r3, #15
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	6811      	ldr	r1, [r2, #0]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	6892      	ldr	r2, [r2, #8]
 80047be:	430a      	orrs	r2, r1
 80047c0:	431a      	orrs	r2, r3
 80047c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047c4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80047c6:	e047      	b.n	8004858 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80047c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047dc:	d004      	beq.n	80047e8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a23      	ldr	r2, [pc, #140]	; (8004870 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d10f      	bne.n	8004808 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80047e8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80047ec:	f7ff f9ac 	bl	8003b48 <LL_ADC_IsEnabled>
 80047f0:	4604      	mov	r4, r0
 80047f2:	481f      	ldr	r0, [pc, #124]	; (8004870 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80047f4:	f7ff f9a8 	bl	8003b48 <LL_ADC_IsEnabled>
 80047f8:	4603      	mov	r3, r0
 80047fa:	4323      	orrs	r3, r4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	e012      	b.n	800482e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004808:	481a      	ldr	r0, [pc, #104]	; (8004874 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800480a:	f7ff f99d 	bl	8003b48 <LL_ADC_IsEnabled>
 800480e:	4604      	mov	r4, r0
 8004810:	4819      	ldr	r0, [pc, #100]	; (8004878 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004812:	f7ff f999 	bl	8003b48 <LL_ADC_IsEnabled>
 8004816:	4603      	mov	r3, r0
 8004818:	431c      	orrs	r4, r3
 800481a:	481a      	ldr	r0, [pc, #104]	; (8004884 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800481c:	f7ff f994 	bl	8003b48 <LL_ADC_IsEnabled>
 8004820:	4603      	mov	r3, r0
 8004822:	4323      	orrs	r3, r4
 8004824:	2b00      	cmp	r3, #0
 8004826:	bf0c      	ite	eq
 8004828:	2301      	moveq	r3, #1
 800482a:	2300      	movne	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d012      	beq.n	8004858 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800483a:	f023 030f 	bic.w	r3, r3, #15
 800483e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004840:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004842:	e009      	b.n	8004858 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	f043 0220 	orr.w	r2, r3, #32
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004856:	e000      	b.n	800485a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004858:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004862:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004866:	4618      	mov	r0, r3
 8004868:	3784      	adds	r7, #132	; 0x84
 800486a:	46bd      	mov	sp, r7
 800486c:	bd90      	pop	{r4, r7, pc}
 800486e:	bf00      	nop
 8004870:	50000100 	.word	0x50000100
 8004874:	50000400 	.word	0x50000400
 8004878:	50000500 	.word	0x50000500
 800487c:	50000300 	.word	0x50000300
 8004880:	50000700 	.word	0x50000700
 8004884:	50000600 	.word	0x50000600

08004888 <HAL_ADCEx_EnableInjectedQueue>:
  *         conversion is ongoing.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_EnableInjectedQueue(ADC_HandleTypeDef *hadc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff f96a 	bl	8003b6e <LL_ADC_REG_IsConversionOngoing>
 800489a:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff f977 	bl	8003b94 <LL_ADC_INJ_IsConversionOngoing>
 80048a6:	60f8      	str	r0, [r7, #12]

  /* Parameter can be set only if no conversion is on-going */
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d113      	bne.n	80048d6 <HAL_ADCEx_EnableInjectedQueue+0x4e>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d110      	bne.n	80048d6 <HAL_ADCEx_EnableInjectedQueue+0x4e>
     )
  {
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048c2:	60da      	str	r2, [r3, #12]

    /* Update state, clear previous result related to injected queue overflow */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	75fb      	strb	r3, [r7, #23]
 80048d4:	e001      	b.n	80048da <HAL_ADCEx_EnableInjectedQueue+0x52>
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 80048da:	7dfb      	ldrb	r3, [r7, #23]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048f4:	4b0c      	ldr	r3, [pc, #48]	; (8004928 <__NVIC_SetPriorityGrouping+0x44>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004900:	4013      	ands	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800490c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004916:	4a04      	ldr	r2, [pc, #16]	; (8004928 <__NVIC_SetPriorityGrouping+0x44>)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	60d3      	str	r3, [r2, #12]
}
 800491c:	bf00      	nop
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	e000ed00 	.word	0xe000ed00

0800492c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004930:	4b04      	ldr	r3, [pc, #16]	; (8004944 <__NVIC_GetPriorityGrouping+0x18>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	0a1b      	lsrs	r3, r3, #8
 8004936:	f003 0307 	and.w	r3, r3, #7
}
 800493a:	4618      	mov	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	e000ed00 	.word	0xe000ed00

08004948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	2b00      	cmp	r3, #0
 8004958:	db0b      	blt.n	8004972 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	f003 021f 	and.w	r2, r3, #31
 8004960:	4907      	ldr	r1, [pc, #28]	; (8004980 <__NVIC_EnableIRQ+0x38>)
 8004962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2001      	movs	r0, #1
 800496a:	fa00 f202 	lsl.w	r2, r0, r2
 800496e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000e100 	.word	0xe000e100

08004984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	6039      	str	r1, [r7, #0]
 800498e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004994:	2b00      	cmp	r3, #0
 8004996:	db0a      	blt.n	80049ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	b2da      	uxtb	r2, r3
 800499c:	490c      	ldr	r1, [pc, #48]	; (80049d0 <__NVIC_SetPriority+0x4c>)
 800499e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a2:	0112      	lsls	r2, r2, #4
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	440b      	add	r3, r1
 80049a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049ac:	e00a      	b.n	80049c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	4908      	ldr	r1, [pc, #32]	; (80049d4 <__NVIC_SetPriority+0x50>)
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	3b04      	subs	r3, #4
 80049bc:	0112      	lsls	r2, r2, #4
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	440b      	add	r3, r1
 80049c2:	761a      	strb	r2, [r3, #24]
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000e100 	.word	0xe000e100
 80049d4:	e000ed00 	.word	0xe000ed00

080049d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049d8:	b480      	push	{r7}
 80049da:	b089      	sub	sp, #36	; 0x24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f1c3 0307 	rsb	r3, r3, #7
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	bf28      	it	cs
 80049f6:	2304      	movcs	r3, #4
 80049f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	3304      	adds	r3, #4
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d902      	bls.n	8004a08 <NVIC_EncodePriority+0x30>
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	3b03      	subs	r3, #3
 8004a06:	e000      	b.n	8004a0a <NVIC_EncodePriority+0x32>
 8004a08:	2300      	movs	r3, #0
 8004a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43da      	mvns	r2, r3
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	401a      	ands	r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a20:	f04f 31ff 	mov.w	r1, #4294967295
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2a:	43d9      	mvns	r1, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a30:	4313      	orrs	r3, r2
         );
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3724      	adds	r7, #36	; 0x24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a50:	d301      	bcc.n	8004a56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a52:	2301      	movs	r3, #1
 8004a54:	e00f      	b.n	8004a76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a56:	4a0a      	ldr	r2, [pc, #40]	; (8004a80 <SysTick_Config+0x40>)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a5e:	210f      	movs	r1, #15
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	f7ff ff8e 	bl	8004984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <SysTick_Config+0x40>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a6e:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <SysTick_Config+0x40>)
 8004a70:	2207      	movs	r2, #7
 8004a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	e000e010 	.word	0xe000e010

08004a84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f7ff ff29 	bl	80048e4 <__NVIC_SetPriorityGrouping>
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b086      	sub	sp, #24
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	607a      	str	r2, [r7, #4]
 8004aa6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004aa8:	f7ff ff40 	bl	800492c <__NVIC_GetPriorityGrouping>
 8004aac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	6978      	ldr	r0, [r7, #20]
 8004ab4:	f7ff ff90 	bl	80049d8 <NVIC_EncodePriority>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff ff5f 	bl	8004984 <__NVIC_SetPriority>
}
 8004ac6:	bf00      	nop
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff ff33 	bl	8004948 <__NVIC_EnableIRQ>
}
 8004ae2:	bf00      	nop
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b082      	sub	sp, #8
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff ffa4 	bl	8004a40 <SysTick_Config>
 8004af8:	4603      	mov	r3, r0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e08d      	b.n	8004c32 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_DMA_Init+0x138>)
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d80f      	bhi.n	8004b42 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	461a      	mov	r2, r3
 8004b28:	4b45      	ldr	r3, [pc, #276]	; (8004c40 <HAL_DMA_Init+0x13c>)
 8004b2a:	4413      	add	r3, r2
 8004b2c:	4a45      	ldr	r2, [pc, #276]	; (8004c44 <HAL_DMA_Init+0x140>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	091b      	lsrs	r3, r3, #4
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a42      	ldr	r2, [pc, #264]	; (8004c48 <HAL_DMA_Init+0x144>)
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
 8004b40:	e00e      	b.n	8004b60 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	4b40      	ldr	r3, [pc, #256]	; (8004c4c <HAL_DMA_Init+0x148>)
 8004b4a:	4413      	add	r3, r2
 8004b4c:	4a3d      	ldr	r2, [pc, #244]	; (8004c44 <HAL_DMA_Init+0x140>)
 8004b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	009a      	lsls	r2, r3, #2
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a3c      	ldr	r2, [pc, #240]	; (8004c50 <HAL_DMA_Init+0x14c>)
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fa76 	bl	80050a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc0:	d102      	bne.n	8004bc8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bdc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d010      	beq.n	8004c08 <HAL_DMA_Init+0x104>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d80c      	bhi.n	8004c08 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fa96 	bl	8005120 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	e008      	b.n	8004c1a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40020407 	.word	0x40020407
 8004c40:	bffdfff8 	.word	0xbffdfff8
 8004c44:	cccccccd 	.word	0xcccccccd
 8004c48:	40020000 	.word	0x40020000
 8004c4c:	bffdfbf8 	.word	0xbffdfbf8
 8004c50:	40020400 	.word	0x40020400

08004c54 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_DMA_Start_IT+0x20>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e066      	b.n	8004d42 <HAL_DMA_Start_IT+0xee>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d155      	bne.n	8004d34 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f9bb 	bl	8005028 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 020e 	orr.w	r2, r2, #14
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e00f      	b.n	8004cec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0204 	bic.w	r2, r2, #4
 8004cda:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 020a 	orr.w	r2, r2, #10
 8004cea:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d007      	beq.n	8004d0a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d08:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d20:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 0201 	orr.w	r2, r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	e005      	b.n	8004d40 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d005      	beq.n	8004d6e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2204      	movs	r2, #4
 8004d66:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	73fb      	strb	r3, [r7, #15]
 8004d6c:	e037      	b.n	8004dde <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 020e 	bic.w	r2, r2, #14
 8004d7c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d8c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0201 	bic.w	r2, r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f003 021f 	and.w	r2, r3, #31
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	2101      	movs	r1, #1
 8004dac:	fa01 f202 	lsl.w	r2, r1, r2
 8004db0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004dba:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00c      	beq.n	8004dde <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dd2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ddc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d00d      	beq.n	8004e30 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2204      	movs	r2, #4
 8004e18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	73fb      	strb	r3, [r7, #15]
 8004e2e:	e047      	b.n	8004ec0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 020e 	bic.w	r2, r2, #14
 8004e3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0201 	bic.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e64:	f003 021f 	and.w	r2, r3, #31
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e72:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00c      	beq.n	8004ea0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	4798      	blx	r3
    }
  }
  return status;
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee6:	f003 031f 	and.w	r3, r3, #31
 8004eea:	2204      	movs	r2, #4
 8004eec:	409a      	lsls	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d026      	beq.n	8004f44 <HAL_DMA_IRQHandler+0x7a>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d021      	beq.n	8004f44 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d107      	bne.n	8004f1e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0204 	bic.w	r2, r2, #4
 8004f1c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	f003 021f 	and.w	r2, r3, #31
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2a:	2104      	movs	r1, #4
 8004f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004f30:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d071      	beq.n	800501e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004f42:	e06c      	b.n	800501e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f48:	f003 031f 	and.w	r3, r3, #31
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d02e      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d029      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d10b      	bne.n	8004f88 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 020a 	bic.w	r2, r2, #10
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8c:	f003 021f 	and.w	r2, r3, #31
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	2102      	movs	r1, #2
 8004f96:	fa01 f202 	lsl.w	r2, r1, r2
 8004f9a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d038      	beq.n	800501e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004fb4:	e033      	b.n	800501e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	2208      	movs	r2, #8
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d02a      	beq.n	8005020 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d025      	beq.n	8005020 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 020e 	bic.w	r2, r2, #14
 8004fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe8:	f003 021f 	and.w	r2, r3, #31
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8004ff6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005012:	2b00      	cmp	r3, #0
 8005014:	d004      	beq.n	8005020 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800501e:	bf00      	nop
 8005020:	bf00      	nop
}
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800503e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005044:	2b00      	cmp	r3, #0
 8005046:	d004      	beq.n	8005052 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005050:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005056:	f003 021f 	and.w	r2, r3, #31
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	2101      	movs	r1, #1
 8005060:	fa01 f202 	lsl.w	r2, r1, r2
 8005064:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	2b10      	cmp	r3, #16
 8005074:	d108      	bne.n	8005088 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005086:	e007      	b.n	8005098 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	60da      	str	r2, [r3, #12]
}
 8005098:	bf00      	nop
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	4b16      	ldr	r3, [pc, #88]	; (800510c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d802      	bhi.n	80050be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80050b8:	4b15      	ldr	r3, [pc, #84]	; (8005110 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e001      	b.n	80050c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80050be:	4b15      	ldr	r3, [pc, #84]	; (8005114 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80050c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	3b08      	subs	r3, #8
 80050ce:	4a12      	ldr	r2, [pc, #72]	; (8005118 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	091b      	lsrs	r3, r3, #4
 80050d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050dc:	089b      	lsrs	r3, r3, #2
 80050de:	009a      	lsls	r2, r3, #2
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	461a      	mov	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a0b      	ldr	r2, [pc, #44]	; (800511c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80050ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 031f 	and.w	r3, r3, #31
 80050f6:	2201      	movs	r2, #1
 80050f8:	409a      	lsls	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40020407 	.word	0x40020407
 8005110:	40020800 	.word	0x40020800
 8005114:	40020820 	.word	0x40020820
 8005118:	cccccccd 	.word	0xcccccccd
 800511c:	40020880 	.word	0x40020880

08005120 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	461a      	mov	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a08      	ldr	r2, [pc, #32]	; (8005164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005142:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	3b01      	subs	r3, #1
 8005148:	f003 031f 	and.w	r3, r3, #31
 800514c:	2201      	movs	r2, #1
 800514e:	409a      	lsls	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	1000823f 	.word	0x1000823f
 8005164:	40020940 	.word	0x40020940

08005168 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800517a:	4b24      	ldr	r3, [pc, #144]	; (800520c <HAL_FLASH_Program+0xa4>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_FLASH_Program+0x1e>
 8005182:	2302      	movs	r3, #2
 8005184:	e03e      	b.n	8005204 <HAL_FLASH_Program+0x9c>
 8005186:	4b21      	ldr	r3, [pc, #132]	; (800520c <HAL_FLASH_Program+0xa4>)
 8005188:	2201      	movs	r2, #1
 800518a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800518c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005190:	f000 f87c 	bl	800528c <FLASH_WaitForLastOperation>
 8005194:	4603      	mov	r3, r0
 8005196:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d12e      	bne.n	80051fc <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800519e:	4b1b      	ldr	r3, [pc, #108]	; (800520c <HAL_FLASH_Program+0xa4>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d107      	bne.n	80051ba <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80051aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ae:	68b8      	ldr	r0, [r7, #8]
 80051b0:	f000 f8c0 	bl	8005334 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80051b4:	2301      	movs	r3, #1
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	e010      	b.n	80051dc <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d002      	beq.n	80051c6 <HAL_FLASH_Program+0x5e>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d10a      	bne.n	80051dc <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	4619      	mov	r1, r3
 80051ca:	68b8      	ldr	r0, [r7, #8]
 80051cc:	f000 f8d8 	bl	8005380 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d102      	bne.n	80051dc <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 80051d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80051da:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80051dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80051e0:	f000 f854 	bl	800528c <FLASH_WaitForLastOperation>
 80051e4:	4603      	mov	r3, r0
 80051e6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d006      	beq.n	80051fc <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80051ee:	4b08      	ldr	r3, [pc, #32]	; (8005210 <HAL_FLASH_Program+0xa8>)
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	43db      	mvns	r3, r3
 80051f6:	4906      	ldr	r1, [pc, #24]	; (8005210 <HAL_FLASH_Program+0xa8>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80051fc:	4b03      	ldr	r3, [pc, #12]	; (800520c <HAL_FLASH_Program+0xa4>)
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005202:	7dfb      	ldrb	r3, [r7, #23]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	2000001c 	.word	0x2000001c
 8005210:	40022000 	.word	0x40022000

08005214 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_FLASH_Unlock+0x38>)
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	2b00      	cmp	r3, #0
 8005224:	da0b      	bge.n	800523e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <HAL_FLASH_Unlock+0x38>)
 8005228:	4a09      	ldr	r2, [pc, #36]	; (8005250 <HAL_FLASH_Unlock+0x3c>)
 800522a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800522c:	4b07      	ldr	r3, [pc, #28]	; (800524c <HAL_FLASH_Unlock+0x38>)
 800522e:	4a09      	ldr	r2, [pc, #36]	; (8005254 <HAL_FLASH_Unlock+0x40>)
 8005230:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005232:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_FLASH_Unlock+0x38>)
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	da01      	bge.n	800523e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800523e:	79fb      	ldrb	r3, [r7, #7]
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	40022000 	.word	0x40022000
 8005250:	45670123 	.word	0x45670123
 8005254:	cdef89ab 	.word	0xcdef89ab

08005258 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005262:	4b09      	ldr	r3, [pc, #36]	; (8005288 <HAL_FLASH_Lock+0x30>)
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	4a08      	ldr	r2, [pc, #32]	; (8005288 <HAL_FLASH_Lock+0x30>)
 8005268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800526c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800526e:	4b06      	ldr	r3, [pc, #24]	; (8005288 <HAL_FLASH_Lock+0x30>)
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	2b00      	cmp	r3, #0
 8005274:	da01      	bge.n	800527a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800527a:	79fb      	ldrb	r3, [r7, #7]
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	40022000 	.word	0x40022000

0800528c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005294:	f7fc feaa 	bl	8001fec <HAL_GetTick>
 8005298:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800529a:	e009      	b.n	80052b0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 800529c:	f7fc fea6 	bl	8001fec <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d201      	bcs.n	80052b0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e038      	b.n	8005322 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80052b0:	4b1e      	ldr	r3, [pc, #120]	; (800532c <FLASH_WaitForLastOperation+0xa0>)
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052bc:	d0ee      	beq.n	800529c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80052be:	4b1b      	ldr	r3, [pc, #108]	; (800532c <FLASH_WaitForLastOperation+0xa0>)
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80052c6:	4013      	ands	r3, r2
 80052c8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01e      	beq.n	800530e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80052d0:	4b17      	ldr	r3, [pc, #92]	; (8005330 <FLASH_WaitForLastOperation+0xa4>)
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	4a15      	ldr	r2, [pc, #84]	; (8005330 <FLASH_WaitForLastOperation+0xa4>)
 80052da:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d007      	beq.n	80052f6 <FLASH_WaitForLastOperation+0x6a>
 80052e6:	4b11      	ldr	r3, [pc, #68]	; (800532c <FLASH_WaitForLastOperation+0xa0>)
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80052f0:	490e      	ldr	r1, [pc, #56]	; (800532c <FLASH_WaitForLastOperation+0xa0>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	618b      	str	r3, [r1, #24]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <FLASH_WaitForLastOperation+0x7e>
 8005300:	4a0a      	ldr	r2, [pc, #40]	; (800532c <FLASH_WaitForLastOperation+0xa0>)
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005308:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e009      	b.n	8005322 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800530e:	4b07      	ldr	r3, [pc, #28]	; (800532c <FLASH_WaitForLastOperation+0xa0>)
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b01      	cmp	r3, #1
 8005318:	d102      	bne.n	8005320 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800531a:	4b04      	ldr	r3, [pc, #16]	; (800532c <FLASH_WaitForLastOperation+0xa0>)
 800531c:	2201      	movs	r2, #1
 800531e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40022000 	.word	0x40022000
 8005330:	2000001c 	.word	0x2000001c

08005334 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <FLASH_Program_DoubleWord+0x48>)
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	4a0d      	ldr	r2, [pc, #52]	; (800537c <FLASH_Program_DoubleWord+0x48>)
 8005346:	f043 0301 	orr.w	r3, r3, #1
 800534a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005352:	f3bf 8f6f 	isb	sy
}
 8005356:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	000a      	movs	r2, r1
 8005366:	2300      	movs	r3, #0
 8005368:	68f9      	ldr	r1, [r7, #12]
 800536a:	3104      	adds	r1, #4
 800536c:	4613      	mov	r3, r2
 800536e:	600b      	str	r3, [r1, #0]
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	40022000 	.word	0x40022000

08005380 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005380:	b480      	push	{r7}
 8005382:	b089      	sub	sp, #36	; 0x24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800538a:	2340      	movs	r3, #64	; 0x40
 800538c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <FLASH_Program_Fast+0x68>)
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	4a13      	ldr	r2, [pc, #76]	; (80053e8 <FLASH_Program_Fast+0x68>)
 800539c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053a2:	f3ef 8310 	mrs	r3, PRIMASK
 80053a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80053a8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80053aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80053ac:	b672      	cpsid	i
}
 80053ae:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	3304      	adds	r3, #4
 80053bc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	3304      	adds	r3, #4
 80053c2:	617b      	str	r3, [r7, #20]
    row_index--;
 80053c4:	7ffb      	ldrb	r3, [r7, #31]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80053ca:	7ffb      	ldrb	r3, [r7, #31]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1ef      	bne.n	80053b0 <FLASH_Program_Fast+0x30>
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	f383 8810 	msr	PRIMASK, r3
}
 80053da:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80053dc:	bf00      	nop
 80053de:	3724      	adds	r7, #36	; 0x24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	40022000 	.word	0x40022000

080053ec <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80053f6:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <FLASH_PageErase+0x84>)
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8005402:	4b1b      	ldr	r3, [pc, #108]	; (8005470 <FLASH_PageErase+0x84>)
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	4a1a      	ldr	r2, [pc, #104]	; (8005470 <FLASH_PageErase+0x84>)
 8005408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800540c:	6153      	str	r3, [r2, #20]
 800540e:	e011      	b.n	8005434 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d006      	beq.n	8005428 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <FLASH_PageErase+0x84>)
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	4a14      	ldr	r2, [pc, #80]	; (8005470 <FLASH_PageErase+0x84>)
 8005420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005424:	6153      	str	r3, [r2, #20]
 8005426:	e005      	b.n	8005434 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8005428:	4b11      	ldr	r3, [pc, #68]	; (8005470 <FLASH_PageErase+0x84>)
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	4a10      	ldr	r2, [pc, #64]	; (8005470 <FLASH_PageErase+0x84>)
 800542e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005432:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005434:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <FLASH_PageErase+0x84>)
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	00db      	lsls	r3, r3, #3
 8005440:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005444:	490a      	ldr	r1, [pc, #40]	; (8005470 <FLASH_PageErase+0x84>)
 8005446:	4313      	orrs	r3, r2
 8005448:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800544a:	4b09      	ldr	r3, [pc, #36]	; (8005470 <FLASH_PageErase+0x84>)
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	4a08      	ldr	r2, [pc, #32]	; (8005470 <FLASH_PageErase+0x84>)
 8005450:	f043 0302 	orr.w	r3, r3, #2
 8005454:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <FLASH_PageErase+0x84>)
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	4a05      	ldr	r2, [pc, #20]	; (8005470 <FLASH_PageErase+0x84>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005460:	6153      	str	r3, [r2, #20]
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40022000 	.word	0x40022000

08005474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800547e:	2300      	movs	r3, #0
 8005480:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005482:	e15a      	b.n	800573a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	2101      	movs	r1, #1
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	4013      	ands	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 814c 	beq.w	8005734 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d005      	beq.n	80054b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d130      	bne.n	8005516 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	2203      	movs	r2, #3
 80054c0:	fa02 f303 	lsl.w	r3, r2, r3
 80054c4:	43db      	mvns	r3, r3
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4013      	ands	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4313      	orrs	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054ea:	2201      	movs	r2, #1
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	43db      	mvns	r3, r3
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4013      	ands	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	091b      	lsrs	r3, r3, #4
 8005500:	f003 0201 	and.w	r2, r3, #1
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	2b03      	cmp	r3, #3
 8005520:	d017      	beq.n	8005552 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	2203      	movs	r2, #3
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43db      	mvns	r3, r3
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4013      	ands	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	2b02      	cmp	r3, #2
 800555c:	d123      	bne.n	80055a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	08da      	lsrs	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3208      	adds	r2, #8
 8005566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	220f      	movs	r2, #15
 8005576:	fa02 f303 	lsl.w	r3, r2, r3
 800557a:	43db      	mvns	r3, r3
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	4013      	ands	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	691a      	ldr	r2, [r3, #16]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	08da      	lsrs	r2, r3, #3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3208      	adds	r2, #8
 80055a0:	6939      	ldr	r1, [r7, #16]
 80055a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	2203      	movs	r2, #3
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	43db      	mvns	r3, r3
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4013      	ands	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f003 0203 	and.w	r2, r3, #3
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 80a6 	beq.w	8005734 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055e8:	4b5b      	ldr	r3, [pc, #364]	; (8005758 <HAL_GPIO_Init+0x2e4>)
 80055ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ec:	4a5a      	ldr	r2, [pc, #360]	; (8005758 <HAL_GPIO_Init+0x2e4>)
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	6613      	str	r3, [r2, #96]	; 0x60
 80055f4:	4b58      	ldr	r3, [pc, #352]	; (8005758 <HAL_GPIO_Init+0x2e4>)
 80055f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005600:	4a56      	ldr	r2, [pc, #344]	; (800575c <HAL_GPIO_Init+0x2e8>)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	089b      	lsrs	r3, r3, #2
 8005606:	3302      	adds	r3, #2
 8005608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	220f      	movs	r2, #15
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	43db      	mvns	r3, r3
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4013      	ands	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800562a:	d01f      	beq.n	800566c <HAL_GPIO_Init+0x1f8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a4c      	ldr	r2, [pc, #304]	; (8005760 <HAL_GPIO_Init+0x2ec>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d019      	beq.n	8005668 <HAL_GPIO_Init+0x1f4>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a4b      	ldr	r2, [pc, #300]	; (8005764 <HAL_GPIO_Init+0x2f0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d013      	beq.n	8005664 <HAL_GPIO_Init+0x1f0>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a4a      	ldr	r2, [pc, #296]	; (8005768 <HAL_GPIO_Init+0x2f4>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00d      	beq.n	8005660 <HAL_GPIO_Init+0x1ec>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a49      	ldr	r2, [pc, #292]	; (800576c <HAL_GPIO_Init+0x2f8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d007      	beq.n	800565c <HAL_GPIO_Init+0x1e8>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a48      	ldr	r2, [pc, #288]	; (8005770 <HAL_GPIO_Init+0x2fc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <HAL_GPIO_Init+0x1e4>
 8005654:	2305      	movs	r3, #5
 8005656:	e00a      	b.n	800566e <HAL_GPIO_Init+0x1fa>
 8005658:	2306      	movs	r3, #6
 800565a:	e008      	b.n	800566e <HAL_GPIO_Init+0x1fa>
 800565c:	2304      	movs	r3, #4
 800565e:	e006      	b.n	800566e <HAL_GPIO_Init+0x1fa>
 8005660:	2303      	movs	r3, #3
 8005662:	e004      	b.n	800566e <HAL_GPIO_Init+0x1fa>
 8005664:	2302      	movs	r3, #2
 8005666:	e002      	b.n	800566e <HAL_GPIO_Init+0x1fa>
 8005668:	2301      	movs	r3, #1
 800566a:	e000      	b.n	800566e <HAL_GPIO_Init+0x1fa>
 800566c:	2300      	movs	r3, #0
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	f002 0203 	and.w	r2, r2, #3
 8005674:	0092      	lsls	r2, r2, #2
 8005676:	4093      	lsls	r3, r2
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4313      	orrs	r3, r2
 800567c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800567e:	4937      	ldr	r1, [pc, #220]	; (800575c <HAL_GPIO_Init+0x2e8>)
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	089b      	lsrs	r3, r3, #2
 8005684:	3302      	adds	r3, #2
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800568c:	4b39      	ldr	r3, [pc, #228]	; (8005774 <HAL_GPIO_Init+0x300>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	43db      	mvns	r3, r3
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4013      	ands	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80056b0:	4a30      	ldr	r2, [pc, #192]	; (8005774 <HAL_GPIO_Init+0x300>)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80056b6:	4b2f      	ldr	r3, [pc, #188]	; (8005774 <HAL_GPIO_Init+0x300>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	43db      	mvns	r3, r3
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	4013      	ands	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80056da:	4a26      	ldr	r2, [pc, #152]	; (8005774 <HAL_GPIO_Init+0x300>)
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80056e0:	4b24      	ldr	r3, [pc, #144]	; (8005774 <HAL_GPIO_Init+0x300>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	43db      	mvns	r3, r3
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4013      	ands	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4313      	orrs	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005704:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <HAL_GPIO_Init+0x300>)
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800570a:	4b1a      	ldr	r3, [pc, #104]	; (8005774 <HAL_GPIO_Init+0x300>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	43db      	mvns	r3, r3
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4013      	ands	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800572e:	4a11      	ldr	r2, [pc, #68]	; (8005774 <HAL_GPIO_Init+0x300>)
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	3301      	adds	r3, #1
 8005738:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	f47f ae9d 	bne.w	8005484 <HAL_GPIO_Init+0x10>
  }
}
 800574a:	bf00      	nop
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr
 8005758:	40021000 	.word	0x40021000
 800575c:	40010000 	.word	0x40010000
 8005760:	48000400 	.word	0x48000400
 8005764:	48000800 	.word	0x48000800
 8005768:	48000c00 	.word	0x48000c00
 800576c:	48001000 	.word	0x48001000
 8005770:	48001400 	.word	0x48001400
 8005774:	40010400 	.word	0x40010400

08005778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
 8005784:	4613      	mov	r3, r2
 8005786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005788:	787b      	ldrb	r3, [r7, #1]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800578e:	887a      	ldrh	r2, [r7, #2]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005794:	e002      	b.n	800579c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005796:	887a      	ldrh	r2, [r7, #2]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d141      	bne.n	800583a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80057b6:	4b4b      	ldr	r3, [pc, #300]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057c2:	d131      	bne.n	8005828 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80057c4:	4b47      	ldr	r3, [pc, #284]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057ca:	4a46      	ldr	r2, [pc, #280]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057d4:	4b43      	ldr	r3, [pc, #268]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057dc:	4a41      	ldr	r2, [pc, #260]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80057de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057e4:	4b40      	ldr	r3, [pc, #256]	; (80058e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2232      	movs	r2, #50	; 0x32
 80057ea:	fb02 f303 	mul.w	r3, r2, r3
 80057ee:	4a3f      	ldr	r2, [pc, #252]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80057f0:	fba2 2303 	umull	r2, r3, r2, r3
 80057f4:	0c9b      	lsrs	r3, r3, #18
 80057f6:	3301      	adds	r3, #1
 80057f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057fa:	e002      	b.n	8005802 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3b01      	subs	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005802:	4b38      	ldr	r3, [pc, #224]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580e:	d102      	bne.n	8005816 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f2      	bne.n	80057fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005816:	4b33      	ldr	r3, [pc, #204]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005822:	d158      	bne.n	80058d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e057      	b.n	80058d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005828:	4b2e      	ldr	r3, [pc, #184]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800582a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800582e:	4a2d      	ldr	r2, [pc, #180]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005838:	e04d      	b.n	80058d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005840:	d141      	bne.n	80058c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005842:	4b28      	ldr	r3, [pc, #160]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800584a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800584e:	d131      	bne.n	80058b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005850:	4b24      	ldr	r3, [pc, #144]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005856:	4a23      	ldr	r2, [pc, #140]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005860:	4b20      	ldr	r3, [pc, #128]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005868:	4a1e      	ldr	r2, [pc, #120]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800586a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800586e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005870:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2232      	movs	r2, #50	; 0x32
 8005876:	fb02 f303 	mul.w	r3, r2, r3
 800587a:	4a1c      	ldr	r2, [pc, #112]	; (80058ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800587c:	fba2 2303 	umull	r2, r3, r2, r3
 8005880:	0c9b      	lsrs	r3, r3, #18
 8005882:	3301      	adds	r3, #1
 8005884:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005886:	e002      	b.n	800588e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	3b01      	subs	r3, #1
 800588c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800588e:	4b15      	ldr	r3, [pc, #84]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800589a:	d102      	bne.n	80058a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f2      	bne.n	8005888 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058a2:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ae:	d112      	bne.n	80058d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e011      	b.n	80058d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058b4:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ba:	4a0a      	ldr	r2, [pc, #40]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80058c4:	e007      	b.n	80058d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058c6:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058ce:	4a05      	ldr	r2, [pc, #20]	; (80058e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr
 80058e4:	40007000 	.word	0x40007000
 80058e8:	20000010 	.word	0x20000010
 80058ec:	431bde83 	.word	0x431bde83

080058f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	4a04      	ldr	r2, [pc, #16]	; (800590c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80058fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058fe:	6093      	str	r3, [r2, #8]
}
 8005900:	bf00      	nop
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	40007000 	.word	0x40007000

08005910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e306      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d075      	beq.n	8005a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800592e:	4b97      	ldr	r3, [pc, #604]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f003 030c 	and.w	r3, r3, #12
 8005936:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005938:	4b94      	ldr	r3, [pc, #592]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0303 	and.w	r3, r3, #3
 8005940:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b0c      	cmp	r3, #12
 8005946:	d102      	bne.n	800594e <HAL_RCC_OscConfig+0x3e>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b03      	cmp	r3, #3
 800594c:	d002      	beq.n	8005954 <HAL_RCC_OscConfig+0x44>
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	2b08      	cmp	r3, #8
 8005952:	d10b      	bne.n	800596c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005954:	4b8d      	ldr	r3, [pc, #564]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d05b      	beq.n	8005a18 <HAL_RCC_OscConfig+0x108>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d157      	bne.n	8005a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e2e1      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005974:	d106      	bne.n	8005984 <HAL_RCC_OscConfig+0x74>
 8005976:	4b85      	ldr	r3, [pc, #532]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a84      	ldr	r2, [pc, #528]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 800597c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e01d      	b.n	80059c0 <HAL_RCC_OscConfig+0xb0>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800598c:	d10c      	bne.n	80059a8 <HAL_RCC_OscConfig+0x98>
 800598e:	4b7f      	ldr	r3, [pc, #508]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a7e      	ldr	r2, [pc, #504]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	4b7c      	ldr	r3, [pc, #496]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a7b      	ldr	r2, [pc, #492]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 80059a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	e00b      	b.n	80059c0 <HAL_RCC_OscConfig+0xb0>
 80059a8:	4b78      	ldr	r3, [pc, #480]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a77      	ldr	r2, [pc, #476]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 80059ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b2:	6013      	str	r3, [r2, #0]
 80059b4:	4b75      	ldr	r3, [pc, #468]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a74      	ldr	r2, [pc, #464]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 80059ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d013      	beq.n	80059f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7fc fb10 	bl	8001fec <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059d0:	f7fc fb0c 	bl	8001fec <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b64      	cmp	r3, #100	; 0x64
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e2a6      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059e2:	4b6a      	ldr	r3, [pc, #424]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0f0      	beq.n	80059d0 <HAL_RCC_OscConfig+0xc0>
 80059ee:	e014      	b.n	8005a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f0:	f7fc fafc 	bl	8001fec <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f8:	f7fc faf8 	bl	8001fec <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b64      	cmp	r3, #100	; 0x64
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e292      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a0a:	4b60      	ldr	r3, [pc, #384]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1f0      	bne.n	80059f8 <HAL_RCC_OscConfig+0xe8>
 8005a16:	e000      	b.n	8005a1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d075      	beq.n	8005b12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a26:	4b59      	ldr	r3, [pc, #356]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
 8005a2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a30:	4b56      	ldr	r3, [pc, #344]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b0c      	cmp	r3, #12
 8005a3e:	d102      	bne.n	8005a46 <HAL_RCC_OscConfig+0x136>
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d002      	beq.n	8005a4c <HAL_RCC_OscConfig+0x13c>
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d11f      	bne.n	8005a8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a4c:	4b4f      	ldr	r3, [pc, #316]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_RCC_OscConfig+0x154>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e265      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a64:	4b49      	ldr	r3, [pc, #292]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	061b      	lsls	r3, r3, #24
 8005a72:	4946      	ldr	r1, [pc, #280]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005a78:	4b45      	ldr	r3, [pc, #276]	; (8005b90 <HAL_RCC_OscConfig+0x280>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fc fa69 	bl	8001f54 <HAL_InitTick>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d043      	beq.n	8005b10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e251      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d023      	beq.n	8005adc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a94:	4b3d      	ldr	r3, [pc, #244]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a3c      	ldr	r2, [pc, #240]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa0:	f7fc faa4 	bl	8001fec <HAL_GetTick>
 8005aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aa6:	e008      	b.n	8005aba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa8:	f7fc faa0 	bl	8001fec <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d901      	bls.n	8005aba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e23a      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aba:	4b34      	ldr	r3, [pc, #208]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0f0      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac6:	4b31      	ldr	r3, [pc, #196]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	061b      	lsls	r3, r3, #24
 8005ad4:	492d      	ldr	r1, [pc, #180]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	604b      	str	r3, [r1, #4]
 8005ada:	e01a      	b.n	8005b12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005adc:	4b2b      	ldr	r3, [pc, #172]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a2a      	ldr	r2, [pc, #168]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fc fa80 	bl	8001fec <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005af0:	f7fc fa7c 	bl	8001fec <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e216      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b02:	4b22      	ldr	r3, [pc, #136]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f0      	bne.n	8005af0 <HAL_RCC_OscConfig+0x1e0>
 8005b0e:	e000      	b.n	8005b12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d041      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d01c      	beq.n	8005b60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b26:	4b19      	ldr	r3, [pc, #100]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b2c:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005b2e:	f043 0301 	orr.w	r3, r3, #1
 8005b32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b36:	f7fc fa59 	bl	8001fec <HAL_GetTick>
 8005b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b3e:	f7fc fa55 	bl	8001fec <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e1ef      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005b50:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0ef      	beq.n	8005b3e <HAL_RCC_OscConfig+0x22e>
 8005b5e:	e020      	b.n	8005ba2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b60:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b66:	4a09      	ldr	r2, [pc, #36]	; (8005b8c <HAL_RCC_OscConfig+0x27c>)
 8005b68:	f023 0301 	bic.w	r3, r3, #1
 8005b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b70:	f7fc fa3c 	bl	8001fec <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b76:	e00d      	b.n	8005b94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b78:	f7fc fa38 	bl	8001fec <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d906      	bls.n	8005b94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e1d2      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
 8005b8a:	bf00      	nop
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b94:	4b8c      	ldr	r3, [pc, #560]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1ea      	bne.n	8005b78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 80a6 	beq.w	8005cfc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bb4:	4b84      	ldr	r3, [pc, #528]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x2b4>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <HAL_RCC_OscConfig+0x2b6>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bca:	4b7f      	ldr	r3, [pc, #508]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bce:	4a7e      	ldr	r2, [pc, #504]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	6593      	str	r3, [r2, #88]	; 0x58
 8005bd6:	4b7c      	ldr	r3, [pc, #496]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005be2:	2301      	movs	r3, #1
 8005be4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005be6:	4b79      	ldr	r3, [pc, #484]	; (8005dcc <HAL_RCC_OscConfig+0x4bc>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d118      	bne.n	8005c24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bf2:	4b76      	ldr	r3, [pc, #472]	; (8005dcc <HAL_RCC_OscConfig+0x4bc>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a75      	ldr	r2, [pc, #468]	; (8005dcc <HAL_RCC_OscConfig+0x4bc>)
 8005bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bfe:	f7fc f9f5 	bl	8001fec <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c04:	e008      	b.n	8005c18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c06:	f7fc f9f1 	bl	8001fec <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e18b      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c18:	4b6c      	ldr	r3, [pc, #432]	; (8005dcc <HAL_RCC_OscConfig+0x4bc>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0f0      	beq.n	8005c06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d108      	bne.n	8005c3e <HAL_RCC_OscConfig+0x32e>
 8005c2c:	4b66      	ldr	r3, [pc, #408]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	4a65      	ldr	r2, [pc, #404]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005c34:	f043 0301 	orr.w	r3, r3, #1
 8005c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c3c:	e024      	b.n	8005c88 <HAL_RCC_OscConfig+0x378>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b05      	cmp	r3, #5
 8005c44:	d110      	bne.n	8005c68 <HAL_RCC_OscConfig+0x358>
 8005c46:	4b60      	ldr	r3, [pc, #384]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4c:	4a5e      	ldr	r2, [pc, #376]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005c4e:	f043 0304 	orr.w	r3, r3, #4
 8005c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c56:	4b5c      	ldr	r3, [pc, #368]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5c:	4a5a      	ldr	r2, [pc, #360]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c66:	e00f      	b.n	8005c88 <HAL_RCC_OscConfig+0x378>
 8005c68:	4b57      	ldr	r3, [pc, #348]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6e:	4a56      	ldr	r2, [pc, #344]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005c78:	4b53      	ldr	r3, [pc, #332]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c7e:	4a52      	ldr	r2, [pc, #328]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005c80:	f023 0304 	bic.w	r3, r3, #4
 8005c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d016      	beq.n	8005cbe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c90:	f7fc f9ac 	bl	8001fec <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c96:	e00a      	b.n	8005cae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c98:	f7fc f9a8 	bl	8001fec <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e140      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cae:	4b46      	ldr	r3, [pc, #280]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0ed      	beq.n	8005c98 <HAL_RCC_OscConfig+0x388>
 8005cbc:	e015      	b.n	8005cea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cbe:	f7fc f995 	bl	8001fec <HAL_GetTick>
 8005cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cc4:	e00a      	b.n	8005cdc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc6:	f7fc f991 	bl	8001fec <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d901      	bls.n	8005cdc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005cd8:	2303      	movs	r3, #3
 8005cda:	e129      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cdc:	4b3a      	ldr	r3, [pc, #232]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1ed      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cea:	7ffb      	ldrb	r3, [r7, #31]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d105      	bne.n	8005cfc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cf0:	4b35      	ldr	r3, [pc, #212]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cf4:	4a34      	ldr	r2, [pc, #208]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d03c      	beq.n	8005d82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01c      	beq.n	8005d4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d10:	4b2d      	ldr	r3, [pc, #180]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005d12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d16:	4a2c      	ldr	r2, [pc, #176]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d20:	f7fc f964 	bl	8001fec <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d28:	f7fc f960 	bl	8001fec <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e0fa      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005d3a:	4b23      	ldr	r3, [pc, #140]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005d3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0ef      	beq.n	8005d28 <HAL_RCC_OscConfig+0x418>
 8005d48:	e01b      	b.n	8005d82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d4a:	4b1f      	ldr	r3, [pc, #124]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005d4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d50:	4a1d      	ldr	r2, [pc, #116]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5a:	f7fc f947 	bl	8001fec <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d62:	f7fc f943 	bl	8001fec <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e0dd      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005d74:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005d76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1ef      	bne.n	8005d62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 80d1 	beq.w	8005f2e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d8c:	4b0e      	ldr	r3, [pc, #56]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 030c 	and.w	r3, r3, #12
 8005d94:	2b0c      	cmp	r3, #12
 8005d96:	f000 808b 	beq.w	8005eb0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d15e      	bne.n	8005e60 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da2:	4b09      	ldr	r3, [pc, #36]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a08      	ldr	r2, [pc, #32]	; (8005dc8 <HAL_RCC_OscConfig+0x4b8>)
 8005da8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dae:	f7fc f91d 	bl	8001fec <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005db4:	e00c      	b.n	8005dd0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db6:	f7fc f919 	bl	8001fec <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d905      	bls.n	8005dd0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e0b3      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
 8005dc8:	40021000 	.word	0x40021000
 8005dcc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dd0:	4b59      	ldr	r3, [pc, #356]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1ec      	bne.n	8005db6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ddc:	4b56      	ldr	r3, [pc, #344]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	4b56      	ldr	r3, [pc, #344]	; (8005f3c <HAL_RCC_OscConfig+0x62c>)
 8005de2:	4013      	ands	r3, r2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	6a11      	ldr	r1, [r2, #32]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005dec:	3a01      	subs	r2, #1
 8005dee:	0112      	lsls	r2, r2, #4
 8005df0:	4311      	orrs	r1, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005df6:	0212      	lsls	r2, r2, #8
 8005df8:	4311      	orrs	r1, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005dfe:	0852      	lsrs	r2, r2, #1
 8005e00:	3a01      	subs	r2, #1
 8005e02:	0552      	lsls	r2, r2, #21
 8005e04:	4311      	orrs	r1, r2
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e0a:	0852      	lsrs	r2, r2, #1
 8005e0c:	3a01      	subs	r2, #1
 8005e0e:	0652      	lsls	r2, r2, #25
 8005e10:	4311      	orrs	r1, r2
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005e16:	06d2      	lsls	r2, r2, #27
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	4947      	ldr	r1, [pc, #284]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e20:	4b45      	ldr	r3, [pc, #276]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a44      	ldr	r2, [pc, #272]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e2c:	4b42      	ldr	r3, [pc, #264]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4a41      	ldr	r2, [pc, #260]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e38:	f7fc f8d8 	bl	8001fec <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e40:	f7fc f8d4 	bl	8001fec <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e06e      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e52:	4b39      	ldr	r3, [pc, #228]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0f0      	beq.n	8005e40 <HAL_RCC_OscConfig+0x530>
 8005e5e:	e066      	b.n	8005f2e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e60:	4b35      	ldr	r3, [pc, #212]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a34      	ldr	r2, [pc, #208]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e6a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005e6c:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	4a31      	ldr	r2, [pc, #196]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005e78:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	4a2e      	ldr	r2, [pc, #184]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005e7e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e86:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fc f8b0 	bl	8001fec <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e90:	f7fc f8ac 	bl	8001fec <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e046      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ea2:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x580>
 8005eae:	e03e      	b.n	8005f2e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e039      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005ebc:	4b1e      	ldr	r3, [pc, #120]	; (8005f38 <HAL_RCC_OscConfig+0x628>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f003 0203 	and.w	r2, r3, #3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d12c      	bne.n	8005f2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eda:	3b01      	subs	r3, #1
 8005edc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d123      	bne.n	8005f2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d11b      	bne.n	8005f2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d113      	bne.n	8005f2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0c:	085b      	lsrs	r3, r3, #1
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d109      	bne.n	8005f2a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f20:	085b      	lsrs	r3, r3, #1
 8005f22:	3b01      	subs	r3, #1
 8005f24:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d001      	beq.n	8005f2e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3720      	adds	r7, #32
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	019f800c 	.word	0x019f800c

08005f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e11e      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f58:	4b91      	ldr	r3, [pc, #580]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 030f 	and.w	r3, r3, #15
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d910      	bls.n	8005f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f66:	4b8e      	ldr	r3, [pc, #568]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f023 020f 	bic.w	r2, r3, #15
 8005f6e:	498c      	ldr	r1, [pc, #560]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f76:	4b8a      	ldr	r3, [pc, #552]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d001      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e106      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0301 	and.w	r3, r3, #1
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d073      	beq.n	800607c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d129      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f9c:	4b81      	ldr	r3, [pc, #516]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0f4      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005fac:	f000 f99e 	bl	80062ec <RCC_GetSysClockFreqFromPLLSource>
 8005fb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4a7c      	ldr	r2, [pc, #496]	; (80061a8 <HAL_RCC_ClockConfig+0x268>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d93f      	bls.n	800603a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fba:	4b7a      	ldr	r3, [pc, #488]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d009      	beq.n	8005fda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d033      	beq.n	800603a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d12f      	bne.n	800603a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005fda:	4b72      	ldr	r3, [pc, #456]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fe2:	4a70      	ldr	r2, [pc, #448]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005fea:	2380      	movs	r3, #128	; 0x80
 8005fec:	617b      	str	r3, [r7, #20]
 8005fee:	e024      	b.n	800603a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d107      	bne.n	8006008 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ff8:	4b6a      	ldr	r3, [pc, #424]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d109      	bne.n	8006018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0c6      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006008:	4b66      	ldr	r3, [pc, #408]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0be      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006018:	f000 f8ce 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800601c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	4a61      	ldr	r2, [pc, #388]	; (80061a8 <HAL_RCC_ClockConfig+0x268>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d909      	bls.n	800603a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006026:	4b5f      	ldr	r3, [pc, #380]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800602e:	4a5d      	ldr	r2, [pc, #372]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006034:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006036:	2380      	movs	r3, #128	; 0x80
 8006038:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800603a:	4b5a      	ldr	r3, [pc, #360]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f023 0203 	bic.w	r2, r3, #3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	4957      	ldr	r1, [pc, #348]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006048:	4313      	orrs	r3, r2
 800604a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800604c:	f7fb ffce 	bl	8001fec <HAL_GetTick>
 8006050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006052:	e00a      	b.n	800606a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006054:	f7fb ffca 	bl	8001fec <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006062:	4293      	cmp	r3, r2
 8006064:	d901      	bls.n	800606a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e095      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800606a:	4b4e      	ldr	r3, [pc, #312]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 020c 	and.w	r2, r3, #12
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	429a      	cmp	r2, r3
 800607a:	d1eb      	bne.n	8006054 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d023      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d005      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006094:	4b43      	ldr	r3, [pc, #268]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4a42      	ldr	r2, [pc, #264]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800609a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800609e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d007      	beq.n	80060bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80060ac:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060b4:	4a3b      	ldr	r2, [pc, #236]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80060ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060bc:	4b39      	ldr	r3, [pc, #228]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	4936      	ldr	r1, [pc, #216]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	608b      	str	r3, [r1, #8]
 80060ce:	e008      	b.n	80060e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b80      	cmp	r3, #128	; 0x80
 80060d4:	d105      	bne.n	80060e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80060d6:	4b33      	ldr	r3, [pc, #204]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	4a32      	ldr	r2, [pc, #200]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 80060dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060e2:	4b2f      	ldr	r3, [pc, #188]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d21d      	bcs.n	800612c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f0:	4b2b      	ldr	r3, [pc, #172]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f023 020f 	bic.w	r2, r3, #15
 80060f8:	4929      	ldr	r1, [pc, #164]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006100:	f7fb ff74 	bl	8001fec <HAL_GetTick>
 8006104:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006106:	e00a      	b.n	800611e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006108:	f7fb ff70 	bl	8001fec <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	f241 3288 	movw	r2, #5000	; 0x1388
 8006116:	4293      	cmp	r3, r2
 8006118:	d901      	bls.n	800611e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e03b      	b.n	8006196 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800611e:	4b20      	ldr	r3, [pc, #128]	; (80061a0 <HAL_RCC_ClockConfig+0x260>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	429a      	cmp	r2, r3
 800612a:	d1ed      	bne.n	8006108 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d008      	beq.n	800614a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006138:	4b1a      	ldr	r3, [pc, #104]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	4917      	ldr	r1, [pc, #92]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006146:	4313      	orrs	r3, r2
 8006148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d009      	beq.n	800616a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006156:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	490f      	ldr	r1, [pc, #60]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006166:	4313      	orrs	r3, r2
 8006168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800616a:	f000 f825 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800616e:	4602      	mov	r2, r0
 8006170:	4b0c      	ldr	r3, [pc, #48]	; (80061a4 <HAL_RCC_ClockConfig+0x264>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	091b      	lsrs	r3, r3, #4
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	490c      	ldr	r1, [pc, #48]	; (80061ac <HAL_RCC_ClockConfig+0x26c>)
 800617c:	5ccb      	ldrb	r3, [r1, r3]
 800617e:	f003 031f 	and.w	r3, r3, #31
 8006182:	fa22 f303 	lsr.w	r3, r2, r3
 8006186:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <HAL_RCC_ClockConfig+0x270>)
 8006188:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800618a:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <HAL_RCC_ClockConfig+0x274>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	f7fb fee0 	bl	8001f54 <HAL_InitTick>
 8006194:	4603      	mov	r3, r0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	40022000 	.word	0x40022000
 80061a4:	40021000 	.word	0x40021000
 80061a8:	04c4b400 	.word	0x04c4b400
 80061ac:	0800e8c0 	.word	0x0800e8c0
 80061b0:	20000010 	.word	0x20000010
 80061b4:	20000014 	.word	0x20000014

080061b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80061be:	4b2c      	ldr	r3, [pc, #176]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 030c 	and.w	r3, r3, #12
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d102      	bne.n	80061d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80061ca:	4b2a      	ldr	r3, [pc, #168]	; (8006274 <HAL_RCC_GetSysClockFreq+0xbc>)
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	e047      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80061d0:	4b27      	ldr	r3, [pc, #156]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f003 030c 	and.w	r3, r3, #12
 80061d8:	2b08      	cmp	r3, #8
 80061da:	d102      	bne.n	80061e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80061dc:	4b26      	ldr	r3, [pc, #152]	; (8006278 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	e03e      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80061e2:	4b23      	ldr	r3, [pc, #140]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 030c 	and.w	r3, r3, #12
 80061ea:	2b0c      	cmp	r3, #12
 80061ec:	d136      	bne.n	800625c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061ee:	4b20      	ldr	r3, [pc, #128]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	f003 0303 	and.w	r3, r3, #3
 80061f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061f8:	4b1d      	ldr	r3, [pc, #116]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	091b      	lsrs	r3, r3, #4
 80061fe:	f003 030f 	and.w	r3, r3, #15
 8006202:	3301      	adds	r3, #1
 8006204:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b03      	cmp	r3, #3
 800620a:	d10c      	bne.n	8006226 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800620c:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <HAL_RCC_GetSysClockFreq+0xc0>)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	fbb2 f3f3 	udiv	r3, r2, r3
 8006214:	4a16      	ldr	r2, [pc, #88]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006216:	68d2      	ldr	r2, [r2, #12]
 8006218:	0a12      	lsrs	r2, r2, #8
 800621a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	617b      	str	r3, [r7, #20]
      break;
 8006224:	e00c      	b.n	8006240 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006226:	4a13      	ldr	r2, [pc, #76]	; (8006274 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	fbb2 f3f3 	udiv	r3, r2, r3
 800622e:	4a10      	ldr	r2, [pc, #64]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006230:	68d2      	ldr	r2, [r2, #12]
 8006232:	0a12      	lsrs	r2, r2, #8
 8006234:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006238:	fb02 f303 	mul.w	r3, r2, r3
 800623c:	617b      	str	r3, [r7, #20]
      break;
 800623e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	0e5b      	lsrs	r3, r3, #25
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	3301      	adds	r3, #1
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	fbb2 f3f3 	udiv	r3, r2, r3
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	e001      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800625c:	2300      	movs	r3, #0
 800625e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006260:	693b      	ldr	r3, [r7, #16]
}
 8006262:	4618      	mov	r0, r3
 8006264:	371c      	adds	r7, #28
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	40021000 	.word	0x40021000
 8006274:	00f42400 	.word	0x00f42400
 8006278:	007a1200 	.word	0x007a1200

0800627c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006280:	4b03      	ldr	r3, [pc, #12]	; (8006290 <HAL_RCC_GetHCLKFreq+0x14>)
 8006282:	681b      	ldr	r3, [r3, #0]
}
 8006284:	4618      	mov	r0, r3
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	20000010 	.word	0x20000010

08006294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006298:	f7ff fff0 	bl	800627c <HAL_RCC_GetHCLKFreq>
 800629c:	4602      	mov	r2, r0
 800629e:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	4904      	ldr	r1, [pc, #16]	; (80062bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80062aa:	5ccb      	ldrb	r3, [r1, r3]
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40021000 	.word	0x40021000
 80062bc:	0800e8d0 	.word	0x0800e8d0

080062c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062c4:	f7ff ffda 	bl	800627c <HAL_RCC_GetHCLKFreq>
 80062c8:	4602      	mov	r2, r0
 80062ca:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	0adb      	lsrs	r3, r3, #11
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	4904      	ldr	r1, [pc, #16]	; (80062e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062d6:	5ccb      	ldrb	r3, [r1, r3]
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40021000 	.word	0x40021000
 80062e8:	0800e8d0 	.word	0x0800e8d0

080062ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062f2:	4b1e      	ldr	r3, [pc, #120]	; (800636c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062fc:	4b1b      	ldr	r3, [pc, #108]	; (800636c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	091b      	lsrs	r3, r3, #4
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	3301      	adds	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b03      	cmp	r3, #3
 800630e:	d10c      	bne.n	800632a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006310:	4a17      	ldr	r2, [pc, #92]	; (8006370 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	fbb2 f3f3 	udiv	r3, r2, r3
 8006318:	4a14      	ldr	r2, [pc, #80]	; (800636c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800631a:	68d2      	ldr	r2, [r2, #12]
 800631c:	0a12      	lsrs	r2, r2, #8
 800631e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006322:	fb02 f303 	mul.w	r3, r2, r3
 8006326:	617b      	str	r3, [r7, #20]
    break;
 8006328:	e00c      	b.n	8006344 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800632a:	4a12      	ldr	r2, [pc, #72]	; (8006374 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006332:	4a0e      	ldr	r2, [pc, #56]	; (800636c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006334:	68d2      	ldr	r2, [r2, #12]
 8006336:	0a12      	lsrs	r2, r2, #8
 8006338:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800633c:	fb02 f303 	mul.w	r3, r2, r3
 8006340:	617b      	str	r3, [r7, #20]
    break;
 8006342:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006344:	4b09      	ldr	r3, [pc, #36]	; (800636c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	0e5b      	lsrs	r3, r3, #25
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	3301      	adds	r3, #1
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	fbb2 f3f3 	udiv	r3, r2, r3
 800635c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800635e:	687b      	ldr	r3, [r7, #4]
}
 8006360:	4618      	mov	r0, r3
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40021000 	.word	0x40021000
 8006370:	007a1200 	.word	0x007a1200
 8006374:	00f42400 	.word	0x00f42400

08006378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006380:	2300      	movs	r3, #0
 8006382:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006384:	2300      	movs	r3, #0
 8006386:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 8098 	beq.w	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006396:	2300      	movs	r3, #0
 8006398:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800639a:	4b43      	ldr	r3, [pc, #268]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800639c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800639e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10d      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063a6:	4b40      	ldr	r3, [pc, #256]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	4a3f      	ldr	r2, [pc, #252]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063b0:	6593      	str	r3, [r2, #88]	; 0x58
 80063b2:	4b3d      	ldr	r3, [pc, #244]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ba:	60bb      	str	r3, [r7, #8]
 80063bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063be:	2301      	movs	r3, #1
 80063c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063c2:	4b3a      	ldr	r3, [pc, #232]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a39      	ldr	r2, [pc, #228]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063ce:	f7fb fe0d 	bl	8001fec <HAL_GetTick>
 80063d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063d4:	e009      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063d6:	f7fb fe09 	bl	8001fec <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d902      	bls.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	74fb      	strb	r3, [r7, #19]
        break;
 80063e8:	e005      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063ea:	4b30      	ldr	r3, [pc, #192]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0ef      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80063f6:	7cfb      	ldrb	r3, [r7, #19]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d159      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80063fc:	4b2a      	ldr	r3, [pc, #168]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006406:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d01e      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	429a      	cmp	r2, r3
 8006416:	d019      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006418:	4b23      	ldr	r3, [pc, #140]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800641a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800641e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006422:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006424:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642a:	4a1f      	ldr	r2, [pc, #124]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800642c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006434:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800643a:	4a1b      	ldr	r2, [pc, #108]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800643c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006444:	4a18      	ldr	r2, [pc, #96]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d016      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006456:	f7fb fdc9 	bl	8001fec <HAL_GetTick>
 800645a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800645c:	e00b      	b.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800645e:	f7fb fdc5 	bl	8001fec <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	f241 3288 	movw	r2, #5000	; 0x1388
 800646c:	4293      	cmp	r3, r2
 800646e:	d902      	bls.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	74fb      	strb	r3, [r7, #19]
            break;
 8006474:	e006      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006476:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0ec      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006484:	7cfb      	ldrb	r3, [r7, #19]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800648a:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800648c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006490:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006498:	4903      	ldr	r1, [pc, #12]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064a0:	e008      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064a2:	7cfb      	ldrb	r3, [r7, #19]
 80064a4:	74bb      	strb	r3, [r7, #18]
 80064a6:	e005      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80064a8:	40021000 	.word	0x40021000
 80064ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064b0:	7cfb      	ldrb	r3, [r7, #19]
 80064b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064b4:	7c7b      	ldrb	r3, [r7, #17]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d105      	bne.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ba:	4ba7      	ldr	r3, [pc, #668]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064be:	4aa6      	ldr	r2, [pc, #664]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00a      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064d2:	4ba1      	ldr	r3, [pc, #644]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d8:	f023 0203 	bic.w	r2, r3, #3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	499d      	ldr	r1, [pc, #628]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064e2:	4313      	orrs	r3, r2
 80064e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064f4:	4b98      	ldr	r3, [pc, #608]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fa:	f023 020c 	bic.w	r2, r3, #12
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	4995      	ldr	r1, [pc, #596]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006504:	4313      	orrs	r3, r2
 8006506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006516:	4b90      	ldr	r3, [pc, #576]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800651c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	498c      	ldr	r1, [pc, #560]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006526:	4313      	orrs	r3, r2
 8006528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006538:	4b87      	ldr	r3, [pc, #540]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800653a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	4984      	ldr	r1, [pc, #528]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006548:	4313      	orrs	r3, r2
 800654a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0310 	and.w	r3, r3, #16
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800655a:	4b7f      	ldr	r3, [pc, #508]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	497b      	ldr	r1, [pc, #492]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800656a:	4313      	orrs	r3, r2
 800656c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800657c:	4b76      	ldr	r3, [pc, #472]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800657e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006582:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	4973      	ldr	r1, [pc, #460]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800658c:	4313      	orrs	r3, r2
 800658e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800659e:	4b6e      	ldr	r3, [pc, #440]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	496a      	ldr	r1, [pc, #424]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00a      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80065c0:	4b65      	ldr	r3, [pc, #404]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	4962      	ldr	r1, [pc, #392]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d00a      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80065e2:	4b5d      	ldr	r3, [pc, #372]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	4959      	ldr	r1, [pc, #356]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00a      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006604:	4b54      	ldr	r3, [pc, #336]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800660a:	f023 0203 	bic.w	r2, r3, #3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006612:	4951      	ldr	r1, [pc, #324]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006614:	4313      	orrs	r3, r2
 8006616:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006626:	4b4c      	ldr	r3, [pc, #304]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	4948      	ldr	r1, [pc, #288]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006644:	2b00      	cmp	r3, #0
 8006646:	d015      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006648:	4b43      	ldr	r3, [pc, #268]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800664a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006656:	4940      	ldr	r1, [pc, #256]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006658:	4313      	orrs	r3, r2
 800665a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006666:	d105      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006668:	4b3b      	ldr	r3, [pc, #236]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	4a3a      	ldr	r2, [pc, #232]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800666e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006672:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800667c:	2b00      	cmp	r3, #0
 800667e:	d015      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006680:	4b35      	ldr	r3, [pc, #212]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006686:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668e:	4932      	ldr	r1, [pc, #200]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800669e:	d105      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066a0:	4b2d      	ldr	r3, [pc, #180]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	4a2c      	ldr	r2, [pc, #176]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d015      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066b8:	4b27      	ldr	r3, [pc, #156]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c6:	4924      	ldr	r1, [pc, #144]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066d6:	d105      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066d8:	4b1f      	ldr	r3, [pc, #124]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	4a1e      	ldr	r2, [pc, #120]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d015      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066f0:	4b19      	ldr	r3, [pc, #100]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fe:	4916      	ldr	r1, [pc, #88]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006700:	4313      	orrs	r3, r2
 8006702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800670e:	d105      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006710:	4b11      	ldr	r3, [pc, #68]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	4a10      	ldr	r2, [pc, #64]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800671a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d019      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006728:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	4908      	ldr	r1, [pc, #32]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006746:	d109      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006748:	4b03      	ldr	r3, [pc, #12]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	4a02      	ldr	r2, [pc, #8]	; (8006758 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800674e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006752:	60d3      	str	r3, [r2, #12]
 8006754:	e002      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006756:	bf00      	nop
 8006758:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d015      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006768:	4b29      	ldr	r3, [pc, #164]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800676a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006776:	4926      	ldr	r1, [pc, #152]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006778:	4313      	orrs	r3, r2
 800677a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006782:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006786:	d105      	bne.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006788:	4b21      	ldr	r3, [pc, #132]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	4a20      	ldr	r2, [pc, #128]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800678e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006792:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d015      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80067a0:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ae:	4918      	ldr	r1, [pc, #96]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067be:	d105      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80067c0:	4b13      	ldr	r3, [pc, #76]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	4a12      	ldr	r2, [pc, #72]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d015      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80067d8:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067e6:	490a      	ldr	r1, [pc, #40]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067f6:	d105      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4a04      	ldr	r2, [pc, #16]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80067fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006802:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006804:	7cbb      	ldrb	r3, [r7, #18]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40021000 	.word	0x40021000

08006814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e049      	b.n	80068ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d106      	bne.n	8006840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fb f93c 	bl	8001ab8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3304      	adds	r3, #4
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f000 fbd2 	bl	8006ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e049      	b.n	8006968 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f841 	bl	8006970 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2202      	movs	r2, #2
 80068f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	3304      	adds	r3, #4
 80068fe:	4619      	mov	r1, r3
 8006900:	4610      	mov	r0, r2
 8006902:	f000 fb7b 	bl	8006ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d109      	bne.n	80069a8 <HAL_TIM_PWM_Start+0x24>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b01      	cmp	r3, #1
 800699e:	bf14      	ite	ne
 80069a0:	2301      	movne	r3, #1
 80069a2:	2300      	moveq	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	e03c      	b.n	8006a22 <HAL_TIM_PWM_Start+0x9e>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d109      	bne.n	80069c2 <HAL_TIM_PWM_Start+0x3e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	bf14      	ite	ne
 80069ba:	2301      	movne	r3, #1
 80069bc:	2300      	moveq	r3, #0
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	e02f      	b.n	8006a22 <HAL_TIM_PWM_Start+0x9e>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d109      	bne.n	80069dc <HAL_TIM_PWM_Start+0x58>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	bf14      	ite	ne
 80069d4:	2301      	movne	r3, #1
 80069d6:	2300      	moveq	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	e022      	b.n	8006a22 <HAL_TIM_PWM_Start+0x9e>
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2b0c      	cmp	r3, #12
 80069e0:	d109      	bne.n	80069f6 <HAL_TIM_PWM_Start+0x72>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	bf14      	ite	ne
 80069ee:	2301      	movne	r3, #1
 80069f0:	2300      	moveq	r3, #0
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	e015      	b.n	8006a22 <HAL_TIM_PWM_Start+0x9e>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b10      	cmp	r3, #16
 80069fa:	d109      	bne.n	8006a10 <HAL_TIM_PWM_Start+0x8c>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	bf14      	ite	ne
 8006a08:	2301      	movne	r3, #1
 8006a0a:	2300      	moveq	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	e008      	b.n	8006a22 <HAL_TIM_PWM_Start+0x9e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	bf14      	ite	ne
 8006a1c:	2301      	movne	r3, #1
 8006a1e:	2300      	moveq	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e0a6      	b.n	8006b78 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d104      	bne.n	8006a3a <HAL_TIM_PWM_Start+0xb6>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a38:	e023      	b.n	8006a82 <HAL_TIM_PWM_Start+0xfe>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d104      	bne.n	8006a4a <HAL_TIM_PWM_Start+0xc6>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a48:	e01b      	b.n	8006a82 <HAL_TIM_PWM_Start+0xfe>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d104      	bne.n	8006a5a <HAL_TIM_PWM_Start+0xd6>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a58:	e013      	b.n	8006a82 <HAL_TIM_PWM_Start+0xfe>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b0c      	cmp	r3, #12
 8006a5e:	d104      	bne.n	8006a6a <HAL_TIM_PWM_Start+0xe6>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a68:	e00b      	b.n	8006a82 <HAL_TIM_PWM_Start+0xfe>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b10      	cmp	r3, #16
 8006a6e:	d104      	bne.n	8006a7a <HAL_TIM_PWM_Start+0xf6>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a78:	e003      	b.n	8006a82 <HAL_TIM_PWM_Start+0xfe>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2201      	movs	r2, #1
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 ff24 	bl	80078d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a3a      	ldr	r2, [pc, #232]	; (8006b80 <HAL_TIM_PWM_Start+0x1fc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d018      	beq.n	8006acc <HAL_TIM_PWM_Start+0x148>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a39      	ldr	r2, [pc, #228]	; (8006b84 <HAL_TIM_PWM_Start+0x200>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d013      	beq.n	8006acc <HAL_TIM_PWM_Start+0x148>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a37      	ldr	r2, [pc, #220]	; (8006b88 <HAL_TIM_PWM_Start+0x204>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00e      	beq.n	8006acc <HAL_TIM_PWM_Start+0x148>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a36      	ldr	r2, [pc, #216]	; (8006b8c <HAL_TIM_PWM_Start+0x208>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d009      	beq.n	8006acc <HAL_TIM_PWM_Start+0x148>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a34      	ldr	r2, [pc, #208]	; (8006b90 <HAL_TIM_PWM_Start+0x20c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d004      	beq.n	8006acc <HAL_TIM_PWM_Start+0x148>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a33      	ldr	r2, [pc, #204]	; (8006b94 <HAL_TIM_PWM_Start+0x210>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d101      	bne.n	8006ad0 <HAL_TIM_PWM_Start+0x14c>
 8006acc:	2301      	movs	r3, #1
 8006ace:	e000      	b.n	8006ad2 <HAL_TIM_PWM_Start+0x14e>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d007      	beq.n	8006ae6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ae4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a25      	ldr	r2, [pc, #148]	; (8006b80 <HAL_TIM_PWM_Start+0x1fc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d022      	beq.n	8006b36 <HAL_TIM_PWM_Start+0x1b2>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af8:	d01d      	beq.n	8006b36 <HAL_TIM_PWM_Start+0x1b2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a26      	ldr	r2, [pc, #152]	; (8006b98 <HAL_TIM_PWM_Start+0x214>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d018      	beq.n	8006b36 <HAL_TIM_PWM_Start+0x1b2>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a24      	ldr	r2, [pc, #144]	; (8006b9c <HAL_TIM_PWM_Start+0x218>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d013      	beq.n	8006b36 <HAL_TIM_PWM_Start+0x1b2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a23      	ldr	r2, [pc, #140]	; (8006ba0 <HAL_TIM_PWM_Start+0x21c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00e      	beq.n	8006b36 <HAL_TIM_PWM_Start+0x1b2>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a19      	ldr	r2, [pc, #100]	; (8006b84 <HAL_TIM_PWM_Start+0x200>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d009      	beq.n	8006b36 <HAL_TIM_PWM_Start+0x1b2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a18      	ldr	r2, [pc, #96]	; (8006b88 <HAL_TIM_PWM_Start+0x204>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d004      	beq.n	8006b36 <HAL_TIM_PWM_Start+0x1b2>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a18      	ldr	r2, [pc, #96]	; (8006b94 <HAL_TIM_PWM_Start+0x210>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d115      	bne.n	8006b62 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	4b19      	ldr	r3, [pc, #100]	; (8006ba4 <HAL_TIM_PWM_Start+0x220>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2b06      	cmp	r3, #6
 8006b46:	d015      	beq.n	8006b74 <HAL_TIM_PWM_Start+0x1f0>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b4e:	d011      	beq.n	8006b74 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b60:	e008      	b.n	8006b74 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0201 	orr.w	r2, r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e000      	b.n	8006b76 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	40012c00 	.word	0x40012c00
 8006b84:	40013400 	.word	0x40013400
 8006b88:	40014000 	.word	0x40014000
 8006b8c:	40014400 	.word	0x40014400
 8006b90:	40014800 	.word	0x40014800
 8006b94:	40015000 	.word	0x40015000
 8006b98:	40000400 	.word	0x40000400
 8006b9c:	40000800 	.word	0x40000800
 8006ba0:	40000c00 	.word	0x40000c00
 8006ba4:	00010007 	.word	0x00010007

08006ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d101      	bne.n	8006bc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e0ff      	b.n	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b14      	cmp	r3, #20
 8006bd2:	f200 80f0 	bhi.w	8006db6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006c31 	.word	0x08006c31
 8006be0:	08006db7 	.word	0x08006db7
 8006be4:	08006db7 	.word	0x08006db7
 8006be8:	08006db7 	.word	0x08006db7
 8006bec:	08006c71 	.word	0x08006c71
 8006bf0:	08006db7 	.word	0x08006db7
 8006bf4:	08006db7 	.word	0x08006db7
 8006bf8:	08006db7 	.word	0x08006db7
 8006bfc:	08006cb3 	.word	0x08006cb3
 8006c00:	08006db7 	.word	0x08006db7
 8006c04:	08006db7 	.word	0x08006db7
 8006c08:	08006db7 	.word	0x08006db7
 8006c0c:	08006cf3 	.word	0x08006cf3
 8006c10:	08006db7 	.word	0x08006db7
 8006c14:	08006db7 	.word	0x08006db7
 8006c18:	08006db7 	.word	0x08006db7
 8006c1c:	08006d35 	.word	0x08006d35
 8006c20:	08006db7 	.word	0x08006db7
 8006c24:	08006db7 	.word	0x08006db7
 8006c28:	08006db7 	.word	0x08006db7
 8006c2c:	08006d75 	.word	0x08006d75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68b9      	ldr	r1, [r7, #8]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fa88 	bl	800714c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	699a      	ldr	r2, [r3, #24]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0208 	orr.w	r2, r2, #8
 8006c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 0204 	bic.w	r2, r2, #4
 8006c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6999      	ldr	r1, [r3, #24]
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	619a      	str	r2, [r3, #24]
      break;
 8006c6e:	e0a5      	b.n	8006dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fb02 	bl	8007280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699a      	ldr	r2, [r3, #24]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699a      	ldr	r2, [r3, #24]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6999      	ldr	r1, [r3, #24]
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	021a      	lsls	r2, r3, #8
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	619a      	str	r2, [r3, #24]
      break;
 8006cb0:	e084      	b.n	8006dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 fb75 	bl	80073a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	69da      	ldr	r2, [r3, #28]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f042 0208 	orr.w	r2, r2, #8
 8006ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69da      	ldr	r2, [r3, #28]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0204 	bic.w	r2, r2, #4
 8006cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69d9      	ldr	r1, [r3, #28]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	691a      	ldr	r2, [r3, #16]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	61da      	str	r2, [r3, #28]
      break;
 8006cf0:	e064      	b.n	8006dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68b9      	ldr	r1, [r7, #8]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fbe7 	bl	80074cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69da      	ldr	r2, [r3, #28]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69da      	ldr	r2, [r3, #28]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69d9      	ldr	r1, [r3, #28]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	021a      	lsls	r2, r3, #8
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	430a      	orrs	r2, r1
 8006d30:	61da      	str	r2, [r3, #28]
      break;
 8006d32:	e043      	b.n	8006dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68b9      	ldr	r1, [r7, #8]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fc5a 	bl	80075f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0208 	orr.w	r2, r2, #8
 8006d4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0204 	bic.w	r2, r2, #4
 8006d5e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	691a      	ldr	r2, [r3, #16]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d72:	e023      	b.n	8006dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68b9      	ldr	r1, [r7, #8]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 fca4 	bl	80076c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d9e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	021a      	lsls	r2, r3, #8
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	430a      	orrs	r2, r1
 8006db2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006db4:	e002      	b.n	8006dbc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	75fb      	strb	r3, [r7, #23]
      break;
 8006dba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop

08006dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_TIM_ConfigClockSource+0x1c>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e0f6      	b.n	8006fda <HAL_TIM_ConfigClockSource+0x20a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a6f      	ldr	r2, [pc, #444]	; (8006fe4 <HAL_TIM_ConfigClockSource+0x214>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	f000 80c1 	beq.w	8006fae <HAL_TIM_ConfigClockSource+0x1de>
 8006e2c:	4a6d      	ldr	r2, [pc, #436]	; (8006fe4 <HAL_TIM_ConfigClockSource+0x214>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	f200 80c6 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e34:	4a6c      	ldr	r2, [pc, #432]	; (8006fe8 <HAL_TIM_ConfigClockSource+0x218>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	f000 80b9 	beq.w	8006fae <HAL_TIM_ConfigClockSource+0x1de>
 8006e3c:	4a6a      	ldr	r2, [pc, #424]	; (8006fe8 <HAL_TIM_ConfigClockSource+0x218>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	f200 80be 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e44:	4a69      	ldr	r2, [pc, #420]	; (8006fec <HAL_TIM_ConfigClockSource+0x21c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	f000 80b1 	beq.w	8006fae <HAL_TIM_ConfigClockSource+0x1de>
 8006e4c:	4a67      	ldr	r2, [pc, #412]	; (8006fec <HAL_TIM_ConfigClockSource+0x21c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	f200 80b6 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e54:	4a66      	ldr	r2, [pc, #408]	; (8006ff0 <HAL_TIM_ConfigClockSource+0x220>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	f000 80a9 	beq.w	8006fae <HAL_TIM_ConfigClockSource+0x1de>
 8006e5c:	4a64      	ldr	r2, [pc, #400]	; (8006ff0 <HAL_TIM_ConfigClockSource+0x220>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	f200 80ae 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e64:	4a63      	ldr	r2, [pc, #396]	; (8006ff4 <HAL_TIM_ConfigClockSource+0x224>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	f000 80a1 	beq.w	8006fae <HAL_TIM_ConfigClockSource+0x1de>
 8006e6c:	4a61      	ldr	r2, [pc, #388]	; (8006ff4 <HAL_TIM_ConfigClockSource+0x224>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	f200 80a6 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e74:	4a60      	ldr	r2, [pc, #384]	; (8006ff8 <HAL_TIM_ConfigClockSource+0x228>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	f000 8099 	beq.w	8006fae <HAL_TIM_ConfigClockSource+0x1de>
 8006e7c:	4a5e      	ldr	r2, [pc, #376]	; (8006ff8 <HAL_TIM_ConfigClockSource+0x228>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	f200 809e 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e88:	f000 8091 	beq.w	8006fae <HAL_TIM_ConfigClockSource+0x1de>
 8006e8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006e90:	f200 8096 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e98:	f000 8089 	beq.w	8006fae <HAL_TIM_ConfigClockSource+0x1de>
 8006e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea0:	f200 808e 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea8:	d03e      	beq.n	8006f28 <HAL_TIM_ConfigClockSource+0x158>
 8006eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eae:	f200 8087 	bhi.w	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb6:	f000 8086 	beq.w	8006fc6 <HAL_TIM_ConfigClockSource+0x1f6>
 8006eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ebe:	d87f      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ec0:	2b70      	cmp	r3, #112	; 0x70
 8006ec2:	d01a      	beq.n	8006efa <HAL_TIM_ConfigClockSource+0x12a>
 8006ec4:	2b70      	cmp	r3, #112	; 0x70
 8006ec6:	d87b      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ec8:	2b60      	cmp	r3, #96	; 0x60
 8006eca:	d050      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0x19e>
 8006ecc:	2b60      	cmp	r3, #96	; 0x60
 8006ece:	d877      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ed0:	2b50      	cmp	r3, #80	; 0x50
 8006ed2:	d03c      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0x17e>
 8006ed4:	2b50      	cmp	r3, #80	; 0x50
 8006ed6:	d873      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ed8:	2b40      	cmp	r3, #64	; 0x40
 8006eda:	d058      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x1be>
 8006edc:	2b40      	cmp	r3, #64	; 0x40
 8006ede:	d86f      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ee0:	2b30      	cmp	r3, #48	; 0x30
 8006ee2:	d064      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x1de>
 8006ee4:	2b30      	cmp	r3, #48	; 0x30
 8006ee6:	d86b      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ee8:	2b20      	cmp	r3, #32
 8006eea:	d060      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x1de>
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	d867      	bhi.n	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d05c      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x1de>
 8006ef4:	2b10      	cmp	r3, #16
 8006ef6:	d05a      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x1de>
 8006ef8:	e062      	b.n	8006fc0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6899      	ldr	r1, [r3, #8]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	f000 fcc5 	bl	8007898 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	609a      	str	r2, [r3, #8]
      break;
 8006f26:	e04f      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	6899      	ldr	r1, [r3, #8]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f000 fcae 	bl	8007898 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f4a:	609a      	str	r2, [r3, #8]
      break;
 8006f4c:	e03c      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6859      	ldr	r1, [r3, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f000 fc20 	bl	80077a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2150      	movs	r1, #80	; 0x50
 8006f66:	4618      	mov	r0, r3
 8006f68:	f000 fc79 	bl	800785e <TIM_ITRx_SetConfig>
      break;
 8006f6c:	e02c      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6859      	ldr	r1, [r3, #4]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f000 fc3f 	bl	80077fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2160      	movs	r1, #96	; 0x60
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fc69 	bl	800785e <TIM_ITRx_SetConfig>
      break;
 8006f8c:	e01c      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6859      	ldr	r1, [r3, #4]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f000 fc00 	bl	80077a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2140      	movs	r1, #64	; 0x40
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fc59 	bl	800785e <TIM_ITRx_SetConfig>
      break;
 8006fac:	e00c      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4610      	mov	r0, r2
 8006fba:	f000 fc50 	bl	800785e <TIM_ITRx_SetConfig>
      break;
 8006fbe:	e003      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc4:	e000      	b.n	8006fc8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	00100070 	.word	0x00100070
 8006fe8:	00100060 	.word	0x00100060
 8006fec:	00100050 	.word	0x00100050
 8006ff0:	00100040 	.word	0x00100040
 8006ff4:	00100030 	.word	0x00100030
 8006ff8:	00100020 	.word	0x00100020

08006ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a46      	ldr	r2, [pc, #280]	; (8007128 <TIM_Base_SetConfig+0x12c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d017      	beq.n	8007044 <TIM_Base_SetConfig+0x48>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701a:	d013      	beq.n	8007044 <TIM_Base_SetConfig+0x48>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a43      	ldr	r2, [pc, #268]	; (800712c <TIM_Base_SetConfig+0x130>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d00f      	beq.n	8007044 <TIM_Base_SetConfig+0x48>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a42      	ldr	r2, [pc, #264]	; (8007130 <TIM_Base_SetConfig+0x134>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00b      	beq.n	8007044 <TIM_Base_SetConfig+0x48>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a41      	ldr	r2, [pc, #260]	; (8007134 <TIM_Base_SetConfig+0x138>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d007      	beq.n	8007044 <TIM_Base_SetConfig+0x48>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a40      	ldr	r2, [pc, #256]	; (8007138 <TIM_Base_SetConfig+0x13c>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d003      	beq.n	8007044 <TIM_Base_SetConfig+0x48>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a3f      	ldr	r2, [pc, #252]	; (800713c <TIM_Base_SetConfig+0x140>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d108      	bne.n	8007056 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a33      	ldr	r2, [pc, #204]	; (8007128 <TIM_Base_SetConfig+0x12c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d023      	beq.n	80070a6 <TIM_Base_SetConfig+0xaa>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007064:	d01f      	beq.n	80070a6 <TIM_Base_SetConfig+0xaa>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a30      	ldr	r2, [pc, #192]	; (800712c <TIM_Base_SetConfig+0x130>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d01b      	beq.n	80070a6 <TIM_Base_SetConfig+0xaa>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a2f      	ldr	r2, [pc, #188]	; (8007130 <TIM_Base_SetConfig+0x134>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d017      	beq.n	80070a6 <TIM_Base_SetConfig+0xaa>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a2e      	ldr	r2, [pc, #184]	; (8007134 <TIM_Base_SetConfig+0x138>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d013      	beq.n	80070a6 <TIM_Base_SetConfig+0xaa>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a2d      	ldr	r2, [pc, #180]	; (8007138 <TIM_Base_SetConfig+0x13c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d00f      	beq.n	80070a6 <TIM_Base_SetConfig+0xaa>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a2d      	ldr	r2, [pc, #180]	; (8007140 <TIM_Base_SetConfig+0x144>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00b      	beq.n	80070a6 <TIM_Base_SetConfig+0xaa>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a2c      	ldr	r2, [pc, #176]	; (8007144 <TIM_Base_SetConfig+0x148>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d007      	beq.n	80070a6 <TIM_Base_SetConfig+0xaa>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a2b      	ldr	r2, [pc, #172]	; (8007148 <TIM_Base_SetConfig+0x14c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d003      	beq.n	80070a6 <TIM_Base_SetConfig+0xaa>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a26      	ldr	r2, [pc, #152]	; (800713c <TIM_Base_SetConfig+0x140>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d108      	bne.n	80070b8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a12      	ldr	r2, [pc, #72]	; (8007128 <TIM_Base_SetConfig+0x12c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d013      	beq.n	800710c <TIM_Base_SetConfig+0x110>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a14      	ldr	r2, [pc, #80]	; (8007138 <TIM_Base_SetConfig+0x13c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00f      	beq.n	800710c <TIM_Base_SetConfig+0x110>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a14      	ldr	r2, [pc, #80]	; (8007140 <TIM_Base_SetConfig+0x144>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00b      	beq.n	800710c <TIM_Base_SetConfig+0x110>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a13      	ldr	r2, [pc, #76]	; (8007144 <TIM_Base_SetConfig+0x148>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d007      	beq.n	800710c <TIM_Base_SetConfig+0x110>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a12      	ldr	r2, [pc, #72]	; (8007148 <TIM_Base_SetConfig+0x14c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_Base_SetConfig+0x110>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a0d      	ldr	r2, [pc, #52]	; (800713c <TIM_Base_SetConfig+0x140>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d103      	bne.n	8007114 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	691a      	ldr	r2, [r3, #16]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	615a      	str	r2, [r3, #20]
}
 800711a:	bf00      	nop
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	40012c00 	.word	0x40012c00
 800712c:	40000400 	.word	0x40000400
 8007130:	40000800 	.word	0x40000800
 8007134:	40000c00 	.word	0x40000c00
 8007138:	40013400 	.word	0x40013400
 800713c:	40015000 	.word	0x40015000
 8007140:	40014000 	.word	0x40014000
 8007144:	40014400 	.word	0x40014400
 8007148:	40014800 	.word	0x40014800

0800714c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f023 0201 	bic.w	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800717a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800717e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0303 	bic.w	r3, r3, #3
 8007186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	f023 0302 	bic.w	r3, r3, #2
 8007198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a30      	ldr	r2, [pc, #192]	; (8007268 <TIM_OC1_SetConfig+0x11c>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d013      	beq.n	80071d4 <TIM_OC1_SetConfig+0x88>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a2f      	ldr	r2, [pc, #188]	; (800726c <TIM_OC1_SetConfig+0x120>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00f      	beq.n	80071d4 <TIM_OC1_SetConfig+0x88>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a2e      	ldr	r2, [pc, #184]	; (8007270 <TIM_OC1_SetConfig+0x124>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00b      	beq.n	80071d4 <TIM_OC1_SetConfig+0x88>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a2d      	ldr	r2, [pc, #180]	; (8007274 <TIM_OC1_SetConfig+0x128>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d007      	beq.n	80071d4 <TIM_OC1_SetConfig+0x88>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a2c      	ldr	r2, [pc, #176]	; (8007278 <TIM_OC1_SetConfig+0x12c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d003      	beq.n	80071d4 <TIM_OC1_SetConfig+0x88>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a2b      	ldr	r2, [pc, #172]	; (800727c <TIM_OC1_SetConfig+0x130>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d10c      	bne.n	80071ee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f023 0308 	bic.w	r3, r3, #8
 80071da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f023 0304 	bic.w	r3, r3, #4
 80071ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a1d      	ldr	r2, [pc, #116]	; (8007268 <TIM_OC1_SetConfig+0x11c>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <TIM_OC1_SetConfig+0xd2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a1c      	ldr	r2, [pc, #112]	; (800726c <TIM_OC1_SetConfig+0x120>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00f      	beq.n	800721e <TIM_OC1_SetConfig+0xd2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a1b      	ldr	r2, [pc, #108]	; (8007270 <TIM_OC1_SetConfig+0x124>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00b      	beq.n	800721e <TIM_OC1_SetConfig+0xd2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1a      	ldr	r2, [pc, #104]	; (8007274 <TIM_OC1_SetConfig+0x128>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d007      	beq.n	800721e <TIM_OC1_SetConfig+0xd2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a19      	ldr	r2, [pc, #100]	; (8007278 <TIM_OC1_SetConfig+0x12c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d003      	beq.n	800721e <TIM_OC1_SetConfig+0xd2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a18      	ldr	r2, [pc, #96]	; (800727c <TIM_OC1_SetConfig+0x130>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d111      	bne.n	8007242 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800722c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	621a      	str	r2, [r3, #32]
}
 800725c:	bf00      	nop
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	40012c00 	.word	0x40012c00
 800726c:	40013400 	.word	0x40013400
 8007270:	40014000 	.word	0x40014000
 8007274:	40014400 	.word	0x40014400
 8007278:	40014800 	.word	0x40014800
 800727c:	40015000 	.word	0x40015000

08007280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	f023 0210 	bic.w	r2, r3, #16
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	021b      	lsls	r3, r3, #8
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f023 0320 	bic.w	r3, r3, #32
 80072ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	4313      	orrs	r3, r2
 80072da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a2c      	ldr	r2, [pc, #176]	; (8007390 <TIM_OC2_SetConfig+0x110>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d007      	beq.n	80072f4 <TIM_OC2_SetConfig+0x74>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a2b      	ldr	r2, [pc, #172]	; (8007394 <TIM_OC2_SetConfig+0x114>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_OC2_SetConfig+0x74>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a2a      	ldr	r2, [pc, #168]	; (8007398 <TIM_OC2_SetConfig+0x118>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d10d      	bne.n	8007310 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	011b      	lsls	r3, r3, #4
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800730e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a1f      	ldr	r2, [pc, #124]	; (8007390 <TIM_OC2_SetConfig+0x110>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d013      	beq.n	8007340 <TIM_OC2_SetConfig+0xc0>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a1e      	ldr	r2, [pc, #120]	; (8007394 <TIM_OC2_SetConfig+0x114>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d00f      	beq.n	8007340 <TIM_OC2_SetConfig+0xc0>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a1e      	ldr	r2, [pc, #120]	; (800739c <TIM_OC2_SetConfig+0x11c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00b      	beq.n	8007340 <TIM_OC2_SetConfig+0xc0>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a1d      	ldr	r2, [pc, #116]	; (80073a0 <TIM_OC2_SetConfig+0x120>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d007      	beq.n	8007340 <TIM_OC2_SetConfig+0xc0>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a1c      	ldr	r2, [pc, #112]	; (80073a4 <TIM_OC2_SetConfig+0x124>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <TIM_OC2_SetConfig+0xc0>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a17      	ldr	r2, [pc, #92]	; (8007398 <TIM_OC2_SetConfig+0x118>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d113      	bne.n	8007368 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007346:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800734e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	4313      	orrs	r3, r2
 800735a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	4313      	orrs	r3, r2
 8007366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	621a      	str	r2, [r3, #32]
}
 8007382:	bf00      	nop
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	40012c00 	.word	0x40012c00
 8007394:	40013400 	.word	0x40013400
 8007398:	40015000 	.word	0x40015000
 800739c:	40014000 	.word	0x40014000
 80073a0:	40014400 	.word	0x40014400
 80073a4:	40014800 	.word	0x40014800

080073a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b087      	sub	sp, #28
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a2b      	ldr	r2, [pc, #172]	; (80074b4 <TIM_OC3_SetConfig+0x10c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d007      	beq.n	800741a <TIM_OC3_SetConfig+0x72>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a2a      	ldr	r2, [pc, #168]	; (80074b8 <TIM_OC3_SetConfig+0x110>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d003      	beq.n	800741a <TIM_OC3_SetConfig+0x72>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a29      	ldr	r2, [pc, #164]	; (80074bc <TIM_OC3_SetConfig+0x114>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d10d      	bne.n	8007436 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007420:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	021b      	lsls	r3, r3, #8
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a1e      	ldr	r2, [pc, #120]	; (80074b4 <TIM_OC3_SetConfig+0x10c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d013      	beq.n	8007466 <TIM_OC3_SetConfig+0xbe>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a1d      	ldr	r2, [pc, #116]	; (80074b8 <TIM_OC3_SetConfig+0x110>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00f      	beq.n	8007466 <TIM_OC3_SetConfig+0xbe>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a1d      	ldr	r2, [pc, #116]	; (80074c0 <TIM_OC3_SetConfig+0x118>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00b      	beq.n	8007466 <TIM_OC3_SetConfig+0xbe>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a1c      	ldr	r2, [pc, #112]	; (80074c4 <TIM_OC3_SetConfig+0x11c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d007      	beq.n	8007466 <TIM_OC3_SetConfig+0xbe>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a1b      	ldr	r2, [pc, #108]	; (80074c8 <TIM_OC3_SetConfig+0x120>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d003      	beq.n	8007466 <TIM_OC3_SetConfig+0xbe>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a16      	ldr	r2, [pc, #88]	; (80074bc <TIM_OC3_SetConfig+0x114>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d113      	bne.n	800748e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800746c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007474:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	011b      	lsls	r3, r3, #4
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	4313      	orrs	r3, r2
 800748c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	621a      	str	r2, [r3, #32]
}
 80074a8:	bf00      	nop
 80074aa:	371c      	adds	r7, #28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	40012c00 	.word	0x40012c00
 80074b8:	40013400 	.word	0x40013400
 80074bc:	40015000 	.word	0x40015000
 80074c0:	40014000 	.word	0x40014000
 80074c4:	40014400 	.word	0x40014400
 80074c8:	40014800 	.word	0x40014800

080074cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	69db      	ldr	r3, [r3, #28]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800751a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	031b      	lsls	r3, r3, #12
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a2c      	ldr	r2, [pc, #176]	; (80075dc <TIM_OC4_SetConfig+0x110>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d007      	beq.n	8007540 <TIM_OC4_SetConfig+0x74>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a2b      	ldr	r2, [pc, #172]	; (80075e0 <TIM_OC4_SetConfig+0x114>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d003      	beq.n	8007540 <TIM_OC4_SetConfig+0x74>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a2a      	ldr	r2, [pc, #168]	; (80075e4 <TIM_OC4_SetConfig+0x118>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d10d      	bne.n	800755c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	031b      	lsls	r3, r3, #12
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	4313      	orrs	r3, r2
 8007552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800755a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a1f      	ldr	r2, [pc, #124]	; (80075dc <TIM_OC4_SetConfig+0x110>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d013      	beq.n	800758c <TIM_OC4_SetConfig+0xc0>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a1e      	ldr	r2, [pc, #120]	; (80075e0 <TIM_OC4_SetConfig+0x114>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d00f      	beq.n	800758c <TIM_OC4_SetConfig+0xc0>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a1e      	ldr	r2, [pc, #120]	; (80075e8 <TIM_OC4_SetConfig+0x11c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00b      	beq.n	800758c <TIM_OC4_SetConfig+0xc0>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a1d      	ldr	r2, [pc, #116]	; (80075ec <TIM_OC4_SetConfig+0x120>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d007      	beq.n	800758c <TIM_OC4_SetConfig+0xc0>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a1c      	ldr	r2, [pc, #112]	; (80075f0 <TIM_OC4_SetConfig+0x124>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d003      	beq.n	800758c <TIM_OC4_SetConfig+0xc0>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a17      	ldr	r2, [pc, #92]	; (80075e4 <TIM_OC4_SetConfig+0x118>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d113      	bne.n	80075b4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007592:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800759a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	019b      	lsls	r3, r3, #6
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	019b      	lsls	r3, r3, #6
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	621a      	str	r2, [r3, #32]
}
 80075ce:	bf00      	nop
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	40012c00 	.word	0x40012c00
 80075e0:	40013400 	.word	0x40013400
 80075e4:	40015000 	.word	0x40015000
 80075e8:	40014000 	.word	0x40014000
 80075ec:	40014400 	.word	0x40014400
 80075f0:	40014800 	.word	0x40014800

080075f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007638:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	041b      	lsls	r3, r3, #16
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	4313      	orrs	r3, r2
 8007644:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a19      	ldr	r2, [pc, #100]	; (80076b0 <TIM_OC5_SetConfig+0xbc>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d013      	beq.n	8007676 <TIM_OC5_SetConfig+0x82>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a18      	ldr	r2, [pc, #96]	; (80076b4 <TIM_OC5_SetConfig+0xc0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00f      	beq.n	8007676 <TIM_OC5_SetConfig+0x82>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <TIM_OC5_SetConfig+0xc4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00b      	beq.n	8007676 <TIM_OC5_SetConfig+0x82>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a16      	ldr	r2, [pc, #88]	; (80076bc <TIM_OC5_SetConfig+0xc8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d007      	beq.n	8007676 <TIM_OC5_SetConfig+0x82>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a15      	ldr	r2, [pc, #84]	; (80076c0 <TIM_OC5_SetConfig+0xcc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d003      	beq.n	8007676 <TIM_OC5_SetConfig+0x82>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a14      	ldr	r2, [pc, #80]	; (80076c4 <TIM_OC5_SetConfig+0xd0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d109      	bne.n	800768a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800767c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	021b      	lsls	r3, r3, #8
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	621a      	str	r2, [r3, #32]
}
 80076a4:	bf00      	nop
 80076a6:	371c      	adds	r7, #28
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	40012c00 	.word	0x40012c00
 80076b4:	40013400 	.word	0x40013400
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40014400 	.word	0x40014400
 80076c0:	40014800 	.word	0x40014800
 80076c4:	40015000 	.word	0x40015000

080076c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	021b      	lsls	r3, r3, #8
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4313      	orrs	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800770e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	051b      	lsls	r3, r3, #20
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a1a      	ldr	r2, [pc, #104]	; (8007788 <TIM_OC6_SetConfig+0xc0>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d013      	beq.n	800774c <TIM_OC6_SetConfig+0x84>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a19      	ldr	r2, [pc, #100]	; (800778c <TIM_OC6_SetConfig+0xc4>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00f      	beq.n	800774c <TIM_OC6_SetConfig+0x84>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a18      	ldr	r2, [pc, #96]	; (8007790 <TIM_OC6_SetConfig+0xc8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00b      	beq.n	800774c <TIM_OC6_SetConfig+0x84>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a17      	ldr	r2, [pc, #92]	; (8007794 <TIM_OC6_SetConfig+0xcc>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d007      	beq.n	800774c <TIM_OC6_SetConfig+0x84>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4a16      	ldr	r2, [pc, #88]	; (8007798 <TIM_OC6_SetConfig+0xd0>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d003      	beq.n	800774c <TIM_OC6_SetConfig+0x84>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a15      	ldr	r2, [pc, #84]	; (800779c <TIM_OC6_SetConfig+0xd4>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d109      	bne.n	8007760 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007752:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	029b      	lsls	r3, r3, #10
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685a      	ldr	r2, [r3, #4]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40012c00 	.word	0x40012c00
 800778c:	40013400 	.word	0x40013400
 8007790:	40014000 	.word	0x40014000
 8007794:	40014400 	.word	0x40014400
 8007798:	40014800 	.word	0x40014800
 800779c:	40015000 	.word	0x40015000

080077a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	f023 0201 	bic.w	r2, r3, #1
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f023 030a 	bic.w	r3, r3, #10
 80077dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	621a      	str	r2, [r3, #32]
}
 80077f2:	bf00      	nop
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077fe:	b480      	push	{r7}
 8007800:	b087      	sub	sp, #28
 8007802:	af00      	add	r7, sp, #0
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	f023 0210 	bic.w	r2, r3, #16
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	031b      	lsls	r3, r3, #12
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800783a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	621a      	str	r2, [r3, #32]
}
 8007852:	bf00      	nop
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4313      	orrs	r3, r2
 8007880:	f043 0307 	orr.w	r3, r3, #7
 8007884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	609a      	str	r2, [r3, #8]
}
 800788c:	bf00      	nop
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
 80078a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	021a      	lsls	r2, r3, #8
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	431a      	orrs	r2, r3
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	4313      	orrs	r3, r2
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	609a      	str	r2, [r3, #8]
}
 80078cc:	bf00      	nop
 80078ce:	371c      	adds	r7, #28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	2201      	movs	r2, #1
 80078ec:	fa02 f303 	lsl.w	r3, r2, r3
 80078f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6a1a      	ldr	r2, [r3, #32]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	43db      	mvns	r3, r3
 80078fa:	401a      	ands	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a1a      	ldr	r2, [r3, #32]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	fa01 f303 	lsl.w	r3, r1, r3
 8007910:	431a      	orrs	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	621a      	str	r2, [r3, #32]
}
 8007916:	bf00      	nop
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
	...

08007924 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007934:	2b01      	cmp	r3, #1
 8007936:	d101      	bne.n	800793c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007938:	2302      	movs	r3, #2
 800793a:	e074      	b.n	8007a26 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a34      	ldr	r2, [pc, #208]	; (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d009      	beq.n	800797a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a33      	ldr	r2, [pc, #204]	; (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d004      	beq.n	800797a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a31      	ldr	r2, [pc, #196]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d108      	bne.n	800798c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007980:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	4313      	orrs	r3, r2
 800798a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68fa      	ldr	r2, [r7, #12]
 80079a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a21      	ldr	r2, [pc, #132]	; (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d022      	beq.n	80079fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079bc:	d01d      	beq.n	80079fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a1f      	ldr	r2, [pc, #124]	; (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d018      	beq.n	80079fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d013      	beq.n	80079fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a1c      	ldr	r2, [pc, #112]	; (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d00e      	beq.n	80079fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a15      	ldr	r2, [pc, #84]	; (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d009      	beq.n	80079fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a18      	ldr	r2, [pc, #96]	; (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d004      	beq.n	80079fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a11      	ldr	r2, [pc, #68]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d10c      	bne.n	8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	68ba      	ldr	r2, [r7, #8]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	40012c00 	.word	0x40012c00
 8007a38:	40013400 	.word	0x40013400
 8007a3c:	40015000 	.word	0x40015000
 8007a40:	40000400 	.word	0x40000400
 8007a44:	40000800 	.word	0x40000800
 8007a48:	40000c00 	.word	0x40000c00
 8007a4c:	40014000 	.word	0x40014000

08007a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d101      	bne.n	8007a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e042      	b.n	8007ae8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d106      	bne.n	8007a7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7fa f8ab 	bl	8001bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2224      	movs	r2, #36	; 0x24
 8007a7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	681a      	ldr	r2, [r3, #0]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 0201 	bic.w	r2, r2, #1
 8007a90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fbba 	bl	800820c <UART_SetConfig>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d101      	bne.n	8007aa2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e022      	b.n	8007ae8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 feaa 	bl	8008804 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007abe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ace:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0201 	orr.w	r2, r2, #1
 8007ade:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 ff31 	bl	8008948 <UART_CheckIdleState>
 8007ae6:	4603      	mov	r3, r0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08a      	sub	sp, #40	; 0x28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	4613      	mov	r3, r2
 8007afc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b04:	2b20      	cmp	r3, #32
 8007b06:	d142      	bne.n	8007b8e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <HAL_UART_Receive_IT+0x24>
 8007b0e:	88fb      	ldrh	r3, [r7, #6]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e03b      	b.n	8007b90 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d101      	bne.n	8007b26 <HAL_UART_Receive_IT+0x36>
 8007b22:	2302      	movs	r3, #2
 8007b24:	e034      	b.n	8007b90 <HAL_UART_Receive_IT+0xa0>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a17      	ldr	r2, [pc, #92]	; (8007b98 <HAL_UART_Receive_IT+0xa8>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d01f      	beq.n	8007b7e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d018      	beq.n	8007b7e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	e853 3f00 	ldrex	r3, [r3]
 8007b58:	613b      	str	r3, [r7, #16]
   return(result);
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b60:	627b      	str	r3, [r7, #36]	; 0x24
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	461a      	mov	r2, r3
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	623b      	str	r3, [r7, #32]
 8007b6c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6e:	69f9      	ldr	r1, [r7, #28]
 8007b70:	6a3a      	ldr	r2, [r7, #32]
 8007b72:	e841 2300 	strex	r3, r2, [r1]
 8007b76:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1e6      	bne.n	8007b4c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b7e:	88fb      	ldrh	r3, [r7, #6]
 8007b80:	461a      	mov	r2, r3
 8007b82:	68b9      	ldr	r1, [r7, #8]
 8007b84:	68f8      	ldr	r0, [r7, #12]
 8007b86:	f000 fff3 	bl	8008b70 <UART_Start_Receive_IT>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	e000      	b.n	8007b90 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007b8e:	2302      	movs	r3, #2
  }
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3728      	adds	r7, #40	; 0x28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	40008000 	.word	0x40008000

08007b9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b0ba      	sub	sp, #232	; 0xe8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	69db      	ldr	r3, [r3, #28]
 8007baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007bc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007bc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007bca:	4013      	ands	r3, r2
 8007bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007bd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d11b      	bne.n	8007c10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bdc:	f003 0320 	and.w	r3, r3, #32
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d015      	beq.n	8007c10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d105      	bne.n	8007bfc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d009      	beq.n	8007c10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 82d6 	beq.w	80081b2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
      }
      return;
 8007c0e:	e2d0      	b.n	80081b2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 811f 	beq.w	8007e58 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007c1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c1e:	4b8b      	ldr	r3, [pc, #556]	; (8007e4c <HAL_UART_IRQHandler+0x2b0>)
 8007c20:	4013      	ands	r3, r2
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d106      	bne.n	8007c34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007c26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007c2a:	4b89      	ldr	r3, [pc, #548]	; (8007e50 <HAL_UART_IRQHandler+0x2b4>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 8112 	beq.w	8007e58 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d011      	beq.n	8007c64 <HAL_UART_IRQHandler+0xc8>
 8007c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2201      	movs	r2, #1
 8007c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c5a:	f043 0201 	orr.w	r2, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d011      	beq.n	8007c94 <HAL_UART_IRQHandler+0xf8>
 8007c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00b      	beq.n	8007c94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2202      	movs	r2, #2
 8007c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c8a:	f043 0204 	orr.w	r2, r3, #4
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d011      	beq.n	8007cc4 <HAL_UART_IRQHandler+0x128>
 8007ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00b      	beq.n	8007cc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2204      	movs	r2, #4
 8007cb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cba:	f043 0202 	orr.w	r2, r3, #2
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc8:	f003 0308 	and.w	r3, r3, #8
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d017      	beq.n	8007d00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd4:	f003 0320 	and.w	r3, r3, #32
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d105      	bne.n	8007ce8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007cdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007ce0:	4b5a      	ldr	r3, [pc, #360]	; (8007e4c <HAL_UART_IRQHandler+0x2b0>)
 8007ce2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2208      	movs	r2, #8
 8007cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cf6:	f043 0208 	orr.w	r2, r3, #8
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d012      	beq.n	8007d32 <HAL_UART_IRQHandler+0x196>
 8007d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00c      	beq.n	8007d32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d28:	f043 0220 	orr.w	r2, r3, #32
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 823c 	beq.w	80081b6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d42:	f003 0320 	and.w	r3, r3, #32
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d013      	beq.n	8007d72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d105      	bne.n	8007d62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d007      	beq.n	8007d72 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d003      	beq.n	8007d72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d86:	2b40      	cmp	r3, #64	; 0x40
 8007d88:	d005      	beq.n	8007d96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d04f      	beq.n	8007e36 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f001 f814 	bl	8008dc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da6:	2b40      	cmp	r3, #64	; 0x40
 8007da8:	d141      	bne.n	8007e2e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3308      	adds	r3, #8
 8007db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007dd6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007dda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007de2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007de6:	e841 2300 	strex	r3, r2, [r1]
 8007dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1d9      	bne.n	8007daa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d013      	beq.n	8007e26 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e02:	4a14      	ldr	r2, [pc, #80]	; (8007e54 <HAL_UART_IRQHandler+0x2b8>)
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fc fff6 	bl	8004dfc <HAL_DMA_Abort_IT>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d017      	beq.n	8007e46 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e24:	e00f      	b.n	8007e46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9da 	bl	80081e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2c:	e00b      	b.n	8007e46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f9d6 	bl	80081e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e34:	e007      	b.n	8007e46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f9d2 	bl	80081e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007e44:	e1b7      	b.n	80081b6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e46:	bf00      	nop
    return;
 8007e48:	e1b5      	b.n	80081b6 <HAL_UART_IRQHandler+0x61a>
 8007e4a:	bf00      	nop
 8007e4c:	10000001 	.word	0x10000001
 8007e50:	04000120 	.word	0x04000120
 8007e54:	08008e91 	.word	0x08008e91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	f040 814a 	bne.w	80080f6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e66:	f003 0310 	and.w	r3, r3, #16
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 8143 	beq.w	80080f6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e74:	f003 0310 	and.w	r3, r3, #16
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 813c 	beq.w	80080f6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2210      	movs	r2, #16
 8007e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e90:	2b40      	cmp	r3, #64	; 0x40
 8007e92:	f040 80b5 	bne.w	8008000 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ea2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 8187 	beq.w	80081ba <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	f080 817f 	bcs.w	80081ba <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ec2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0320 	and.w	r3, r3, #32
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f040 8086 	bne.w	8007fe4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	461a      	mov	r2, r3
 8007efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007f06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1da      	bne.n	8007ed8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3308      	adds	r3, #8
 8007f28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f2c:	e853 3f00 	ldrex	r3, [r3]
 8007f30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f34:	f023 0301 	bic.w	r3, r3, #1
 8007f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3308      	adds	r3, #8
 8007f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e1      	bne.n	8007f22 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3308      	adds	r3, #8
 8007f64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f68:	e853 3f00 	ldrex	r3, [r3]
 8007f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f8a:	e841 2300 	strex	r3, r2, [r1]
 8007f8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1e3      	bne.n	8007f5e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fb4:	f023 0310 	bic.w	r3, r3, #16
 8007fb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fc8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e4      	bne.n	8007fa4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fc feb3 	bl	8004d4a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f8fb 	bl	80081f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ffe:	e0dc      	b.n	80081ba <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800800c:	b29b      	uxth	r3, r3
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800801a:	b29b      	uxth	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 80ce 	beq.w	80081be <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008022:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008026:	2b00      	cmp	r3, #0
 8008028:	f000 80c9 	beq.w	80081be <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800803a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008040:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	461a      	mov	r2, r3
 800804a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800804e:	647b      	str	r3, [r7, #68]	; 0x44
 8008050:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008054:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008056:	e841 2300 	strex	r3, r2, [r1]
 800805a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800805c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1e4      	bne.n	800802c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3308      	adds	r3, #8
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	623b      	str	r3, [r7, #32]
   return(result);
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008078:	f023 0301 	bic.w	r3, r3, #1
 800807c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3308      	adds	r3, #8
 8008086:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800808a:	633a      	str	r2, [r7, #48]	; 0x30
 800808c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800808e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008092:	e841 2300 	strex	r3, r2, [r1]
 8008096:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1e1      	bne.n	8008062 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	e853 3f00 	ldrex	r3, [r3]
 80080be:	60fb      	str	r3, [r7, #12]
   return(result);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0310 	bic.w	r3, r3, #16
 80080c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80080d4:	61fb      	str	r3, [r7, #28]
 80080d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d8:	69b9      	ldr	r1, [r7, #24]
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	e841 2300 	strex	r3, r2, [r1]
 80080e0:	617b      	str	r3, [r7, #20]
   return(result);
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1e4      	bne.n	80080b2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f880 	bl	80081f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80080f4:	e063      	b.n	80081be <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00e      	beq.n	8008120 <HAL_UART_IRQHandler+0x584>
 8008102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d008      	beq.n	8008120 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008116:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 fb57 	bl	80097cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800811e:	e051      	b.n	80081c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008128:	2b00      	cmp	r3, #0
 800812a:	d014      	beq.n	8008156 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800812c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008134:	2b00      	cmp	r3, #0
 8008136:	d105      	bne.n	8008144 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800813c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d008      	beq.n	8008156 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008148:	2b00      	cmp	r3, #0
 800814a:	d03a      	beq.n	80081c2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	4798      	blx	r3
    }
    return;
 8008154:	e035      	b.n	80081c2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <HAL_UART_IRQHandler+0x5da>
 8008162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 fea4 	bl	8008ebc <UART_EndTransmit_IT>
    return;
 8008174:	e026      	b.n	80081c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d009      	beq.n	8008196 <HAL_UART_IRQHandler+0x5fa>
 8008182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008186:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d003      	beq.n	8008196 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 fb30 	bl	80097f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008194:	e016      	b.n	80081c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d010      	beq.n	80081c4 <HAL_UART_IRQHandler+0x628>
 80081a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	da0c      	bge.n	80081c4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f001 fb18 	bl	80097e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80081b0:	e008      	b.n	80081c4 <HAL_UART_IRQHandler+0x628>
      return;
 80081b2:	bf00      	nop
 80081b4:	e006      	b.n	80081c4 <HAL_UART_IRQHandler+0x628>
    return;
 80081b6:	bf00      	nop
 80081b8:	e004      	b.n	80081c4 <HAL_UART_IRQHandler+0x628>
      return;
 80081ba:	bf00      	nop
 80081bc:	e002      	b.n	80081c4 <HAL_UART_IRQHandler+0x628>
      return;
 80081be:	bf00      	nop
 80081c0:	e000      	b.n	80081c4 <HAL_UART_IRQHandler+0x628>
    return;
 80081c2:	bf00      	nop
  }
}
 80081c4:	37e8      	adds	r7, #232	; 0xe8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop

080081cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008200:	bf00      	nop
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800820c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008210:	b08c      	sub	sp, #48	; 0x30
 8008212:	af00      	add	r7, sp, #0
 8008214:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008216:	2300      	movs	r3, #0
 8008218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	689a      	ldr	r2, [r3, #8]
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	431a      	orrs	r2, r3
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	695b      	ldr	r3, [r3, #20]
 800822a:	431a      	orrs	r2, r3
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	4313      	orrs	r3, r2
 8008232:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	4baa      	ldr	r3, [pc, #680]	; (80084e4 <UART_SetConfig+0x2d8>)
 800823c:	4013      	ands	r3, r2
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	6812      	ldr	r2, [r2, #0]
 8008242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008244:	430b      	orrs	r3, r1
 8008246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	68da      	ldr	r2, [r3, #12]
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	430a      	orrs	r2, r1
 800825c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a9f      	ldr	r2, [pc, #636]	; (80084e8 <UART_SetConfig+0x2dc>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d004      	beq.n	8008278 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008274:	4313      	orrs	r3, r2
 8008276:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008282:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	6812      	ldr	r2, [r2, #0]
 800828a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800828c:	430b      	orrs	r3, r1
 800828e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008296:	f023 010f 	bic.w	r1, r3, #15
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a90      	ldr	r2, [pc, #576]	; (80084ec <UART_SetConfig+0x2e0>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d125      	bne.n	80082fc <UART_SetConfig+0xf0>
 80082b0:	4b8f      	ldr	r3, [pc, #572]	; (80084f0 <UART_SetConfig+0x2e4>)
 80082b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b6:	f003 0303 	and.w	r3, r3, #3
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d81a      	bhi.n	80082f4 <UART_SetConfig+0xe8>
 80082be:	a201      	add	r2, pc, #4	; (adr r2, 80082c4 <UART_SetConfig+0xb8>)
 80082c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	080082e5 	.word	0x080082e5
 80082cc:	080082dd 	.word	0x080082dd
 80082d0:	080082ed 	.word	0x080082ed
 80082d4:	2301      	movs	r3, #1
 80082d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082da:	e116      	b.n	800850a <UART_SetConfig+0x2fe>
 80082dc:	2302      	movs	r3, #2
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e2:	e112      	b.n	800850a <UART_SetConfig+0x2fe>
 80082e4:	2304      	movs	r3, #4
 80082e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ea:	e10e      	b.n	800850a <UART_SetConfig+0x2fe>
 80082ec:	2308      	movs	r3, #8
 80082ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f2:	e10a      	b.n	800850a <UART_SetConfig+0x2fe>
 80082f4:	2310      	movs	r3, #16
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fa:	e106      	b.n	800850a <UART_SetConfig+0x2fe>
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a7c      	ldr	r2, [pc, #496]	; (80084f4 <UART_SetConfig+0x2e8>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d138      	bne.n	8008378 <UART_SetConfig+0x16c>
 8008306:	4b7a      	ldr	r3, [pc, #488]	; (80084f0 <UART_SetConfig+0x2e4>)
 8008308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800830c:	f003 030c 	and.w	r3, r3, #12
 8008310:	2b0c      	cmp	r3, #12
 8008312:	d82d      	bhi.n	8008370 <UART_SetConfig+0x164>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <UART_SetConfig+0x110>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	08008351 	.word	0x08008351
 8008320:	08008371 	.word	0x08008371
 8008324:	08008371 	.word	0x08008371
 8008328:	08008371 	.word	0x08008371
 800832c:	08008361 	.word	0x08008361
 8008330:	08008371 	.word	0x08008371
 8008334:	08008371 	.word	0x08008371
 8008338:	08008371 	.word	0x08008371
 800833c:	08008359 	.word	0x08008359
 8008340:	08008371 	.word	0x08008371
 8008344:	08008371 	.word	0x08008371
 8008348:	08008371 	.word	0x08008371
 800834c:	08008369 	.word	0x08008369
 8008350:	2300      	movs	r3, #0
 8008352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008356:	e0d8      	b.n	800850a <UART_SetConfig+0x2fe>
 8008358:	2302      	movs	r3, #2
 800835a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800835e:	e0d4      	b.n	800850a <UART_SetConfig+0x2fe>
 8008360:	2304      	movs	r3, #4
 8008362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008366:	e0d0      	b.n	800850a <UART_SetConfig+0x2fe>
 8008368:	2308      	movs	r3, #8
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800836e:	e0cc      	b.n	800850a <UART_SetConfig+0x2fe>
 8008370:	2310      	movs	r3, #16
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008376:	e0c8      	b.n	800850a <UART_SetConfig+0x2fe>
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a5e      	ldr	r2, [pc, #376]	; (80084f8 <UART_SetConfig+0x2ec>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d125      	bne.n	80083ce <UART_SetConfig+0x1c2>
 8008382:	4b5b      	ldr	r3, [pc, #364]	; (80084f0 <UART_SetConfig+0x2e4>)
 8008384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008388:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800838c:	2b30      	cmp	r3, #48	; 0x30
 800838e:	d016      	beq.n	80083be <UART_SetConfig+0x1b2>
 8008390:	2b30      	cmp	r3, #48	; 0x30
 8008392:	d818      	bhi.n	80083c6 <UART_SetConfig+0x1ba>
 8008394:	2b20      	cmp	r3, #32
 8008396:	d00a      	beq.n	80083ae <UART_SetConfig+0x1a2>
 8008398:	2b20      	cmp	r3, #32
 800839a:	d814      	bhi.n	80083c6 <UART_SetConfig+0x1ba>
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <UART_SetConfig+0x19a>
 80083a0:	2b10      	cmp	r3, #16
 80083a2:	d008      	beq.n	80083b6 <UART_SetConfig+0x1aa>
 80083a4:	e00f      	b.n	80083c6 <UART_SetConfig+0x1ba>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ac:	e0ad      	b.n	800850a <UART_SetConfig+0x2fe>
 80083ae:	2302      	movs	r3, #2
 80083b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b4:	e0a9      	b.n	800850a <UART_SetConfig+0x2fe>
 80083b6:	2304      	movs	r3, #4
 80083b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083bc:	e0a5      	b.n	800850a <UART_SetConfig+0x2fe>
 80083be:	2308      	movs	r3, #8
 80083c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083c4:	e0a1      	b.n	800850a <UART_SetConfig+0x2fe>
 80083c6:	2310      	movs	r3, #16
 80083c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083cc:	e09d      	b.n	800850a <UART_SetConfig+0x2fe>
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a4a      	ldr	r2, [pc, #296]	; (80084fc <UART_SetConfig+0x2f0>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d125      	bne.n	8008424 <UART_SetConfig+0x218>
 80083d8:	4b45      	ldr	r3, [pc, #276]	; (80084f0 <UART_SetConfig+0x2e4>)
 80083da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80083e2:	2bc0      	cmp	r3, #192	; 0xc0
 80083e4:	d016      	beq.n	8008414 <UART_SetConfig+0x208>
 80083e6:	2bc0      	cmp	r3, #192	; 0xc0
 80083e8:	d818      	bhi.n	800841c <UART_SetConfig+0x210>
 80083ea:	2b80      	cmp	r3, #128	; 0x80
 80083ec:	d00a      	beq.n	8008404 <UART_SetConfig+0x1f8>
 80083ee:	2b80      	cmp	r3, #128	; 0x80
 80083f0:	d814      	bhi.n	800841c <UART_SetConfig+0x210>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <UART_SetConfig+0x1f0>
 80083f6:	2b40      	cmp	r3, #64	; 0x40
 80083f8:	d008      	beq.n	800840c <UART_SetConfig+0x200>
 80083fa:	e00f      	b.n	800841c <UART_SetConfig+0x210>
 80083fc:	2300      	movs	r3, #0
 80083fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008402:	e082      	b.n	800850a <UART_SetConfig+0x2fe>
 8008404:	2302      	movs	r3, #2
 8008406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840a:	e07e      	b.n	800850a <UART_SetConfig+0x2fe>
 800840c:	2304      	movs	r3, #4
 800840e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008412:	e07a      	b.n	800850a <UART_SetConfig+0x2fe>
 8008414:	2308      	movs	r3, #8
 8008416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800841a:	e076      	b.n	800850a <UART_SetConfig+0x2fe>
 800841c:	2310      	movs	r3, #16
 800841e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008422:	e072      	b.n	800850a <UART_SetConfig+0x2fe>
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a35      	ldr	r2, [pc, #212]	; (8008500 <UART_SetConfig+0x2f4>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d12a      	bne.n	8008484 <UART_SetConfig+0x278>
 800842e:	4b30      	ldr	r3, [pc, #192]	; (80084f0 <UART_SetConfig+0x2e4>)
 8008430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800843c:	d01a      	beq.n	8008474 <UART_SetConfig+0x268>
 800843e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008442:	d81b      	bhi.n	800847c <UART_SetConfig+0x270>
 8008444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008448:	d00c      	beq.n	8008464 <UART_SetConfig+0x258>
 800844a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800844e:	d815      	bhi.n	800847c <UART_SetConfig+0x270>
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <UART_SetConfig+0x250>
 8008454:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008458:	d008      	beq.n	800846c <UART_SetConfig+0x260>
 800845a:	e00f      	b.n	800847c <UART_SetConfig+0x270>
 800845c:	2300      	movs	r3, #0
 800845e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008462:	e052      	b.n	800850a <UART_SetConfig+0x2fe>
 8008464:	2302      	movs	r3, #2
 8008466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800846a:	e04e      	b.n	800850a <UART_SetConfig+0x2fe>
 800846c:	2304      	movs	r3, #4
 800846e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008472:	e04a      	b.n	800850a <UART_SetConfig+0x2fe>
 8008474:	2308      	movs	r3, #8
 8008476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800847a:	e046      	b.n	800850a <UART_SetConfig+0x2fe>
 800847c:	2310      	movs	r3, #16
 800847e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008482:	e042      	b.n	800850a <UART_SetConfig+0x2fe>
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a17      	ldr	r2, [pc, #92]	; (80084e8 <UART_SetConfig+0x2dc>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d13a      	bne.n	8008504 <UART_SetConfig+0x2f8>
 800848e:	4b18      	ldr	r3, [pc, #96]	; (80084f0 <UART_SetConfig+0x2e4>)
 8008490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800849c:	d01a      	beq.n	80084d4 <UART_SetConfig+0x2c8>
 800849e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084a2:	d81b      	bhi.n	80084dc <UART_SetConfig+0x2d0>
 80084a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084a8:	d00c      	beq.n	80084c4 <UART_SetConfig+0x2b8>
 80084aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084ae:	d815      	bhi.n	80084dc <UART_SetConfig+0x2d0>
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d003      	beq.n	80084bc <UART_SetConfig+0x2b0>
 80084b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084b8:	d008      	beq.n	80084cc <UART_SetConfig+0x2c0>
 80084ba:	e00f      	b.n	80084dc <UART_SetConfig+0x2d0>
 80084bc:	2300      	movs	r3, #0
 80084be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c2:	e022      	b.n	800850a <UART_SetConfig+0x2fe>
 80084c4:	2302      	movs	r3, #2
 80084c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ca:	e01e      	b.n	800850a <UART_SetConfig+0x2fe>
 80084cc:	2304      	movs	r3, #4
 80084ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084d2:	e01a      	b.n	800850a <UART_SetConfig+0x2fe>
 80084d4:	2308      	movs	r3, #8
 80084d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084da:	e016      	b.n	800850a <UART_SetConfig+0x2fe>
 80084dc:	2310      	movs	r3, #16
 80084de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084e2:	e012      	b.n	800850a <UART_SetConfig+0x2fe>
 80084e4:	cfff69f3 	.word	0xcfff69f3
 80084e8:	40008000 	.word	0x40008000
 80084ec:	40013800 	.word	0x40013800
 80084f0:	40021000 	.word	0x40021000
 80084f4:	40004400 	.word	0x40004400
 80084f8:	40004800 	.word	0x40004800
 80084fc:	40004c00 	.word	0x40004c00
 8008500:	40005000 	.word	0x40005000
 8008504:	2310      	movs	r3, #16
 8008506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4aae      	ldr	r2, [pc, #696]	; (80087c8 <UART_SetConfig+0x5bc>)
 8008510:	4293      	cmp	r3, r2
 8008512:	f040 8097 	bne.w	8008644 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800851a:	2b08      	cmp	r3, #8
 800851c:	d823      	bhi.n	8008566 <UART_SetConfig+0x35a>
 800851e:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <UART_SetConfig+0x318>)
 8008520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008524:	08008549 	.word	0x08008549
 8008528:	08008567 	.word	0x08008567
 800852c:	08008551 	.word	0x08008551
 8008530:	08008567 	.word	0x08008567
 8008534:	08008557 	.word	0x08008557
 8008538:	08008567 	.word	0x08008567
 800853c:	08008567 	.word	0x08008567
 8008540:	08008567 	.word	0x08008567
 8008544:	0800855f 	.word	0x0800855f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008548:	f7fd fea4 	bl	8006294 <HAL_RCC_GetPCLK1Freq>
 800854c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800854e:	e010      	b.n	8008572 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008550:	4b9e      	ldr	r3, [pc, #632]	; (80087cc <UART_SetConfig+0x5c0>)
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008554:	e00d      	b.n	8008572 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008556:	f7fd fe2f 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800855a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800855c:	e009      	b.n	8008572 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800855e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008562:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008564:	e005      	b.n	8008572 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008566:	2300      	movs	r3, #0
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008570:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	2b00      	cmp	r3, #0
 8008576:	f000 8130 	beq.w	80087da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	4a94      	ldr	r2, [pc, #592]	; (80087d0 <UART_SetConfig+0x5c4>)
 8008580:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008584:	461a      	mov	r2, r3
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	fbb3 f3f2 	udiv	r3, r3, r2
 800858c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	4613      	mov	r3, r2
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	4413      	add	r3, r2
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	429a      	cmp	r2, r3
 800859c:	d305      	bcc.n	80085aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085a4:	69ba      	ldr	r2, [r7, #24]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d903      	bls.n	80085b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085b0:	e113      	b.n	80087da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	2200      	movs	r2, #0
 80085b6:	60bb      	str	r3, [r7, #8]
 80085b8:	60fa      	str	r2, [r7, #12]
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	4a84      	ldr	r2, [pc, #528]	; (80087d0 <UART_SetConfig+0x5c4>)
 80085c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2200      	movs	r2, #0
 80085c8:	603b      	str	r3, [r7, #0]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085d4:	f7f8 fb80 	bl	8000cd8 <__aeabi_uldivmod>
 80085d8:	4602      	mov	r2, r0
 80085da:	460b      	mov	r3, r1
 80085dc:	4610      	mov	r0, r2
 80085de:	4619      	mov	r1, r3
 80085e0:	f04f 0200 	mov.w	r2, #0
 80085e4:	f04f 0300 	mov.w	r3, #0
 80085e8:	020b      	lsls	r3, r1, #8
 80085ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085ee:	0202      	lsls	r2, r0, #8
 80085f0:	6979      	ldr	r1, [r7, #20]
 80085f2:	6849      	ldr	r1, [r1, #4]
 80085f4:	0849      	lsrs	r1, r1, #1
 80085f6:	2000      	movs	r0, #0
 80085f8:	460c      	mov	r4, r1
 80085fa:	4605      	mov	r5, r0
 80085fc:	eb12 0804 	adds.w	r8, r2, r4
 8008600:	eb43 0905 	adc.w	r9, r3, r5
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	469a      	mov	sl, r3
 800860c:	4693      	mov	fp, r2
 800860e:	4652      	mov	r2, sl
 8008610:	465b      	mov	r3, fp
 8008612:	4640      	mov	r0, r8
 8008614:	4649      	mov	r1, r9
 8008616:	f7f8 fb5f 	bl	8000cd8 <__aeabi_uldivmod>
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	4613      	mov	r3, r2
 8008620:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008628:	d308      	bcc.n	800863c <UART_SetConfig+0x430>
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008630:	d204      	bcs.n	800863c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6a3a      	ldr	r2, [r7, #32]
 8008638:	60da      	str	r2, [r3, #12]
 800863a:	e0ce      	b.n	80087da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008642:	e0ca      	b.n	80087da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800864c:	d166      	bne.n	800871c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800864e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008652:	2b08      	cmp	r3, #8
 8008654:	d827      	bhi.n	80086a6 <UART_SetConfig+0x49a>
 8008656:	a201      	add	r2, pc, #4	; (adr r2, 800865c <UART_SetConfig+0x450>)
 8008658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865c:	08008681 	.word	0x08008681
 8008660:	08008689 	.word	0x08008689
 8008664:	08008691 	.word	0x08008691
 8008668:	080086a7 	.word	0x080086a7
 800866c:	08008697 	.word	0x08008697
 8008670:	080086a7 	.word	0x080086a7
 8008674:	080086a7 	.word	0x080086a7
 8008678:	080086a7 	.word	0x080086a7
 800867c:	0800869f 	.word	0x0800869f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008680:	f7fd fe08 	bl	8006294 <HAL_RCC_GetPCLK1Freq>
 8008684:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008686:	e014      	b.n	80086b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008688:	f7fd fe1a 	bl	80062c0 <HAL_RCC_GetPCLK2Freq>
 800868c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800868e:	e010      	b.n	80086b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008690:	4b4e      	ldr	r3, [pc, #312]	; (80087cc <UART_SetConfig+0x5c0>)
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008694:	e00d      	b.n	80086b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008696:	f7fd fd8f 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800869a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800869c:	e009      	b.n	80086b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800869e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086a4:	e005      	b.n	80086b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 8090 	beq.w	80087da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	4a44      	ldr	r2, [pc, #272]	; (80087d0 <UART_SetConfig+0x5c4>)
 80086c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086c4:	461a      	mov	r2, r3
 80086c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80086cc:	005a      	lsls	r2, r3, #1
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	085b      	lsrs	r3, r3, #1
 80086d4:	441a      	add	r2, r3
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	fbb2 f3f3 	udiv	r3, r2, r3
 80086de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	2b0f      	cmp	r3, #15
 80086e4:	d916      	bls.n	8008714 <UART_SetConfig+0x508>
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ec:	d212      	bcs.n	8008714 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f023 030f 	bic.w	r3, r3, #15
 80086f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	085b      	lsrs	r3, r3, #1
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	f003 0307 	and.w	r3, r3, #7
 8008702:	b29a      	uxth	r2, r3
 8008704:	8bfb      	ldrh	r3, [r7, #30]
 8008706:	4313      	orrs	r3, r2
 8008708:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	8bfa      	ldrh	r2, [r7, #30]
 8008710:	60da      	str	r2, [r3, #12]
 8008712:	e062      	b.n	80087da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800871a:	e05e      	b.n	80087da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800871c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008720:	2b08      	cmp	r3, #8
 8008722:	d828      	bhi.n	8008776 <UART_SetConfig+0x56a>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <UART_SetConfig+0x520>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	08008751 	.word	0x08008751
 8008730:	08008759 	.word	0x08008759
 8008734:	08008761 	.word	0x08008761
 8008738:	08008777 	.word	0x08008777
 800873c:	08008767 	.word	0x08008767
 8008740:	08008777 	.word	0x08008777
 8008744:	08008777 	.word	0x08008777
 8008748:	08008777 	.word	0x08008777
 800874c:	0800876f 	.word	0x0800876f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008750:	f7fd fda0 	bl	8006294 <HAL_RCC_GetPCLK1Freq>
 8008754:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008756:	e014      	b.n	8008782 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008758:	f7fd fdb2 	bl	80062c0 <HAL_RCC_GetPCLK2Freq>
 800875c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800875e:	e010      	b.n	8008782 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008760:	4b1a      	ldr	r3, [pc, #104]	; (80087cc <UART_SetConfig+0x5c0>)
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008764:	e00d      	b.n	8008782 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008766:	f7fd fd27 	bl	80061b8 <HAL_RCC_GetSysClockFreq>
 800876a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800876c:	e009      	b.n	8008782 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800876e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008774:	e005      	b.n	8008782 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008780:	bf00      	nop
    }

    if (pclk != 0U)
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	2b00      	cmp	r3, #0
 8008786:	d028      	beq.n	80087da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878c:	4a10      	ldr	r2, [pc, #64]	; (80087d0 <UART_SetConfig+0x5c4>)
 800878e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008792:	461a      	mov	r2, r3
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	fbb3 f2f2 	udiv	r2, r3, r2
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	085b      	lsrs	r3, r3, #1
 80087a0:	441a      	add	r2, r3
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	2b0f      	cmp	r3, #15
 80087b0:	d910      	bls.n	80087d4 <UART_SetConfig+0x5c8>
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b8:	d20c      	bcs.n	80087d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	b29a      	uxth	r2, r3
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60da      	str	r2, [r3, #12]
 80087c4:	e009      	b.n	80087da <UART_SetConfig+0x5ce>
 80087c6:	bf00      	nop
 80087c8:	40008000 	.word	0x40008000
 80087cc:	00f42400 	.word	0x00f42400
 80087d0:	0800e8d8 	.word	0x0800e8d8
      }
      else
      {
        ret = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2201      	movs	r2, #1
 80087de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2200      	movs	r2, #0
 80087ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2200      	movs	r2, #0
 80087f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80087f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3730      	adds	r7, #48	; 0x30
 80087fe:	46bd      	mov	sp, r7
 8008800:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008804 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	f003 0301 	and.w	r3, r3, #1
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00a      	beq.n	800882e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00a      	beq.n	8008850 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	f003 0308 	and.w	r3, r3, #8
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008898:	f003 0310 	and.w	r3, r3, #16
 800889c:	2b00      	cmp	r3, #0
 800889e:	d00a      	beq.n	80088b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	430a      	orrs	r2, r1
 80088b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00a      	beq.n	80088d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	430a      	orrs	r2, r1
 80088d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d01a      	beq.n	800891a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008902:	d10a      	bne.n	800891a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	430a      	orrs	r2, r1
 800893a:	605a      	str	r2, [r3, #4]
  }
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af02      	add	r7, sp, #8
 800894e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008958:	f7f9 fb48 	bl	8001fec <HAL_GetTick>
 800895c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0308 	and.w	r3, r3, #8
 8008968:	2b08      	cmp	r3, #8
 800896a:	d10e      	bne.n	800898a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800896c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f82f 	bl	80089de <UART_WaitOnFlagUntilTimeout>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e025      	b.n	80089d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0304 	and.w	r3, r3, #4
 8008994:	2b04      	cmp	r3, #4
 8008996:	d10e      	bne.n	80089b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008998:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800899c:	9300      	str	r3, [sp, #0]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f819 	bl	80089de <UART_WaitOnFlagUntilTimeout>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e00f      	b.n	80089d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2220      	movs	r2, #32
 80089c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b09c      	sub	sp, #112	; 0x70
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	60f8      	str	r0, [r7, #12]
 80089e6:	60b9      	str	r1, [r7, #8]
 80089e8:	603b      	str	r3, [r7, #0]
 80089ea:	4613      	mov	r3, r2
 80089ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089ee:	e0a9      	b.n	8008b44 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f6:	f000 80a5 	beq.w	8008b44 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089fa:	f7f9 faf7 	bl	8001fec <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d302      	bcc.n	8008a10 <UART_WaitOnFlagUntilTimeout+0x32>
 8008a0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d140      	bne.n	8008a92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a18:	e853 3f00 	ldrex	r3, [r3]
 8008a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a24:	667b      	str	r3, [r7, #100]	; 0x64
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a30:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e6      	bne.n	8008a10 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3308      	adds	r3, #8
 8008a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a54:	f023 0301 	bic.w	r3, r3, #1
 8008a58:	663b      	str	r3, [r7, #96]	; 0x60
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3308      	adds	r3, #8
 8008a60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a62:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a6a:	e841 2300 	strex	r3, r2, [r1]
 8008a6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1e5      	bne.n	8008a42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2220      	movs	r2, #32
 8008a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e069      	b.n	8008b66 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d051      	beq.n	8008b44 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008aae:	d149      	bne.n	8008b44 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ab8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	e853 3f00 	ldrex	r3, [r3]
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ace:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8008ada:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008adc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ae0:	e841 2300 	strex	r3, r2, [r1]
 8008ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e6      	bne.n	8008aba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	3308      	adds	r3, #8
 8008af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	e853 3f00 	ldrex	r3, [r3]
 8008afa:	613b      	str	r3, [r7, #16]
   return(result);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	f023 0301 	bic.w	r3, r3, #1
 8008b02:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3308      	adds	r3, #8
 8008b0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b0c:	623a      	str	r2, [r7, #32]
 8008b0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	69f9      	ldr	r1, [r7, #28]
 8008b12:	6a3a      	ldr	r2, [r7, #32]
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e5      	bne.n	8008aec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2220      	movs	r2, #32
 8008b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2220      	movs	r2, #32
 8008b34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e010      	b.n	8008b66 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	69da      	ldr	r2, [r3, #28]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	bf0c      	ite	eq
 8008b54:	2301      	moveq	r3, #1
 8008b56:	2300      	movne	r3, #0
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	79fb      	ldrb	r3, [r7, #7]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	f43f af46 	beq.w	80089f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3770      	adds	r7, #112	; 0x70
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b0a3      	sub	sp, #140	; 0x8c
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	88fa      	ldrh	r2, [r7, #6]
 8008b88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	88fa      	ldrh	r2, [r7, #6]
 8008b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ba2:	d10e      	bne.n	8008bc2 <UART_Start_Receive_IT+0x52>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	691b      	ldr	r3, [r3, #16]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d105      	bne.n	8008bb8 <UART_Start_Receive_IT+0x48>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008bb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bb6:	e02d      	b.n	8008c14 <UART_Start_Receive_IT+0xa4>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	22ff      	movs	r2, #255	; 0xff
 8008bbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bc0:	e028      	b.n	8008c14 <UART_Start_Receive_IT+0xa4>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10d      	bne.n	8008be6 <UART_Start_Receive_IT+0x76>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d104      	bne.n	8008bdc <UART_Start_Receive_IT+0x6c>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	22ff      	movs	r2, #255	; 0xff
 8008bd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008bda:	e01b      	b.n	8008c14 <UART_Start_Receive_IT+0xa4>
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	227f      	movs	r2, #127	; 0x7f
 8008be0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008be4:	e016      	b.n	8008c14 <UART_Start_Receive_IT+0xa4>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	689b      	ldr	r3, [r3, #8]
 8008bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bee:	d10d      	bne.n	8008c0c <UART_Start_Receive_IT+0x9c>
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d104      	bne.n	8008c02 <UART_Start_Receive_IT+0x92>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	227f      	movs	r2, #127	; 0x7f
 8008bfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c00:	e008      	b.n	8008c14 <UART_Start_Receive_IT+0xa4>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	223f      	movs	r2, #63	; 0x3f
 8008c06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c0a:	e003      	b.n	8008c14 <UART_Start_Receive_IT+0xa4>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2222      	movs	r2, #34	; 0x22
 8008c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3308      	adds	r3, #8
 8008c2a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c2e:	e853 3f00 	ldrex	r3, [r3]
 8008c32:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c36:	f043 0301 	orr.w	r3, r3, #1
 8008c3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	3308      	adds	r3, #8
 8008c44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008c48:	673a      	str	r2, [r7, #112]	; 0x70
 8008c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c4c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008c4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008c50:	e841 2300 	strex	r3, r2, [r1]
 8008c54:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008c56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1e3      	bne.n	8008c24 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c64:	d153      	bne.n	8008d0e <UART_Start_Receive_IT+0x19e>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c6c:	88fa      	ldrh	r2, [r7, #6]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d34d      	bcc.n	8008d0e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7a:	d107      	bne.n	8008c8c <UART_Start_Receive_IT+0x11c>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d103      	bne.n	8008c8c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	4a4b      	ldr	r2, [pc, #300]	; (8008db4 <UART_Start_Receive_IT+0x244>)
 8008c88:	671a      	str	r2, [r3, #112]	; 0x70
 8008c8a:	e002      	b.n	8008c92 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	4a4a      	ldr	r2, [pc, #296]	; (8008db8 <UART_Start_Receive_IT+0x248>)
 8008c90:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01a      	beq.n	8008cd8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008caa:	e853 3f00 	ldrex	r3, [r3]
 8008cae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cc6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008cca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ccc:	e841 2300 	strex	r3, r2, [r1]
 8008cd0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d1e4      	bne.n	8008ca2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3308      	adds	r3, #8
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce2:	e853 3f00 	ldrex	r3, [r3]
 8008ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3308      	adds	r3, #8
 8008cf6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008cf8:	64ba      	str	r2, [r7, #72]	; 0x48
 8008cfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008cfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d00:	e841 2300 	strex	r3, r2, [r1]
 8008d04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1e5      	bne.n	8008cd8 <UART_Start_Receive_IT+0x168>
 8008d0c:	e04a      	b.n	8008da4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d16:	d107      	bne.n	8008d28 <UART_Start_Receive_IT+0x1b8>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d103      	bne.n	8008d28 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4a26      	ldr	r2, [pc, #152]	; (8008dbc <UART_Start_Receive_IT+0x24c>)
 8008d24:	671a      	str	r2, [r3, #112]	; 0x70
 8008d26:	e002      	b.n	8008d2e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4a25      	ldr	r2, [pc, #148]	; (8008dc0 <UART_Start_Receive_IT+0x250>)
 8008d2c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d019      	beq.n	8008d72 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008d52:	677b      	str	r3, [r7, #116]	; 0x74
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d5e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e6      	bne.n	8008d3e <UART_Start_Receive_IT+0x1ce>
 8008d70:	e018      	b.n	8008da4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	e853 3f00 	ldrex	r3, [r3]
 8008d7e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	f043 0320 	orr.w	r3, r3, #32
 8008d86:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d90:	623b      	str	r3, [r7, #32]
 8008d92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	69f9      	ldr	r1, [r7, #28]
 8008d96:	6a3a      	ldr	r2, [r7, #32]
 8008d98:	e841 2300 	strex	r3, r2, [r1]
 8008d9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d1e6      	bne.n	8008d72 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	378c      	adds	r7, #140	; 0x8c
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	080094cd 	.word	0x080094cd
 8008db8:	080091d5 	.word	0x080091d5
 8008dbc:	08009073 	.word	0x08009073
 8008dc0:	08008f13 	.word	0x08008f13

08008dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b095      	sub	sp, #84	; 0x54
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd4:	e853 3f00 	ldrex	r3, [r3]
 8008dd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	461a      	mov	r2, r3
 8008de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dea:	643b      	str	r3, [r7, #64]	; 0x40
 8008dec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008df0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008df2:	e841 2300 	strex	r3, r2, [r1]
 8008df6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1e6      	bne.n	8008dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	3308      	adds	r3, #8
 8008e04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	e853 3f00 	ldrex	r3, [r3]
 8008e0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e14:	f023 0301 	bic.w	r3, r3, #1
 8008e18:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3308      	adds	r3, #8
 8008e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e2a:	e841 2300 	strex	r3, r2, [r1]
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1e3      	bne.n	8008dfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d118      	bne.n	8008e70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	e853 3f00 	ldrex	r3, [r3]
 8008e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f023 0310 	bic.w	r3, r3, #16
 8008e52:	647b      	str	r3, [r7, #68]	; 0x44
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e5c:	61bb      	str	r3, [r7, #24]
 8008e5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	6979      	ldr	r1, [r7, #20]
 8008e62:	69ba      	ldr	r2, [r7, #24]
 8008e64:	e841 2300 	strex	r3, r2, [r1]
 8008e68:	613b      	str	r3, [r7, #16]
   return(result);
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e6      	bne.n	8008e3e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2220      	movs	r2, #32
 8008e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008e84:	bf00      	nop
 8008e86:	3754      	adds	r7, #84	; 0x54
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr

08008e90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f7ff f996 	bl	80081e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b088      	sub	sp, #32
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ed8:	61fb      	str	r3, [r7, #28]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	61bb      	str	r3, [r7, #24]
 8008ee4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee6:	6979      	ldr	r1, [r7, #20]
 8008ee8:	69ba      	ldr	r2, [r7, #24]
 8008eea:	e841 2300 	strex	r3, r2, [r1]
 8008eee:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1e6      	bne.n	8008ec4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f7ff f961 	bl	80081cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f0a:	bf00      	nop
 8008f0c:	3720      	adds	r7, #32
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b096      	sub	sp, #88	; 0x58
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f20:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2a:	2b22      	cmp	r3, #34	; 0x22
 8008f2c:	f040 8095 	bne.w	800905a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f36:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008f3a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008f3e:	b2d9      	uxtb	r1, r3
 8008f40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f4a:	400a      	ands	r2, r1
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	3b01      	subs	r3, #1
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d178      	bne.n	800906a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	461a      	mov	r2, r3
 8008f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f96:	647b      	str	r3, [r7, #68]	; 0x44
 8008f98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e6      	bne.n	8008f78 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3308      	adds	r3, #8
 8008fb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	f023 0301 	bic.w	r3, r3, #1
 8008fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fca:	633a      	str	r2, [r7, #48]	; 0x30
 8008fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e5      	bne.n	8008faa <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2220      	movs	r2, #32
 8008fe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d12e      	bne.n	8009052 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	60fb      	str	r3, [r7, #12]
   return(result);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f023 0310 	bic.w	r3, r3, #16
 800900e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	461a      	mov	r2, r3
 8009016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009018:	61fb      	str	r3, [r7, #28]
 800901a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	69b9      	ldr	r1, [r7, #24]
 800901e:	69fa      	ldr	r2, [r7, #28]
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	617b      	str	r3, [r7, #20]
   return(result);
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e6      	bne.n	8008ffa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	69db      	ldr	r3, [r3, #28]
 8009032:	f003 0310 	and.w	r3, r3, #16
 8009036:	2b10      	cmp	r3, #16
 8009038:	d103      	bne.n	8009042 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2210      	movs	r2, #16
 8009040:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7ff f8d2 	bl	80081f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009050:	e00b      	b.n	800906a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fcfe 	bl	8009a54 <HAL_UART_RxCpltCallback>
}
 8009058:	e007      	b.n	800906a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	699a      	ldr	r2, [r3, #24]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f042 0208 	orr.w	r2, r2, #8
 8009068:	619a      	str	r2, [r3, #24]
}
 800906a:	bf00      	nop
 800906c:	3758      	adds	r7, #88	; 0x58
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b096      	sub	sp, #88	; 0x58
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009080:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800908a:	2b22      	cmp	r3, #34	; 0x22
 800908c:	f040 8095 	bne.w	80091ba <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800909e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80090a0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80090a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80090a8:	4013      	ands	r3, r2
 80090aa:	b29a      	uxth	r2, r3
 80090ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090ae:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090b4:	1c9a      	adds	r2, r3, #2
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	3b01      	subs	r3, #1
 80090c4:	b29a      	uxth	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d178      	bne.n	80091ca <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e0:	e853 3f00 	ldrex	r3, [r3]
 80090e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090f6:	643b      	str	r3, [r7, #64]	; 0x40
 80090f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090fe:	e841 2300 	strex	r3, r2, [r1]
 8009102:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1e6      	bne.n	80090d8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3308      	adds	r3, #8
 8009110:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	e853 3f00 	ldrex	r3, [r3]
 8009118:	61fb      	str	r3, [r7, #28]
   return(result);
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	f023 0301 	bic.w	r3, r3, #1
 8009120:	64bb      	str	r3, [r7, #72]	; 0x48
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800912a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800912c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009130:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009132:	e841 2300 	strex	r3, r2, [r1]
 8009136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1e5      	bne.n	800910a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2220      	movs	r2, #32
 8009142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009150:	2b01      	cmp	r3, #1
 8009152:	d12e      	bne.n	80091b2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	60bb      	str	r3, [r7, #8]
   return(result);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f023 0310 	bic.w	r3, r3, #16
 800916e:	647b      	str	r3, [r7, #68]	; 0x44
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	461a      	mov	r2, r3
 8009176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009178:	61bb      	str	r3, [r7, #24]
 800917a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	6979      	ldr	r1, [r7, #20]
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	e841 2300 	strex	r3, r2, [r1]
 8009184:	613b      	str	r3, [r7, #16]
   return(result);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e6      	bne.n	800915a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	f003 0310 	and.w	r3, r3, #16
 8009196:	2b10      	cmp	r3, #16
 8009198:	d103      	bne.n	80091a2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2210      	movs	r2, #16
 80091a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff f822 	bl	80081f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80091b0:	e00b      	b.n	80091ca <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fc4e 	bl	8009a54 <HAL_UART_RxCpltCallback>
}
 80091b8:	e007      	b.n	80091ca <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	699a      	ldr	r2, [r3, #24]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f042 0208 	orr.w	r2, r2, #8
 80091c8:	619a      	str	r2, [r3, #24]
}
 80091ca:	bf00      	nop
 80091cc:	3758      	adds	r7, #88	; 0x58
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b0a6      	sub	sp, #152	; 0x98
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80091e2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800920a:	2b22      	cmp	r3, #34	; 0x22
 800920c:	f040 814f 	bne.w	80094ae <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009216:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800921a:	e0f6      	b.n	800940a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009226:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800922a:	b2d9      	uxtb	r1, r3
 800922c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009230:	b2da      	uxtb	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009236:	400a      	ands	r2, r1
 8009238:	b2d2      	uxtb	r2, r2
 800923a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	b29a      	uxth	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	69db      	ldr	r3, [r3, #28]
 800925e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009262:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009266:	f003 0307 	and.w	r3, r3, #7
 800926a:	2b00      	cmp	r3, #0
 800926c:	d053      	beq.n	8009316 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800926e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d011      	beq.n	800929e <UART_RxISR_8BIT_FIFOEN+0xca>
 800927a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800927e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00b      	beq.n	800929e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2201      	movs	r2, #1
 800928c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009294:	f043 0201 	orr.w	r2, r3, #1
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800929e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d011      	beq.n	80092ce <UART_RxISR_8BIT_FIFOEN+0xfa>
 80092aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00b      	beq.n	80092ce <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2202      	movs	r2, #2
 80092bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092c4:	f043 0204 	orr.w	r2, r3, #4
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80092d2:	f003 0304 	and.w	r3, r3, #4
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d011      	beq.n	80092fe <UART_RxISR_8BIT_FIFOEN+0x12a>
 80092da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00b      	beq.n	80092fe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2204      	movs	r2, #4
 80092ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092f4:	f043 0202 	orr.w	r2, r3, #2
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009304:	2b00      	cmp	r3, #0
 8009306:	d006      	beq.n	8009316 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7fe ff69 	bl	80081e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800931c:	b29b      	uxth	r3, r3
 800931e:	2b00      	cmp	r3, #0
 8009320:	d173      	bne.n	800940a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800932a:	e853 3f00 	ldrex	r3, [r3]
 800932e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009330:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009332:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	461a      	mov	r2, r3
 8009340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009344:	66bb      	str	r3, [r7, #104]	; 0x68
 8009346:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009348:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800934a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800934c:	e841 2300 	strex	r3, r2, [r1]
 8009350:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1e4      	bne.n	8009322 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3308      	adds	r3, #8
 800935e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009362:	e853 3f00 	ldrex	r3, [r3]
 8009366:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800936a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800936e:	f023 0301 	bic.w	r3, r3, #1
 8009372:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3308      	adds	r3, #8
 800937a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800937c:	657a      	str	r2, [r7, #84]	; 0x54
 800937e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009380:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009382:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009384:	e841 2300 	strex	r3, r2, [r1]
 8009388:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800938a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e3      	bne.n	8009358 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2220      	movs	r2, #32
 8009394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d12e      	bne.n	8009404 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b4:	e853 3f00 	ldrex	r3, [r3]
 80093b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093bc:	f023 0310 	bic.w	r3, r3, #16
 80093c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	461a      	mov	r2, r3
 80093c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093ca:	643b      	str	r3, [r7, #64]	; 0x40
 80093cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e6      	bne.n	80093ac <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	f003 0310 	and.w	r3, r3, #16
 80093e8:	2b10      	cmp	r3, #16
 80093ea:	d103      	bne.n	80093f4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2210      	movs	r2, #16
 80093f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7fe fef9 	bl	80081f4 <HAL_UARTEx_RxEventCallback>
 8009402:	e002      	b.n	800940a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fb25 	bl	8009a54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800940a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800940e:	2b00      	cmp	r3, #0
 8009410:	d006      	beq.n	8009420 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009412:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009416:	f003 0320 	and.w	r3, r3, #32
 800941a:	2b00      	cmp	r3, #0
 800941c:	f47f aefe 	bne.w	800921c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009426:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800942a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800942e:	2b00      	cmp	r3, #0
 8009430:	d045      	beq.n	80094be <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009438:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800943c:	429a      	cmp	r2, r3
 800943e:	d23e      	bcs.n	80094be <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	3308      	adds	r3, #8
 8009446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	e853 3f00 	ldrex	r3, [r3]
 800944e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009456:	673b      	str	r3, [r7, #112]	; 0x70
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3308      	adds	r3, #8
 800945e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009460:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009468:	e841 2300 	strex	r3, r2, [r1]
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e5      	bne.n	8009440 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a14      	ldr	r2, [pc, #80]	; (80094c8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009478:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	e853 3f00 	ldrex	r3, [r3]
 8009486:	60bb      	str	r3, [r7, #8]
   return(result);
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	f043 0320 	orr.w	r3, r3, #32
 800948e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	461a      	mov	r2, r3
 8009496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009498:	61bb      	str	r3, [r7, #24]
 800949a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949c:	6979      	ldr	r1, [r7, #20]
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	e841 2300 	strex	r3, r2, [r1]
 80094a4:	613b      	str	r3, [r7, #16]
   return(result);
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1e6      	bne.n	800947a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094ac:	e007      	b.n	80094be <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	699a      	ldr	r2, [r3, #24]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f042 0208 	orr.w	r2, r2, #8
 80094bc:	619a      	str	r2, [r3, #24]
}
 80094be:	bf00      	nop
 80094c0:	3798      	adds	r7, #152	; 0x98
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	08008f13 	.word	0x08008f13

080094cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b0a8      	sub	sp, #160	; 0xa0
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094da:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009502:	2b22      	cmp	r3, #34	; 0x22
 8009504:	f040 8153 	bne.w	80097ae <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800950e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009512:	e0fa      	b.n	800970a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009522:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009526:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800952a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800952e:	4013      	ands	r3, r2
 8009530:	b29a      	uxth	r2, r3
 8009532:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009536:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800953c:	1c9a      	adds	r2, r3, #2
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009548:	b29b      	uxth	r3, r3
 800954a:	3b01      	subs	r3, #1
 800954c:	b29a      	uxth	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800955e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009562:	f003 0307 	and.w	r3, r3, #7
 8009566:	2b00      	cmp	r3, #0
 8009568:	d053      	beq.n	8009612 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800956a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d011      	beq.n	800959a <UART_RxISR_16BIT_FIFOEN+0xce>
 8009576:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800957a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00b      	beq.n	800959a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2201      	movs	r2, #1
 8009588:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009590:	f043 0201 	orr.w	r2, r3, #1
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800959a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800959e:	f003 0302 	and.w	r3, r3, #2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d011      	beq.n	80095ca <UART_RxISR_16BIT_FIFOEN+0xfe>
 80095a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00b      	beq.n	80095ca <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2202      	movs	r2, #2
 80095b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c0:	f043 0204 	orr.w	r2, r3, #4
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095ce:	f003 0304 	and.w	r3, r3, #4
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d011      	beq.n	80095fa <UART_RxISR_16BIT_FIFOEN+0x12e>
 80095d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00b      	beq.n	80095fa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2204      	movs	r2, #4
 80095e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095f0:	f043 0202 	orr.w	r2, r3, #2
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009600:	2b00      	cmp	r3, #0
 8009602:	d006      	beq.n	8009612 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7fe fdeb 	bl	80081e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009618:	b29b      	uxth	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	d175      	bne.n	800970a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800962c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800962e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009640:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009642:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009646:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800964e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e4      	bne.n	800961e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3308      	adds	r3, #8
 800965a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800966a:	f023 0301 	bic.w	r3, r3, #1
 800966e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3308      	adds	r3, #8
 8009678:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800967c:	65ba      	str	r2, [r7, #88]	; 0x58
 800967e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009680:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009682:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009684:	e841 2300 	strex	r3, r2, [r1]
 8009688:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800968a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1e1      	bne.n	8009654 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2220      	movs	r2, #32
 8009694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d12e      	bne.n	8009704 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	e853 3f00 	ldrex	r3, [r3]
 80096b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80096ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096bc:	f023 0310 	bic.w	r3, r3, #16
 80096c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	461a      	mov	r2, r3
 80096c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096ca:	647b      	str	r3, [r7, #68]	; 0x44
 80096cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80096d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096d2:	e841 2300 	strex	r3, r2, [r1]
 80096d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80096d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d1e6      	bne.n	80096ac <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	f003 0310 	and.w	r3, r3, #16
 80096e8:	2b10      	cmp	r3, #16
 80096ea:	d103      	bne.n	80096f4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2210      	movs	r2, #16
 80096f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096fa:	4619      	mov	r1, r3
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f7fe fd79 	bl	80081f4 <HAL_UARTEx_RxEventCallback>
 8009702:	e002      	b.n	800970a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f9a5 	bl	8009a54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800970a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800970e:	2b00      	cmp	r3, #0
 8009710:	d006      	beq.n	8009720 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009712:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009716:	f003 0320 	and.w	r3, r3, #32
 800971a:	2b00      	cmp	r3, #0
 800971c:	f47f aefa 	bne.w	8009514 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009726:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800972a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800972e:	2b00      	cmp	r3, #0
 8009730:	d045      	beq.n	80097be <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009738:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800973c:	429a      	cmp	r2, r3
 800973e:	d23e      	bcs.n	80097be <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3308      	adds	r3, #8
 8009746:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974a:	e853 3f00 	ldrex	r3, [r3]
 800974e:	623b      	str	r3, [r7, #32]
   return(result);
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009756:	677b      	str	r3, [r7, #116]	; 0x74
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	3308      	adds	r3, #8
 800975e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009760:	633a      	str	r2, [r7, #48]	; 0x30
 8009762:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009768:	e841 2300 	strex	r3, r2, [r1]
 800976c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e5      	bne.n	8009740 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a14      	ldr	r2, [pc, #80]	; (80097c8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009778:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	e853 3f00 	ldrex	r3, [r3]
 8009786:	60fb      	str	r3, [r7, #12]
   return(result);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f043 0320 	orr.w	r3, r3, #32
 800978e:	673b      	str	r3, [r7, #112]	; 0x70
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	461a      	mov	r2, r3
 8009796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009798:	61fb      	str	r3, [r7, #28]
 800979a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979c:	69b9      	ldr	r1, [r7, #24]
 800979e:	69fa      	ldr	r2, [r7, #28]
 80097a0:	e841 2300 	strex	r3, r2, [r1]
 80097a4:	617b      	str	r3, [r7, #20]
   return(result);
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1e6      	bne.n	800977a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097ac:	e007      	b.n	80097be <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	699a      	ldr	r2, [r3, #24]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f042 0208 	orr.w	r2, r2, #8
 80097bc:	619a      	str	r2, [r3, #24]
}
 80097be:	bf00      	nop
 80097c0:	37a0      	adds	r7, #160	; 0xa0
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	08009073 	.word	0x08009073

080097cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009816:	2b01      	cmp	r3, #1
 8009818:	d101      	bne.n	800981e <HAL_UARTEx_DisableFifoMode+0x16>
 800981a:	2302      	movs	r3, #2
 800981c:	e027      	b.n	800986e <HAL_UARTEx_DisableFifoMode+0x66>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2224      	movs	r2, #36	; 0x24
 800982a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f022 0201 	bic.w	r2, r2, #1
 8009844:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800984c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2220      	movs	r2, #32
 8009860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800988a:	2b01      	cmp	r3, #1
 800988c:	d101      	bne.n	8009892 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800988e:	2302      	movs	r3, #2
 8009890:	e02d      	b.n	80098ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2224      	movs	r2, #36	; 0x24
 800989e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f022 0201 	bic.w	r2, r2, #1
 80098b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	430a      	orrs	r2, r1
 80098cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f850 	bl	8009974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68fa      	ldr	r2, [r7, #12]
 80098da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b084      	sub	sp, #16
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009906:	2b01      	cmp	r3, #1
 8009908:	d101      	bne.n	800990e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800990a:	2302      	movs	r3, #2
 800990c:	e02d      	b.n	800996a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2224      	movs	r2, #36	; 0x24
 800991a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f022 0201 	bic.w	r2, r2, #1
 8009934:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	689b      	ldr	r3, [r3, #8]
 800993c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	683a      	ldr	r2, [r7, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f812 	bl	8009974 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2220      	movs	r2, #32
 800995c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
	...

08009974 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009980:	2b00      	cmp	r3, #0
 8009982:	d108      	bne.n	8009996 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009994:	e031      	b.n	80099fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009996:	2308      	movs	r3, #8
 8009998:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800999a:	2308      	movs	r3, #8
 800999c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	0e5b      	lsrs	r3, r3, #25
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	f003 0307 	and.w	r3, r3, #7
 80099ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	0f5b      	lsrs	r3, r3, #29
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	f003 0307 	and.w	r3, r3, #7
 80099bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	7b3a      	ldrb	r2, [r7, #12]
 80099c2:	4911      	ldr	r1, [pc, #68]	; (8009a08 <UARTEx_SetNbDataToProcess+0x94>)
 80099c4:	5c8a      	ldrb	r2, [r1, r2]
 80099c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80099ca:	7b3a      	ldrb	r2, [r7, #12]
 80099cc:	490f      	ldr	r1, [pc, #60]	; (8009a0c <UARTEx_SetNbDataToProcess+0x98>)
 80099ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
 80099de:	7b7a      	ldrb	r2, [r7, #13]
 80099e0:	4909      	ldr	r1, [pc, #36]	; (8009a08 <UARTEx_SetNbDataToProcess+0x94>)
 80099e2:	5c8a      	ldrb	r2, [r1, r2]
 80099e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80099e8:	7b7a      	ldrb	r2, [r7, #13]
 80099ea:	4908      	ldr	r1, [pc, #32]	; (8009a0c <UARTEx_SetNbDataToProcess+0x98>)
 80099ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80099fa:	bf00      	nop
 80099fc:	3714      	adds	r7, #20
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	0800e8f0 	.word	0x0800e8f0
 8009a0c:	0800e8f8 	.word	0x0800e8f8

08009a10 <USER_CALLBACK_init>:
uint8_t CheckFlagUSART = 0;/*************************************************** Flag checking when UART jump into CallBack funtion*/
uint16_t Voltage_Variable = 0;/*********************************************** Voltage Variable*/
uint32_t ADCVar[3];

void USER_CALLBACK_init(void)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8009a14:	2104      	movs	r1, #4
 8009a16:	4809      	ldr	r0, [pc, #36]	; (8009a3c <USER_CALLBACK_init+0x2c>)
 8009a18:	f7fc ffb4 	bl	8006984 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	4808      	ldr	r0, [pc, #32]	; (8009a40 <USER_CALLBACK_init+0x30>)
 8009a20:	f7fc ffb0 	bl	8006984 <HAL_TIM_PWM_Start>
//	  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
	 // HAL_TIM_Base_Start_IT(&htim2);
	//  HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);/******************************* To disable ADC*/
	  /*Start Interrupt Function*/
	  /****Uart Transfer*****/
	  HAL_UART_Receive_IT(&huart2,(uint8_t*)Rx_data, 1);
 8009a24:	2201      	movs	r2, #1
 8009a26:	4907      	ldr	r1, [pc, #28]	; (8009a44 <USER_CALLBACK_init+0x34>)
 8009a28:	4807      	ldr	r0, [pc, #28]	; (8009a48 <USER_CALLBACK_init+0x38>)
 8009a2a:	f7fe f861 	bl	8007af0 <HAL_UART_Receive_IT>
	  /**** ADC Start 1********/
	  //HAL_ADC_Start_IT(&hadc1);
	  /**** ADC 4 Start with DMA*****/
	  HAL_ADC_Start_DMA(&hadc3,ADCVar,3);
 8009a2e:	2203      	movs	r2, #3
 8009a30:	4906      	ldr	r1, [pc, #24]	; (8009a4c <USER_CALLBACK_init+0x3c>)
 8009a32:	4807      	ldr	r0, [pc, #28]	; (8009a50 <USER_CALLBACK_init+0x40>)
 8009a34:	f7f8 feec 	bl	8002810 <HAL_ADC_Start_DMA>
	  //HAL_ADC_Start(&hadc3);
	  // Use HAL_ADC_Start when want to start mesuare ADC
	  // HAL_ADC_Stop to stop mesuare
}
 8009a38:	bf00      	nop
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	200003d0 	.word	0x200003d0
 8009a40:	2000041c 	.word	0x2000041c
 8009a44:	20000520 	.word	0x20000520
 8009a48:	20000468 	.word	0x20000468
 8009a4c:	2000053c 	.word	0x2000053c
 8009a50:	20000298 	.word	0x20000298

08009a54 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a10      	ldr	r2, [pc, #64]	; (8009aa4 <HAL_UART_RxCpltCallback+0x50>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d119      	bne.n	8009a9a <HAL_UART_RxCpltCallback+0x46>
	{
		Rx_Buffer[count++] = Rx_data[0];
 8009a66:	4b10      	ldr	r3, [pc, #64]	; (8009aa8 <HAL_UART_RxCpltCallback+0x54>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	1c5a      	adds	r2, r3, #1
 8009a6c:	b2d1      	uxtb	r1, r2
 8009a6e:	4a0e      	ldr	r2, [pc, #56]	; (8009aa8 <HAL_UART_RxCpltCallback+0x54>)
 8009a70:	7011      	strb	r1, [r2, #0]
 8009a72:	461a      	mov	r2, r3
 8009a74:	4b0d      	ldr	r3, [pc, #52]	; (8009aac <HAL_UART_RxCpltCallback+0x58>)
 8009a76:	7819      	ldrb	r1, [r3, #0]
 8009a78:	4b0d      	ldr	r3, [pc, #52]	; (8009ab0 <HAL_UART_RxCpltCallback+0x5c>)
 8009a7a:	5499      	strb	r1, [r3, r2]
		if((Rx_data[0]) == '\r')
 8009a7c:	4b0b      	ldr	r3, [pc, #44]	; (8009aac <HAL_UART_RxCpltCallback+0x58>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	2b0d      	cmp	r3, #13
 8009a82:	d105      	bne.n	8009a90 <HAL_UART_RxCpltCallback+0x3c>
		{
			count = 0;
 8009a84:	4b08      	ldr	r3, [pc, #32]	; (8009aa8 <HAL_UART_RxCpltCallback+0x54>)
 8009a86:	2200      	movs	r2, #0
 8009a88:	701a      	strb	r2, [r3, #0]
			CheckFlagUSART = 1;
 8009a8a:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <HAL_UART_RxCpltCallback+0x60>)
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, (uint8_t*)Rx_data,1);
 8009a90:	2201      	movs	r2, #1
 8009a92:	4906      	ldr	r1, [pc, #24]	; (8009aac <HAL_UART_RxCpltCallback+0x58>)
 8009a94:	4808      	ldr	r0, [pc, #32]	; (8009ab8 <HAL_UART_RxCpltCallback+0x64>)
 8009a96:	f7fe f82b 	bl	8007af0 <HAL_UART_Receive_IT>
	}
}
 8009a9a:	bf00      	nop
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	40004400 	.word	0x40004400
 8009aa8:	20000538 	.word	0x20000538
 8009aac:	20000520 	.word	0x20000520
 8009ab0:	20000524 	.word	0x20000524
 8009ab4:	2000053a 	.word	0x2000053a
 8009ab8:	20000468 	.word	0x20000468

08009abc <HAL_ADC_ConvCpltCallback>:
/********Conversion complete callback in non-blocking mode***/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681a      	ldr	r2, [r3, #0]
 8009ac8:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <HAL_ADC_ConvCpltCallback+0x38>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d102      	bne.n	8009ad6 <HAL_ADC_ConvCpltCallback+0x1a>
	{
		CheckFlagADC = 1;
 8009ad0:	4b09      	ldr	r3, [pc, #36]	; (8009af8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	701a      	strb	r2, [r3, #0]
	}
	if(hadc->Instance == hadc3.Instance)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	4b08      	ldr	r3, [pc, #32]	; (8009afc <HAL_ADC_ConvCpltCallback+0x40>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	429a      	cmp	r2, r3
 8009ae0:	d102      	bne.n	8009ae8 <HAL_ADC_ConvCpltCallback+0x2c>
	{
		CheckFlagADC = 1;
 8009ae2:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	701a      	strb	r2, [r3, #0]
	}
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	2000022c 	.word	0x2000022c
 8009af8:	20000539 	.word	0x20000539
 8009afc:	20000298 	.word	0x20000298

08009b00 <USER_FLASH_ErasePage>:
 *  Created on: Dec 6, 2022
 *      Author: HPMC
 */
#include "USER_Flash.h"
void USER_FLASH_ErasePage(FLASH_EraseInitTypeDef EraseInitStruct)
{
 8009b00:	b590      	push	{r4, r7, lr}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	463c      	mov	r4, r7
 8009b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Unlock Mode*/
	HAL_FLASH_Unlock();
 8009b0c:	f7fb fb82 	bl	8005214 <HAL_FLASH_Unlock>

	//HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
	FLASH_PageErase(EraseInitStruct.NbPages,EraseInitStruct.Banks);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	4611      	mov	r1, r2
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fb fc68 	bl	80053ec <FLASH_PageErase>

	HAL_FLASH_Lock();
 8009b1c:	f7fb fb9c 	bl	8005258 <HAL_FLASH_Lock>

}
 8009b20:	bf00      	nop
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd90      	pop	{r4, r7, pc}

08009b28 <USER_FLASH_Write>:
void USER_FLASH_Write(uint32_t Address, const uint8_t* data, int dataLength)
{
 8009b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b2c:	b0ab      	sub	sp, #172	; 0xac
 8009b2e:	af00      	add	r7, sp, #0
 8009b30:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8009b34:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8009b38:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009b3a:	466b      	mov	r3, sp
 8009b3c:	461e      	mov	r6, r3
	//HAL_FLASH_Unlock();
	unsigned int dwLen = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	if((dataLength % 8 ==0) && (dataLength >= 8))
 8009b44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b46:	f003 0307 	and.w	r3, r3, #7
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d106      	bne.n	8009b5c <USER_FLASH_Write+0x34>
 8009b4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b50:	2b07      	cmp	r3, #7
 8009b52:	dd03      	ble.n	8009b5c <USER_FLASH_Write+0x34>
	{
		dwLen = dataLength;
 8009b54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b5a:	e02c      	b.n	8009bb6 <USER_FLASH_Write+0x8e>
	}
	else if ((dataLength % 8 > 0) && (dataLength > 8))
 8009b5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b5e:	425a      	negs	r2, r3
 8009b60:	f003 0307 	and.w	r3, r3, #7
 8009b64:	f002 0207 	and.w	r2, r2, #7
 8009b68:	bf58      	it	pl
 8009b6a:	4253      	negpl	r3, r2
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	dd11      	ble.n	8009b94 <USER_FLASH_Write+0x6c>
 8009b70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b72:	2b08      	cmp	r3, #8
 8009b74:	dd0e      	ble.n	8009b94 <USER_FLASH_Write+0x6c>
	{
		dwLen = dataLength + (8 - (dataLength % 8));
 8009b76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b78:	425a      	negs	r2, r3
 8009b7a:	f003 0307 	and.w	r3, r3, #7
 8009b7e:	f002 0207 	and.w	r2, r2, #7
 8009b82:	bf58      	it	pl
 8009b84:	4253      	negpl	r3, r2
 8009b86:	f1c3 0208 	rsb	r2, r3, #8
 8009b8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009b92:	e010      	b.n	8009bb6 <USER_FLASH_Write+0x8e>
	}
	else if (dataLength < 8)
 8009b94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b96:	2b07      	cmp	r3, #7
 8009b98:	dc0d      	bgt.n	8009bb6 <USER_FLASH_Write+0x8e>
	{
		dwLen = dataLength + (8 - (dataLength % 8));
 8009b9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009b9c:	425a      	negs	r2, r3
 8009b9e:	f003 0307 	and.w	r3, r3, #7
 8009ba2:	f002 0207 	and.w	r2, r2, #7
 8009ba6:	bf58      	it	pl
 8009ba8:	4253      	negpl	r3, r2
 8009baa:	f1c3 0208 	rsb	r2, r3, #8
 8009bae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	}
	uint8_t dataArr[dwLen +1];
 8009bb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009bba:	1c59      	adds	r1, r3, #1
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	461d      	mov	r5, r3
 8009bca:	f04f 0200 	mov.w	r2, #0
 8009bce:	f04f 0300 	mov.w	r3, #0
 8009bd2:	00eb      	lsls	r3, r5, #3
 8009bd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009bd8:	00e2      	lsls	r2, r4, #3
 8009bda:	2300      	movs	r3, #0
 8009bdc:	4688      	mov	r8, r1
 8009bde:	4699      	mov	r9, r3
 8009be0:	f04f 0200 	mov.w	r2, #0
 8009be4:	f04f 0300 	mov.w	r3, #0
 8009be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009bf4:	1dcb      	adds	r3, r1, #7
 8009bf6:	08db      	lsrs	r3, r3, #3
 8009bf8:	00db      	lsls	r3, r3, #3
 8009bfa:	ebad 0d03 	sub.w	sp, sp, r3
 8009bfe:	466b      	mov	r3, sp
 8009c00:	3300      	adds	r3, #0
 8009c02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	memset((char*) dataArr, 0xFF, dataLength +1);
 8009c06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c08:	3301      	adds	r3, #1
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	21ff      	movs	r1, #255	; 0xff
 8009c0e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8009c12:	f000 f9db 	bl	8009fcc <memset>
	memcpy((char*)dataArr, (char*)data, dataLength);
 8009c16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c18:	461a      	mov	r2, r3
 8009c1a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009c1e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8009c22:	f000 f9c5 	bl	8009fb0 <memcpy>

	uint64_t __data = 0;
 8009c26:	f04f 0200 	mov.w	r2, #0
 8009c2a:	f04f 0300 	mov.w	r3, #0
 8009c2e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	for(uint32_t i = 0; i < dwLen ; i +=8)
 8009c32:	2300      	movs	r3, #0
 8009c34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c38:	e128      	b.n	8009e8c <USER_FLASH_Write+0x364>
	{
		__data |= dataArr[i + 7]; __data <<= 8;
 8009c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c3e:	1dda      	adds	r2, r3, #7
 8009c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c44:	5c9b      	ldrb	r3, [r3, r2]
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	2200      	movs	r2, #0
 8009c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8009c4c:	677a      	str	r2, [r7, #116]	; 0x74
 8009c4e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009c52:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8009c56:	4621      	mov	r1, r4
 8009c58:	4311      	orrs	r1, r2
 8009c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	430b      	orrs	r3, r1
 8009c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c62:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8009c66:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 8009c6a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009c6e:	f04f 0000 	mov.w	r0, #0
 8009c72:	f04f 0100 	mov.w	r1, #0
 8009c76:	0219      	lsls	r1, r3, #8
 8009c78:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009c7c:	0210      	lsls	r0, r2, #8
 8009c7e:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
		__data |= dataArr[i + 6]; __data <<= 8;
 8009c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009c86:	1d9a      	adds	r2, r3, #6
 8009c88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c8c:	5c9b      	ldrb	r3, [r3, r2]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2200      	movs	r2, #0
 8009c92:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c94:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c96:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009c9a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	4311      	orrs	r1, r2
 8009ca2:	6339      	str	r1, [r7, #48]	; 0x30
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	430b      	orrs	r3, r1
 8009ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8009caa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8009cae:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 8009cb2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009cb6:	f04f 0000 	mov.w	r0, #0
 8009cba:	f04f 0100 	mov.w	r1, #0
 8009cbe:	0219      	lsls	r1, r3, #8
 8009cc0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009cc4:	0210      	lsls	r0, r2, #8
 8009cc6:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
		__data |= dataArr[i + 5]; __data <<= 8;
 8009cca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009cce:	1d5a      	adds	r2, r3, #5
 8009cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cd4:	5c9b      	ldrb	r3, [r3, r2]
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	2200      	movs	r2, #0
 8009cda:	663b      	str	r3, [r7, #96]	; 0x60
 8009cdc:	667a      	str	r2, [r7, #100]	; 0x64
 8009cde:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009ce2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	4311      	orrs	r1, r2
 8009cea:	62b9      	str	r1, [r7, #40]	; 0x28
 8009cec:	4629      	mov	r1, r5
 8009cee:	430b      	orrs	r3, r1
 8009cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cf2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8009cf6:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 8009cfa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009cfe:	f04f 0000 	mov.w	r0, #0
 8009d02:	f04f 0100 	mov.w	r1, #0
 8009d06:	0219      	lsls	r1, r3, #8
 8009d08:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009d0c:	0210      	lsls	r0, r2, #8
 8009d0e:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
		__data |= dataArr[i + 4]; __data <<= 8;
 8009d12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d16:	1d1a      	adds	r2, r3, #4
 8009d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d1c:	5c9b      	ldrb	r3, [r3, r2]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	2200      	movs	r2, #0
 8009d22:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d24:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009d26:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009d2a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8009d2e:	4621      	mov	r1, r4
 8009d30:	4311      	orrs	r1, r2
 8009d32:	6239      	str	r1, [r7, #32]
 8009d34:	4629      	mov	r1, r5
 8009d36:	430b      	orrs	r3, r1
 8009d38:	627b      	str	r3, [r7, #36]	; 0x24
 8009d3a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009d3e:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 8009d42:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009d46:	f04f 0000 	mov.w	r0, #0
 8009d4a:	f04f 0100 	mov.w	r1, #0
 8009d4e:	0219      	lsls	r1, r3, #8
 8009d50:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009d54:	0210      	lsls	r0, r2, #8
 8009d56:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
		__data |= dataArr[i + 3]; __data <<= 8;
 8009d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d5e:	1cda      	adds	r2, r3, #3
 8009d60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009d64:	5c9b      	ldrb	r3, [r3, r2]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2200      	movs	r2, #0
 8009d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8009d6c:	657a      	str	r2, [r7, #84]	; 0x54
 8009d6e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009d72:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8009d76:	4621      	mov	r1, r4
 8009d78:	4311      	orrs	r1, r2
 8009d7a:	61b9      	str	r1, [r7, #24]
 8009d7c:	4629      	mov	r1, r5
 8009d7e:	430b      	orrs	r3, r1
 8009d80:	61fb      	str	r3, [r7, #28]
 8009d82:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009d86:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 8009d8a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009d8e:	f04f 0000 	mov.w	r0, #0
 8009d92:	f04f 0100 	mov.w	r1, #0
 8009d96:	0219      	lsls	r1, r3, #8
 8009d98:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009d9c:	0210      	lsls	r0, r2, #8
 8009d9e:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
		__data |= dataArr[i + 2]; __data <<= 8;
 8009da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009da6:	1c9a      	adds	r2, r3, #2
 8009da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009dac:	5c9b      	ldrb	r3, [r3, r2]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2200      	movs	r2, #0
 8009db2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009db4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009db6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009dba:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	4311      	orrs	r1, r2
 8009dc2:	6139      	str	r1, [r7, #16]
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	430b      	orrs	r3, r1
 8009dc8:	617b      	str	r3, [r7, #20]
 8009dca:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009dce:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 8009dd2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009dd6:	f04f 0000 	mov.w	r0, #0
 8009dda:	f04f 0100 	mov.w	r1, #0
 8009dde:	0219      	lsls	r1, r3, #8
 8009de0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009de4:	0210      	lsls	r0, r2, #8
 8009de6:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
		__data |= dataArr[i + 1]; __data <<= 8;
 8009dea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009df4:	5c9b      	ldrb	r3, [r3, r2]
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2200      	movs	r2, #0
 8009dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8009dfc:	647a      	str	r2, [r7, #68]	; 0x44
 8009dfe:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009e02:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8009e06:	4621      	mov	r1, r4
 8009e08:	4311      	orrs	r1, r2
 8009e0a:	60b9      	str	r1, [r7, #8]
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	60fb      	str	r3, [r7, #12]
 8009e12:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009e16:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 8009e1a:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009e1e:	f04f 0000 	mov.w	r0, #0
 8009e22:	f04f 0100 	mov.w	r1, #0
 8009e26:	0219      	lsls	r1, r3, #8
 8009e28:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009e2c:	0210      	lsls	r0, r2, #8
 8009e2e:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
		__data |= dataArr[i + 0];
 8009e32:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8009e36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e3a:	4413      	add	r3, r2
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	2200      	movs	r2, #0
 8009e42:	469a      	mov	sl, r3
 8009e44:	4693      	mov	fp, r2
 8009e46:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8009e4a:	ea42 010a 	orr.w	r1, r2, sl
 8009e4e:	6039      	str	r1, [r7, #0]
 8009e50:	ea43 030b 	orr.w	r3, r3, fp
 8009e54:	607b      	str	r3, [r7, #4]
 8009e56:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009e5a:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
//		HAL_FLASH_Unlock();
//		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,Address, __data);
//		HAL_FLASH_Lock();
		USER_FLASH_Write_IntType((Address+i), 1000);
 8009e5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009e62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e66:	18d1      	adds	r1, r2, r3
 8009e68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009e6c:	f04f 0300 	mov.w	r3, #0
 8009e70:	4608      	mov	r0, r1
 8009e72:	f000 f85f 	bl	8009f34 <USER_FLASH_Write_IntType>
		__data = 0x0000000000000000;
 8009e76:	f04f 0200 	mov.w	r2, #0
 8009e7a:	f04f 0300 	mov.w	r3, #0
 8009e7e:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	for(uint32_t i = 0; i < dwLen ; i +=8)
 8009e82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009e86:	3308      	adds	r3, #8
 8009e88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009e8c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009e90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e94:	429a      	cmp	r2, r3
 8009e96:	f4ff aed0 	bcc.w	8009c3a <USER_FLASH_Write+0x112>
 8009e9a:	46b5      	mov	sp, r6
	}

}
 8009e9c:	bf00      	nop
 8009e9e:	37ac      	adds	r7, #172	; 0xac
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009ea8 <USER_FLASH_Read_DoubleWord>:
char* USER_FLASH_Read_DoubleWord(uint64_t  Address)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b088      	sub	sp, #32
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	e9c7 0100 	strd	r0, r1, [r7]
	static char result[8 + 1];		/* Store 8 byte data with 1 byte character end*/
	char temp[8] = {0};
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60fb      	str	r3, [r7, #12]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	613b      	str	r3, [r7, #16]

	memset(result, 0x00, 8+1);
 8009eba:	2209      	movs	r2, #9
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	481c      	ldr	r0, [pc, #112]	; (8009f30 <USER_FLASH_Read_DoubleWord+0x88>)
 8009ec0:	f000 f884 	bl	8009fcc <memset>
	memset(temp, 0xFF, 8);
 8009ec4:	f107 030c 	add.w	r3, r7, #12
 8009ec8:	2208      	movs	r2, #8
 8009eca:	21ff      	movs	r1, #255	; 0xff
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 f87d 	bl	8009fcc <memset>

	uint64_t data;
	data = *(__IO uint64_t *)Address;
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed8:	e9c7 2306 	strd	r2, r3, [r7, #24]

	for(int i = 0; i < 8 ; i++)
 8009edc:	2300      	movs	r3, #0
 8009ede:	617b      	str	r3, [r7, #20]
 8009ee0:	e015      	b.n	8009f0e <USER_FLASH_Read_DoubleWord+0x66>
	{
		temp[i] = data;
 8009ee2:	7e39      	ldrb	r1, [r7, #24]
 8009ee4:	f107 020c 	add.w	r2, r7, #12
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	4413      	add	r3, r2
 8009eec:	460a      	mov	r2, r1
 8009eee:	701a      	strb	r2, [r3, #0]
		data >>= 8;
 8009ef0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009ef4:	f04f 0200 	mov.w	r2, #0
 8009ef8:	f04f 0300 	mov.w	r3, #0
 8009efc:	0a02      	lsrs	r2, r0, #8
 8009efe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009f02:	0a0b      	lsrs	r3, r1, #8
 8009f04:	e9c7 2306 	strd	r2, r3, [r7, #24]
	for(int i = 0; i < 8 ; i++)
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	2b07      	cmp	r3, #7
 8009f12:	dde6      	ble.n	8009ee2 <USER_FLASH_Read_DoubleWord+0x3a>
	}
	memcpy(result, temp, 8);
 8009f14:	4b06      	ldr	r3, [pc, #24]	; (8009f30 <USER_FLASH_Read_DoubleWord+0x88>)
 8009f16:	461a      	mov	r2, r3
 8009f18:	f107 030c 	add.w	r3, r7, #12
 8009f1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f20:	e882 0003 	stmia.w	r2, {r0, r1}
	return result;
 8009f24:	4b02      	ldr	r3, [pc, #8]	; (8009f30 <USER_FLASH_Read_DoubleWord+0x88>)
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3720      	adds	r7, #32
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000548 	.word	0x20000548

08009f34 <USER_FLASH_Write_IntType>:




void USER_FLASH_Write_IntType(uint32_t Address, uint64_t value)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	e9c7 2300 	strd	r2, r3, [r7]
	HAL_FLASH_Unlock();
 8009f40:	f7fb f968 	bl	8005214 <HAL_FLASH_Unlock>

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, value);
 8009f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f48:	68f9      	ldr	r1, [r7, #12]
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	f7fb f90c 	bl	8005168 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8009f50:	f7fb f982 	bl	8005258 <HAL_FLASH_Lock>
}
 8009f54:	bf00      	nop
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <__errno>:
 8009f5c:	4b01      	ldr	r3, [pc, #4]	; (8009f64 <__errno+0x8>)
 8009f5e:	6818      	ldr	r0, [r3, #0]
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	2000003c 	.word	0x2000003c

08009f68 <__libc_init_array>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	4d0d      	ldr	r5, [pc, #52]	; (8009fa0 <__libc_init_array+0x38>)
 8009f6c:	4c0d      	ldr	r4, [pc, #52]	; (8009fa4 <__libc_init_array+0x3c>)
 8009f6e:	1b64      	subs	r4, r4, r5
 8009f70:	10a4      	asrs	r4, r4, #2
 8009f72:	2600      	movs	r6, #0
 8009f74:	42a6      	cmp	r6, r4
 8009f76:	d109      	bne.n	8009f8c <__libc_init_array+0x24>
 8009f78:	4d0b      	ldr	r5, [pc, #44]	; (8009fa8 <__libc_init_array+0x40>)
 8009f7a:	4c0c      	ldr	r4, [pc, #48]	; (8009fac <__libc_init_array+0x44>)
 8009f7c:	f004 fc94 	bl	800e8a8 <_init>
 8009f80:	1b64      	subs	r4, r4, r5
 8009f82:	10a4      	asrs	r4, r4, #2
 8009f84:	2600      	movs	r6, #0
 8009f86:	42a6      	cmp	r6, r4
 8009f88:	d105      	bne.n	8009f96 <__libc_init_array+0x2e>
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}
 8009f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f90:	4798      	blx	r3
 8009f92:	3601      	adds	r6, #1
 8009f94:	e7ee      	b.n	8009f74 <__libc_init_array+0xc>
 8009f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f9a:	4798      	blx	r3
 8009f9c:	3601      	adds	r6, #1
 8009f9e:	e7f2      	b.n	8009f86 <__libc_init_array+0x1e>
 8009fa0:	0800edb0 	.word	0x0800edb0
 8009fa4:	0800edb0 	.word	0x0800edb0
 8009fa8:	0800edb0 	.word	0x0800edb0
 8009fac:	0800edb4 	.word	0x0800edb4

08009fb0 <memcpy>:
 8009fb0:	440a      	add	r2, r1
 8009fb2:	4291      	cmp	r1, r2
 8009fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fb8:	d100      	bne.n	8009fbc <memcpy+0xc>
 8009fba:	4770      	bx	lr
 8009fbc:	b510      	push	{r4, lr}
 8009fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fc6:	4291      	cmp	r1, r2
 8009fc8:	d1f9      	bne.n	8009fbe <memcpy+0xe>
 8009fca:	bd10      	pop	{r4, pc}

08009fcc <memset>:
 8009fcc:	4402      	add	r2, r0
 8009fce:	4603      	mov	r3, r0
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d100      	bne.n	8009fd6 <memset+0xa>
 8009fd4:	4770      	bx	lr
 8009fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8009fda:	e7f9      	b.n	8009fd0 <memset+0x4>

08009fdc <__cvt>:
 8009fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fe0:	ec55 4b10 	vmov	r4, r5, d0
 8009fe4:	2d00      	cmp	r5, #0
 8009fe6:	460e      	mov	r6, r1
 8009fe8:	4619      	mov	r1, r3
 8009fea:	462b      	mov	r3, r5
 8009fec:	bfbb      	ittet	lt
 8009fee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009ff2:	461d      	movlt	r5, r3
 8009ff4:	2300      	movge	r3, #0
 8009ff6:	232d      	movlt	r3, #45	; 0x2d
 8009ff8:	700b      	strb	r3, [r1, #0]
 8009ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ffc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a000:	4691      	mov	r9, r2
 800a002:	f023 0820 	bic.w	r8, r3, #32
 800a006:	bfbc      	itt	lt
 800a008:	4622      	movlt	r2, r4
 800a00a:	4614      	movlt	r4, r2
 800a00c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a010:	d005      	beq.n	800a01e <__cvt+0x42>
 800a012:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a016:	d100      	bne.n	800a01a <__cvt+0x3e>
 800a018:	3601      	adds	r6, #1
 800a01a:	2102      	movs	r1, #2
 800a01c:	e000      	b.n	800a020 <__cvt+0x44>
 800a01e:	2103      	movs	r1, #3
 800a020:	ab03      	add	r3, sp, #12
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	ab02      	add	r3, sp, #8
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	ec45 4b10 	vmov	d0, r4, r5
 800a02c:	4653      	mov	r3, sl
 800a02e:	4632      	mov	r2, r6
 800a030:	f001 fdce 	bl	800bbd0 <_dtoa_r>
 800a034:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a038:	4607      	mov	r7, r0
 800a03a:	d102      	bne.n	800a042 <__cvt+0x66>
 800a03c:	f019 0f01 	tst.w	r9, #1
 800a040:	d022      	beq.n	800a088 <__cvt+0xac>
 800a042:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a046:	eb07 0906 	add.w	r9, r7, r6
 800a04a:	d110      	bne.n	800a06e <__cvt+0x92>
 800a04c:	783b      	ldrb	r3, [r7, #0]
 800a04e:	2b30      	cmp	r3, #48	; 0x30
 800a050:	d10a      	bne.n	800a068 <__cvt+0x8c>
 800a052:	2200      	movs	r2, #0
 800a054:	2300      	movs	r3, #0
 800a056:	4620      	mov	r0, r4
 800a058:	4629      	mov	r1, r5
 800a05a:	f7f6 fd5d 	bl	8000b18 <__aeabi_dcmpeq>
 800a05e:	b918      	cbnz	r0, 800a068 <__cvt+0x8c>
 800a060:	f1c6 0601 	rsb	r6, r6, #1
 800a064:	f8ca 6000 	str.w	r6, [sl]
 800a068:	f8da 3000 	ldr.w	r3, [sl]
 800a06c:	4499      	add	r9, r3
 800a06e:	2200      	movs	r2, #0
 800a070:	2300      	movs	r3, #0
 800a072:	4620      	mov	r0, r4
 800a074:	4629      	mov	r1, r5
 800a076:	f7f6 fd4f 	bl	8000b18 <__aeabi_dcmpeq>
 800a07a:	b108      	cbz	r0, 800a080 <__cvt+0xa4>
 800a07c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a080:	2230      	movs	r2, #48	; 0x30
 800a082:	9b03      	ldr	r3, [sp, #12]
 800a084:	454b      	cmp	r3, r9
 800a086:	d307      	bcc.n	800a098 <__cvt+0xbc>
 800a088:	9b03      	ldr	r3, [sp, #12]
 800a08a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a08c:	1bdb      	subs	r3, r3, r7
 800a08e:	4638      	mov	r0, r7
 800a090:	6013      	str	r3, [r2, #0]
 800a092:	b004      	add	sp, #16
 800a094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a098:	1c59      	adds	r1, r3, #1
 800a09a:	9103      	str	r1, [sp, #12]
 800a09c:	701a      	strb	r2, [r3, #0]
 800a09e:	e7f0      	b.n	800a082 <__cvt+0xa6>

0800a0a0 <__exponent>:
 800a0a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2900      	cmp	r1, #0
 800a0a6:	bfb8      	it	lt
 800a0a8:	4249      	neglt	r1, r1
 800a0aa:	f803 2b02 	strb.w	r2, [r3], #2
 800a0ae:	bfb4      	ite	lt
 800a0b0:	222d      	movlt	r2, #45	; 0x2d
 800a0b2:	222b      	movge	r2, #43	; 0x2b
 800a0b4:	2909      	cmp	r1, #9
 800a0b6:	7042      	strb	r2, [r0, #1]
 800a0b8:	dd2a      	ble.n	800a110 <__exponent+0x70>
 800a0ba:	f10d 0407 	add.w	r4, sp, #7
 800a0be:	46a4      	mov	ip, r4
 800a0c0:	270a      	movs	r7, #10
 800a0c2:	46a6      	mov	lr, r4
 800a0c4:	460a      	mov	r2, r1
 800a0c6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a0ca:	fb07 1516 	mls	r5, r7, r6, r1
 800a0ce:	3530      	adds	r5, #48	; 0x30
 800a0d0:	2a63      	cmp	r2, #99	; 0x63
 800a0d2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a0d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a0da:	4631      	mov	r1, r6
 800a0dc:	dcf1      	bgt.n	800a0c2 <__exponent+0x22>
 800a0de:	3130      	adds	r1, #48	; 0x30
 800a0e0:	f1ae 0502 	sub.w	r5, lr, #2
 800a0e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a0e8:	1c44      	adds	r4, r0, #1
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	4561      	cmp	r1, ip
 800a0ee:	d30a      	bcc.n	800a106 <__exponent+0x66>
 800a0f0:	f10d 0209 	add.w	r2, sp, #9
 800a0f4:	eba2 020e 	sub.w	r2, r2, lr
 800a0f8:	4565      	cmp	r5, ip
 800a0fa:	bf88      	it	hi
 800a0fc:	2200      	movhi	r2, #0
 800a0fe:	4413      	add	r3, r2
 800a100:	1a18      	subs	r0, r3, r0
 800a102:	b003      	add	sp, #12
 800a104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a10a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a10e:	e7ed      	b.n	800a0ec <__exponent+0x4c>
 800a110:	2330      	movs	r3, #48	; 0x30
 800a112:	3130      	adds	r1, #48	; 0x30
 800a114:	7083      	strb	r3, [r0, #2]
 800a116:	70c1      	strb	r1, [r0, #3]
 800a118:	1d03      	adds	r3, r0, #4
 800a11a:	e7f1      	b.n	800a100 <__exponent+0x60>

0800a11c <_printf_float>:
 800a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a120:	ed2d 8b02 	vpush	{d8}
 800a124:	b08d      	sub	sp, #52	; 0x34
 800a126:	460c      	mov	r4, r1
 800a128:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a12c:	4616      	mov	r6, r2
 800a12e:	461f      	mov	r7, r3
 800a130:	4605      	mov	r5, r0
 800a132:	f002 febd 	bl	800ceb0 <_localeconv_r>
 800a136:	f8d0 a000 	ldr.w	sl, [r0]
 800a13a:	4650      	mov	r0, sl
 800a13c:	f7f6 f870 	bl	8000220 <strlen>
 800a140:	2300      	movs	r3, #0
 800a142:	930a      	str	r3, [sp, #40]	; 0x28
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	9305      	str	r3, [sp, #20]
 800a148:	f8d8 3000 	ldr.w	r3, [r8]
 800a14c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a150:	3307      	adds	r3, #7
 800a152:	f023 0307 	bic.w	r3, r3, #7
 800a156:	f103 0208 	add.w	r2, r3, #8
 800a15a:	f8c8 2000 	str.w	r2, [r8]
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a166:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a16a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a16e:	9307      	str	r3, [sp, #28]
 800a170:	f8cd 8018 	str.w	r8, [sp, #24]
 800a174:	ee08 0a10 	vmov	s16, r0
 800a178:	4b9f      	ldr	r3, [pc, #636]	; (800a3f8 <_printf_float+0x2dc>)
 800a17a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a17e:	f04f 32ff 	mov.w	r2, #4294967295
 800a182:	f7f6 fcfb 	bl	8000b7c <__aeabi_dcmpun>
 800a186:	bb88      	cbnz	r0, 800a1ec <_printf_float+0xd0>
 800a188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a18c:	4b9a      	ldr	r3, [pc, #616]	; (800a3f8 <_printf_float+0x2dc>)
 800a18e:	f04f 32ff 	mov.w	r2, #4294967295
 800a192:	f7f6 fcd5 	bl	8000b40 <__aeabi_dcmple>
 800a196:	bb48      	cbnz	r0, 800a1ec <_printf_float+0xd0>
 800a198:	2200      	movs	r2, #0
 800a19a:	2300      	movs	r3, #0
 800a19c:	4640      	mov	r0, r8
 800a19e:	4649      	mov	r1, r9
 800a1a0:	f7f6 fcc4 	bl	8000b2c <__aeabi_dcmplt>
 800a1a4:	b110      	cbz	r0, 800a1ac <_printf_float+0x90>
 800a1a6:	232d      	movs	r3, #45	; 0x2d
 800a1a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1ac:	4b93      	ldr	r3, [pc, #588]	; (800a3fc <_printf_float+0x2e0>)
 800a1ae:	4894      	ldr	r0, [pc, #592]	; (800a400 <_printf_float+0x2e4>)
 800a1b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a1b4:	bf94      	ite	ls
 800a1b6:	4698      	movls	r8, r3
 800a1b8:	4680      	movhi	r8, r0
 800a1ba:	2303      	movs	r3, #3
 800a1bc:	6123      	str	r3, [r4, #16]
 800a1be:	9b05      	ldr	r3, [sp, #20]
 800a1c0:	f023 0204 	bic.w	r2, r3, #4
 800a1c4:	6022      	str	r2, [r4, #0]
 800a1c6:	f04f 0900 	mov.w	r9, #0
 800a1ca:	9700      	str	r7, [sp, #0]
 800a1cc:	4633      	mov	r3, r6
 800a1ce:	aa0b      	add	r2, sp, #44	; 0x2c
 800a1d0:	4621      	mov	r1, r4
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f000 f9d8 	bl	800a588 <_printf_common>
 800a1d8:	3001      	adds	r0, #1
 800a1da:	f040 8090 	bne.w	800a2fe <_printf_float+0x1e2>
 800a1de:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e2:	b00d      	add	sp, #52	; 0x34
 800a1e4:	ecbd 8b02 	vpop	{d8}
 800a1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ec:	4642      	mov	r2, r8
 800a1ee:	464b      	mov	r3, r9
 800a1f0:	4640      	mov	r0, r8
 800a1f2:	4649      	mov	r1, r9
 800a1f4:	f7f6 fcc2 	bl	8000b7c <__aeabi_dcmpun>
 800a1f8:	b140      	cbz	r0, 800a20c <_printf_float+0xf0>
 800a1fa:	464b      	mov	r3, r9
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	bfbc      	itt	lt
 800a200:	232d      	movlt	r3, #45	; 0x2d
 800a202:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a206:	487f      	ldr	r0, [pc, #508]	; (800a404 <_printf_float+0x2e8>)
 800a208:	4b7f      	ldr	r3, [pc, #508]	; (800a408 <_printf_float+0x2ec>)
 800a20a:	e7d1      	b.n	800a1b0 <_printf_float+0x94>
 800a20c:	6863      	ldr	r3, [r4, #4]
 800a20e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a212:	9206      	str	r2, [sp, #24]
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	d13f      	bne.n	800a298 <_printf_float+0x17c>
 800a218:	2306      	movs	r3, #6
 800a21a:	6063      	str	r3, [r4, #4]
 800a21c:	9b05      	ldr	r3, [sp, #20]
 800a21e:	6861      	ldr	r1, [r4, #4]
 800a220:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a224:	2300      	movs	r3, #0
 800a226:	9303      	str	r3, [sp, #12]
 800a228:	ab0a      	add	r3, sp, #40	; 0x28
 800a22a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a22e:	ab09      	add	r3, sp, #36	; 0x24
 800a230:	ec49 8b10 	vmov	d0, r8, r9
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	6022      	str	r2, [r4, #0]
 800a238:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a23c:	4628      	mov	r0, r5
 800a23e:	f7ff fecd 	bl	8009fdc <__cvt>
 800a242:	9b06      	ldr	r3, [sp, #24]
 800a244:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a246:	2b47      	cmp	r3, #71	; 0x47
 800a248:	4680      	mov	r8, r0
 800a24a:	d108      	bne.n	800a25e <_printf_float+0x142>
 800a24c:	1cc8      	adds	r0, r1, #3
 800a24e:	db02      	blt.n	800a256 <_printf_float+0x13a>
 800a250:	6863      	ldr	r3, [r4, #4]
 800a252:	4299      	cmp	r1, r3
 800a254:	dd41      	ble.n	800a2da <_printf_float+0x1be>
 800a256:	f1ab 0b02 	sub.w	fp, fp, #2
 800a25a:	fa5f fb8b 	uxtb.w	fp, fp
 800a25e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a262:	d820      	bhi.n	800a2a6 <_printf_float+0x18a>
 800a264:	3901      	subs	r1, #1
 800a266:	465a      	mov	r2, fp
 800a268:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a26c:	9109      	str	r1, [sp, #36]	; 0x24
 800a26e:	f7ff ff17 	bl	800a0a0 <__exponent>
 800a272:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a274:	1813      	adds	r3, r2, r0
 800a276:	2a01      	cmp	r2, #1
 800a278:	4681      	mov	r9, r0
 800a27a:	6123      	str	r3, [r4, #16]
 800a27c:	dc02      	bgt.n	800a284 <_printf_float+0x168>
 800a27e:	6822      	ldr	r2, [r4, #0]
 800a280:	07d2      	lsls	r2, r2, #31
 800a282:	d501      	bpl.n	800a288 <_printf_float+0x16c>
 800a284:	3301      	adds	r3, #1
 800a286:	6123      	str	r3, [r4, #16]
 800a288:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d09c      	beq.n	800a1ca <_printf_float+0xae>
 800a290:	232d      	movs	r3, #45	; 0x2d
 800a292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a296:	e798      	b.n	800a1ca <_printf_float+0xae>
 800a298:	9a06      	ldr	r2, [sp, #24]
 800a29a:	2a47      	cmp	r2, #71	; 0x47
 800a29c:	d1be      	bne.n	800a21c <_printf_float+0x100>
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1bc      	bne.n	800a21c <_printf_float+0x100>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e7b9      	b.n	800a21a <_printf_float+0xfe>
 800a2a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a2aa:	d118      	bne.n	800a2de <_printf_float+0x1c2>
 800a2ac:	2900      	cmp	r1, #0
 800a2ae:	6863      	ldr	r3, [r4, #4]
 800a2b0:	dd0b      	ble.n	800a2ca <_printf_float+0x1ae>
 800a2b2:	6121      	str	r1, [r4, #16]
 800a2b4:	b913      	cbnz	r3, 800a2bc <_printf_float+0x1a0>
 800a2b6:	6822      	ldr	r2, [r4, #0]
 800a2b8:	07d0      	lsls	r0, r2, #31
 800a2ba:	d502      	bpl.n	800a2c2 <_printf_float+0x1a6>
 800a2bc:	3301      	adds	r3, #1
 800a2be:	440b      	add	r3, r1
 800a2c0:	6123      	str	r3, [r4, #16]
 800a2c2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a2c4:	f04f 0900 	mov.w	r9, #0
 800a2c8:	e7de      	b.n	800a288 <_printf_float+0x16c>
 800a2ca:	b913      	cbnz	r3, 800a2d2 <_printf_float+0x1b6>
 800a2cc:	6822      	ldr	r2, [r4, #0]
 800a2ce:	07d2      	lsls	r2, r2, #31
 800a2d0:	d501      	bpl.n	800a2d6 <_printf_float+0x1ba>
 800a2d2:	3302      	adds	r3, #2
 800a2d4:	e7f4      	b.n	800a2c0 <_printf_float+0x1a4>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e7f2      	b.n	800a2c0 <_printf_float+0x1a4>
 800a2da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a2de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e0:	4299      	cmp	r1, r3
 800a2e2:	db05      	blt.n	800a2f0 <_printf_float+0x1d4>
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	6121      	str	r1, [r4, #16]
 800a2e8:	07d8      	lsls	r0, r3, #31
 800a2ea:	d5ea      	bpl.n	800a2c2 <_printf_float+0x1a6>
 800a2ec:	1c4b      	adds	r3, r1, #1
 800a2ee:	e7e7      	b.n	800a2c0 <_printf_float+0x1a4>
 800a2f0:	2900      	cmp	r1, #0
 800a2f2:	bfd4      	ite	le
 800a2f4:	f1c1 0202 	rsble	r2, r1, #2
 800a2f8:	2201      	movgt	r2, #1
 800a2fa:	4413      	add	r3, r2
 800a2fc:	e7e0      	b.n	800a2c0 <_printf_float+0x1a4>
 800a2fe:	6823      	ldr	r3, [r4, #0]
 800a300:	055a      	lsls	r2, r3, #21
 800a302:	d407      	bmi.n	800a314 <_printf_float+0x1f8>
 800a304:	6923      	ldr	r3, [r4, #16]
 800a306:	4642      	mov	r2, r8
 800a308:	4631      	mov	r1, r6
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b8      	blx	r7
 800a30e:	3001      	adds	r0, #1
 800a310:	d12c      	bne.n	800a36c <_printf_float+0x250>
 800a312:	e764      	b.n	800a1de <_printf_float+0xc2>
 800a314:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a318:	f240 80e0 	bls.w	800a4dc <_printf_float+0x3c0>
 800a31c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a320:	2200      	movs	r2, #0
 800a322:	2300      	movs	r3, #0
 800a324:	f7f6 fbf8 	bl	8000b18 <__aeabi_dcmpeq>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d034      	beq.n	800a396 <_printf_float+0x27a>
 800a32c:	4a37      	ldr	r2, [pc, #220]	; (800a40c <_printf_float+0x2f0>)
 800a32e:	2301      	movs	r3, #1
 800a330:	4631      	mov	r1, r6
 800a332:	4628      	mov	r0, r5
 800a334:	47b8      	blx	r7
 800a336:	3001      	adds	r0, #1
 800a338:	f43f af51 	beq.w	800a1de <_printf_float+0xc2>
 800a33c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a340:	429a      	cmp	r2, r3
 800a342:	db02      	blt.n	800a34a <_printf_float+0x22e>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	07d8      	lsls	r0, r3, #31
 800a348:	d510      	bpl.n	800a36c <_printf_float+0x250>
 800a34a:	ee18 3a10 	vmov	r3, s16
 800a34e:	4652      	mov	r2, sl
 800a350:	4631      	mov	r1, r6
 800a352:	4628      	mov	r0, r5
 800a354:	47b8      	blx	r7
 800a356:	3001      	adds	r0, #1
 800a358:	f43f af41 	beq.w	800a1de <_printf_float+0xc2>
 800a35c:	f04f 0800 	mov.w	r8, #0
 800a360:	f104 091a 	add.w	r9, r4, #26
 800a364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a366:	3b01      	subs	r3, #1
 800a368:	4543      	cmp	r3, r8
 800a36a:	dc09      	bgt.n	800a380 <_printf_float+0x264>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	079b      	lsls	r3, r3, #30
 800a370:	f100 8105 	bmi.w	800a57e <_printf_float+0x462>
 800a374:	68e0      	ldr	r0, [r4, #12]
 800a376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a378:	4298      	cmp	r0, r3
 800a37a:	bfb8      	it	lt
 800a37c:	4618      	movlt	r0, r3
 800a37e:	e730      	b.n	800a1e2 <_printf_float+0xc6>
 800a380:	2301      	movs	r3, #1
 800a382:	464a      	mov	r2, r9
 800a384:	4631      	mov	r1, r6
 800a386:	4628      	mov	r0, r5
 800a388:	47b8      	blx	r7
 800a38a:	3001      	adds	r0, #1
 800a38c:	f43f af27 	beq.w	800a1de <_printf_float+0xc2>
 800a390:	f108 0801 	add.w	r8, r8, #1
 800a394:	e7e6      	b.n	800a364 <_printf_float+0x248>
 800a396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a398:	2b00      	cmp	r3, #0
 800a39a:	dc39      	bgt.n	800a410 <_printf_float+0x2f4>
 800a39c:	4a1b      	ldr	r2, [pc, #108]	; (800a40c <_printf_float+0x2f0>)
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4631      	mov	r1, r6
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	47b8      	blx	r7
 800a3a6:	3001      	adds	r0, #1
 800a3a8:	f43f af19 	beq.w	800a1de <_printf_float+0xc2>
 800a3ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	d102      	bne.n	800a3ba <_printf_float+0x29e>
 800a3b4:	6823      	ldr	r3, [r4, #0]
 800a3b6:	07d9      	lsls	r1, r3, #31
 800a3b8:	d5d8      	bpl.n	800a36c <_printf_float+0x250>
 800a3ba:	ee18 3a10 	vmov	r3, s16
 800a3be:	4652      	mov	r2, sl
 800a3c0:	4631      	mov	r1, r6
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	47b8      	blx	r7
 800a3c6:	3001      	adds	r0, #1
 800a3c8:	f43f af09 	beq.w	800a1de <_printf_float+0xc2>
 800a3cc:	f04f 0900 	mov.w	r9, #0
 800a3d0:	f104 0a1a 	add.w	sl, r4, #26
 800a3d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d6:	425b      	negs	r3, r3
 800a3d8:	454b      	cmp	r3, r9
 800a3da:	dc01      	bgt.n	800a3e0 <_printf_float+0x2c4>
 800a3dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3de:	e792      	b.n	800a306 <_printf_float+0x1ea>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	4652      	mov	r2, sl
 800a3e4:	4631      	mov	r1, r6
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	47b8      	blx	r7
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	f43f aef7 	beq.w	800a1de <_printf_float+0xc2>
 800a3f0:	f109 0901 	add.w	r9, r9, #1
 800a3f4:	e7ee      	b.n	800a3d4 <_printf_float+0x2b8>
 800a3f6:	bf00      	nop
 800a3f8:	7fefffff 	.word	0x7fefffff
 800a3fc:	0800e904 	.word	0x0800e904
 800a400:	0800e908 	.word	0x0800e908
 800a404:	0800e910 	.word	0x0800e910
 800a408:	0800e90c 	.word	0x0800e90c
 800a40c:	0800e914 	.word	0x0800e914
 800a410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a412:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a414:	429a      	cmp	r2, r3
 800a416:	bfa8      	it	ge
 800a418:	461a      	movge	r2, r3
 800a41a:	2a00      	cmp	r2, #0
 800a41c:	4691      	mov	r9, r2
 800a41e:	dc37      	bgt.n	800a490 <_printf_float+0x374>
 800a420:	f04f 0b00 	mov.w	fp, #0
 800a424:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a428:	f104 021a 	add.w	r2, r4, #26
 800a42c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a42e:	9305      	str	r3, [sp, #20]
 800a430:	eba3 0309 	sub.w	r3, r3, r9
 800a434:	455b      	cmp	r3, fp
 800a436:	dc33      	bgt.n	800a4a0 <_printf_float+0x384>
 800a438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a43c:	429a      	cmp	r2, r3
 800a43e:	db3b      	blt.n	800a4b8 <_printf_float+0x39c>
 800a440:	6823      	ldr	r3, [r4, #0]
 800a442:	07da      	lsls	r2, r3, #31
 800a444:	d438      	bmi.n	800a4b8 <_printf_float+0x39c>
 800a446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a448:	9a05      	ldr	r2, [sp, #20]
 800a44a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a44c:	1a9a      	subs	r2, r3, r2
 800a44e:	eba3 0901 	sub.w	r9, r3, r1
 800a452:	4591      	cmp	r9, r2
 800a454:	bfa8      	it	ge
 800a456:	4691      	movge	r9, r2
 800a458:	f1b9 0f00 	cmp.w	r9, #0
 800a45c:	dc35      	bgt.n	800a4ca <_printf_float+0x3ae>
 800a45e:	f04f 0800 	mov.w	r8, #0
 800a462:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a466:	f104 0a1a 	add.w	sl, r4, #26
 800a46a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a46e:	1a9b      	subs	r3, r3, r2
 800a470:	eba3 0309 	sub.w	r3, r3, r9
 800a474:	4543      	cmp	r3, r8
 800a476:	f77f af79 	ble.w	800a36c <_printf_float+0x250>
 800a47a:	2301      	movs	r3, #1
 800a47c:	4652      	mov	r2, sl
 800a47e:	4631      	mov	r1, r6
 800a480:	4628      	mov	r0, r5
 800a482:	47b8      	blx	r7
 800a484:	3001      	adds	r0, #1
 800a486:	f43f aeaa 	beq.w	800a1de <_printf_float+0xc2>
 800a48a:	f108 0801 	add.w	r8, r8, #1
 800a48e:	e7ec      	b.n	800a46a <_printf_float+0x34e>
 800a490:	4613      	mov	r3, r2
 800a492:	4631      	mov	r1, r6
 800a494:	4642      	mov	r2, r8
 800a496:	4628      	mov	r0, r5
 800a498:	47b8      	blx	r7
 800a49a:	3001      	adds	r0, #1
 800a49c:	d1c0      	bne.n	800a420 <_printf_float+0x304>
 800a49e:	e69e      	b.n	800a1de <_printf_float+0xc2>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	4631      	mov	r1, r6
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	9205      	str	r2, [sp, #20]
 800a4a8:	47b8      	blx	r7
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	f43f ae97 	beq.w	800a1de <_printf_float+0xc2>
 800a4b0:	9a05      	ldr	r2, [sp, #20]
 800a4b2:	f10b 0b01 	add.w	fp, fp, #1
 800a4b6:	e7b9      	b.n	800a42c <_printf_float+0x310>
 800a4b8:	ee18 3a10 	vmov	r3, s16
 800a4bc:	4652      	mov	r2, sl
 800a4be:	4631      	mov	r1, r6
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	47b8      	blx	r7
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	d1be      	bne.n	800a446 <_printf_float+0x32a>
 800a4c8:	e689      	b.n	800a1de <_printf_float+0xc2>
 800a4ca:	9a05      	ldr	r2, [sp, #20]
 800a4cc:	464b      	mov	r3, r9
 800a4ce:	4442      	add	r2, r8
 800a4d0:	4631      	mov	r1, r6
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b8      	blx	r7
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	d1c1      	bne.n	800a45e <_printf_float+0x342>
 800a4da:	e680      	b.n	800a1de <_printf_float+0xc2>
 800a4dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4de:	2a01      	cmp	r2, #1
 800a4e0:	dc01      	bgt.n	800a4e6 <_printf_float+0x3ca>
 800a4e2:	07db      	lsls	r3, r3, #31
 800a4e4:	d538      	bpl.n	800a558 <_printf_float+0x43c>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	4642      	mov	r2, r8
 800a4ea:	4631      	mov	r1, r6
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	47b8      	blx	r7
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	f43f ae74 	beq.w	800a1de <_printf_float+0xc2>
 800a4f6:	ee18 3a10 	vmov	r3, s16
 800a4fa:	4652      	mov	r2, sl
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4628      	mov	r0, r5
 800a500:	47b8      	blx	r7
 800a502:	3001      	adds	r0, #1
 800a504:	f43f ae6b 	beq.w	800a1de <_printf_float+0xc2>
 800a508:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a50c:	2200      	movs	r2, #0
 800a50e:	2300      	movs	r3, #0
 800a510:	f7f6 fb02 	bl	8000b18 <__aeabi_dcmpeq>
 800a514:	b9d8      	cbnz	r0, 800a54e <_printf_float+0x432>
 800a516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a518:	f108 0201 	add.w	r2, r8, #1
 800a51c:	3b01      	subs	r3, #1
 800a51e:	4631      	mov	r1, r6
 800a520:	4628      	mov	r0, r5
 800a522:	47b8      	blx	r7
 800a524:	3001      	adds	r0, #1
 800a526:	d10e      	bne.n	800a546 <_printf_float+0x42a>
 800a528:	e659      	b.n	800a1de <_printf_float+0xc2>
 800a52a:	2301      	movs	r3, #1
 800a52c:	4652      	mov	r2, sl
 800a52e:	4631      	mov	r1, r6
 800a530:	4628      	mov	r0, r5
 800a532:	47b8      	blx	r7
 800a534:	3001      	adds	r0, #1
 800a536:	f43f ae52 	beq.w	800a1de <_printf_float+0xc2>
 800a53a:	f108 0801 	add.w	r8, r8, #1
 800a53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a540:	3b01      	subs	r3, #1
 800a542:	4543      	cmp	r3, r8
 800a544:	dcf1      	bgt.n	800a52a <_printf_float+0x40e>
 800a546:	464b      	mov	r3, r9
 800a548:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a54c:	e6dc      	b.n	800a308 <_printf_float+0x1ec>
 800a54e:	f04f 0800 	mov.w	r8, #0
 800a552:	f104 0a1a 	add.w	sl, r4, #26
 800a556:	e7f2      	b.n	800a53e <_printf_float+0x422>
 800a558:	2301      	movs	r3, #1
 800a55a:	4642      	mov	r2, r8
 800a55c:	e7df      	b.n	800a51e <_printf_float+0x402>
 800a55e:	2301      	movs	r3, #1
 800a560:	464a      	mov	r2, r9
 800a562:	4631      	mov	r1, r6
 800a564:	4628      	mov	r0, r5
 800a566:	47b8      	blx	r7
 800a568:	3001      	adds	r0, #1
 800a56a:	f43f ae38 	beq.w	800a1de <_printf_float+0xc2>
 800a56e:	f108 0801 	add.w	r8, r8, #1
 800a572:	68e3      	ldr	r3, [r4, #12]
 800a574:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a576:	1a5b      	subs	r3, r3, r1
 800a578:	4543      	cmp	r3, r8
 800a57a:	dcf0      	bgt.n	800a55e <_printf_float+0x442>
 800a57c:	e6fa      	b.n	800a374 <_printf_float+0x258>
 800a57e:	f04f 0800 	mov.w	r8, #0
 800a582:	f104 0919 	add.w	r9, r4, #25
 800a586:	e7f4      	b.n	800a572 <_printf_float+0x456>

0800a588 <_printf_common>:
 800a588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a58c:	4616      	mov	r6, r2
 800a58e:	4699      	mov	r9, r3
 800a590:	688a      	ldr	r2, [r1, #8]
 800a592:	690b      	ldr	r3, [r1, #16]
 800a594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a598:	4293      	cmp	r3, r2
 800a59a:	bfb8      	it	lt
 800a59c:	4613      	movlt	r3, r2
 800a59e:	6033      	str	r3, [r6, #0]
 800a5a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	b10a      	cbz	r2, 800a5ae <_printf_common+0x26>
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	6033      	str	r3, [r6, #0]
 800a5ae:	6823      	ldr	r3, [r4, #0]
 800a5b0:	0699      	lsls	r1, r3, #26
 800a5b2:	bf42      	ittt	mi
 800a5b4:	6833      	ldrmi	r3, [r6, #0]
 800a5b6:	3302      	addmi	r3, #2
 800a5b8:	6033      	strmi	r3, [r6, #0]
 800a5ba:	6825      	ldr	r5, [r4, #0]
 800a5bc:	f015 0506 	ands.w	r5, r5, #6
 800a5c0:	d106      	bne.n	800a5d0 <_printf_common+0x48>
 800a5c2:	f104 0a19 	add.w	sl, r4, #25
 800a5c6:	68e3      	ldr	r3, [r4, #12]
 800a5c8:	6832      	ldr	r2, [r6, #0]
 800a5ca:	1a9b      	subs	r3, r3, r2
 800a5cc:	42ab      	cmp	r3, r5
 800a5ce:	dc26      	bgt.n	800a61e <_printf_common+0x96>
 800a5d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a5d4:	1e13      	subs	r3, r2, #0
 800a5d6:	6822      	ldr	r2, [r4, #0]
 800a5d8:	bf18      	it	ne
 800a5da:	2301      	movne	r3, #1
 800a5dc:	0692      	lsls	r2, r2, #26
 800a5de:	d42b      	bmi.n	800a638 <_printf_common+0xb0>
 800a5e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	47c0      	blx	r8
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	d01e      	beq.n	800a62c <_printf_common+0xa4>
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	68e5      	ldr	r5, [r4, #12]
 800a5f2:	6832      	ldr	r2, [r6, #0]
 800a5f4:	f003 0306 	and.w	r3, r3, #6
 800a5f8:	2b04      	cmp	r3, #4
 800a5fa:	bf08      	it	eq
 800a5fc:	1aad      	subeq	r5, r5, r2
 800a5fe:	68a3      	ldr	r3, [r4, #8]
 800a600:	6922      	ldr	r2, [r4, #16]
 800a602:	bf0c      	ite	eq
 800a604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a608:	2500      	movne	r5, #0
 800a60a:	4293      	cmp	r3, r2
 800a60c:	bfc4      	itt	gt
 800a60e:	1a9b      	subgt	r3, r3, r2
 800a610:	18ed      	addgt	r5, r5, r3
 800a612:	2600      	movs	r6, #0
 800a614:	341a      	adds	r4, #26
 800a616:	42b5      	cmp	r5, r6
 800a618:	d11a      	bne.n	800a650 <_printf_common+0xc8>
 800a61a:	2000      	movs	r0, #0
 800a61c:	e008      	b.n	800a630 <_printf_common+0xa8>
 800a61e:	2301      	movs	r3, #1
 800a620:	4652      	mov	r2, sl
 800a622:	4649      	mov	r1, r9
 800a624:	4638      	mov	r0, r7
 800a626:	47c0      	blx	r8
 800a628:	3001      	adds	r0, #1
 800a62a:	d103      	bne.n	800a634 <_printf_common+0xac>
 800a62c:	f04f 30ff 	mov.w	r0, #4294967295
 800a630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a634:	3501      	adds	r5, #1
 800a636:	e7c6      	b.n	800a5c6 <_printf_common+0x3e>
 800a638:	18e1      	adds	r1, r4, r3
 800a63a:	1c5a      	adds	r2, r3, #1
 800a63c:	2030      	movs	r0, #48	; 0x30
 800a63e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a642:	4422      	add	r2, r4
 800a644:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a648:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a64c:	3302      	adds	r3, #2
 800a64e:	e7c7      	b.n	800a5e0 <_printf_common+0x58>
 800a650:	2301      	movs	r3, #1
 800a652:	4622      	mov	r2, r4
 800a654:	4649      	mov	r1, r9
 800a656:	4638      	mov	r0, r7
 800a658:	47c0      	blx	r8
 800a65a:	3001      	adds	r0, #1
 800a65c:	d0e6      	beq.n	800a62c <_printf_common+0xa4>
 800a65e:	3601      	adds	r6, #1
 800a660:	e7d9      	b.n	800a616 <_printf_common+0x8e>
	...

0800a664 <_printf_i>:
 800a664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a668:	7e0f      	ldrb	r7, [r1, #24]
 800a66a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a66c:	2f78      	cmp	r7, #120	; 0x78
 800a66e:	4691      	mov	r9, r2
 800a670:	4680      	mov	r8, r0
 800a672:	460c      	mov	r4, r1
 800a674:	469a      	mov	sl, r3
 800a676:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a67a:	d807      	bhi.n	800a68c <_printf_i+0x28>
 800a67c:	2f62      	cmp	r7, #98	; 0x62
 800a67e:	d80a      	bhi.n	800a696 <_printf_i+0x32>
 800a680:	2f00      	cmp	r7, #0
 800a682:	f000 80d8 	beq.w	800a836 <_printf_i+0x1d2>
 800a686:	2f58      	cmp	r7, #88	; 0x58
 800a688:	f000 80a3 	beq.w	800a7d2 <_printf_i+0x16e>
 800a68c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a694:	e03a      	b.n	800a70c <_printf_i+0xa8>
 800a696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a69a:	2b15      	cmp	r3, #21
 800a69c:	d8f6      	bhi.n	800a68c <_printf_i+0x28>
 800a69e:	a101      	add	r1, pc, #4	; (adr r1, 800a6a4 <_printf_i+0x40>)
 800a6a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6a4:	0800a6fd 	.word	0x0800a6fd
 800a6a8:	0800a711 	.word	0x0800a711
 800a6ac:	0800a68d 	.word	0x0800a68d
 800a6b0:	0800a68d 	.word	0x0800a68d
 800a6b4:	0800a68d 	.word	0x0800a68d
 800a6b8:	0800a68d 	.word	0x0800a68d
 800a6bc:	0800a711 	.word	0x0800a711
 800a6c0:	0800a68d 	.word	0x0800a68d
 800a6c4:	0800a68d 	.word	0x0800a68d
 800a6c8:	0800a68d 	.word	0x0800a68d
 800a6cc:	0800a68d 	.word	0x0800a68d
 800a6d0:	0800a81d 	.word	0x0800a81d
 800a6d4:	0800a741 	.word	0x0800a741
 800a6d8:	0800a7ff 	.word	0x0800a7ff
 800a6dc:	0800a68d 	.word	0x0800a68d
 800a6e0:	0800a68d 	.word	0x0800a68d
 800a6e4:	0800a83f 	.word	0x0800a83f
 800a6e8:	0800a68d 	.word	0x0800a68d
 800a6ec:	0800a741 	.word	0x0800a741
 800a6f0:	0800a68d 	.word	0x0800a68d
 800a6f4:	0800a68d 	.word	0x0800a68d
 800a6f8:	0800a807 	.word	0x0800a807
 800a6fc:	682b      	ldr	r3, [r5, #0]
 800a6fe:	1d1a      	adds	r2, r3, #4
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	602a      	str	r2, [r5, #0]
 800a704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a70c:	2301      	movs	r3, #1
 800a70e:	e0a3      	b.n	800a858 <_printf_i+0x1f4>
 800a710:	6820      	ldr	r0, [r4, #0]
 800a712:	6829      	ldr	r1, [r5, #0]
 800a714:	0606      	lsls	r6, r0, #24
 800a716:	f101 0304 	add.w	r3, r1, #4
 800a71a:	d50a      	bpl.n	800a732 <_printf_i+0xce>
 800a71c:	680e      	ldr	r6, [r1, #0]
 800a71e:	602b      	str	r3, [r5, #0]
 800a720:	2e00      	cmp	r6, #0
 800a722:	da03      	bge.n	800a72c <_printf_i+0xc8>
 800a724:	232d      	movs	r3, #45	; 0x2d
 800a726:	4276      	negs	r6, r6
 800a728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a72c:	485e      	ldr	r0, [pc, #376]	; (800a8a8 <_printf_i+0x244>)
 800a72e:	230a      	movs	r3, #10
 800a730:	e019      	b.n	800a766 <_printf_i+0x102>
 800a732:	680e      	ldr	r6, [r1, #0]
 800a734:	602b      	str	r3, [r5, #0]
 800a736:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a73a:	bf18      	it	ne
 800a73c:	b236      	sxthne	r6, r6
 800a73e:	e7ef      	b.n	800a720 <_printf_i+0xbc>
 800a740:	682b      	ldr	r3, [r5, #0]
 800a742:	6820      	ldr	r0, [r4, #0]
 800a744:	1d19      	adds	r1, r3, #4
 800a746:	6029      	str	r1, [r5, #0]
 800a748:	0601      	lsls	r1, r0, #24
 800a74a:	d501      	bpl.n	800a750 <_printf_i+0xec>
 800a74c:	681e      	ldr	r6, [r3, #0]
 800a74e:	e002      	b.n	800a756 <_printf_i+0xf2>
 800a750:	0646      	lsls	r6, r0, #25
 800a752:	d5fb      	bpl.n	800a74c <_printf_i+0xe8>
 800a754:	881e      	ldrh	r6, [r3, #0]
 800a756:	4854      	ldr	r0, [pc, #336]	; (800a8a8 <_printf_i+0x244>)
 800a758:	2f6f      	cmp	r7, #111	; 0x6f
 800a75a:	bf0c      	ite	eq
 800a75c:	2308      	moveq	r3, #8
 800a75e:	230a      	movne	r3, #10
 800a760:	2100      	movs	r1, #0
 800a762:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a766:	6865      	ldr	r5, [r4, #4]
 800a768:	60a5      	str	r5, [r4, #8]
 800a76a:	2d00      	cmp	r5, #0
 800a76c:	bfa2      	ittt	ge
 800a76e:	6821      	ldrge	r1, [r4, #0]
 800a770:	f021 0104 	bicge.w	r1, r1, #4
 800a774:	6021      	strge	r1, [r4, #0]
 800a776:	b90e      	cbnz	r6, 800a77c <_printf_i+0x118>
 800a778:	2d00      	cmp	r5, #0
 800a77a:	d04d      	beq.n	800a818 <_printf_i+0x1b4>
 800a77c:	4615      	mov	r5, r2
 800a77e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a782:	fb03 6711 	mls	r7, r3, r1, r6
 800a786:	5dc7      	ldrb	r7, [r0, r7]
 800a788:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a78c:	4637      	mov	r7, r6
 800a78e:	42bb      	cmp	r3, r7
 800a790:	460e      	mov	r6, r1
 800a792:	d9f4      	bls.n	800a77e <_printf_i+0x11a>
 800a794:	2b08      	cmp	r3, #8
 800a796:	d10b      	bne.n	800a7b0 <_printf_i+0x14c>
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	07de      	lsls	r6, r3, #31
 800a79c:	d508      	bpl.n	800a7b0 <_printf_i+0x14c>
 800a79e:	6923      	ldr	r3, [r4, #16]
 800a7a0:	6861      	ldr	r1, [r4, #4]
 800a7a2:	4299      	cmp	r1, r3
 800a7a4:	bfde      	ittt	le
 800a7a6:	2330      	movle	r3, #48	; 0x30
 800a7a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7b0:	1b52      	subs	r2, r2, r5
 800a7b2:	6122      	str	r2, [r4, #16]
 800a7b4:	f8cd a000 	str.w	sl, [sp]
 800a7b8:	464b      	mov	r3, r9
 800a7ba:	aa03      	add	r2, sp, #12
 800a7bc:	4621      	mov	r1, r4
 800a7be:	4640      	mov	r0, r8
 800a7c0:	f7ff fee2 	bl	800a588 <_printf_common>
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	d14c      	bne.n	800a862 <_printf_i+0x1fe>
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7cc:	b004      	add	sp, #16
 800a7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d2:	4835      	ldr	r0, [pc, #212]	; (800a8a8 <_printf_i+0x244>)
 800a7d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a7d8:	6829      	ldr	r1, [r5, #0]
 800a7da:	6823      	ldr	r3, [r4, #0]
 800a7dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a7e0:	6029      	str	r1, [r5, #0]
 800a7e2:	061d      	lsls	r5, r3, #24
 800a7e4:	d514      	bpl.n	800a810 <_printf_i+0x1ac>
 800a7e6:	07df      	lsls	r7, r3, #31
 800a7e8:	bf44      	itt	mi
 800a7ea:	f043 0320 	orrmi.w	r3, r3, #32
 800a7ee:	6023      	strmi	r3, [r4, #0]
 800a7f0:	b91e      	cbnz	r6, 800a7fa <_printf_i+0x196>
 800a7f2:	6823      	ldr	r3, [r4, #0]
 800a7f4:	f023 0320 	bic.w	r3, r3, #32
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	2310      	movs	r3, #16
 800a7fc:	e7b0      	b.n	800a760 <_printf_i+0xfc>
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	f043 0320 	orr.w	r3, r3, #32
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	2378      	movs	r3, #120	; 0x78
 800a808:	4828      	ldr	r0, [pc, #160]	; (800a8ac <_printf_i+0x248>)
 800a80a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a80e:	e7e3      	b.n	800a7d8 <_printf_i+0x174>
 800a810:	0659      	lsls	r1, r3, #25
 800a812:	bf48      	it	mi
 800a814:	b2b6      	uxthmi	r6, r6
 800a816:	e7e6      	b.n	800a7e6 <_printf_i+0x182>
 800a818:	4615      	mov	r5, r2
 800a81a:	e7bb      	b.n	800a794 <_printf_i+0x130>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	6826      	ldr	r6, [r4, #0]
 800a820:	6961      	ldr	r1, [r4, #20]
 800a822:	1d18      	adds	r0, r3, #4
 800a824:	6028      	str	r0, [r5, #0]
 800a826:	0635      	lsls	r5, r6, #24
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	d501      	bpl.n	800a830 <_printf_i+0x1cc>
 800a82c:	6019      	str	r1, [r3, #0]
 800a82e:	e002      	b.n	800a836 <_printf_i+0x1d2>
 800a830:	0670      	lsls	r0, r6, #25
 800a832:	d5fb      	bpl.n	800a82c <_printf_i+0x1c8>
 800a834:	8019      	strh	r1, [r3, #0]
 800a836:	2300      	movs	r3, #0
 800a838:	6123      	str	r3, [r4, #16]
 800a83a:	4615      	mov	r5, r2
 800a83c:	e7ba      	b.n	800a7b4 <_printf_i+0x150>
 800a83e:	682b      	ldr	r3, [r5, #0]
 800a840:	1d1a      	adds	r2, r3, #4
 800a842:	602a      	str	r2, [r5, #0]
 800a844:	681d      	ldr	r5, [r3, #0]
 800a846:	6862      	ldr	r2, [r4, #4]
 800a848:	2100      	movs	r1, #0
 800a84a:	4628      	mov	r0, r5
 800a84c:	f7f5 fcf0 	bl	8000230 <memchr>
 800a850:	b108      	cbz	r0, 800a856 <_printf_i+0x1f2>
 800a852:	1b40      	subs	r0, r0, r5
 800a854:	6060      	str	r0, [r4, #4]
 800a856:	6863      	ldr	r3, [r4, #4]
 800a858:	6123      	str	r3, [r4, #16]
 800a85a:	2300      	movs	r3, #0
 800a85c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a860:	e7a8      	b.n	800a7b4 <_printf_i+0x150>
 800a862:	6923      	ldr	r3, [r4, #16]
 800a864:	462a      	mov	r2, r5
 800a866:	4649      	mov	r1, r9
 800a868:	4640      	mov	r0, r8
 800a86a:	47d0      	blx	sl
 800a86c:	3001      	adds	r0, #1
 800a86e:	d0ab      	beq.n	800a7c8 <_printf_i+0x164>
 800a870:	6823      	ldr	r3, [r4, #0]
 800a872:	079b      	lsls	r3, r3, #30
 800a874:	d413      	bmi.n	800a89e <_printf_i+0x23a>
 800a876:	68e0      	ldr	r0, [r4, #12]
 800a878:	9b03      	ldr	r3, [sp, #12]
 800a87a:	4298      	cmp	r0, r3
 800a87c:	bfb8      	it	lt
 800a87e:	4618      	movlt	r0, r3
 800a880:	e7a4      	b.n	800a7cc <_printf_i+0x168>
 800a882:	2301      	movs	r3, #1
 800a884:	4632      	mov	r2, r6
 800a886:	4649      	mov	r1, r9
 800a888:	4640      	mov	r0, r8
 800a88a:	47d0      	blx	sl
 800a88c:	3001      	adds	r0, #1
 800a88e:	d09b      	beq.n	800a7c8 <_printf_i+0x164>
 800a890:	3501      	adds	r5, #1
 800a892:	68e3      	ldr	r3, [r4, #12]
 800a894:	9903      	ldr	r1, [sp, #12]
 800a896:	1a5b      	subs	r3, r3, r1
 800a898:	42ab      	cmp	r3, r5
 800a89a:	dcf2      	bgt.n	800a882 <_printf_i+0x21e>
 800a89c:	e7eb      	b.n	800a876 <_printf_i+0x212>
 800a89e:	2500      	movs	r5, #0
 800a8a0:	f104 0619 	add.w	r6, r4, #25
 800a8a4:	e7f5      	b.n	800a892 <_printf_i+0x22e>
 800a8a6:	bf00      	nop
 800a8a8:	0800e916 	.word	0x0800e916
 800a8ac:	0800e927 	.word	0x0800e927

0800a8b0 <_scanf_float>:
 800a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	b087      	sub	sp, #28
 800a8b6:	4617      	mov	r7, r2
 800a8b8:	9303      	str	r3, [sp, #12]
 800a8ba:	688b      	ldr	r3, [r1, #8]
 800a8bc:	1e5a      	subs	r2, r3, #1
 800a8be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a8c2:	bf83      	ittte	hi
 800a8c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a8c8:	195b      	addhi	r3, r3, r5
 800a8ca:	9302      	strhi	r3, [sp, #8]
 800a8cc:	2300      	movls	r3, #0
 800a8ce:	bf86      	itte	hi
 800a8d0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a8d4:	608b      	strhi	r3, [r1, #8]
 800a8d6:	9302      	strls	r3, [sp, #8]
 800a8d8:	680b      	ldr	r3, [r1, #0]
 800a8da:	468b      	mov	fp, r1
 800a8dc:	2500      	movs	r5, #0
 800a8de:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a8e2:	f84b 3b1c 	str.w	r3, [fp], #28
 800a8e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a8ea:	4680      	mov	r8, r0
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	465e      	mov	r6, fp
 800a8f0:	46aa      	mov	sl, r5
 800a8f2:	46a9      	mov	r9, r5
 800a8f4:	9501      	str	r5, [sp, #4]
 800a8f6:	68a2      	ldr	r2, [r4, #8]
 800a8f8:	b152      	cbz	r2, 800a910 <_scanf_float+0x60>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b4e      	cmp	r3, #78	; 0x4e
 800a900:	d864      	bhi.n	800a9cc <_scanf_float+0x11c>
 800a902:	2b40      	cmp	r3, #64	; 0x40
 800a904:	d83c      	bhi.n	800a980 <_scanf_float+0xd0>
 800a906:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a90a:	b2c8      	uxtb	r0, r1
 800a90c:	280e      	cmp	r0, #14
 800a90e:	d93a      	bls.n	800a986 <_scanf_float+0xd6>
 800a910:	f1b9 0f00 	cmp.w	r9, #0
 800a914:	d003      	beq.n	800a91e <_scanf_float+0x6e>
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a922:	f1ba 0f01 	cmp.w	sl, #1
 800a926:	f200 8113 	bhi.w	800ab50 <_scanf_float+0x2a0>
 800a92a:	455e      	cmp	r6, fp
 800a92c:	f200 8105 	bhi.w	800ab3a <_scanf_float+0x28a>
 800a930:	2501      	movs	r5, #1
 800a932:	4628      	mov	r0, r5
 800a934:	b007      	add	sp, #28
 800a936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a93e:	2a0d      	cmp	r2, #13
 800a940:	d8e6      	bhi.n	800a910 <_scanf_float+0x60>
 800a942:	a101      	add	r1, pc, #4	; (adr r1, 800a948 <_scanf_float+0x98>)
 800a944:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a948:	0800aa87 	.word	0x0800aa87
 800a94c:	0800a911 	.word	0x0800a911
 800a950:	0800a911 	.word	0x0800a911
 800a954:	0800a911 	.word	0x0800a911
 800a958:	0800aae7 	.word	0x0800aae7
 800a95c:	0800aabf 	.word	0x0800aabf
 800a960:	0800a911 	.word	0x0800a911
 800a964:	0800a911 	.word	0x0800a911
 800a968:	0800aa95 	.word	0x0800aa95
 800a96c:	0800a911 	.word	0x0800a911
 800a970:	0800a911 	.word	0x0800a911
 800a974:	0800a911 	.word	0x0800a911
 800a978:	0800a911 	.word	0x0800a911
 800a97c:	0800aa4d 	.word	0x0800aa4d
 800a980:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a984:	e7db      	b.n	800a93e <_scanf_float+0x8e>
 800a986:	290e      	cmp	r1, #14
 800a988:	d8c2      	bhi.n	800a910 <_scanf_float+0x60>
 800a98a:	a001      	add	r0, pc, #4	; (adr r0, 800a990 <_scanf_float+0xe0>)
 800a98c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a990:	0800aa3f 	.word	0x0800aa3f
 800a994:	0800a911 	.word	0x0800a911
 800a998:	0800aa3f 	.word	0x0800aa3f
 800a99c:	0800aad3 	.word	0x0800aad3
 800a9a0:	0800a911 	.word	0x0800a911
 800a9a4:	0800a9ed 	.word	0x0800a9ed
 800a9a8:	0800aa29 	.word	0x0800aa29
 800a9ac:	0800aa29 	.word	0x0800aa29
 800a9b0:	0800aa29 	.word	0x0800aa29
 800a9b4:	0800aa29 	.word	0x0800aa29
 800a9b8:	0800aa29 	.word	0x0800aa29
 800a9bc:	0800aa29 	.word	0x0800aa29
 800a9c0:	0800aa29 	.word	0x0800aa29
 800a9c4:	0800aa29 	.word	0x0800aa29
 800a9c8:	0800aa29 	.word	0x0800aa29
 800a9cc:	2b6e      	cmp	r3, #110	; 0x6e
 800a9ce:	d809      	bhi.n	800a9e4 <_scanf_float+0x134>
 800a9d0:	2b60      	cmp	r3, #96	; 0x60
 800a9d2:	d8b2      	bhi.n	800a93a <_scanf_float+0x8a>
 800a9d4:	2b54      	cmp	r3, #84	; 0x54
 800a9d6:	d077      	beq.n	800aac8 <_scanf_float+0x218>
 800a9d8:	2b59      	cmp	r3, #89	; 0x59
 800a9da:	d199      	bne.n	800a910 <_scanf_float+0x60>
 800a9dc:	2d07      	cmp	r5, #7
 800a9de:	d197      	bne.n	800a910 <_scanf_float+0x60>
 800a9e0:	2508      	movs	r5, #8
 800a9e2:	e029      	b.n	800aa38 <_scanf_float+0x188>
 800a9e4:	2b74      	cmp	r3, #116	; 0x74
 800a9e6:	d06f      	beq.n	800aac8 <_scanf_float+0x218>
 800a9e8:	2b79      	cmp	r3, #121	; 0x79
 800a9ea:	e7f6      	b.n	800a9da <_scanf_float+0x12a>
 800a9ec:	6821      	ldr	r1, [r4, #0]
 800a9ee:	05c8      	lsls	r0, r1, #23
 800a9f0:	d51a      	bpl.n	800aa28 <_scanf_float+0x178>
 800a9f2:	9b02      	ldr	r3, [sp, #8]
 800a9f4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a9f8:	6021      	str	r1, [r4, #0]
 800a9fa:	f109 0901 	add.w	r9, r9, #1
 800a9fe:	b11b      	cbz	r3, 800aa08 <_scanf_float+0x158>
 800aa00:	3b01      	subs	r3, #1
 800aa02:	3201      	adds	r2, #1
 800aa04:	9302      	str	r3, [sp, #8]
 800aa06:	60a2      	str	r2, [r4, #8]
 800aa08:	68a3      	ldr	r3, [r4, #8]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	60a3      	str	r3, [r4, #8]
 800aa0e:	6923      	ldr	r3, [r4, #16]
 800aa10:	3301      	adds	r3, #1
 800aa12:	6123      	str	r3, [r4, #16]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	3b01      	subs	r3, #1
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	607b      	str	r3, [r7, #4]
 800aa1c:	f340 8084 	ble.w	800ab28 <_scanf_float+0x278>
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	3301      	adds	r3, #1
 800aa24:	603b      	str	r3, [r7, #0]
 800aa26:	e766      	b.n	800a8f6 <_scanf_float+0x46>
 800aa28:	eb1a 0f05 	cmn.w	sl, r5
 800aa2c:	f47f af70 	bne.w	800a910 <_scanf_float+0x60>
 800aa30:	6822      	ldr	r2, [r4, #0]
 800aa32:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aa36:	6022      	str	r2, [r4, #0]
 800aa38:	f806 3b01 	strb.w	r3, [r6], #1
 800aa3c:	e7e4      	b.n	800aa08 <_scanf_float+0x158>
 800aa3e:	6822      	ldr	r2, [r4, #0]
 800aa40:	0610      	lsls	r0, r2, #24
 800aa42:	f57f af65 	bpl.w	800a910 <_scanf_float+0x60>
 800aa46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa4a:	e7f4      	b.n	800aa36 <_scanf_float+0x186>
 800aa4c:	f1ba 0f00 	cmp.w	sl, #0
 800aa50:	d10e      	bne.n	800aa70 <_scanf_float+0x1c0>
 800aa52:	f1b9 0f00 	cmp.w	r9, #0
 800aa56:	d10e      	bne.n	800aa76 <_scanf_float+0x1c6>
 800aa58:	6822      	ldr	r2, [r4, #0]
 800aa5a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aa5e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aa62:	d108      	bne.n	800aa76 <_scanf_float+0x1c6>
 800aa64:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa68:	6022      	str	r2, [r4, #0]
 800aa6a:	f04f 0a01 	mov.w	sl, #1
 800aa6e:	e7e3      	b.n	800aa38 <_scanf_float+0x188>
 800aa70:	f1ba 0f02 	cmp.w	sl, #2
 800aa74:	d055      	beq.n	800ab22 <_scanf_float+0x272>
 800aa76:	2d01      	cmp	r5, #1
 800aa78:	d002      	beq.n	800aa80 <_scanf_float+0x1d0>
 800aa7a:	2d04      	cmp	r5, #4
 800aa7c:	f47f af48 	bne.w	800a910 <_scanf_float+0x60>
 800aa80:	3501      	adds	r5, #1
 800aa82:	b2ed      	uxtb	r5, r5
 800aa84:	e7d8      	b.n	800aa38 <_scanf_float+0x188>
 800aa86:	f1ba 0f01 	cmp.w	sl, #1
 800aa8a:	f47f af41 	bne.w	800a910 <_scanf_float+0x60>
 800aa8e:	f04f 0a02 	mov.w	sl, #2
 800aa92:	e7d1      	b.n	800aa38 <_scanf_float+0x188>
 800aa94:	b97d      	cbnz	r5, 800aab6 <_scanf_float+0x206>
 800aa96:	f1b9 0f00 	cmp.w	r9, #0
 800aa9a:	f47f af3c 	bne.w	800a916 <_scanf_float+0x66>
 800aa9e:	6822      	ldr	r2, [r4, #0]
 800aaa0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aaa4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aaa8:	f47f af39 	bne.w	800a91e <_scanf_float+0x6e>
 800aaac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aab0:	6022      	str	r2, [r4, #0]
 800aab2:	2501      	movs	r5, #1
 800aab4:	e7c0      	b.n	800aa38 <_scanf_float+0x188>
 800aab6:	2d03      	cmp	r5, #3
 800aab8:	d0e2      	beq.n	800aa80 <_scanf_float+0x1d0>
 800aaba:	2d05      	cmp	r5, #5
 800aabc:	e7de      	b.n	800aa7c <_scanf_float+0x1cc>
 800aabe:	2d02      	cmp	r5, #2
 800aac0:	f47f af26 	bne.w	800a910 <_scanf_float+0x60>
 800aac4:	2503      	movs	r5, #3
 800aac6:	e7b7      	b.n	800aa38 <_scanf_float+0x188>
 800aac8:	2d06      	cmp	r5, #6
 800aaca:	f47f af21 	bne.w	800a910 <_scanf_float+0x60>
 800aace:	2507      	movs	r5, #7
 800aad0:	e7b2      	b.n	800aa38 <_scanf_float+0x188>
 800aad2:	6822      	ldr	r2, [r4, #0]
 800aad4:	0591      	lsls	r1, r2, #22
 800aad6:	f57f af1b 	bpl.w	800a910 <_scanf_float+0x60>
 800aada:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800aade:	6022      	str	r2, [r4, #0]
 800aae0:	f8cd 9004 	str.w	r9, [sp, #4]
 800aae4:	e7a8      	b.n	800aa38 <_scanf_float+0x188>
 800aae6:	6822      	ldr	r2, [r4, #0]
 800aae8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aaec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aaf0:	d006      	beq.n	800ab00 <_scanf_float+0x250>
 800aaf2:	0550      	lsls	r0, r2, #21
 800aaf4:	f57f af0c 	bpl.w	800a910 <_scanf_float+0x60>
 800aaf8:	f1b9 0f00 	cmp.w	r9, #0
 800aafc:	f43f af0f 	beq.w	800a91e <_scanf_float+0x6e>
 800ab00:	0591      	lsls	r1, r2, #22
 800ab02:	bf58      	it	pl
 800ab04:	9901      	ldrpl	r1, [sp, #4]
 800ab06:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ab0a:	bf58      	it	pl
 800ab0c:	eba9 0101 	subpl.w	r1, r9, r1
 800ab10:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ab14:	bf58      	it	pl
 800ab16:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ab1a:	6022      	str	r2, [r4, #0]
 800ab1c:	f04f 0900 	mov.w	r9, #0
 800ab20:	e78a      	b.n	800aa38 <_scanf_float+0x188>
 800ab22:	f04f 0a03 	mov.w	sl, #3
 800ab26:	e787      	b.n	800aa38 <_scanf_float+0x188>
 800ab28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ab2c:	4639      	mov	r1, r7
 800ab2e:	4640      	mov	r0, r8
 800ab30:	4798      	blx	r3
 800ab32:	2800      	cmp	r0, #0
 800ab34:	f43f aedf 	beq.w	800a8f6 <_scanf_float+0x46>
 800ab38:	e6ea      	b.n	800a910 <_scanf_float+0x60>
 800ab3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab42:	463a      	mov	r2, r7
 800ab44:	4640      	mov	r0, r8
 800ab46:	4798      	blx	r3
 800ab48:	6923      	ldr	r3, [r4, #16]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	6123      	str	r3, [r4, #16]
 800ab4e:	e6ec      	b.n	800a92a <_scanf_float+0x7a>
 800ab50:	1e6b      	subs	r3, r5, #1
 800ab52:	2b06      	cmp	r3, #6
 800ab54:	d825      	bhi.n	800aba2 <_scanf_float+0x2f2>
 800ab56:	2d02      	cmp	r5, #2
 800ab58:	d836      	bhi.n	800abc8 <_scanf_float+0x318>
 800ab5a:	455e      	cmp	r6, fp
 800ab5c:	f67f aee8 	bls.w	800a930 <_scanf_float+0x80>
 800ab60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab64:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab68:	463a      	mov	r2, r7
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	4798      	blx	r3
 800ab6e:	6923      	ldr	r3, [r4, #16]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	6123      	str	r3, [r4, #16]
 800ab74:	e7f1      	b.n	800ab5a <_scanf_float+0x2aa>
 800ab76:	9802      	ldr	r0, [sp, #8]
 800ab78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab7c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ab80:	9002      	str	r0, [sp, #8]
 800ab82:	463a      	mov	r2, r7
 800ab84:	4640      	mov	r0, r8
 800ab86:	4798      	blx	r3
 800ab88:	6923      	ldr	r3, [r4, #16]
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	6123      	str	r3, [r4, #16]
 800ab8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab92:	fa5f fa8a 	uxtb.w	sl, sl
 800ab96:	f1ba 0f02 	cmp.w	sl, #2
 800ab9a:	d1ec      	bne.n	800ab76 <_scanf_float+0x2c6>
 800ab9c:	3d03      	subs	r5, #3
 800ab9e:	b2ed      	uxtb	r5, r5
 800aba0:	1b76      	subs	r6, r6, r5
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	05da      	lsls	r2, r3, #23
 800aba6:	d52f      	bpl.n	800ac08 <_scanf_float+0x358>
 800aba8:	055b      	lsls	r3, r3, #21
 800abaa:	d510      	bpl.n	800abce <_scanf_float+0x31e>
 800abac:	455e      	cmp	r6, fp
 800abae:	f67f aebf 	bls.w	800a930 <_scanf_float+0x80>
 800abb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800abba:	463a      	mov	r2, r7
 800abbc:	4640      	mov	r0, r8
 800abbe:	4798      	blx	r3
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	3b01      	subs	r3, #1
 800abc4:	6123      	str	r3, [r4, #16]
 800abc6:	e7f1      	b.n	800abac <_scanf_float+0x2fc>
 800abc8:	46aa      	mov	sl, r5
 800abca:	9602      	str	r6, [sp, #8]
 800abcc:	e7df      	b.n	800ab8e <_scanf_float+0x2de>
 800abce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	2965      	cmp	r1, #101	; 0x65
 800abd6:	f103 33ff 	add.w	r3, r3, #4294967295
 800abda:	f106 35ff 	add.w	r5, r6, #4294967295
 800abde:	6123      	str	r3, [r4, #16]
 800abe0:	d00c      	beq.n	800abfc <_scanf_float+0x34c>
 800abe2:	2945      	cmp	r1, #69	; 0x45
 800abe4:	d00a      	beq.n	800abfc <_scanf_float+0x34c>
 800abe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800abea:	463a      	mov	r2, r7
 800abec:	4640      	mov	r0, r8
 800abee:	4798      	blx	r3
 800abf0:	6923      	ldr	r3, [r4, #16]
 800abf2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	1eb5      	subs	r5, r6, #2
 800abfa:	6123      	str	r3, [r4, #16]
 800abfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ac00:	463a      	mov	r2, r7
 800ac02:	4640      	mov	r0, r8
 800ac04:	4798      	blx	r3
 800ac06:	462e      	mov	r6, r5
 800ac08:	6825      	ldr	r5, [r4, #0]
 800ac0a:	f015 0510 	ands.w	r5, r5, #16
 800ac0e:	d159      	bne.n	800acc4 <_scanf_float+0x414>
 800ac10:	7035      	strb	r5, [r6, #0]
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ac18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac1c:	d11b      	bne.n	800ac56 <_scanf_float+0x3a6>
 800ac1e:	9b01      	ldr	r3, [sp, #4]
 800ac20:	454b      	cmp	r3, r9
 800ac22:	eba3 0209 	sub.w	r2, r3, r9
 800ac26:	d123      	bne.n	800ac70 <_scanf_float+0x3c0>
 800ac28:	2200      	movs	r2, #0
 800ac2a:	4659      	mov	r1, fp
 800ac2c:	4640      	mov	r0, r8
 800ac2e:	f000 fe99 	bl	800b964 <_strtod_r>
 800ac32:	6822      	ldr	r2, [r4, #0]
 800ac34:	9b03      	ldr	r3, [sp, #12]
 800ac36:	f012 0f02 	tst.w	r2, #2
 800ac3a:	ec57 6b10 	vmov	r6, r7, d0
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	d021      	beq.n	800ac86 <_scanf_float+0x3d6>
 800ac42:	9903      	ldr	r1, [sp, #12]
 800ac44:	1d1a      	adds	r2, r3, #4
 800ac46:	600a      	str	r2, [r1, #0]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	e9c3 6700 	strd	r6, r7, [r3]
 800ac4e:	68e3      	ldr	r3, [r4, #12]
 800ac50:	3301      	adds	r3, #1
 800ac52:	60e3      	str	r3, [r4, #12]
 800ac54:	e66d      	b.n	800a932 <_scanf_float+0x82>
 800ac56:	9b04      	ldr	r3, [sp, #16]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d0e5      	beq.n	800ac28 <_scanf_float+0x378>
 800ac5c:	9905      	ldr	r1, [sp, #20]
 800ac5e:	230a      	movs	r3, #10
 800ac60:	462a      	mov	r2, r5
 800ac62:	3101      	adds	r1, #1
 800ac64:	4640      	mov	r0, r8
 800ac66:	f000 ff05 	bl	800ba74 <_strtol_r>
 800ac6a:	9b04      	ldr	r3, [sp, #16]
 800ac6c:	9e05      	ldr	r6, [sp, #20]
 800ac6e:	1ac2      	subs	r2, r0, r3
 800ac70:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ac74:	429e      	cmp	r6, r3
 800ac76:	bf28      	it	cs
 800ac78:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ac7c:	4912      	ldr	r1, [pc, #72]	; (800acc8 <_scanf_float+0x418>)
 800ac7e:	4630      	mov	r0, r6
 800ac80:	f000 f82c 	bl	800acdc <siprintf>
 800ac84:	e7d0      	b.n	800ac28 <_scanf_float+0x378>
 800ac86:	9903      	ldr	r1, [sp, #12]
 800ac88:	f012 0f04 	tst.w	r2, #4
 800ac8c:	f103 0204 	add.w	r2, r3, #4
 800ac90:	600a      	str	r2, [r1, #0]
 800ac92:	d1d9      	bne.n	800ac48 <_scanf_float+0x398>
 800ac94:	f8d3 8000 	ldr.w	r8, [r3]
 800ac98:	ee10 2a10 	vmov	r2, s0
 800ac9c:	ee10 0a10 	vmov	r0, s0
 800aca0:	463b      	mov	r3, r7
 800aca2:	4639      	mov	r1, r7
 800aca4:	f7f5 ff6a 	bl	8000b7c <__aeabi_dcmpun>
 800aca8:	b128      	cbz	r0, 800acb6 <_scanf_float+0x406>
 800acaa:	4808      	ldr	r0, [pc, #32]	; (800accc <_scanf_float+0x41c>)
 800acac:	f000 f810 	bl	800acd0 <nanf>
 800acb0:	ed88 0a00 	vstr	s0, [r8]
 800acb4:	e7cb      	b.n	800ac4e <_scanf_float+0x39e>
 800acb6:	4630      	mov	r0, r6
 800acb8:	4639      	mov	r1, r7
 800acba:	f7f5 ffbd 	bl	8000c38 <__aeabi_d2f>
 800acbe:	f8c8 0000 	str.w	r0, [r8]
 800acc2:	e7c4      	b.n	800ac4e <_scanf_float+0x39e>
 800acc4:	2500      	movs	r5, #0
 800acc6:	e634      	b.n	800a932 <_scanf_float+0x82>
 800acc8:	0800e938 	.word	0x0800e938
 800accc:	0800e9cb 	.word	0x0800e9cb

0800acd0 <nanf>:
 800acd0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800acd8 <nanf+0x8>
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	7fc00000 	.word	0x7fc00000

0800acdc <siprintf>:
 800acdc:	b40e      	push	{r1, r2, r3}
 800acde:	b500      	push	{lr}
 800ace0:	b09c      	sub	sp, #112	; 0x70
 800ace2:	ab1d      	add	r3, sp, #116	; 0x74
 800ace4:	9002      	str	r0, [sp, #8]
 800ace6:	9006      	str	r0, [sp, #24]
 800ace8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800acec:	4809      	ldr	r0, [pc, #36]	; (800ad14 <siprintf+0x38>)
 800acee:	9107      	str	r1, [sp, #28]
 800acf0:	9104      	str	r1, [sp, #16]
 800acf2:	4909      	ldr	r1, [pc, #36]	; (800ad18 <siprintf+0x3c>)
 800acf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800acf8:	9105      	str	r1, [sp, #20]
 800acfa:	6800      	ldr	r0, [r0, #0]
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	a902      	add	r1, sp, #8
 800ad00:	f002 ff08 	bl	800db14 <_svfiprintf_r>
 800ad04:	9b02      	ldr	r3, [sp, #8]
 800ad06:	2200      	movs	r2, #0
 800ad08:	701a      	strb	r2, [r3, #0]
 800ad0a:	b01c      	add	sp, #112	; 0x70
 800ad0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad10:	b003      	add	sp, #12
 800ad12:	4770      	bx	lr
 800ad14:	2000003c 	.word	0x2000003c
 800ad18:	ffff0208 	.word	0xffff0208

0800ad1c <sulp>:
 800ad1c:	b570      	push	{r4, r5, r6, lr}
 800ad1e:	4604      	mov	r4, r0
 800ad20:	460d      	mov	r5, r1
 800ad22:	ec45 4b10 	vmov	d0, r4, r5
 800ad26:	4616      	mov	r6, r2
 800ad28:	f002 fc52 	bl	800d5d0 <__ulp>
 800ad2c:	ec51 0b10 	vmov	r0, r1, d0
 800ad30:	b17e      	cbz	r6, 800ad52 <sulp+0x36>
 800ad32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	dd09      	ble.n	800ad52 <sulp+0x36>
 800ad3e:	051b      	lsls	r3, r3, #20
 800ad40:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ad44:	2400      	movs	r4, #0
 800ad46:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ad4a:	4622      	mov	r2, r4
 800ad4c:	462b      	mov	r3, r5
 800ad4e:	f7f5 fc7b 	bl	8000648 <__aeabi_dmul>
 800ad52:	bd70      	pop	{r4, r5, r6, pc}
 800ad54:	0000      	movs	r0, r0
	...

0800ad58 <_strtod_l>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	ed2d 8b02 	vpush	{d8}
 800ad60:	b09d      	sub	sp, #116	; 0x74
 800ad62:	461f      	mov	r7, r3
 800ad64:	2300      	movs	r3, #0
 800ad66:	9318      	str	r3, [sp, #96]	; 0x60
 800ad68:	4ba2      	ldr	r3, [pc, #648]	; (800aff4 <_strtod_l+0x29c>)
 800ad6a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	9305      	str	r3, [sp, #20]
 800ad70:	4604      	mov	r4, r0
 800ad72:	4618      	mov	r0, r3
 800ad74:	4688      	mov	r8, r1
 800ad76:	f7f5 fa53 	bl	8000220 <strlen>
 800ad7a:	f04f 0a00 	mov.w	sl, #0
 800ad7e:	4605      	mov	r5, r0
 800ad80:	f04f 0b00 	mov.w	fp, #0
 800ad84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad8a:	781a      	ldrb	r2, [r3, #0]
 800ad8c:	2a2b      	cmp	r2, #43	; 0x2b
 800ad8e:	d04e      	beq.n	800ae2e <_strtod_l+0xd6>
 800ad90:	d83b      	bhi.n	800ae0a <_strtod_l+0xb2>
 800ad92:	2a0d      	cmp	r2, #13
 800ad94:	d834      	bhi.n	800ae00 <_strtod_l+0xa8>
 800ad96:	2a08      	cmp	r2, #8
 800ad98:	d834      	bhi.n	800ae04 <_strtod_l+0xac>
 800ad9a:	2a00      	cmp	r2, #0
 800ad9c:	d03e      	beq.n	800ae1c <_strtod_l+0xc4>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	930a      	str	r3, [sp, #40]	; 0x28
 800ada2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ada4:	7833      	ldrb	r3, [r6, #0]
 800ada6:	2b30      	cmp	r3, #48	; 0x30
 800ada8:	f040 80b0 	bne.w	800af0c <_strtod_l+0x1b4>
 800adac:	7873      	ldrb	r3, [r6, #1]
 800adae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800adb2:	2b58      	cmp	r3, #88	; 0x58
 800adb4:	d168      	bne.n	800ae88 <_strtod_l+0x130>
 800adb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adb8:	9301      	str	r3, [sp, #4]
 800adba:	ab18      	add	r3, sp, #96	; 0x60
 800adbc:	9702      	str	r7, [sp, #8]
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	4a8d      	ldr	r2, [pc, #564]	; (800aff8 <_strtod_l+0x2a0>)
 800adc2:	ab19      	add	r3, sp, #100	; 0x64
 800adc4:	a917      	add	r1, sp, #92	; 0x5c
 800adc6:	4620      	mov	r0, r4
 800adc8:	f001 fd6a 	bl	800c8a0 <__gethex>
 800adcc:	f010 0707 	ands.w	r7, r0, #7
 800add0:	4605      	mov	r5, r0
 800add2:	d005      	beq.n	800ade0 <_strtod_l+0x88>
 800add4:	2f06      	cmp	r7, #6
 800add6:	d12c      	bne.n	800ae32 <_strtod_l+0xda>
 800add8:	3601      	adds	r6, #1
 800adda:	2300      	movs	r3, #0
 800addc:	9617      	str	r6, [sp, #92]	; 0x5c
 800adde:	930a      	str	r3, [sp, #40]	; 0x28
 800ade0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f040 8590 	bne.w	800b908 <_strtod_l+0xbb0>
 800ade8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adea:	b1eb      	cbz	r3, 800ae28 <_strtod_l+0xd0>
 800adec:	4652      	mov	r2, sl
 800adee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800adf2:	ec43 2b10 	vmov	d0, r2, r3
 800adf6:	b01d      	add	sp, #116	; 0x74
 800adf8:	ecbd 8b02 	vpop	{d8}
 800adfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae00:	2a20      	cmp	r2, #32
 800ae02:	d1cc      	bne.n	800ad9e <_strtod_l+0x46>
 800ae04:	3301      	adds	r3, #1
 800ae06:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae08:	e7be      	b.n	800ad88 <_strtod_l+0x30>
 800ae0a:	2a2d      	cmp	r2, #45	; 0x2d
 800ae0c:	d1c7      	bne.n	800ad9e <_strtod_l+0x46>
 800ae0e:	2201      	movs	r2, #1
 800ae10:	920a      	str	r2, [sp, #40]	; 0x28
 800ae12:	1c5a      	adds	r2, r3, #1
 800ae14:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae16:	785b      	ldrb	r3, [r3, #1]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1c2      	bne.n	800ada2 <_strtod_l+0x4a>
 800ae1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae1e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f040 856e 	bne.w	800b904 <_strtod_l+0xbac>
 800ae28:	4652      	mov	r2, sl
 800ae2a:	465b      	mov	r3, fp
 800ae2c:	e7e1      	b.n	800adf2 <_strtod_l+0x9a>
 800ae2e:	2200      	movs	r2, #0
 800ae30:	e7ee      	b.n	800ae10 <_strtod_l+0xb8>
 800ae32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ae34:	b13a      	cbz	r2, 800ae46 <_strtod_l+0xee>
 800ae36:	2135      	movs	r1, #53	; 0x35
 800ae38:	a81a      	add	r0, sp, #104	; 0x68
 800ae3a:	f002 fcd4 	bl	800d7e6 <__copybits>
 800ae3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae40:	4620      	mov	r0, r4
 800ae42:	f002 f893 	bl	800cf6c <_Bfree>
 800ae46:	3f01      	subs	r7, #1
 800ae48:	2f04      	cmp	r7, #4
 800ae4a:	d806      	bhi.n	800ae5a <_strtod_l+0x102>
 800ae4c:	e8df f007 	tbb	[pc, r7]
 800ae50:	1714030a 	.word	0x1714030a
 800ae54:	0a          	.byte	0x0a
 800ae55:	00          	.byte	0x00
 800ae56:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ae5a:	0728      	lsls	r0, r5, #28
 800ae5c:	d5c0      	bpl.n	800ade0 <_strtod_l+0x88>
 800ae5e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ae62:	e7bd      	b.n	800ade0 <_strtod_l+0x88>
 800ae64:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ae68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ae6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae76:	e7f0      	b.n	800ae5a <_strtod_l+0x102>
 800ae78:	f8df b180 	ldr.w	fp, [pc, #384]	; 800affc <_strtod_l+0x2a4>
 800ae7c:	e7ed      	b.n	800ae5a <_strtod_l+0x102>
 800ae7e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ae82:	f04f 3aff 	mov.w	sl, #4294967295
 800ae86:	e7e8      	b.n	800ae5a <_strtod_l+0x102>
 800ae88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae8e:	785b      	ldrb	r3, [r3, #1]
 800ae90:	2b30      	cmp	r3, #48	; 0x30
 800ae92:	d0f9      	beq.n	800ae88 <_strtod_l+0x130>
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d0a3      	beq.n	800ade0 <_strtod_l+0x88>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	f04f 0900 	mov.w	r9, #0
 800ae9e:	9304      	str	r3, [sp, #16]
 800aea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aea2:	9308      	str	r3, [sp, #32]
 800aea4:	f8cd 901c 	str.w	r9, [sp, #28]
 800aea8:	464f      	mov	r7, r9
 800aeaa:	220a      	movs	r2, #10
 800aeac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800aeae:	7806      	ldrb	r6, [r0, #0]
 800aeb0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aeb4:	b2d9      	uxtb	r1, r3
 800aeb6:	2909      	cmp	r1, #9
 800aeb8:	d92a      	bls.n	800af10 <_strtod_l+0x1b8>
 800aeba:	9905      	ldr	r1, [sp, #20]
 800aebc:	462a      	mov	r2, r5
 800aebe:	f003 f89b 	bl	800dff8 <strncmp>
 800aec2:	b398      	cbz	r0, 800af2c <_strtod_l+0x1d4>
 800aec4:	2000      	movs	r0, #0
 800aec6:	4632      	mov	r2, r6
 800aec8:	463d      	mov	r5, r7
 800aeca:	9005      	str	r0, [sp, #20]
 800aecc:	4603      	mov	r3, r0
 800aece:	2a65      	cmp	r2, #101	; 0x65
 800aed0:	d001      	beq.n	800aed6 <_strtod_l+0x17e>
 800aed2:	2a45      	cmp	r2, #69	; 0x45
 800aed4:	d118      	bne.n	800af08 <_strtod_l+0x1b0>
 800aed6:	b91d      	cbnz	r5, 800aee0 <_strtod_l+0x188>
 800aed8:	9a04      	ldr	r2, [sp, #16]
 800aeda:	4302      	orrs	r2, r0
 800aedc:	d09e      	beq.n	800ae1c <_strtod_l+0xc4>
 800aede:	2500      	movs	r5, #0
 800aee0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800aee4:	f108 0201 	add.w	r2, r8, #1
 800aee8:	9217      	str	r2, [sp, #92]	; 0x5c
 800aeea:	f898 2001 	ldrb.w	r2, [r8, #1]
 800aeee:	2a2b      	cmp	r2, #43	; 0x2b
 800aef0:	d075      	beq.n	800afde <_strtod_l+0x286>
 800aef2:	2a2d      	cmp	r2, #45	; 0x2d
 800aef4:	d07b      	beq.n	800afee <_strtod_l+0x296>
 800aef6:	f04f 0c00 	mov.w	ip, #0
 800aefa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800aefe:	2909      	cmp	r1, #9
 800af00:	f240 8082 	bls.w	800b008 <_strtod_l+0x2b0>
 800af04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800af08:	2600      	movs	r6, #0
 800af0a:	e09d      	b.n	800b048 <_strtod_l+0x2f0>
 800af0c:	2300      	movs	r3, #0
 800af0e:	e7c4      	b.n	800ae9a <_strtod_l+0x142>
 800af10:	2f08      	cmp	r7, #8
 800af12:	bfd8      	it	le
 800af14:	9907      	ldrle	r1, [sp, #28]
 800af16:	f100 0001 	add.w	r0, r0, #1
 800af1a:	bfda      	itte	le
 800af1c:	fb02 3301 	mlale	r3, r2, r1, r3
 800af20:	9307      	strle	r3, [sp, #28]
 800af22:	fb02 3909 	mlagt	r9, r2, r9, r3
 800af26:	3701      	adds	r7, #1
 800af28:	9017      	str	r0, [sp, #92]	; 0x5c
 800af2a:	e7bf      	b.n	800aeac <_strtod_l+0x154>
 800af2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af2e:	195a      	adds	r2, r3, r5
 800af30:	9217      	str	r2, [sp, #92]	; 0x5c
 800af32:	5d5a      	ldrb	r2, [r3, r5]
 800af34:	2f00      	cmp	r7, #0
 800af36:	d037      	beq.n	800afa8 <_strtod_l+0x250>
 800af38:	9005      	str	r0, [sp, #20]
 800af3a:	463d      	mov	r5, r7
 800af3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800af40:	2b09      	cmp	r3, #9
 800af42:	d912      	bls.n	800af6a <_strtod_l+0x212>
 800af44:	2301      	movs	r3, #1
 800af46:	e7c2      	b.n	800aece <_strtod_l+0x176>
 800af48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af4a:	1c5a      	adds	r2, r3, #1
 800af4c:	9217      	str	r2, [sp, #92]	; 0x5c
 800af4e:	785a      	ldrb	r2, [r3, #1]
 800af50:	3001      	adds	r0, #1
 800af52:	2a30      	cmp	r2, #48	; 0x30
 800af54:	d0f8      	beq.n	800af48 <_strtod_l+0x1f0>
 800af56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800af5a:	2b08      	cmp	r3, #8
 800af5c:	f200 84d9 	bhi.w	800b912 <_strtod_l+0xbba>
 800af60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af62:	9005      	str	r0, [sp, #20]
 800af64:	2000      	movs	r0, #0
 800af66:	9308      	str	r3, [sp, #32]
 800af68:	4605      	mov	r5, r0
 800af6a:	3a30      	subs	r2, #48	; 0x30
 800af6c:	f100 0301 	add.w	r3, r0, #1
 800af70:	d014      	beq.n	800af9c <_strtod_l+0x244>
 800af72:	9905      	ldr	r1, [sp, #20]
 800af74:	4419      	add	r1, r3
 800af76:	9105      	str	r1, [sp, #20]
 800af78:	462b      	mov	r3, r5
 800af7a:	eb00 0e05 	add.w	lr, r0, r5
 800af7e:	210a      	movs	r1, #10
 800af80:	4573      	cmp	r3, lr
 800af82:	d113      	bne.n	800afac <_strtod_l+0x254>
 800af84:	182b      	adds	r3, r5, r0
 800af86:	2b08      	cmp	r3, #8
 800af88:	f105 0501 	add.w	r5, r5, #1
 800af8c:	4405      	add	r5, r0
 800af8e:	dc1c      	bgt.n	800afca <_strtod_l+0x272>
 800af90:	9907      	ldr	r1, [sp, #28]
 800af92:	230a      	movs	r3, #10
 800af94:	fb03 2301 	mla	r3, r3, r1, r2
 800af98:	9307      	str	r3, [sp, #28]
 800af9a:	2300      	movs	r3, #0
 800af9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af9e:	1c51      	adds	r1, r2, #1
 800afa0:	9117      	str	r1, [sp, #92]	; 0x5c
 800afa2:	7852      	ldrb	r2, [r2, #1]
 800afa4:	4618      	mov	r0, r3
 800afa6:	e7c9      	b.n	800af3c <_strtod_l+0x1e4>
 800afa8:	4638      	mov	r0, r7
 800afaa:	e7d2      	b.n	800af52 <_strtod_l+0x1fa>
 800afac:	2b08      	cmp	r3, #8
 800afae:	dc04      	bgt.n	800afba <_strtod_l+0x262>
 800afb0:	9e07      	ldr	r6, [sp, #28]
 800afb2:	434e      	muls	r6, r1
 800afb4:	9607      	str	r6, [sp, #28]
 800afb6:	3301      	adds	r3, #1
 800afb8:	e7e2      	b.n	800af80 <_strtod_l+0x228>
 800afba:	f103 0c01 	add.w	ip, r3, #1
 800afbe:	f1bc 0f10 	cmp.w	ip, #16
 800afc2:	bfd8      	it	le
 800afc4:	fb01 f909 	mulle.w	r9, r1, r9
 800afc8:	e7f5      	b.n	800afb6 <_strtod_l+0x25e>
 800afca:	2d10      	cmp	r5, #16
 800afcc:	bfdc      	itt	le
 800afce:	230a      	movle	r3, #10
 800afd0:	fb03 2909 	mlale	r9, r3, r9, r2
 800afd4:	e7e1      	b.n	800af9a <_strtod_l+0x242>
 800afd6:	2300      	movs	r3, #0
 800afd8:	9305      	str	r3, [sp, #20]
 800afda:	2301      	movs	r3, #1
 800afdc:	e77c      	b.n	800aed8 <_strtod_l+0x180>
 800afde:	f04f 0c00 	mov.w	ip, #0
 800afe2:	f108 0202 	add.w	r2, r8, #2
 800afe6:	9217      	str	r2, [sp, #92]	; 0x5c
 800afe8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800afec:	e785      	b.n	800aefa <_strtod_l+0x1a2>
 800afee:	f04f 0c01 	mov.w	ip, #1
 800aff2:	e7f6      	b.n	800afe2 <_strtod_l+0x28a>
 800aff4:	0800ebc4 	.word	0x0800ebc4
 800aff8:	0800e940 	.word	0x0800e940
 800affc:	7ff00000 	.word	0x7ff00000
 800b000:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b002:	1c51      	adds	r1, r2, #1
 800b004:	9117      	str	r1, [sp, #92]	; 0x5c
 800b006:	7852      	ldrb	r2, [r2, #1]
 800b008:	2a30      	cmp	r2, #48	; 0x30
 800b00a:	d0f9      	beq.n	800b000 <_strtod_l+0x2a8>
 800b00c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b010:	2908      	cmp	r1, #8
 800b012:	f63f af79 	bhi.w	800af08 <_strtod_l+0x1b0>
 800b016:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b01a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b01c:	9206      	str	r2, [sp, #24]
 800b01e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b020:	1c51      	adds	r1, r2, #1
 800b022:	9117      	str	r1, [sp, #92]	; 0x5c
 800b024:	7852      	ldrb	r2, [r2, #1]
 800b026:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800b02a:	2e09      	cmp	r6, #9
 800b02c:	d937      	bls.n	800b09e <_strtod_l+0x346>
 800b02e:	9e06      	ldr	r6, [sp, #24]
 800b030:	1b89      	subs	r1, r1, r6
 800b032:	2908      	cmp	r1, #8
 800b034:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800b038:	dc02      	bgt.n	800b040 <_strtod_l+0x2e8>
 800b03a:	4576      	cmp	r6, lr
 800b03c:	bfa8      	it	ge
 800b03e:	4676      	movge	r6, lr
 800b040:	f1bc 0f00 	cmp.w	ip, #0
 800b044:	d000      	beq.n	800b048 <_strtod_l+0x2f0>
 800b046:	4276      	negs	r6, r6
 800b048:	2d00      	cmp	r5, #0
 800b04a:	d14d      	bne.n	800b0e8 <_strtod_l+0x390>
 800b04c:	9904      	ldr	r1, [sp, #16]
 800b04e:	4301      	orrs	r1, r0
 800b050:	f47f aec6 	bne.w	800ade0 <_strtod_l+0x88>
 800b054:	2b00      	cmp	r3, #0
 800b056:	f47f aee1 	bne.w	800ae1c <_strtod_l+0xc4>
 800b05a:	2a69      	cmp	r2, #105	; 0x69
 800b05c:	d027      	beq.n	800b0ae <_strtod_l+0x356>
 800b05e:	dc24      	bgt.n	800b0aa <_strtod_l+0x352>
 800b060:	2a49      	cmp	r2, #73	; 0x49
 800b062:	d024      	beq.n	800b0ae <_strtod_l+0x356>
 800b064:	2a4e      	cmp	r2, #78	; 0x4e
 800b066:	f47f aed9 	bne.w	800ae1c <_strtod_l+0xc4>
 800b06a:	499f      	ldr	r1, [pc, #636]	; (800b2e8 <_strtod_l+0x590>)
 800b06c:	a817      	add	r0, sp, #92	; 0x5c
 800b06e:	f001 fe6f 	bl	800cd50 <__match>
 800b072:	2800      	cmp	r0, #0
 800b074:	f43f aed2 	beq.w	800ae1c <_strtod_l+0xc4>
 800b078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2b28      	cmp	r3, #40	; 0x28
 800b07e:	d12d      	bne.n	800b0dc <_strtod_l+0x384>
 800b080:	499a      	ldr	r1, [pc, #616]	; (800b2ec <_strtod_l+0x594>)
 800b082:	aa1a      	add	r2, sp, #104	; 0x68
 800b084:	a817      	add	r0, sp, #92	; 0x5c
 800b086:	f001 fe77 	bl	800cd78 <__hexnan>
 800b08a:	2805      	cmp	r0, #5
 800b08c:	d126      	bne.n	800b0dc <_strtod_l+0x384>
 800b08e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b090:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b094:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b098:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b09c:	e6a0      	b.n	800ade0 <_strtod_l+0x88>
 800b09e:	210a      	movs	r1, #10
 800b0a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b0a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b0a8:	e7b9      	b.n	800b01e <_strtod_l+0x2c6>
 800b0aa:	2a6e      	cmp	r2, #110	; 0x6e
 800b0ac:	e7db      	b.n	800b066 <_strtod_l+0x30e>
 800b0ae:	4990      	ldr	r1, [pc, #576]	; (800b2f0 <_strtod_l+0x598>)
 800b0b0:	a817      	add	r0, sp, #92	; 0x5c
 800b0b2:	f001 fe4d 	bl	800cd50 <__match>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	f43f aeb0 	beq.w	800ae1c <_strtod_l+0xc4>
 800b0bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0be:	498d      	ldr	r1, [pc, #564]	; (800b2f4 <_strtod_l+0x59c>)
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	a817      	add	r0, sp, #92	; 0x5c
 800b0c4:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0c6:	f001 fe43 	bl	800cd50 <__match>
 800b0ca:	b910      	cbnz	r0, 800b0d2 <_strtod_l+0x37a>
 800b0cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	9317      	str	r3, [sp, #92]	; 0x5c
 800b0d2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b304 <_strtod_l+0x5ac>
 800b0d6:	f04f 0a00 	mov.w	sl, #0
 800b0da:	e681      	b.n	800ade0 <_strtod_l+0x88>
 800b0dc:	4886      	ldr	r0, [pc, #536]	; (800b2f8 <_strtod_l+0x5a0>)
 800b0de:	f002 ff73 	bl	800dfc8 <nan>
 800b0e2:	ec5b ab10 	vmov	sl, fp, d0
 800b0e6:	e67b      	b.n	800ade0 <_strtod_l+0x88>
 800b0e8:	9b05      	ldr	r3, [sp, #20]
 800b0ea:	9807      	ldr	r0, [sp, #28]
 800b0ec:	1af3      	subs	r3, r6, r3
 800b0ee:	2f00      	cmp	r7, #0
 800b0f0:	bf08      	it	eq
 800b0f2:	462f      	moveq	r7, r5
 800b0f4:	2d10      	cmp	r5, #16
 800b0f6:	9306      	str	r3, [sp, #24]
 800b0f8:	46a8      	mov	r8, r5
 800b0fa:	bfa8      	it	ge
 800b0fc:	f04f 0810 	movge.w	r8, #16
 800b100:	f7f5 fa28 	bl	8000554 <__aeabi_ui2d>
 800b104:	2d09      	cmp	r5, #9
 800b106:	4682      	mov	sl, r0
 800b108:	468b      	mov	fp, r1
 800b10a:	dd13      	ble.n	800b134 <_strtod_l+0x3dc>
 800b10c:	4b7b      	ldr	r3, [pc, #492]	; (800b2fc <_strtod_l+0x5a4>)
 800b10e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b112:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b116:	f7f5 fa97 	bl	8000648 <__aeabi_dmul>
 800b11a:	4682      	mov	sl, r0
 800b11c:	4648      	mov	r0, r9
 800b11e:	468b      	mov	fp, r1
 800b120:	f7f5 fa18 	bl	8000554 <__aeabi_ui2d>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	4650      	mov	r0, sl
 800b12a:	4659      	mov	r1, fp
 800b12c:	f7f5 f8d6 	bl	80002dc <__adddf3>
 800b130:	4682      	mov	sl, r0
 800b132:	468b      	mov	fp, r1
 800b134:	2d0f      	cmp	r5, #15
 800b136:	dc38      	bgt.n	800b1aa <_strtod_l+0x452>
 800b138:	9b06      	ldr	r3, [sp, #24]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f43f ae50 	beq.w	800ade0 <_strtod_l+0x88>
 800b140:	dd24      	ble.n	800b18c <_strtod_l+0x434>
 800b142:	2b16      	cmp	r3, #22
 800b144:	dc0b      	bgt.n	800b15e <_strtod_l+0x406>
 800b146:	496d      	ldr	r1, [pc, #436]	; (800b2fc <_strtod_l+0x5a4>)
 800b148:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b14c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b150:	4652      	mov	r2, sl
 800b152:	465b      	mov	r3, fp
 800b154:	f7f5 fa78 	bl	8000648 <__aeabi_dmul>
 800b158:	4682      	mov	sl, r0
 800b15a:	468b      	mov	fp, r1
 800b15c:	e640      	b.n	800ade0 <_strtod_l+0x88>
 800b15e:	9a06      	ldr	r2, [sp, #24]
 800b160:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b164:	4293      	cmp	r3, r2
 800b166:	db20      	blt.n	800b1aa <_strtod_l+0x452>
 800b168:	4c64      	ldr	r4, [pc, #400]	; (800b2fc <_strtod_l+0x5a4>)
 800b16a:	f1c5 050f 	rsb	r5, r5, #15
 800b16e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b172:	4652      	mov	r2, sl
 800b174:	465b      	mov	r3, fp
 800b176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b17a:	f7f5 fa65 	bl	8000648 <__aeabi_dmul>
 800b17e:	9b06      	ldr	r3, [sp, #24]
 800b180:	1b5d      	subs	r5, r3, r5
 800b182:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b186:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b18a:	e7e3      	b.n	800b154 <_strtod_l+0x3fc>
 800b18c:	9b06      	ldr	r3, [sp, #24]
 800b18e:	3316      	adds	r3, #22
 800b190:	db0b      	blt.n	800b1aa <_strtod_l+0x452>
 800b192:	9b05      	ldr	r3, [sp, #20]
 800b194:	1b9e      	subs	r6, r3, r6
 800b196:	4b59      	ldr	r3, [pc, #356]	; (800b2fc <_strtod_l+0x5a4>)
 800b198:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b19c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1a0:	4650      	mov	r0, sl
 800b1a2:	4659      	mov	r1, fp
 800b1a4:	f7f5 fb7a 	bl	800089c <__aeabi_ddiv>
 800b1a8:	e7d6      	b.n	800b158 <_strtod_l+0x400>
 800b1aa:	9b06      	ldr	r3, [sp, #24]
 800b1ac:	eba5 0808 	sub.w	r8, r5, r8
 800b1b0:	4498      	add	r8, r3
 800b1b2:	f1b8 0f00 	cmp.w	r8, #0
 800b1b6:	dd74      	ble.n	800b2a2 <_strtod_l+0x54a>
 800b1b8:	f018 030f 	ands.w	r3, r8, #15
 800b1bc:	d00a      	beq.n	800b1d4 <_strtod_l+0x47c>
 800b1be:	494f      	ldr	r1, [pc, #316]	; (800b2fc <_strtod_l+0x5a4>)
 800b1c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1c4:	4652      	mov	r2, sl
 800b1c6:	465b      	mov	r3, fp
 800b1c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1cc:	f7f5 fa3c 	bl	8000648 <__aeabi_dmul>
 800b1d0:	4682      	mov	sl, r0
 800b1d2:	468b      	mov	fp, r1
 800b1d4:	f038 080f 	bics.w	r8, r8, #15
 800b1d8:	d04f      	beq.n	800b27a <_strtod_l+0x522>
 800b1da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b1de:	dd22      	ble.n	800b226 <_strtod_l+0x4ce>
 800b1e0:	2500      	movs	r5, #0
 800b1e2:	462e      	mov	r6, r5
 800b1e4:	9507      	str	r5, [sp, #28]
 800b1e6:	9505      	str	r5, [sp, #20]
 800b1e8:	2322      	movs	r3, #34	; 0x22
 800b1ea:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b304 <_strtod_l+0x5ac>
 800b1ee:	6023      	str	r3, [r4, #0]
 800b1f0:	f04f 0a00 	mov.w	sl, #0
 800b1f4:	9b07      	ldr	r3, [sp, #28]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f43f adf2 	beq.w	800ade0 <_strtod_l+0x88>
 800b1fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b1fe:	4620      	mov	r0, r4
 800b200:	f001 feb4 	bl	800cf6c <_Bfree>
 800b204:	9905      	ldr	r1, [sp, #20]
 800b206:	4620      	mov	r0, r4
 800b208:	f001 feb0 	bl	800cf6c <_Bfree>
 800b20c:	4631      	mov	r1, r6
 800b20e:	4620      	mov	r0, r4
 800b210:	f001 feac 	bl	800cf6c <_Bfree>
 800b214:	9907      	ldr	r1, [sp, #28]
 800b216:	4620      	mov	r0, r4
 800b218:	f001 fea8 	bl	800cf6c <_Bfree>
 800b21c:	4629      	mov	r1, r5
 800b21e:	4620      	mov	r0, r4
 800b220:	f001 fea4 	bl	800cf6c <_Bfree>
 800b224:	e5dc      	b.n	800ade0 <_strtod_l+0x88>
 800b226:	4b36      	ldr	r3, [pc, #216]	; (800b300 <_strtod_l+0x5a8>)
 800b228:	9304      	str	r3, [sp, #16]
 800b22a:	2300      	movs	r3, #0
 800b22c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b230:	4650      	mov	r0, sl
 800b232:	4659      	mov	r1, fp
 800b234:	4699      	mov	r9, r3
 800b236:	f1b8 0f01 	cmp.w	r8, #1
 800b23a:	dc21      	bgt.n	800b280 <_strtod_l+0x528>
 800b23c:	b10b      	cbz	r3, 800b242 <_strtod_l+0x4ea>
 800b23e:	4682      	mov	sl, r0
 800b240:	468b      	mov	fp, r1
 800b242:	4b2f      	ldr	r3, [pc, #188]	; (800b300 <_strtod_l+0x5a8>)
 800b244:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b248:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b24c:	4652      	mov	r2, sl
 800b24e:	465b      	mov	r3, fp
 800b250:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b254:	f7f5 f9f8 	bl	8000648 <__aeabi_dmul>
 800b258:	4b2a      	ldr	r3, [pc, #168]	; (800b304 <_strtod_l+0x5ac>)
 800b25a:	460a      	mov	r2, r1
 800b25c:	400b      	ands	r3, r1
 800b25e:	492a      	ldr	r1, [pc, #168]	; (800b308 <_strtod_l+0x5b0>)
 800b260:	428b      	cmp	r3, r1
 800b262:	4682      	mov	sl, r0
 800b264:	d8bc      	bhi.n	800b1e0 <_strtod_l+0x488>
 800b266:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b26a:	428b      	cmp	r3, r1
 800b26c:	bf86      	itte	hi
 800b26e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b30c <_strtod_l+0x5b4>
 800b272:	f04f 3aff 	movhi.w	sl, #4294967295
 800b276:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b27a:	2300      	movs	r3, #0
 800b27c:	9304      	str	r3, [sp, #16]
 800b27e:	e084      	b.n	800b38a <_strtod_l+0x632>
 800b280:	f018 0f01 	tst.w	r8, #1
 800b284:	d005      	beq.n	800b292 <_strtod_l+0x53a>
 800b286:	9b04      	ldr	r3, [sp, #16]
 800b288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28c:	f7f5 f9dc 	bl	8000648 <__aeabi_dmul>
 800b290:	2301      	movs	r3, #1
 800b292:	9a04      	ldr	r2, [sp, #16]
 800b294:	3208      	adds	r2, #8
 800b296:	f109 0901 	add.w	r9, r9, #1
 800b29a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b29e:	9204      	str	r2, [sp, #16]
 800b2a0:	e7c9      	b.n	800b236 <_strtod_l+0x4de>
 800b2a2:	d0ea      	beq.n	800b27a <_strtod_l+0x522>
 800b2a4:	f1c8 0800 	rsb	r8, r8, #0
 800b2a8:	f018 020f 	ands.w	r2, r8, #15
 800b2ac:	d00a      	beq.n	800b2c4 <_strtod_l+0x56c>
 800b2ae:	4b13      	ldr	r3, [pc, #76]	; (800b2fc <_strtod_l+0x5a4>)
 800b2b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2b4:	4650      	mov	r0, sl
 800b2b6:	4659      	mov	r1, fp
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	f7f5 faee 	bl	800089c <__aeabi_ddiv>
 800b2c0:	4682      	mov	sl, r0
 800b2c2:	468b      	mov	fp, r1
 800b2c4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b2c8:	d0d7      	beq.n	800b27a <_strtod_l+0x522>
 800b2ca:	f1b8 0f1f 	cmp.w	r8, #31
 800b2ce:	dd1f      	ble.n	800b310 <_strtod_l+0x5b8>
 800b2d0:	2500      	movs	r5, #0
 800b2d2:	462e      	mov	r6, r5
 800b2d4:	9507      	str	r5, [sp, #28]
 800b2d6:	9505      	str	r5, [sp, #20]
 800b2d8:	2322      	movs	r3, #34	; 0x22
 800b2da:	f04f 0a00 	mov.w	sl, #0
 800b2de:	f04f 0b00 	mov.w	fp, #0
 800b2e2:	6023      	str	r3, [r4, #0]
 800b2e4:	e786      	b.n	800b1f4 <_strtod_l+0x49c>
 800b2e6:	bf00      	nop
 800b2e8:	0800e911 	.word	0x0800e911
 800b2ec:	0800e954 	.word	0x0800e954
 800b2f0:	0800e909 	.word	0x0800e909
 800b2f4:	0800ead0 	.word	0x0800ead0
 800b2f8:	0800e9cb 	.word	0x0800e9cb
 800b2fc:	0800ec60 	.word	0x0800ec60
 800b300:	0800ec38 	.word	0x0800ec38
 800b304:	7ff00000 	.word	0x7ff00000
 800b308:	7ca00000 	.word	0x7ca00000
 800b30c:	7fefffff 	.word	0x7fefffff
 800b310:	f018 0310 	ands.w	r3, r8, #16
 800b314:	bf18      	it	ne
 800b316:	236a      	movne	r3, #106	; 0x6a
 800b318:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b6c8 <_strtod_l+0x970>
 800b31c:	9304      	str	r3, [sp, #16]
 800b31e:	4650      	mov	r0, sl
 800b320:	4659      	mov	r1, fp
 800b322:	2300      	movs	r3, #0
 800b324:	f018 0f01 	tst.w	r8, #1
 800b328:	d004      	beq.n	800b334 <_strtod_l+0x5dc>
 800b32a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b32e:	f7f5 f98b 	bl	8000648 <__aeabi_dmul>
 800b332:	2301      	movs	r3, #1
 800b334:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b338:	f109 0908 	add.w	r9, r9, #8
 800b33c:	d1f2      	bne.n	800b324 <_strtod_l+0x5cc>
 800b33e:	b10b      	cbz	r3, 800b344 <_strtod_l+0x5ec>
 800b340:	4682      	mov	sl, r0
 800b342:	468b      	mov	fp, r1
 800b344:	9b04      	ldr	r3, [sp, #16]
 800b346:	b1c3      	cbz	r3, 800b37a <_strtod_l+0x622>
 800b348:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b34c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b350:	2b00      	cmp	r3, #0
 800b352:	4659      	mov	r1, fp
 800b354:	dd11      	ble.n	800b37a <_strtod_l+0x622>
 800b356:	2b1f      	cmp	r3, #31
 800b358:	f340 8124 	ble.w	800b5a4 <_strtod_l+0x84c>
 800b35c:	2b34      	cmp	r3, #52	; 0x34
 800b35e:	bfde      	ittt	le
 800b360:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b364:	f04f 33ff 	movle.w	r3, #4294967295
 800b368:	fa03 f202 	lslle.w	r2, r3, r2
 800b36c:	f04f 0a00 	mov.w	sl, #0
 800b370:	bfcc      	ite	gt
 800b372:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b376:	ea02 0b01 	andle.w	fp, r2, r1
 800b37a:	2200      	movs	r2, #0
 800b37c:	2300      	movs	r3, #0
 800b37e:	4650      	mov	r0, sl
 800b380:	4659      	mov	r1, fp
 800b382:	f7f5 fbc9 	bl	8000b18 <__aeabi_dcmpeq>
 800b386:	2800      	cmp	r0, #0
 800b388:	d1a2      	bne.n	800b2d0 <_strtod_l+0x578>
 800b38a:	9b07      	ldr	r3, [sp, #28]
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	9908      	ldr	r1, [sp, #32]
 800b390:	462b      	mov	r3, r5
 800b392:	463a      	mov	r2, r7
 800b394:	4620      	mov	r0, r4
 800b396:	f001 fe51 	bl	800d03c <__s2b>
 800b39a:	9007      	str	r0, [sp, #28]
 800b39c:	2800      	cmp	r0, #0
 800b39e:	f43f af1f 	beq.w	800b1e0 <_strtod_l+0x488>
 800b3a2:	9b05      	ldr	r3, [sp, #20]
 800b3a4:	1b9e      	subs	r6, r3, r6
 800b3a6:	9b06      	ldr	r3, [sp, #24]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	bfb4      	ite	lt
 800b3ac:	4633      	movlt	r3, r6
 800b3ae:	2300      	movge	r3, #0
 800b3b0:	930c      	str	r3, [sp, #48]	; 0x30
 800b3b2:	9b06      	ldr	r3, [sp, #24]
 800b3b4:	2500      	movs	r5, #0
 800b3b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b3ba:	9312      	str	r3, [sp, #72]	; 0x48
 800b3bc:	462e      	mov	r6, r5
 800b3be:	9b07      	ldr	r3, [sp, #28]
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	6859      	ldr	r1, [r3, #4]
 800b3c4:	f001 fd92 	bl	800ceec <_Balloc>
 800b3c8:	9005      	str	r0, [sp, #20]
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	f43f af0c 	beq.w	800b1e8 <_strtod_l+0x490>
 800b3d0:	9b07      	ldr	r3, [sp, #28]
 800b3d2:	691a      	ldr	r2, [r3, #16]
 800b3d4:	3202      	adds	r2, #2
 800b3d6:	f103 010c 	add.w	r1, r3, #12
 800b3da:	0092      	lsls	r2, r2, #2
 800b3dc:	300c      	adds	r0, #12
 800b3de:	f7fe fde7 	bl	8009fb0 <memcpy>
 800b3e2:	ec4b ab10 	vmov	d0, sl, fp
 800b3e6:	aa1a      	add	r2, sp, #104	; 0x68
 800b3e8:	a919      	add	r1, sp, #100	; 0x64
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f002 f96c 	bl	800d6c8 <__d2b>
 800b3f0:	ec4b ab18 	vmov	d8, sl, fp
 800b3f4:	9018      	str	r0, [sp, #96]	; 0x60
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	f43f aef6 	beq.w	800b1e8 <_strtod_l+0x490>
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	4620      	mov	r0, r4
 800b400:	f001 feb6 	bl	800d170 <__i2b>
 800b404:	4606      	mov	r6, r0
 800b406:	2800      	cmp	r0, #0
 800b408:	f43f aeee 	beq.w	800b1e8 <_strtod_l+0x490>
 800b40c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b40e:	9904      	ldr	r1, [sp, #16]
 800b410:	2b00      	cmp	r3, #0
 800b412:	bfab      	itete	ge
 800b414:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b416:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b418:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b41a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b41e:	bfac      	ite	ge
 800b420:	eb03 0902 	addge.w	r9, r3, r2
 800b424:	1ad7      	sublt	r7, r2, r3
 800b426:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b428:	eba3 0801 	sub.w	r8, r3, r1
 800b42c:	4490      	add	r8, r2
 800b42e:	4ba1      	ldr	r3, [pc, #644]	; (800b6b4 <_strtod_l+0x95c>)
 800b430:	f108 38ff 	add.w	r8, r8, #4294967295
 800b434:	4598      	cmp	r8, r3
 800b436:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b43a:	f280 80c7 	bge.w	800b5cc <_strtod_l+0x874>
 800b43e:	eba3 0308 	sub.w	r3, r3, r8
 800b442:	2b1f      	cmp	r3, #31
 800b444:	eba2 0203 	sub.w	r2, r2, r3
 800b448:	f04f 0101 	mov.w	r1, #1
 800b44c:	f300 80b1 	bgt.w	800b5b2 <_strtod_l+0x85a>
 800b450:	fa01 f303 	lsl.w	r3, r1, r3
 800b454:	930d      	str	r3, [sp, #52]	; 0x34
 800b456:	2300      	movs	r3, #0
 800b458:	9308      	str	r3, [sp, #32]
 800b45a:	eb09 0802 	add.w	r8, r9, r2
 800b45e:	9b04      	ldr	r3, [sp, #16]
 800b460:	45c1      	cmp	r9, r8
 800b462:	4417      	add	r7, r2
 800b464:	441f      	add	r7, r3
 800b466:	464b      	mov	r3, r9
 800b468:	bfa8      	it	ge
 800b46a:	4643      	movge	r3, r8
 800b46c:	42bb      	cmp	r3, r7
 800b46e:	bfa8      	it	ge
 800b470:	463b      	movge	r3, r7
 800b472:	2b00      	cmp	r3, #0
 800b474:	bfc2      	ittt	gt
 800b476:	eba8 0803 	subgt.w	r8, r8, r3
 800b47a:	1aff      	subgt	r7, r7, r3
 800b47c:	eba9 0903 	subgt.w	r9, r9, r3
 800b480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b482:	2b00      	cmp	r3, #0
 800b484:	dd17      	ble.n	800b4b6 <_strtod_l+0x75e>
 800b486:	4631      	mov	r1, r6
 800b488:	461a      	mov	r2, r3
 800b48a:	4620      	mov	r0, r4
 800b48c:	f001 ff30 	bl	800d2f0 <__pow5mult>
 800b490:	4606      	mov	r6, r0
 800b492:	2800      	cmp	r0, #0
 800b494:	f43f aea8 	beq.w	800b1e8 <_strtod_l+0x490>
 800b498:	4601      	mov	r1, r0
 800b49a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b49c:	4620      	mov	r0, r4
 800b49e:	f001 fe7d 	bl	800d19c <__multiply>
 800b4a2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	f43f ae9f 	beq.w	800b1e8 <_strtod_l+0x490>
 800b4aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	f001 fd5d 	bl	800cf6c <_Bfree>
 800b4b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4b4:	9318      	str	r3, [sp, #96]	; 0x60
 800b4b6:	f1b8 0f00 	cmp.w	r8, #0
 800b4ba:	f300 808c 	bgt.w	800b5d6 <_strtod_l+0x87e>
 800b4be:	9b06      	ldr	r3, [sp, #24]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	dd08      	ble.n	800b4d6 <_strtod_l+0x77e>
 800b4c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4c6:	9905      	ldr	r1, [sp, #20]
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f001 ff11 	bl	800d2f0 <__pow5mult>
 800b4ce:	9005      	str	r0, [sp, #20]
 800b4d0:	2800      	cmp	r0, #0
 800b4d2:	f43f ae89 	beq.w	800b1e8 <_strtod_l+0x490>
 800b4d6:	2f00      	cmp	r7, #0
 800b4d8:	dd08      	ble.n	800b4ec <_strtod_l+0x794>
 800b4da:	9905      	ldr	r1, [sp, #20]
 800b4dc:	463a      	mov	r2, r7
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f001 ff60 	bl	800d3a4 <__lshift>
 800b4e4:	9005      	str	r0, [sp, #20]
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f43f ae7e 	beq.w	800b1e8 <_strtod_l+0x490>
 800b4ec:	f1b9 0f00 	cmp.w	r9, #0
 800b4f0:	dd08      	ble.n	800b504 <_strtod_l+0x7ac>
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	464a      	mov	r2, r9
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f001 ff54 	bl	800d3a4 <__lshift>
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f43f ae72 	beq.w	800b1e8 <_strtod_l+0x490>
 800b504:	9a05      	ldr	r2, [sp, #20]
 800b506:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b508:	4620      	mov	r0, r4
 800b50a:	f001 ffd7 	bl	800d4bc <__mdiff>
 800b50e:	4605      	mov	r5, r0
 800b510:	2800      	cmp	r0, #0
 800b512:	f43f ae69 	beq.w	800b1e8 <_strtod_l+0x490>
 800b516:	68c3      	ldr	r3, [r0, #12]
 800b518:	930b      	str	r3, [sp, #44]	; 0x2c
 800b51a:	2300      	movs	r3, #0
 800b51c:	60c3      	str	r3, [r0, #12]
 800b51e:	4631      	mov	r1, r6
 800b520:	f001 ffb0 	bl	800d484 <__mcmp>
 800b524:	2800      	cmp	r0, #0
 800b526:	da60      	bge.n	800b5ea <_strtod_l+0x892>
 800b528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b52a:	ea53 030a 	orrs.w	r3, r3, sl
 800b52e:	f040 8082 	bne.w	800b636 <_strtod_l+0x8de>
 800b532:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b536:	2b00      	cmp	r3, #0
 800b538:	d17d      	bne.n	800b636 <_strtod_l+0x8de>
 800b53a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b53e:	0d1b      	lsrs	r3, r3, #20
 800b540:	051b      	lsls	r3, r3, #20
 800b542:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b546:	d976      	bls.n	800b636 <_strtod_l+0x8de>
 800b548:	696b      	ldr	r3, [r5, #20]
 800b54a:	b913      	cbnz	r3, 800b552 <_strtod_l+0x7fa>
 800b54c:	692b      	ldr	r3, [r5, #16]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	dd71      	ble.n	800b636 <_strtod_l+0x8de>
 800b552:	4629      	mov	r1, r5
 800b554:	2201      	movs	r2, #1
 800b556:	4620      	mov	r0, r4
 800b558:	f001 ff24 	bl	800d3a4 <__lshift>
 800b55c:	4631      	mov	r1, r6
 800b55e:	4605      	mov	r5, r0
 800b560:	f001 ff90 	bl	800d484 <__mcmp>
 800b564:	2800      	cmp	r0, #0
 800b566:	dd66      	ble.n	800b636 <_strtod_l+0x8de>
 800b568:	9904      	ldr	r1, [sp, #16]
 800b56a:	4a53      	ldr	r2, [pc, #332]	; (800b6b8 <_strtod_l+0x960>)
 800b56c:	465b      	mov	r3, fp
 800b56e:	2900      	cmp	r1, #0
 800b570:	f000 8081 	beq.w	800b676 <_strtod_l+0x91e>
 800b574:	ea02 010b 	and.w	r1, r2, fp
 800b578:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b57c:	dc7b      	bgt.n	800b676 <_strtod_l+0x91e>
 800b57e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b582:	f77f aea9 	ble.w	800b2d8 <_strtod_l+0x580>
 800b586:	4b4d      	ldr	r3, [pc, #308]	; (800b6bc <_strtod_l+0x964>)
 800b588:	4650      	mov	r0, sl
 800b58a:	4659      	mov	r1, fp
 800b58c:	2200      	movs	r2, #0
 800b58e:	f7f5 f85b 	bl	8000648 <__aeabi_dmul>
 800b592:	460b      	mov	r3, r1
 800b594:	4303      	orrs	r3, r0
 800b596:	bf08      	it	eq
 800b598:	2322      	moveq	r3, #34	; 0x22
 800b59a:	4682      	mov	sl, r0
 800b59c:	468b      	mov	fp, r1
 800b59e:	bf08      	it	eq
 800b5a0:	6023      	streq	r3, [r4, #0]
 800b5a2:	e62b      	b.n	800b1fc <_strtod_l+0x4a4>
 800b5a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ac:	ea03 0a0a 	and.w	sl, r3, sl
 800b5b0:	e6e3      	b.n	800b37a <_strtod_l+0x622>
 800b5b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b5b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b5ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b5be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b5c2:	fa01 f308 	lsl.w	r3, r1, r8
 800b5c6:	9308      	str	r3, [sp, #32]
 800b5c8:	910d      	str	r1, [sp, #52]	; 0x34
 800b5ca:	e746      	b.n	800b45a <_strtod_l+0x702>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	9308      	str	r3, [sp, #32]
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	930d      	str	r3, [sp, #52]	; 0x34
 800b5d4:	e741      	b.n	800b45a <_strtod_l+0x702>
 800b5d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b5d8:	4642      	mov	r2, r8
 800b5da:	4620      	mov	r0, r4
 800b5dc:	f001 fee2 	bl	800d3a4 <__lshift>
 800b5e0:	9018      	str	r0, [sp, #96]	; 0x60
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	f47f af6b 	bne.w	800b4be <_strtod_l+0x766>
 800b5e8:	e5fe      	b.n	800b1e8 <_strtod_l+0x490>
 800b5ea:	465f      	mov	r7, fp
 800b5ec:	d16e      	bne.n	800b6cc <_strtod_l+0x974>
 800b5ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5f4:	b342      	cbz	r2, 800b648 <_strtod_l+0x8f0>
 800b5f6:	4a32      	ldr	r2, [pc, #200]	; (800b6c0 <_strtod_l+0x968>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d128      	bne.n	800b64e <_strtod_l+0x8f6>
 800b5fc:	9b04      	ldr	r3, [sp, #16]
 800b5fe:	4651      	mov	r1, sl
 800b600:	b1eb      	cbz	r3, 800b63e <_strtod_l+0x8e6>
 800b602:	4b2d      	ldr	r3, [pc, #180]	; (800b6b8 <_strtod_l+0x960>)
 800b604:	403b      	ands	r3, r7
 800b606:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b60a:	f04f 32ff 	mov.w	r2, #4294967295
 800b60e:	d819      	bhi.n	800b644 <_strtod_l+0x8ec>
 800b610:	0d1b      	lsrs	r3, r3, #20
 800b612:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b616:	fa02 f303 	lsl.w	r3, r2, r3
 800b61a:	4299      	cmp	r1, r3
 800b61c:	d117      	bne.n	800b64e <_strtod_l+0x8f6>
 800b61e:	4b29      	ldr	r3, [pc, #164]	; (800b6c4 <_strtod_l+0x96c>)
 800b620:	429f      	cmp	r7, r3
 800b622:	d102      	bne.n	800b62a <_strtod_l+0x8d2>
 800b624:	3101      	adds	r1, #1
 800b626:	f43f addf 	beq.w	800b1e8 <_strtod_l+0x490>
 800b62a:	4b23      	ldr	r3, [pc, #140]	; (800b6b8 <_strtod_l+0x960>)
 800b62c:	403b      	ands	r3, r7
 800b62e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b632:	f04f 0a00 	mov.w	sl, #0
 800b636:	9b04      	ldr	r3, [sp, #16]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1a4      	bne.n	800b586 <_strtod_l+0x82e>
 800b63c:	e5de      	b.n	800b1fc <_strtod_l+0x4a4>
 800b63e:	f04f 33ff 	mov.w	r3, #4294967295
 800b642:	e7ea      	b.n	800b61a <_strtod_l+0x8c2>
 800b644:	4613      	mov	r3, r2
 800b646:	e7e8      	b.n	800b61a <_strtod_l+0x8c2>
 800b648:	ea53 030a 	orrs.w	r3, r3, sl
 800b64c:	d08c      	beq.n	800b568 <_strtod_l+0x810>
 800b64e:	9b08      	ldr	r3, [sp, #32]
 800b650:	b1db      	cbz	r3, 800b68a <_strtod_l+0x932>
 800b652:	423b      	tst	r3, r7
 800b654:	d0ef      	beq.n	800b636 <_strtod_l+0x8de>
 800b656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b658:	9a04      	ldr	r2, [sp, #16]
 800b65a:	4650      	mov	r0, sl
 800b65c:	4659      	mov	r1, fp
 800b65e:	b1c3      	cbz	r3, 800b692 <_strtod_l+0x93a>
 800b660:	f7ff fb5c 	bl	800ad1c <sulp>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	ec51 0b18 	vmov	r0, r1, d8
 800b66c:	f7f4 fe36 	bl	80002dc <__adddf3>
 800b670:	4682      	mov	sl, r0
 800b672:	468b      	mov	fp, r1
 800b674:	e7df      	b.n	800b636 <_strtod_l+0x8de>
 800b676:	4013      	ands	r3, r2
 800b678:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b67c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b680:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b684:	f04f 3aff 	mov.w	sl, #4294967295
 800b688:	e7d5      	b.n	800b636 <_strtod_l+0x8de>
 800b68a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b68c:	ea13 0f0a 	tst.w	r3, sl
 800b690:	e7e0      	b.n	800b654 <_strtod_l+0x8fc>
 800b692:	f7ff fb43 	bl	800ad1c <sulp>
 800b696:	4602      	mov	r2, r0
 800b698:	460b      	mov	r3, r1
 800b69a:	ec51 0b18 	vmov	r0, r1, d8
 800b69e:	f7f4 fe1b 	bl	80002d8 <__aeabi_dsub>
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	4682      	mov	sl, r0
 800b6a8:	468b      	mov	fp, r1
 800b6aa:	f7f5 fa35 	bl	8000b18 <__aeabi_dcmpeq>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d0c1      	beq.n	800b636 <_strtod_l+0x8de>
 800b6b2:	e611      	b.n	800b2d8 <_strtod_l+0x580>
 800b6b4:	fffffc02 	.word	0xfffffc02
 800b6b8:	7ff00000 	.word	0x7ff00000
 800b6bc:	39500000 	.word	0x39500000
 800b6c0:	000fffff 	.word	0x000fffff
 800b6c4:	7fefffff 	.word	0x7fefffff
 800b6c8:	0800e968 	.word	0x0800e968
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f002 f856 	bl	800d780 <__ratio>
 800b6d4:	ec59 8b10 	vmov	r8, r9, d0
 800b6d8:	ee10 0a10 	vmov	r0, s0
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7f5 fa2c 	bl	8000b40 <__aeabi_dcmple>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d07a      	beq.n	800b7e2 <_strtod_l+0xa8a>
 800b6ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d04a      	beq.n	800b788 <_strtod_l+0xa30>
 800b6f2:	4b95      	ldr	r3, [pc, #596]	; (800b948 <_strtod_l+0xbf0>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b6fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b948 <_strtod_l+0xbf0>
 800b6fe:	f04f 0800 	mov.w	r8, #0
 800b702:	4b92      	ldr	r3, [pc, #584]	; (800b94c <_strtod_l+0xbf4>)
 800b704:	403b      	ands	r3, r7
 800b706:	930d      	str	r3, [sp, #52]	; 0x34
 800b708:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b70a:	4b91      	ldr	r3, [pc, #580]	; (800b950 <_strtod_l+0xbf8>)
 800b70c:	429a      	cmp	r2, r3
 800b70e:	f040 80b0 	bne.w	800b872 <_strtod_l+0xb1a>
 800b712:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b716:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b71a:	ec4b ab10 	vmov	d0, sl, fp
 800b71e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b722:	f001 ff55 	bl	800d5d0 <__ulp>
 800b726:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b72a:	ec53 2b10 	vmov	r2, r3, d0
 800b72e:	f7f4 ff8b 	bl	8000648 <__aeabi_dmul>
 800b732:	4652      	mov	r2, sl
 800b734:	465b      	mov	r3, fp
 800b736:	f7f4 fdd1 	bl	80002dc <__adddf3>
 800b73a:	460b      	mov	r3, r1
 800b73c:	4983      	ldr	r1, [pc, #524]	; (800b94c <_strtod_l+0xbf4>)
 800b73e:	4a85      	ldr	r2, [pc, #532]	; (800b954 <_strtod_l+0xbfc>)
 800b740:	4019      	ands	r1, r3
 800b742:	4291      	cmp	r1, r2
 800b744:	4682      	mov	sl, r0
 800b746:	d960      	bls.n	800b80a <_strtod_l+0xab2>
 800b748:	ee18 3a90 	vmov	r3, s17
 800b74c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b750:	4293      	cmp	r3, r2
 800b752:	d104      	bne.n	800b75e <_strtod_l+0xa06>
 800b754:	ee18 3a10 	vmov	r3, s16
 800b758:	3301      	adds	r3, #1
 800b75a:	f43f ad45 	beq.w	800b1e8 <_strtod_l+0x490>
 800b75e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b960 <_strtod_l+0xc08>
 800b762:	f04f 3aff 	mov.w	sl, #4294967295
 800b766:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b768:	4620      	mov	r0, r4
 800b76a:	f001 fbff 	bl	800cf6c <_Bfree>
 800b76e:	9905      	ldr	r1, [sp, #20]
 800b770:	4620      	mov	r0, r4
 800b772:	f001 fbfb 	bl	800cf6c <_Bfree>
 800b776:	4631      	mov	r1, r6
 800b778:	4620      	mov	r0, r4
 800b77a:	f001 fbf7 	bl	800cf6c <_Bfree>
 800b77e:	4629      	mov	r1, r5
 800b780:	4620      	mov	r0, r4
 800b782:	f001 fbf3 	bl	800cf6c <_Bfree>
 800b786:	e61a      	b.n	800b3be <_strtod_l+0x666>
 800b788:	f1ba 0f00 	cmp.w	sl, #0
 800b78c:	d11b      	bne.n	800b7c6 <_strtod_l+0xa6e>
 800b78e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b792:	b9f3      	cbnz	r3, 800b7d2 <_strtod_l+0xa7a>
 800b794:	4b6c      	ldr	r3, [pc, #432]	; (800b948 <_strtod_l+0xbf0>)
 800b796:	2200      	movs	r2, #0
 800b798:	4640      	mov	r0, r8
 800b79a:	4649      	mov	r1, r9
 800b79c:	f7f5 f9c6 	bl	8000b2c <__aeabi_dcmplt>
 800b7a0:	b9d0      	cbnz	r0, 800b7d8 <_strtod_l+0xa80>
 800b7a2:	4640      	mov	r0, r8
 800b7a4:	4649      	mov	r1, r9
 800b7a6:	4b6c      	ldr	r3, [pc, #432]	; (800b958 <_strtod_l+0xc00>)
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	f7f4 ff4d 	bl	8000648 <__aeabi_dmul>
 800b7ae:	4680      	mov	r8, r0
 800b7b0:	4689      	mov	r9, r1
 800b7b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b7b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b7ba:	9315      	str	r3, [sp, #84]	; 0x54
 800b7bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b7c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7c4:	e79d      	b.n	800b702 <_strtod_l+0x9aa>
 800b7c6:	f1ba 0f01 	cmp.w	sl, #1
 800b7ca:	d102      	bne.n	800b7d2 <_strtod_l+0xa7a>
 800b7cc:	2f00      	cmp	r7, #0
 800b7ce:	f43f ad83 	beq.w	800b2d8 <_strtod_l+0x580>
 800b7d2:	4b62      	ldr	r3, [pc, #392]	; (800b95c <_strtod_l+0xc04>)
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	e78e      	b.n	800b6f6 <_strtod_l+0x99e>
 800b7d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b958 <_strtod_l+0xc00>
 800b7dc:	f04f 0800 	mov.w	r8, #0
 800b7e0:	e7e7      	b.n	800b7b2 <_strtod_l+0xa5a>
 800b7e2:	4b5d      	ldr	r3, [pc, #372]	; (800b958 <_strtod_l+0xc00>)
 800b7e4:	4640      	mov	r0, r8
 800b7e6:	4649      	mov	r1, r9
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f7f4 ff2d 	bl	8000648 <__aeabi_dmul>
 800b7ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7f0:	4680      	mov	r8, r0
 800b7f2:	4689      	mov	r9, r1
 800b7f4:	b933      	cbnz	r3, 800b804 <_strtod_l+0xaac>
 800b7f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7fa:	900e      	str	r0, [sp, #56]	; 0x38
 800b7fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b802:	e7dd      	b.n	800b7c0 <_strtod_l+0xa68>
 800b804:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b808:	e7f9      	b.n	800b7fe <_strtod_l+0xaa6>
 800b80a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b80e:	9b04      	ldr	r3, [sp, #16]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1a8      	bne.n	800b766 <_strtod_l+0xa0e>
 800b814:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b818:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b81a:	0d1b      	lsrs	r3, r3, #20
 800b81c:	051b      	lsls	r3, r3, #20
 800b81e:	429a      	cmp	r2, r3
 800b820:	d1a1      	bne.n	800b766 <_strtod_l+0xa0e>
 800b822:	4640      	mov	r0, r8
 800b824:	4649      	mov	r1, r9
 800b826:	f7f5 fa6f 	bl	8000d08 <__aeabi_d2lz>
 800b82a:	f7f4 fedf 	bl	80005ec <__aeabi_l2d>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	4640      	mov	r0, r8
 800b834:	4649      	mov	r1, r9
 800b836:	f7f4 fd4f 	bl	80002d8 <__aeabi_dsub>
 800b83a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b83c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b840:	ea43 030a 	orr.w	r3, r3, sl
 800b844:	4313      	orrs	r3, r2
 800b846:	4680      	mov	r8, r0
 800b848:	4689      	mov	r9, r1
 800b84a:	d055      	beq.n	800b8f8 <_strtod_l+0xba0>
 800b84c:	a336      	add	r3, pc, #216	; (adr r3, 800b928 <_strtod_l+0xbd0>)
 800b84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b852:	f7f5 f96b 	bl	8000b2c <__aeabi_dcmplt>
 800b856:	2800      	cmp	r0, #0
 800b858:	f47f acd0 	bne.w	800b1fc <_strtod_l+0x4a4>
 800b85c:	a334      	add	r3, pc, #208	; (adr r3, 800b930 <_strtod_l+0xbd8>)
 800b85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b862:	4640      	mov	r0, r8
 800b864:	4649      	mov	r1, r9
 800b866:	f7f5 f97f 	bl	8000b68 <__aeabi_dcmpgt>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	f43f af7b 	beq.w	800b766 <_strtod_l+0xa0e>
 800b870:	e4c4      	b.n	800b1fc <_strtod_l+0x4a4>
 800b872:	9b04      	ldr	r3, [sp, #16]
 800b874:	b333      	cbz	r3, 800b8c4 <_strtod_l+0xb6c>
 800b876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b878:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b87c:	d822      	bhi.n	800b8c4 <_strtod_l+0xb6c>
 800b87e:	a32e      	add	r3, pc, #184	; (adr r3, 800b938 <_strtod_l+0xbe0>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	4640      	mov	r0, r8
 800b886:	4649      	mov	r1, r9
 800b888:	f7f5 f95a 	bl	8000b40 <__aeabi_dcmple>
 800b88c:	b1a0      	cbz	r0, 800b8b8 <_strtod_l+0xb60>
 800b88e:	4649      	mov	r1, r9
 800b890:	4640      	mov	r0, r8
 800b892:	f7f5 f9b1 	bl	8000bf8 <__aeabi_d2uiz>
 800b896:	2801      	cmp	r0, #1
 800b898:	bf38      	it	cc
 800b89a:	2001      	movcc	r0, #1
 800b89c:	f7f4 fe5a 	bl	8000554 <__aeabi_ui2d>
 800b8a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8a2:	4680      	mov	r8, r0
 800b8a4:	4689      	mov	r9, r1
 800b8a6:	bb23      	cbnz	r3, 800b8f2 <_strtod_l+0xb9a>
 800b8a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8ac:	9010      	str	r0, [sp, #64]	; 0x40
 800b8ae:	9311      	str	r3, [sp, #68]	; 0x44
 800b8b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b8b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b8c0:	1a9b      	subs	r3, r3, r2
 800b8c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8c8:	eeb0 0a48 	vmov.f32	s0, s16
 800b8cc:	eef0 0a68 	vmov.f32	s1, s17
 800b8d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b8d4:	f001 fe7c 	bl	800d5d0 <__ulp>
 800b8d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b8dc:	ec53 2b10 	vmov	r2, r3, d0
 800b8e0:	f7f4 feb2 	bl	8000648 <__aeabi_dmul>
 800b8e4:	ec53 2b18 	vmov	r2, r3, d8
 800b8e8:	f7f4 fcf8 	bl	80002dc <__adddf3>
 800b8ec:	4682      	mov	sl, r0
 800b8ee:	468b      	mov	fp, r1
 800b8f0:	e78d      	b.n	800b80e <_strtod_l+0xab6>
 800b8f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b8f6:	e7db      	b.n	800b8b0 <_strtod_l+0xb58>
 800b8f8:	a311      	add	r3, pc, #68	; (adr r3, 800b940 <_strtod_l+0xbe8>)
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	f7f5 f915 	bl	8000b2c <__aeabi_dcmplt>
 800b902:	e7b2      	b.n	800b86a <_strtod_l+0xb12>
 800b904:	2300      	movs	r3, #0
 800b906:	930a      	str	r3, [sp, #40]	; 0x28
 800b908:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b90a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b90c:	6013      	str	r3, [r2, #0]
 800b90e:	f7ff ba6b 	b.w	800ade8 <_strtod_l+0x90>
 800b912:	2a65      	cmp	r2, #101	; 0x65
 800b914:	f43f ab5f 	beq.w	800afd6 <_strtod_l+0x27e>
 800b918:	2a45      	cmp	r2, #69	; 0x45
 800b91a:	f43f ab5c 	beq.w	800afd6 <_strtod_l+0x27e>
 800b91e:	2301      	movs	r3, #1
 800b920:	f7ff bb94 	b.w	800b04c <_strtod_l+0x2f4>
 800b924:	f3af 8000 	nop.w
 800b928:	94a03595 	.word	0x94a03595
 800b92c:	3fdfffff 	.word	0x3fdfffff
 800b930:	35afe535 	.word	0x35afe535
 800b934:	3fe00000 	.word	0x3fe00000
 800b938:	ffc00000 	.word	0xffc00000
 800b93c:	41dfffff 	.word	0x41dfffff
 800b940:	94a03595 	.word	0x94a03595
 800b944:	3fcfffff 	.word	0x3fcfffff
 800b948:	3ff00000 	.word	0x3ff00000
 800b94c:	7ff00000 	.word	0x7ff00000
 800b950:	7fe00000 	.word	0x7fe00000
 800b954:	7c9fffff 	.word	0x7c9fffff
 800b958:	3fe00000 	.word	0x3fe00000
 800b95c:	bff00000 	.word	0xbff00000
 800b960:	7fefffff 	.word	0x7fefffff

0800b964 <_strtod_r>:
 800b964:	4b01      	ldr	r3, [pc, #4]	; (800b96c <_strtod_r+0x8>)
 800b966:	f7ff b9f7 	b.w	800ad58 <_strtod_l>
 800b96a:	bf00      	nop
 800b96c:	200000a4 	.word	0x200000a4

0800b970 <_strtol_l.constprop.0>:
 800b970:	2b01      	cmp	r3, #1
 800b972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b976:	d001      	beq.n	800b97c <_strtol_l.constprop.0+0xc>
 800b978:	2b24      	cmp	r3, #36	; 0x24
 800b97a:	d906      	bls.n	800b98a <_strtol_l.constprop.0+0x1a>
 800b97c:	f7fe faee 	bl	8009f5c <__errno>
 800b980:	2316      	movs	r3, #22
 800b982:	6003      	str	r3, [r0, #0]
 800b984:	2000      	movs	r0, #0
 800b986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b98a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ba70 <_strtol_l.constprop.0+0x100>
 800b98e:	460d      	mov	r5, r1
 800b990:	462e      	mov	r6, r5
 800b992:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b996:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b99a:	f017 0708 	ands.w	r7, r7, #8
 800b99e:	d1f7      	bne.n	800b990 <_strtol_l.constprop.0+0x20>
 800b9a0:	2c2d      	cmp	r4, #45	; 0x2d
 800b9a2:	d132      	bne.n	800ba0a <_strtol_l.constprop.0+0x9a>
 800b9a4:	782c      	ldrb	r4, [r5, #0]
 800b9a6:	2701      	movs	r7, #1
 800b9a8:	1cb5      	adds	r5, r6, #2
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d05b      	beq.n	800ba66 <_strtol_l.constprop.0+0xf6>
 800b9ae:	2b10      	cmp	r3, #16
 800b9b0:	d109      	bne.n	800b9c6 <_strtol_l.constprop.0+0x56>
 800b9b2:	2c30      	cmp	r4, #48	; 0x30
 800b9b4:	d107      	bne.n	800b9c6 <_strtol_l.constprop.0+0x56>
 800b9b6:	782c      	ldrb	r4, [r5, #0]
 800b9b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b9bc:	2c58      	cmp	r4, #88	; 0x58
 800b9be:	d14d      	bne.n	800ba5c <_strtol_l.constprop.0+0xec>
 800b9c0:	786c      	ldrb	r4, [r5, #1]
 800b9c2:	2310      	movs	r3, #16
 800b9c4:	3502      	adds	r5, #2
 800b9c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b9ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9ce:	f04f 0c00 	mov.w	ip, #0
 800b9d2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b9d6:	4666      	mov	r6, ip
 800b9d8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b9dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b9e0:	f1be 0f09 	cmp.w	lr, #9
 800b9e4:	d816      	bhi.n	800ba14 <_strtol_l.constprop.0+0xa4>
 800b9e6:	4674      	mov	r4, lr
 800b9e8:	42a3      	cmp	r3, r4
 800b9ea:	dd24      	ble.n	800ba36 <_strtol_l.constprop.0+0xc6>
 800b9ec:	f1bc 0f00 	cmp.w	ip, #0
 800b9f0:	db1e      	blt.n	800ba30 <_strtol_l.constprop.0+0xc0>
 800b9f2:	45b1      	cmp	r9, r6
 800b9f4:	d31c      	bcc.n	800ba30 <_strtol_l.constprop.0+0xc0>
 800b9f6:	d101      	bne.n	800b9fc <_strtol_l.constprop.0+0x8c>
 800b9f8:	45a2      	cmp	sl, r4
 800b9fa:	db19      	blt.n	800ba30 <_strtol_l.constprop.0+0xc0>
 800b9fc:	fb06 4603 	mla	r6, r6, r3, r4
 800ba00:	f04f 0c01 	mov.w	ip, #1
 800ba04:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba08:	e7e8      	b.n	800b9dc <_strtol_l.constprop.0+0x6c>
 800ba0a:	2c2b      	cmp	r4, #43	; 0x2b
 800ba0c:	bf04      	itt	eq
 800ba0e:	782c      	ldrbeq	r4, [r5, #0]
 800ba10:	1cb5      	addeq	r5, r6, #2
 800ba12:	e7ca      	b.n	800b9aa <_strtol_l.constprop.0+0x3a>
 800ba14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ba18:	f1be 0f19 	cmp.w	lr, #25
 800ba1c:	d801      	bhi.n	800ba22 <_strtol_l.constprop.0+0xb2>
 800ba1e:	3c37      	subs	r4, #55	; 0x37
 800ba20:	e7e2      	b.n	800b9e8 <_strtol_l.constprop.0+0x78>
 800ba22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ba26:	f1be 0f19 	cmp.w	lr, #25
 800ba2a:	d804      	bhi.n	800ba36 <_strtol_l.constprop.0+0xc6>
 800ba2c:	3c57      	subs	r4, #87	; 0x57
 800ba2e:	e7db      	b.n	800b9e8 <_strtol_l.constprop.0+0x78>
 800ba30:	f04f 3cff 	mov.w	ip, #4294967295
 800ba34:	e7e6      	b.n	800ba04 <_strtol_l.constprop.0+0x94>
 800ba36:	f1bc 0f00 	cmp.w	ip, #0
 800ba3a:	da05      	bge.n	800ba48 <_strtol_l.constprop.0+0xd8>
 800ba3c:	2322      	movs	r3, #34	; 0x22
 800ba3e:	6003      	str	r3, [r0, #0]
 800ba40:	4646      	mov	r6, r8
 800ba42:	b942      	cbnz	r2, 800ba56 <_strtol_l.constprop.0+0xe6>
 800ba44:	4630      	mov	r0, r6
 800ba46:	e79e      	b.n	800b986 <_strtol_l.constprop.0+0x16>
 800ba48:	b107      	cbz	r7, 800ba4c <_strtol_l.constprop.0+0xdc>
 800ba4a:	4276      	negs	r6, r6
 800ba4c:	2a00      	cmp	r2, #0
 800ba4e:	d0f9      	beq.n	800ba44 <_strtol_l.constprop.0+0xd4>
 800ba50:	f1bc 0f00 	cmp.w	ip, #0
 800ba54:	d000      	beq.n	800ba58 <_strtol_l.constprop.0+0xe8>
 800ba56:	1e69      	subs	r1, r5, #1
 800ba58:	6011      	str	r1, [r2, #0]
 800ba5a:	e7f3      	b.n	800ba44 <_strtol_l.constprop.0+0xd4>
 800ba5c:	2430      	movs	r4, #48	; 0x30
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1b1      	bne.n	800b9c6 <_strtol_l.constprop.0+0x56>
 800ba62:	2308      	movs	r3, #8
 800ba64:	e7af      	b.n	800b9c6 <_strtol_l.constprop.0+0x56>
 800ba66:	2c30      	cmp	r4, #48	; 0x30
 800ba68:	d0a5      	beq.n	800b9b6 <_strtol_l.constprop.0+0x46>
 800ba6a:	230a      	movs	r3, #10
 800ba6c:	e7ab      	b.n	800b9c6 <_strtol_l.constprop.0+0x56>
 800ba6e:	bf00      	nop
 800ba70:	0800e9cd 	.word	0x0800e9cd

0800ba74 <_strtol_r>:
 800ba74:	f7ff bf7c 	b.w	800b970 <_strtol_l.constprop.0>

0800ba78 <__assert_func>:
 800ba78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba7a:	4614      	mov	r4, r2
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	4b09      	ldr	r3, [pc, #36]	; (800baa4 <__assert_func+0x2c>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	4605      	mov	r5, r0
 800ba84:	68d8      	ldr	r0, [r3, #12]
 800ba86:	b14c      	cbz	r4, 800ba9c <__assert_func+0x24>
 800ba88:	4b07      	ldr	r3, [pc, #28]	; (800baa8 <__assert_func+0x30>)
 800ba8a:	9100      	str	r1, [sp, #0]
 800ba8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba90:	4906      	ldr	r1, [pc, #24]	; (800baac <__assert_func+0x34>)
 800ba92:	462b      	mov	r3, r5
 800ba94:	f000 fe8a 	bl	800c7ac <fiprintf>
 800ba98:	f002 fb90 	bl	800e1bc <abort>
 800ba9c:	4b04      	ldr	r3, [pc, #16]	; (800bab0 <__assert_func+0x38>)
 800ba9e:	461c      	mov	r4, r3
 800baa0:	e7f3      	b.n	800ba8a <__assert_func+0x12>
 800baa2:	bf00      	nop
 800baa4:	2000003c 	.word	0x2000003c
 800baa8:	0800e990 	.word	0x0800e990
 800baac:	0800e99d 	.word	0x0800e99d
 800bab0:	0800e9cb 	.word	0x0800e9cb

0800bab4 <quorem>:
 800bab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab8:	6903      	ldr	r3, [r0, #16]
 800baba:	690c      	ldr	r4, [r1, #16]
 800babc:	42a3      	cmp	r3, r4
 800babe:	4607      	mov	r7, r0
 800bac0:	f2c0 8081 	blt.w	800bbc6 <quorem+0x112>
 800bac4:	3c01      	subs	r4, #1
 800bac6:	f101 0814 	add.w	r8, r1, #20
 800baca:	f100 0514 	add.w	r5, r0, #20
 800bace:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bad2:	9301      	str	r3, [sp, #4]
 800bad4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bad8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800badc:	3301      	adds	r3, #1
 800bade:	429a      	cmp	r2, r3
 800bae0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bae4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bae8:	fbb2 f6f3 	udiv	r6, r2, r3
 800baec:	d331      	bcc.n	800bb52 <quorem+0x9e>
 800baee:	f04f 0e00 	mov.w	lr, #0
 800baf2:	4640      	mov	r0, r8
 800baf4:	46ac      	mov	ip, r5
 800baf6:	46f2      	mov	sl, lr
 800baf8:	f850 2b04 	ldr.w	r2, [r0], #4
 800bafc:	b293      	uxth	r3, r2
 800bafe:	fb06 e303 	mla	r3, r6, r3, lr
 800bb02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	ebaa 0303 	sub.w	r3, sl, r3
 800bb0c:	f8dc a000 	ldr.w	sl, [ip]
 800bb10:	0c12      	lsrs	r2, r2, #16
 800bb12:	fa13 f38a 	uxtah	r3, r3, sl
 800bb16:	fb06 e202 	mla	r2, r6, r2, lr
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	9b00      	ldr	r3, [sp, #0]
 800bb1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb22:	b292      	uxth	r2, r2
 800bb24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bb28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb2c:	f8bd 3000 	ldrh.w	r3, [sp]
 800bb30:	4581      	cmp	r9, r0
 800bb32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb36:	f84c 3b04 	str.w	r3, [ip], #4
 800bb3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bb3e:	d2db      	bcs.n	800baf8 <quorem+0x44>
 800bb40:	f855 300b 	ldr.w	r3, [r5, fp]
 800bb44:	b92b      	cbnz	r3, 800bb52 <quorem+0x9e>
 800bb46:	9b01      	ldr	r3, [sp, #4]
 800bb48:	3b04      	subs	r3, #4
 800bb4a:	429d      	cmp	r5, r3
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	d32e      	bcc.n	800bbae <quorem+0xfa>
 800bb50:	613c      	str	r4, [r7, #16]
 800bb52:	4638      	mov	r0, r7
 800bb54:	f001 fc96 	bl	800d484 <__mcmp>
 800bb58:	2800      	cmp	r0, #0
 800bb5a:	db24      	blt.n	800bba6 <quorem+0xf2>
 800bb5c:	3601      	adds	r6, #1
 800bb5e:	4628      	mov	r0, r5
 800bb60:	f04f 0c00 	mov.w	ip, #0
 800bb64:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb68:	f8d0 e000 	ldr.w	lr, [r0]
 800bb6c:	b293      	uxth	r3, r2
 800bb6e:	ebac 0303 	sub.w	r3, ip, r3
 800bb72:	0c12      	lsrs	r2, r2, #16
 800bb74:	fa13 f38e 	uxtah	r3, r3, lr
 800bb78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bb7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb86:	45c1      	cmp	r9, r8
 800bb88:	f840 3b04 	str.w	r3, [r0], #4
 800bb8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb90:	d2e8      	bcs.n	800bb64 <quorem+0xb0>
 800bb92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb9a:	b922      	cbnz	r2, 800bba6 <quorem+0xf2>
 800bb9c:	3b04      	subs	r3, #4
 800bb9e:	429d      	cmp	r5, r3
 800bba0:	461a      	mov	r2, r3
 800bba2:	d30a      	bcc.n	800bbba <quorem+0x106>
 800bba4:	613c      	str	r4, [r7, #16]
 800bba6:	4630      	mov	r0, r6
 800bba8:	b003      	add	sp, #12
 800bbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbae:	6812      	ldr	r2, [r2, #0]
 800bbb0:	3b04      	subs	r3, #4
 800bbb2:	2a00      	cmp	r2, #0
 800bbb4:	d1cc      	bne.n	800bb50 <quorem+0x9c>
 800bbb6:	3c01      	subs	r4, #1
 800bbb8:	e7c7      	b.n	800bb4a <quorem+0x96>
 800bbba:	6812      	ldr	r2, [r2, #0]
 800bbbc:	3b04      	subs	r3, #4
 800bbbe:	2a00      	cmp	r2, #0
 800bbc0:	d1f0      	bne.n	800bba4 <quorem+0xf0>
 800bbc2:	3c01      	subs	r4, #1
 800bbc4:	e7eb      	b.n	800bb9e <quorem+0xea>
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	e7ee      	b.n	800bba8 <quorem+0xf4>
 800bbca:	0000      	movs	r0, r0
 800bbcc:	0000      	movs	r0, r0
	...

0800bbd0 <_dtoa_r>:
 800bbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	ed2d 8b04 	vpush	{d8-d9}
 800bbd8:	ec57 6b10 	vmov	r6, r7, d0
 800bbdc:	b093      	sub	sp, #76	; 0x4c
 800bbde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bbe0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bbe4:	9106      	str	r1, [sp, #24]
 800bbe6:	ee10 aa10 	vmov	sl, s0
 800bbea:	4604      	mov	r4, r0
 800bbec:	9209      	str	r2, [sp, #36]	; 0x24
 800bbee:	930c      	str	r3, [sp, #48]	; 0x30
 800bbf0:	46bb      	mov	fp, r7
 800bbf2:	b975      	cbnz	r5, 800bc12 <_dtoa_r+0x42>
 800bbf4:	2010      	movs	r0, #16
 800bbf6:	f001 f95f 	bl	800ceb8 <malloc>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	6260      	str	r0, [r4, #36]	; 0x24
 800bbfe:	b920      	cbnz	r0, 800bc0a <_dtoa_r+0x3a>
 800bc00:	4ba7      	ldr	r3, [pc, #668]	; (800bea0 <_dtoa_r+0x2d0>)
 800bc02:	21ea      	movs	r1, #234	; 0xea
 800bc04:	48a7      	ldr	r0, [pc, #668]	; (800bea4 <_dtoa_r+0x2d4>)
 800bc06:	f7ff ff37 	bl	800ba78 <__assert_func>
 800bc0a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bc0e:	6005      	str	r5, [r0, #0]
 800bc10:	60c5      	str	r5, [r0, #12]
 800bc12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc14:	6819      	ldr	r1, [r3, #0]
 800bc16:	b151      	cbz	r1, 800bc2e <_dtoa_r+0x5e>
 800bc18:	685a      	ldr	r2, [r3, #4]
 800bc1a:	604a      	str	r2, [r1, #4]
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	4093      	lsls	r3, r2
 800bc20:	608b      	str	r3, [r1, #8]
 800bc22:	4620      	mov	r0, r4
 800bc24:	f001 f9a2 	bl	800cf6c <_Bfree>
 800bc28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	601a      	str	r2, [r3, #0]
 800bc2e:	1e3b      	subs	r3, r7, #0
 800bc30:	bfaa      	itet	ge
 800bc32:	2300      	movge	r3, #0
 800bc34:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bc38:	f8c8 3000 	strge.w	r3, [r8]
 800bc3c:	4b9a      	ldr	r3, [pc, #616]	; (800bea8 <_dtoa_r+0x2d8>)
 800bc3e:	bfbc      	itt	lt
 800bc40:	2201      	movlt	r2, #1
 800bc42:	f8c8 2000 	strlt.w	r2, [r8]
 800bc46:	ea33 030b 	bics.w	r3, r3, fp
 800bc4a:	d11b      	bne.n	800bc84 <_dtoa_r+0xb4>
 800bc4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc4e:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc52:	6013      	str	r3, [r2, #0]
 800bc54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc58:	4333      	orrs	r3, r6
 800bc5a:	f000 8592 	beq.w	800c782 <_dtoa_r+0xbb2>
 800bc5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc60:	b963      	cbnz	r3, 800bc7c <_dtoa_r+0xac>
 800bc62:	4b92      	ldr	r3, [pc, #584]	; (800beac <_dtoa_r+0x2dc>)
 800bc64:	e022      	b.n	800bcac <_dtoa_r+0xdc>
 800bc66:	4b92      	ldr	r3, [pc, #584]	; (800beb0 <_dtoa_r+0x2e0>)
 800bc68:	9301      	str	r3, [sp, #4]
 800bc6a:	3308      	adds	r3, #8
 800bc6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	9801      	ldr	r0, [sp, #4]
 800bc72:	b013      	add	sp, #76	; 0x4c
 800bc74:	ecbd 8b04 	vpop	{d8-d9}
 800bc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7c:	4b8b      	ldr	r3, [pc, #556]	; (800beac <_dtoa_r+0x2dc>)
 800bc7e:	9301      	str	r3, [sp, #4]
 800bc80:	3303      	adds	r3, #3
 800bc82:	e7f3      	b.n	800bc6c <_dtoa_r+0x9c>
 800bc84:	2200      	movs	r2, #0
 800bc86:	2300      	movs	r3, #0
 800bc88:	4650      	mov	r0, sl
 800bc8a:	4659      	mov	r1, fp
 800bc8c:	f7f4 ff44 	bl	8000b18 <__aeabi_dcmpeq>
 800bc90:	ec4b ab19 	vmov	d9, sl, fp
 800bc94:	4680      	mov	r8, r0
 800bc96:	b158      	cbz	r0, 800bcb0 <_dtoa_r+0xe0>
 800bc98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	6013      	str	r3, [r2, #0]
 800bc9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f000 856b 	beq.w	800c77c <_dtoa_r+0xbac>
 800bca6:	4883      	ldr	r0, [pc, #524]	; (800beb4 <_dtoa_r+0x2e4>)
 800bca8:	6018      	str	r0, [r3, #0]
 800bcaa:	1e43      	subs	r3, r0, #1
 800bcac:	9301      	str	r3, [sp, #4]
 800bcae:	e7df      	b.n	800bc70 <_dtoa_r+0xa0>
 800bcb0:	ec4b ab10 	vmov	d0, sl, fp
 800bcb4:	aa10      	add	r2, sp, #64	; 0x40
 800bcb6:	a911      	add	r1, sp, #68	; 0x44
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f001 fd05 	bl	800d6c8 <__d2b>
 800bcbe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bcc2:	ee08 0a10 	vmov	s16, r0
 800bcc6:	2d00      	cmp	r5, #0
 800bcc8:	f000 8084 	beq.w	800bdd4 <_dtoa_r+0x204>
 800bccc:	ee19 3a90 	vmov	r3, s19
 800bcd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcd4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bcd8:	4656      	mov	r6, sl
 800bcda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bcde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bce2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bce6:	4b74      	ldr	r3, [pc, #464]	; (800beb8 <_dtoa_r+0x2e8>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	4630      	mov	r0, r6
 800bcec:	4639      	mov	r1, r7
 800bcee:	f7f4 faf3 	bl	80002d8 <__aeabi_dsub>
 800bcf2:	a365      	add	r3, pc, #404	; (adr r3, 800be88 <_dtoa_r+0x2b8>)
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	f7f4 fca6 	bl	8000648 <__aeabi_dmul>
 800bcfc:	a364      	add	r3, pc, #400	; (adr r3, 800be90 <_dtoa_r+0x2c0>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 faeb 	bl	80002dc <__adddf3>
 800bd06:	4606      	mov	r6, r0
 800bd08:	4628      	mov	r0, r5
 800bd0a:	460f      	mov	r7, r1
 800bd0c:	f7f4 fc32 	bl	8000574 <__aeabi_i2d>
 800bd10:	a361      	add	r3, pc, #388	; (adr r3, 800be98 <_dtoa_r+0x2c8>)
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	f7f4 fc97 	bl	8000648 <__aeabi_dmul>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	4630      	mov	r0, r6
 800bd20:	4639      	mov	r1, r7
 800bd22:	f7f4 fadb 	bl	80002dc <__adddf3>
 800bd26:	4606      	mov	r6, r0
 800bd28:	460f      	mov	r7, r1
 800bd2a:	f7f4 ff3d 	bl	8000ba8 <__aeabi_d2iz>
 800bd2e:	2200      	movs	r2, #0
 800bd30:	9000      	str	r0, [sp, #0]
 800bd32:	2300      	movs	r3, #0
 800bd34:	4630      	mov	r0, r6
 800bd36:	4639      	mov	r1, r7
 800bd38:	f7f4 fef8 	bl	8000b2c <__aeabi_dcmplt>
 800bd3c:	b150      	cbz	r0, 800bd54 <_dtoa_r+0x184>
 800bd3e:	9800      	ldr	r0, [sp, #0]
 800bd40:	f7f4 fc18 	bl	8000574 <__aeabi_i2d>
 800bd44:	4632      	mov	r2, r6
 800bd46:	463b      	mov	r3, r7
 800bd48:	f7f4 fee6 	bl	8000b18 <__aeabi_dcmpeq>
 800bd4c:	b910      	cbnz	r0, 800bd54 <_dtoa_r+0x184>
 800bd4e:	9b00      	ldr	r3, [sp, #0]
 800bd50:	3b01      	subs	r3, #1
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	9b00      	ldr	r3, [sp, #0]
 800bd56:	2b16      	cmp	r3, #22
 800bd58:	d85a      	bhi.n	800be10 <_dtoa_r+0x240>
 800bd5a:	9a00      	ldr	r2, [sp, #0]
 800bd5c:	4b57      	ldr	r3, [pc, #348]	; (800bebc <_dtoa_r+0x2ec>)
 800bd5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	ec51 0b19 	vmov	r0, r1, d9
 800bd6a:	f7f4 fedf 	bl	8000b2c <__aeabi_dcmplt>
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d050      	beq.n	800be14 <_dtoa_r+0x244>
 800bd72:	9b00      	ldr	r3, [sp, #0]
 800bd74:	3b01      	subs	r3, #1
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd7e:	1b5d      	subs	r5, r3, r5
 800bd80:	1e6b      	subs	r3, r5, #1
 800bd82:	9305      	str	r3, [sp, #20]
 800bd84:	bf45      	ittet	mi
 800bd86:	f1c5 0301 	rsbmi	r3, r5, #1
 800bd8a:	9304      	strmi	r3, [sp, #16]
 800bd8c:	2300      	movpl	r3, #0
 800bd8e:	2300      	movmi	r3, #0
 800bd90:	bf4c      	ite	mi
 800bd92:	9305      	strmi	r3, [sp, #20]
 800bd94:	9304      	strpl	r3, [sp, #16]
 800bd96:	9b00      	ldr	r3, [sp, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	db3d      	blt.n	800be18 <_dtoa_r+0x248>
 800bd9c:	9b05      	ldr	r3, [sp, #20]
 800bd9e:	9a00      	ldr	r2, [sp, #0]
 800bda0:	920a      	str	r2, [sp, #40]	; 0x28
 800bda2:	4413      	add	r3, r2
 800bda4:	9305      	str	r3, [sp, #20]
 800bda6:	2300      	movs	r3, #0
 800bda8:	9307      	str	r3, [sp, #28]
 800bdaa:	9b06      	ldr	r3, [sp, #24]
 800bdac:	2b09      	cmp	r3, #9
 800bdae:	f200 8089 	bhi.w	800bec4 <_dtoa_r+0x2f4>
 800bdb2:	2b05      	cmp	r3, #5
 800bdb4:	bfc4      	itt	gt
 800bdb6:	3b04      	subgt	r3, #4
 800bdb8:	9306      	strgt	r3, [sp, #24]
 800bdba:	9b06      	ldr	r3, [sp, #24]
 800bdbc:	f1a3 0302 	sub.w	r3, r3, #2
 800bdc0:	bfcc      	ite	gt
 800bdc2:	2500      	movgt	r5, #0
 800bdc4:	2501      	movle	r5, #1
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	f200 8087 	bhi.w	800beda <_dtoa_r+0x30a>
 800bdcc:	e8df f003 	tbb	[pc, r3]
 800bdd0:	59383a2d 	.word	0x59383a2d
 800bdd4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bdd8:	441d      	add	r5, r3
 800bdda:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bdde:	2b20      	cmp	r3, #32
 800bde0:	bfc1      	itttt	gt
 800bde2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bde6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bdea:	fa0b f303 	lslgt.w	r3, fp, r3
 800bdee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bdf2:	bfda      	itte	le
 800bdf4:	f1c3 0320 	rsble	r3, r3, #32
 800bdf8:	fa06 f003 	lslle.w	r0, r6, r3
 800bdfc:	4318      	orrgt	r0, r3
 800bdfe:	f7f4 fba9 	bl	8000554 <__aeabi_ui2d>
 800be02:	2301      	movs	r3, #1
 800be04:	4606      	mov	r6, r0
 800be06:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800be0a:	3d01      	subs	r5, #1
 800be0c:	930e      	str	r3, [sp, #56]	; 0x38
 800be0e:	e76a      	b.n	800bce6 <_dtoa_r+0x116>
 800be10:	2301      	movs	r3, #1
 800be12:	e7b2      	b.n	800bd7a <_dtoa_r+0x1aa>
 800be14:	900b      	str	r0, [sp, #44]	; 0x2c
 800be16:	e7b1      	b.n	800bd7c <_dtoa_r+0x1ac>
 800be18:	9b04      	ldr	r3, [sp, #16]
 800be1a:	9a00      	ldr	r2, [sp, #0]
 800be1c:	1a9b      	subs	r3, r3, r2
 800be1e:	9304      	str	r3, [sp, #16]
 800be20:	4253      	negs	r3, r2
 800be22:	9307      	str	r3, [sp, #28]
 800be24:	2300      	movs	r3, #0
 800be26:	930a      	str	r3, [sp, #40]	; 0x28
 800be28:	e7bf      	b.n	800bdaa <_dtoa_r+0x1da>
 800be2a:	2300      	movs	r3, #0
 800be2c:	9308      	str	r3, [sp, #32]
 800be2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be30:	2b00      	cmp	r3, #0
 800be32:	dc55      	bgt.n	800bee0 <_dtoa_r+0x310>
 800be34:	2301      	movs	r3, #1
 800be36:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800be3a:	461a      	mov	r2, r3
 800be3c:	9209      	str	r2, [sp, #36]	; 0x24
 800be3e:	e00c      	b.n	800be5a <_dtoa_r+0x28a>
 800be40:	2301      	movs	r3, #1
 800be42:	e7f3      	b.n	800be2c <_dtoa_r+0x25c>
 800be44:	2300      	movs	r3, #0
 800be46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be48:	9308      	str	r3, [sp, #32]
 800be4a:	9b00      	ldr	r3, [sp, #0]
 800be4c:	4413      	add	r3, r2
 800be4e:	9302      	str	r3, [sp, #8]
 800be50:	3301      	adds	r3, #1
 800be52:	2b01      	cmp	r3, #1
 800be54:	9303      	str	r3, [sp, #12]
 800be56:	bfb8      	it	lt
 800be58:	2301      	movlt	r3, #1
 800be5a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800be5c:	2200      	movs	r2, #0
 800be5e:	6042      	str	r2, [r0, #4]
 800be60:	2204      	movs	r2, #4
 800be62:	f102 0614 	add.w	r6, r2, #20
 800be66:	429e      	cmp	r6, r3
 800be68:	6841      	ldr	r1, [r0, #4]
 800be6a:	d93d      	bls.n	800bee8 <_dtoa_r+0x318>
 800be6c:	4620      	mov	r0, r4
 800be6e:	f001 f83d 	bl	800ceec <_Balloc>
 800be72:	9001      	str	r0, [sp, #4]
 800be74:	2800      	cmp	r0, #0
 800be76:	d13b      	bne.n	800bef0 <_dtoa_r+0x320>
 800be78:	4b11      	ldr	r3, [pc, #68]	; (800bec0 <_dtoa_r+0x2f0>)
 800be7a:	4602      	mov	r2, r0
 800be7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800be80:	e6c0      	b.n	800bc04 <_dtoa_r+0x34>
 800be82:	2301      	movs	r3, #1
 800be84:	e7df      	b.n	800be46 <_dtoa_r+0x276>
 800be86:	bf00      	nop
 800be88:	636f4361 	.word	0x636f4361
 800be8c:	3fd287a7 	.word	0x3fd287a7
 800be90:	8b60c8b3 	.word	0x8b60c8b3
 800be94:	3fc68a28 	.word	0x3fc68a28
 800be98:	509f79fb 	.word	0x509f79fb
 800be9c:	3fd34413 	.word	0x3fd34413
 800bea0:	0800eada 	.word	0x0800eada
 800bea4:	0800eaf1 	.word	0x0800eaf1
 800bea8:	7ff00000 	.word	0x7ff00000
 800beac:	0800ead6 	.word	0x0800ead6
 800beb0:	0800eacd 	.word	0x0800eacd
 800beb4:	0800e915 	.word	0x0800e915
 800beb8:	3ff80000 	.word	0x3ff80000
 800bebc:	0800ec60 	.word	0x0800ec60
 800bec0:	0800eb4c 	.word	0x0800eb4c
 800bec4:	2501      	movs	r5, #1
 800bec6:	2300      	movs	r3, #0
 800bec8:	9306      	str	r3, [sp, #24]
 800beca:	9508      	str	r5, [sp, #32]
 800becc:	f04f 33ff 	mov.w	r3, #4294967295
 800bed0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bed4:	2200      	movs	r2, #0
 800bed6:	2312      	movs	r3, #18
 800bed8:	e7b0      	b.n	800be3c <_dtoa_r+0x26c>
 800beda:	2301      	movs	r3, #1
 800bedc:	9308      	str	r3, [sp, #32]
 800bede:	e7f5      	b.n	800becc <_dtoa_r+0x2fc>
 800bee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bee2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bee6:	e7b8      	b.n	800be5a <_dtoa_r+0x28a>
 800bee8:	3101      	adds	r1, #1
 800beea:	6041      	str	r1, [r0, #4]
 800beec:	0052      	lsls	r2, r2, #1
 800beee:	e7b8      	b.n	800be62 <_dtoa_r+0x292>
 800bef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bef2:	9a01      	ldr	r2, [sp, #4]
 800bef4:	601a      	str	r2, [r3, #0]
 800bef6:	9b03      	ldr	r3, [sp, #12]
 800bef8:	2b0e      	cmp	r3, #14
 800befa:	f200 809d 	bhi.w	800c038 <_dtoa_r+0x468>
 800befe:	2d00      	cmp	r5, #0
 800bf00:	f000 809a 	beq.w	800c038 <_dtoa_r+0x468>
 800bf04:	9b00      	ldr	r3, [sp, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	dd32      	ble.n	800bf70 <_dtoa_r+0x3a0>
 800bf0a:	4ab7      	ldr	r2, [pc, #732]	; (800c1e8 <_dtoa_r+0x618>)
 800bf0c:	f003 030f 	and.w	r3, r3, #15
 800bf10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bf14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf18:	9b00      	ldr	r3, [sp, #0]
 800bf1a:	05d8      	lsls	r0, r3, #23
 800bf1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bf20:	d516      	bpl.n	800bf50 <_dtoa_r+0x380>
 800bf22:	4bb2      	ldr	r3, [pc, #712]	; (800c1ec <_dtoa_r+0x61c>)
 800bf24:	ec51 0b19 	vmov	r0, r1, d9
 800bf28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf2c:	f7f4 fcb6 	bl	800089c <__aeabi_ddiv>
 800bf30:	f007 070f 	and.w	r7, r7, #15
 800bf34:	4682      	mov	sl, r0
 800bf36:	468b      	mov	fp, r1
 800bf38:	2503      	movs	r5, #3
 800bf3a:	4eac      	ldr	r6, [pc, #688]	; (800c1ec <_dtoa_r+0x61c>)
 800bf3c:	b957      	cbnz	r7, 800bf54 <_dtoa_r+0x384>
 800bf3e:	4642      	mov	r2, r8
 800bf40:	464b      	mov	r3, r9
 800bf42:	4650      	mov	r0, sl
 800bf44:	4659      	mov	r1, fp
 800bf46:	f7f4 fca9 	bl	800089c <__aeabi_ddiv>
 800bf4a:	4682      	mov	sl, r0
 800bf4c:	468b      	mov	fp, r1
 800bf4e:	e028      	b.n	800bfa2 <_dtoa_r+0x3d2>
 800bf50:	2502      	movs	r5, #2
 800bf52:	e7f2      	b.n	800bf3a <_dtoa_r+0x36a>
 800bf54:	07f9      	lsls	r1, r7, #31
 800bf56:	d508      	bpl.n	800bf6a <_dtoa_r+0x39a>
 800bf58:	4640      	mov	r0, r8
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf60:	f7f4 fb72 	bl	8000648 <__aeabi_dmul>
 800bf64:	3501      	adds	r5, #1
 800bf66:	4680      	mov	r8, r0
 800bf68:	4689      	mov	r9, r1
 800bf6a:	107f      	asrs	r7, r7, #1
 800bf6c:	3608      	adds	r6, #8
 800bf6e:	e7e5      	b.n	800bf3c <_dtoa_r+0x36c>
 800bf70:	f000 809b 	beq.w	800c0aa <_dtoa_r+0x4da>
 800bf74:	9b00      	ldr	r3, [sp, #0]
 800bf76:	4f9d      	ldr	r7, [pc, #628]	; (800c1ec <_dtoa_r+0x61c>)
 800bf78:	425e      	negs	r6, r3
 800bf7a:	4b9b      	ldr	r3, [pc, #620]	; (800c1e8 <_dtoa_r+0x618>)
 800bf7c:	f006 020f 	and.w	r2, r6, #15
 800bf80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf88:	ec51 0b19 	vmov	r0, r1, d9
 800bf8c:	f7f4 fb5c 	bl	8000648 <__aeabi_dmul>
 800bf90:	1136      	asrs	r6, r6, #4
 800bf92:	4682      	mov	sl, r0
 800bf94:	468b      	mov	fp, r1
 800bf96:	2300      	movs	r3, #0
 800bf98:	2502      	movs	r5, #2
 800bf9a:	2e00      	cmp	r6, #0
 800bf9c:	d17a      	bne.n	800c094 <_dtoa_r+0x4c4>
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1d3      	bne.n	800bf4a <_dtoa_r+0x37a>
 800bfa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f000 8082 	beq.w	800c0ae <_dtoa_r+0x4de>
 800bfaa:	4b91      	ldr	r3, [pc, #580]	; (800c1f0 <_dtoa_r+0x620>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	4650      	mov	r0, sl
 800bfb0:	4659      	mov	r1, fp
 800bfb2:	f7f4 fdbb 	bl	8000b2c <__aeabi_dcmplt>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d079      	beq.n	800c0ae <_dtoa_r+0x4de>
 800bfba:	9b03      	ldr	r3, [sp, #12]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d076      	beq.n	800c0ae <_dtoa_r+0x4de>
 800bfc0:	9b02      	ldr	r3, [sp, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	dd36      	ble.n	800c034 <_dtoa_r+0x464>
 800bfc6:	9b00      	ldr	r3, [sp, #0]
 800bfc8:	4650      	mov	r0, sl
 800bfca:	4659      	mov	r1, fp
 800bfcc:	1e5f      	subs	r7, r3, #1
 800bfce:	2200      	movs	r2, #0
 800bfd0:	4b88      	ldr	r3, [pc, #544]	; (800c1f4 <_dtoa_r+0x624>)
 800bfd2:	f7f4 fb39 	bl	8000648 <__aeabi_dmul>
 800bfd6:	9e02      	ldr	r6, [sp, #8]
 800bfd8:	4682      	mov	sl, r0
 800bfda:	468b      	mov	fp, r1
 800bfdc:	3501      	adds	r5, #1
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f7f4 fac8 	bl	8000574 <__aeabi_i2d>
 800bfe4:	4652      	mov	r2, sl
 800bfe6:	465b      	mov	r3, fp
 800bfe8:	f7f4 fb2e 	bl	8000648 <__aeabi_dmul>
 800bfec:	4b82      	ldr	r3, [pc, #520]	; (800c1f8 <_dtoa_r+0x628>)
 800bfee:	2200      	movs	r2, #0
 800bff0:	f7f4 f974 	bl	80002dc <__adddf3>
 800bff4:	46d0      	mov	r8, sl
 800bff6:	46d9      	mov	r9, fp
 800bff8:	4682      	mov	sl, r0
 800bffa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bffe:	2e00      	cmp	r6, #0
 800c000:	d158      	bne.n	800c0b4 <_dtoa_r+0x4e4>
 800c002:	4b7e      	ldr	r3, [pc, #504]	; (800c1fc <_dtoa_r+0x62c>)
 800c004:	2200      	movs	r2, #0
 800c006:	4640      	mov	r0, r8
 800c008:	4649      	mov	r1, r9
 800c00a:	f7f4 f965 	bl	80002d8 <__aeabi_dsub>
 800c00e:	4652      	mov	r2, sl
 800c010:	465b      	mov	r3, fp
 800c012:	4680      	mov	r8, r0
 800c014:	4689      	mov	r9, r1
 800c016:	f7f4 fda7 	bl	8000b68 <__aeabi_dcmpgt>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	f040 8295 	bne.w	800c54a <_dtoa_r+0x97a>
 800c020:	4652      	mov	r2, sl
 800c022:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c026:	4640      	mov	r0, r8
 800c028:	4649      	mov	r1, r9
 800c02a:	f7f4 fd7f 	bl	8000b2c <__aeabi_dcmplt>
 800c02e:	2800      	cmp	r0, #0
 800c030:	f040 8289 	bne.w	800c546 <_dtoa_r+0x976>
 800c034:	ec5b ab19 	vmov	sl, fp, d9
 800c038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	f2c0 8148 	blt.w	800c2d0 <_dtoa_r+0x700>
 800c040:	9a00      	ldr	r2, [sp, #0]
 800c042:	2a0e      	cmp	r2, #14
 800c044:	f300 8144 	bgt.w	800c2d0 <_dtoa_r+0x700>
 800c048:	4b67      	ldr	r3, [pc, #412]	; (800c1e8 <_dtoa_r+0x618>)
 800c04a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c04e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c054:	2b00      	cmp	r3, #0
 800c056:	f280 80d5 	bge.w	800c204 <_dtoa_r+0x634>
 800c05a:	9b03      	ldr	r3, [sp, #12]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f300 80d1 	bgt.w	800c204 <_dtoa_r+0x634>
 800c062:	f040 826f 	bne.w	800c544 <_dtoa_r+0x974>
 800c066:	4b65      	ldr	r3, [pc, #404]	; (800c1fc <_dtoa_r+0x62c>)
 800c068:	2200      	movs	r2, #0
 800c06a:	4640      	mov	r0, r8
 800c06c:	4649      	mov	r1, r9
 800c06e:	f7f4 faeb 	bl	8000648 <__aeabi_dmul>
 800c072:	4652      	mov	r2, sl
 800c074:	465b      	mov	r3, fp
 800c076:	f7f4 fd6d 	bl	8000b54 <__aeabi_dcmpge>
 800c07a:	9e03      	ldr	r6, [sp, #12]
 800c07c:	4637      	mov	r7, r6
 800c07e:	2800      	cmp	r0, #0
 800c080:	f040 8245 	bne.w	800c50e <_dtoa_r+0x93e>
 800c084:	9d01      	ldr	r5, [sp, #4]
 800c086:	2331      	movs	r3, #49	; 0x31
 800c088:	f805 3b01 	strb.w	r3, [r5], #1
 800c08c:	9b00      	ldr	r3, [sp, #0]
 800c08e:	3301      	adds	r3, #1
 800c090:	9300      	str	r3, [sp, #0]
 800c092:	e240      	b.n	800c516 <_dtoa_r+0x946>
 800c094:	07f2      	lsls	r2, r6, #31
 800c096:	d505      	bpl.n	800c0a4 <_dtoa_r+0x4d4>
 800c098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c09c:	f7f4 fad4 	bl	8000648 <__aeabi_dmul>
 800c0a0:	3501      	adds	r5, #1
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	1076      	asrs	r6, r6, #1
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	e777      	b.n	800bf9a <_dtoa_r+0x3ca>
 800c0aa:	2502      	movs	r5, #2
 800c0ac:	e779      	b.n	800bfa2 <_dtoa_r+0x3d2>
 800c0ae:	9f00      	ldr	r7, [sp, #0]
 800c0b0:	9e03      	ldr	r6, [sp, #12]
 800c0b2:	e794      	b.n	800bfde <_dtoa_r+0x40e>
 800c0b4:	9901      	ldr	r1, [sp, #4]
 800c0b6:	4b4c      	ldr	r3, [pc, #304]	; (800c1e8 <_dtoa_r+0x618>)
 800c0b8:	4431      	add	r1, r6
 800c0ba:	910d      	str	r1, [sp, #52]	; 0x34
 800c0bc:	9908      	ldr	r1, [sp, #32]
 800c0be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c0c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c0c6:	2900      	cmp	r1, #0
 800c0c8:	d043      	beq.n	800c152 <_dtoa_r+0x582>
 800c0ca:	494d      	ldr	r1, [pc, #308]	; (800c200 <_dtoa_r+0x630>)
 800c0cc:	2000      	movs	r0, #0
 800c0ce:	f7f4 fbe5 	bl	800089c <__aeabi_ddiv>
 800c0d2:	4652      	mov	r2, sl
 800c0d4:	465b      	mov	r3, fp
 800c0d6:	f7f4 f8ff 	bl	80002d8 <__aeabi_dsub>
 800c0da:	9d01      	ldr	r5, [sp, #4]
 800c0dc:	4682      	mov	sl, r0
 800c0de:	468b      	mov	fp, r1
 800c0e0:	4649      	mov	r1, r9
 800c0e2:	4640      	mov	r0, r8
 800c0e4:	f7f4 fd60 	bl	8000ba8 <__aeabi_d2iz>
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	f7f4 fa43 	bl	8000574 <__aeabi_i2d>
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	460b      	mov	r3, r1
 800c0f2:	4640      	mov	r0, r8
 800c0f4:	4649      	mov	r1, r9
 800c0f6:	f7f4 f8ef 	bl	80002d8 <__aeabi_dsub>
 800c0fa:	3630      	adds	r6, #48	; 0x30
 800c0fc:	f805 6b01 	strb.w	r6, [r5], #1
 800c100:	4652      	mov	r2, sl
 800c102:	465b      	mov	r3, fp
 800c104:	4680      	mov	r8, r0
 800c106:	4689      	mov	r9, r1
 800c108:	f7f4 fd10 	bl	8000b2c <__aeabi_dcmplt>
 800c10c:	2800      	cmp	r0, #0
 800c10e:	d163      	bne.n	800c1d8 <_dtoa_r+0x608>
 800c110:	4642      	mov	r2, r8
 800c112:	464b      	mov	r3, r9
 800c114:	4936      	ldr	r1, [pc, #216]	; (800c1f0 <_dtoa_r+0x620>)
 800c116:	2000      	movs	r0, #0
 800c118:	f7f4 f8de 	bl	80002d8 <__aeabi_dsub>
 800c11c:	4652      	mov	r2, sl
 800c11e:	465b      	mov	r3, fp
 800c120:	f7f4 fd04 	bl	8000b2c <__aeabi_dcmplt>
 800c124:	2800      	cmp	r0, #0
 800c126:	f040 80b5 	bne.w	800c294 <_dtoa_r+0x6c4>
 800c12a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c12c:	429d      	cmp	r5, r3
 800c12e:	d081      	beq.n	800c034 <_dtoa_r+0x464>
 800c130:	4b30      	ldr	r3, [pc, #192]	; (800c1f4 <_dtoa_r+0x624>)
 800c132:	2200      	movs	r2, #0
 800c134:	4650      	mov	r0, sl
 800c136:	4659      	mov	r1, fp
 800c138:	f7f4 fa86 	bl	8000648 <__aeabi_dmul>
 800c13c:	4b2d      	ldr	r3, [pc, #180]	; (800c1f4 <_dtoa_r+0x624>)
 800c13e:	4682      	mov	sl, r0
 800c140:	468b      	mov	fp, r1
 800c142:	4640      	mov	r0, r8
 800c144:	4649      	mov	r1, r9
 800c146:	2200      	movs	r2, #0
 800c148:	f7f4 fa7e 	bl	8000648 <__aeabi_dmul>
 800c14c:	4680      	mov	r8, r0
 800c14e:	4689      	mov	r9, r1
 800c150:	e7c6      	b.n	800c0e0 <_dtoa_r+0x510>
 800c152:	4650      	mov	r0, sl
 800c154:	4659      	mov	r1, fp
 800c156:	f7f4 fa77 	bl	8000648 <__aeabi_dmul>
 800c15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c15c:	9d01      	ldr	r5, [sp, #4]
 800c15e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c160:	4682      	mov	sl, r0
 800c162:	468b      	mov	fp, r1
 800c164:	4649      	mov	r1, r9
 800c166:	4640      	mov	r0, r8
 800c168:	f7f4 fd1e 	bl	8000ba8 <__aeabi_d2iz>
 800c16c:	4606      	mov	r6, r0
 800c16e:	f7f4 fa01 	bl	8000574 <__aeabi_i2d>
 800c172:	3630      	adds	r6, #48	; 0x30
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	4640      	mov	r0, r8
 800c17a:	4649      	mov	r1, r9
 800c17c:	f7f4 f8ac 	bl	80002d8 <__aeabi_dsub>
 800c180:	f805 6b01 	strb.w	r6, [r5], #1
 800c184:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c186:	429d      	cmp	r5, r3
 800c188:	4680      	mov	r8, r0
 800c18a:	4689      	mov	r9, r1
 800c18c:	f04f 0200 	mov.w	r2, #0
 800c190:	d124      	bne.n	800c1dc <_dtoa_r+0x60c>
 800c192:	4b1b      	ldr	r3, [pc, #108]	; (800c200 <_dtoa_r+0x630>)
 800c194:	4650      	mov	r0, sl
 800c196:	4659      	mov	r1, fp
 800c198:	f7f4 f8a0 	bl	80002dc <__adddf3>
 800c19c:	4602      	mov	r2, r0
 800c19e:	460b      	mov	r3, r1
 800c1a0:	4640      	mov	r0, r8
 800c1a2:	4649      	mov	r1, r9
 800c1a4:	f7f4 fce0 	bl	8000b68 <__aeabi_dcmpgt>
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	d173      	bne.n	800c294 <_dtoa_r+0x6c4>
 800c1ac:	4652      	mov	r2, sl
 800c1ae:	465b      	mov	r3, fp
 800c1b0:	4913      	ldr	r1, [pc, #76]	; (800c200 <_dtoa_r+0x630>)
 800c1b2:	2000      	movs	r0, #0
 800c1b4:	f7f4 f890 	bl	80002d8 <__aeabi_dsub>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	4640      	mov	r0, r8
 800c1be:	4649      	mov	r1, r9
 800c1c0:	f7f4 fcb4 	bl	8000b2c <__aeabi_dcmplt>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	f43f af35 	beq.w	800c034 <_dtoa_r+0x464>
 800c1ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c1cc:	1e6b      	subs	r3, r5, #1
 800c1ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c1d4:	2b30      	cmp	r3, #48	; 0x30
 800c1d6:	d0f8      	beq.n	800c1ca <_dtoa_r+0x5fa>
 800c1d8:	9700      	str	r7, [sp, #0]
 800c1da:	e049      	b.n	800c270 <_dtoa_r+0x6a0>
 800c1dc:	4b05      	ldr	r3, [pc, #20]	; (800c1f4 <_dtoa_r+0x624>)
 800c1de:	f7f4 fa33 	bl	8000648 <__aeabi_dmul>
 800c1e2:	4680      	mov	r8, r0
 800c1e4:	4689      	mov	r9, r1
 800c1e6:	e7bd      	b.n	800c164 <_dtoa_r+0x594>
 800c1e8:	0800ec60 	.word	0x0800ec60
 800c1ec:	0800ec38 	.word	0x0800ec38
 800c1f0:	3ff00000 	.word	0x3ff00000
 800c1f4:	40240000 	.word	0x40240000
 800c1f8:	401c0000 	.word	0x401c0000
 800c1fc:	40140000 	.word	0x40140000
 800c200:	3fe00000 	.word	0x3fe00000
 800c204:	9d01      	ldr	r5, [sp, #4]
 800c206:	4656      	mov	r6, sl
 800c208:	465f      	mov	r7, fp
 800c20a:	4642      	mov	r2, r8
 800c20c:	464b      	mov	r3, r9
 800c20e:	4630      	mov	r0, r6
 800c210:	4639      	mov	r1, r7
 800c212:	f7f4 fb43 	bl	800089c <__aeabi_ddiv>
 800c216:	f7f4 fcc7 	bl	8000ba8 <__aeabi_d2iz>
 800c21a:	4682      	mov	sl, r0
 800c21c:	f7f4 f9aa 	bl	8000574 <__aeabi_i2d>
 800c220:	4642      	mov	r2, r8
 800c222:	464b      	mov	r3, r9
 800c224:	f7f4 fa10 	bl	8000648 <__aeabi_dmul>
 800c228:	4602      	mov	r2, r0
 800c22a:	460b      	mov	r3, r1
 800c22c:	4630      	mov	r0, r6
 800c22e:	4639      	mov	r1, r7
 800c230:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c234:	f7f4 f850 	bl	80002d8 <__aeabi_dsub>
 800c238:	f805 6b01 	strb.w	r6, [r5], #1
 800c23c:	9e01      	ldr	r6, [sp, #4]
 800c23e:	9f03      	ldr	r7, [sp, #12]
 800c240:	1bae      	subs	r6, r5, r6
 800c242:	42b7      	cmp	r7, r6
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	d135      	bne.n	800c2b6 <_dtoa_r+0x6e6>
 800c24a:	f7f4 f847 	bl	80002dc <__adddf3>
 800c24e:	4642      	mov	r2, r8
 800c250:	464b      	mov	r3, r9
 800c252:	4606      	mov	r6, r0
 800c254:	460f      	mov	r7, r1
 800c256:	f7f4 fc87 	bl	8000b68 <__aeabi_dcmpgt>
 800c25a:	b9d0      	cbnz	r0, 800c292 <_dtoa_r+0x6c2>
 800c25c:	4642      	mov	r2, r8
 800c25e:	464b      	mov	r3, r9
 800c260:	4630      	mov	r0, r6
 800c262:	4639      	mov	r1, r7
 800c264:	f7f4 fc58 	bl	8000b18 <__aeabi_dcmpeq>
 800c268:	b110      	cbz	r0, 800c270 <_dtoa_r+0x6a0>
 800c26a:	f01a 0f01 	tst.w	sl, #1
 800c26e:	d110      	bne.n	800c292 <_dtoa_r+0x6c2>
 800c270:	4620      	mov	r0, r4
 800c272:	ee18 1a10 	vmov	r1, s16
 800c276:	f000 fe79 	bl	800cf6c <_Bfree>
 800c27a:	2300      	movs	r3, #0
 800c27c:	9800      	ldr	r0, [sp, #0]
 800c27e:	702b      	strb	r3, [r5, #0]
 800c280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c282:	3001      	adds	r0, #1
 800c284:	6018      	str	r0, [r3, #0]
 800c286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f43f acf1 	beq.w	800bc70 <_dtoa_r+0xa0>
 800c28e:	601d      	str	r5, [r3, #0]
 800c290:	e4ee      	b.n	800bc70 <_dtoa_r+0xa0>
 800c292:	9f00      	ldr	r7, [sp, #0]
 800c294:	462b      	mov	r3, r5
 800c296:	461d      	mov	r5, r3
 800c298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c29c:	2a39      	cmp	r2, #57	; 0x39
 800c29e:	d106      	bne.n	800c2ae <_dtoa_r+0x6de>
 800c2a0:	9a01      	ldr	r2, [sp, #4]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d1f7      	bne.n	800c296 <_dtoa_r+0x6c6>
 800c2a6:	9901      	ldr	r1, [sp, #4]
 800c2a8:	2230      	movs	r2, #48	; 0x30
 800c2aa:	3701      	adds	r7, #1
 800c2ac:	700a      	strb	r2, [r1, #0]
 800c2ae:	781a      	ldrb	r2, [r3, #0]
 800c2b0:	3201      	adds	r2, #1
 800c2b2:	701a      	strb	r2, [r3, #0]
 800c2b4:	e790      	b.n	800c1d8 <_dtoa_r+0x608>
 800c2b6:	4ba6      	ldr	r3, [pc, #664]	; (800c550 <_dtoa_r+0x980>)
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f7f4 f9c5 	bl	8000648 <__aeabi_dmul>
 800c2be:	2200      	movs	r2, #0
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	4606      	mov	r6, r0
 800c2c4:	460f      	mov	r7, r1
 800c2c6:	f7f4 fc27 	bl	8000b18 <__aeabi_dcmpeq>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	d09d      	beq.n	800c20a <_dtoa_r+0x63a>
 800c2ce:	e7cf      	b.n	800c270 <_dtoa_r+0x6a0>
 800c2d0:	9a08      	ldr	r2, [sp, #32]
 800c2d2:	2a00      	cmp	r2, #0
 800c2d4:	f000 80d7 	beq.w	800c486 <_dtoa_r+0x8b6>
 800c2d8:	9a06      	ldr	r2, [sp, #24]
 800c2da:	2a01      	cmp	r2, #1
 800c2dc:	f300 80ba 	bgt.w	800c454 <_dtoa_r+0x884>
 800c2e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2e2:	2a00      	cmp	r2, #0
 800c2e4:	f000 80b2 	beq.w	800c44c <_dtoa_r+0x87c>
 800c2e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c2ec:	9e07      	ldr	r6, [sp, #28]
 800c2ee:	9d04      	ldr	r5, [sp, #16]
 800c2f0:	9a04      	ldr	r2, [sp, #16]
 800c2f2:	441a      	add	r2, r3
 800c2f4:	9204      	str	r2, [sp, #16]
 800c2f6:	9a05      	ldr	r2, [sp, #20]
 800c2f8:	2101      	movs	r1, #1
 800c2fa:	441a      	add	r2, r3
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	9205      	str	r2, [sp, #20]
 800c300:	f000 ff36 	bl	800d170 <__i2b>
 800c304:	4607      	mov	r7, r0
 800c306:	2d00      	cmp	r5, #0
 800c308:	dd0c      	ble.n	800c324 <_dtoa_r+0x754>
 800c30a:	9b05      	ldr	r3, [sp, #20]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	dd09      	ble.n	800c324 <_dtoa_r+0x754>
 800c310:	42ab      	cmp	r3, r5
 800c312:	9a04      	ldr	r2, [sp, #16]
 800c314:	bfa8      	it	ge
 800c316:	462b      	movge	r3, r5
 800c318:	1ad2      	subs	r2, r2, r3
 800c31a:	9204      	str	r2, [sp, #16]
 800c31c:	9a05      	ldr	r2, [sp, #20]
 800c31e:	1aed      	subs	r5, r5, r3
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	9305      	str	r3, [sp, #20]
 800c324:	9b07      	ldr	r3, [sp, #28]
 800c326:	b31b      	cbz	r3, 800c370 <_dtoa_r+0x7a0>
 800c328:	9b08      	ldr	r3, [sp, #32]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f000 80af 	beq.w	800c48e <_dtoa_r+0x8be>
 800c330:	2e00      	cmp	r6, #0
 800c332:	dd13      	ble.n	800c35c <_dtoa_r+0x78c>
 800c334:	4639      	mov	r1, r7
 800c336:	4632      	mov	r2, r6
 800c338:	4620      	mov	r0, r4
 800c33a:	f000 ffd9 	bl	800d2f0 <__pow5mult>
 800c33e:	ee18 2a10 	vmov	r2, s16
 800c342:	4601      	mov	r1, r0
 800c344:	4607      	mov	r7, r0
 800c346:	4620      	mov	r0, r4
 800c348:	f000 ff28 	bl	800d19c <__multiply>
 800c34c:	ee18 1a10 	vmov	r1, s16
 800c350:	4680      	mov	r8, r0
 800c352:	4620      	mov	r0, r4
 800c354:	f000 fe0a 	bl	800cf6c <_Bfree>
 800c358:	ee08 8a10 	vmov	s16, r8
 800c35c:	9b07      	ldr	r3, [sp, #28]
 800c35e:	1b9a      	subs	r2, r3, r6
 800c360:	d006      	beq.n	800c370 <_dtoa_r+0x7a0>
 800c362:	ee18 1a10 	vmov	r1, s16
 800c366:	4620      	mov	r0, r4
 800c368:	f000 ffc2 	bl	800d2f0 <__pow5mult>
 800c36c:	ee08 0a10 	vmov	s16, r0
 800c370:	2101      	movs	r1, #1
 800c372:	4620      	mov	r0, r4
 800c374:	f000 fefc 	bl	800d170 <__i2b>
 800c378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	4606      	mov	r6, r0
 800c37e:	f340 8088 	ble.w	800c492 <_dtoa_r+0x8c2>
 800c382:	461a      	mov	r2, r3
 800c384:	4601      	mov	r1, r0
 800c386:	4620      	mov	r0, r4
 800c388:	f000 ffb2 	bl	800d2f0 <__pow5mult>
 800c38c:	9b06      	ldr	r3, [sp, #24]
 800c38e:	2b01      	cmp	r3, #1
 800c390:	4606      	mov	r6, r0
 800c392:	f340 8081 	ble.w	800c498 <_dtoa_r+0x8c8>
 800c396:	f04f 0800 	mov.w	r8, #0
 800c39a:	6933      	ldr	r3, [r6, #16]
 800c39c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c3a0:	6918      	ldr	r0, [r3, #16]
 800c3a2:	f000 fe95 	bl	800d0d0 <__hi0bits>
 800c3a6:	f1c0 0020 	rsb	r0, r0, #32
 800c3aa:	9b05      	ldr	r3, [sp, #20]
 800c3ac:	4418      	add	r0, r3
 800c3ae:	f010 001f 	ands.w	r0, r0, #31
 800c3b2:	f000 8092 	beq.w	800c4da <_dtoa_r+0x90a>
 800c3b6:	f1c0 0320 	rsb	r3, r0, #32
 800c3ba:	2b04      	cmp	r3, #4
 800c3bc:	f340 808a 	ble.w	800c4d4 <_dtoa_r+0x904>
 800c3c0:	f1c0 001c 	rsb	r0, r0, #28
 800c3c4:	9b04      	ldr	r3, [sp, #16]
 800c3c6:	4403      	add	r3, r0
 800c3c8:	9304      	str	r3, [sp, #16]
 800c3ca:	9b05      	ldr	r3, [sp, #20]
 800c3cc:	4403      	add	r3, r0
 800c3ce:	4405      	add	r5, r0
 800c3d0:	9305      	str	r3, [sp, #20]
 800c3d2:	9b04      	ldr	r3, [sp, #16]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	dd07      	ble.n	800c3e8 <_dtoa_r+0x818>
 800c3d8:	ee18 1a10 	vmov	r1, s16
 800c3dc:	461a      	mov	r2, r3
 800c3de:	4620      	mov	r0, r4
 800c3e0:	f000 ffe0 	bl	800d3a4 <__lshift>
 800c3e4:	ee08 0a10 	vmov	s16, r0
 800c3e8:	9b05      	ldr	r3, [sp, #20]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	dd05      	ble.n	800c3fa <_dtoa_r+0x82a>
 800c3ee:	4631      	mov	r1, r6
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f000 ffd6 	bl	800d3a4 <__lshift>
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d06e      	beq.n	800c4de <_dtoa_r+0x90e>
 800c400:	ee18 0a10 	vmov	r0, s16
 800c404:	4631      	mov	r1, r6
 800c406:	f001 f83d 	bl	800d484 <__mcmp>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	da67      	bge.n	800c4de <_dtoa_r+0x90e>
 800c40e:	9b00      	ldr	r3, [sp, #0]
 800c410:	3b01      	subs	r3, #1
 800c412:	ee18 1a10 	vmov	r1, s16
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	220a      	movs	r2, #10
 800c41a:	2300      	movs	r3, #0
 800c41c:	4620      	mov	r0, r4
 800c41e:	f000 fdc7 	bl	800cfb0 <__multadd>
 800c422:	9b08      	ldr	r3, [sp, #32]
 800c424:	ee08 0a10 	vmov	s16, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f000 81b1 	beq.w	800c790 <_dtoa_r+0xbc0>
 800c42e:	2300      	movs	r3, #0
 800c430:	4639      	mov	r1, r7
 800c432:	220a      	movs	r2, #10
 800c434:	4620      	mov	r0, r4
 800c436:	f000 fdbb 	bl	800cfb0 <__multadd>
 800c43a:	9b02      	ldr	r3, [sp, #8]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	4607      	mov	r7, r0
 800c440:	f300 808e 	bgt.w	800c560 <_dtoa_r+0x990>
 800c444:	9b06      	ldr	r3, [sp, #24]
 800c446:	2b02      	cmp	r3, #2
 800c448:	dc51      	bgt.n	800c4ee <_dtoa_r+0x91e>
 800c44a:	e089      	b.n	800c560 <_dtoa_r+0x990>
 800c44c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c44e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c452:	e74b      	b.n	800c2ec <_dtoa_r+0x71c>
 800c454:	9b03      	ldr	r3, [sp, #12]
 800c456:	1e5e      	subs	r6, r3, #1
 800c458:	9b07      	ldr	r3, [sp, #28]
 800c45a:	42b3      	cmp	r3, r6
 800c45c:	bfbf      	itttt	lt
 800c45e:	9b07      	ldrlt	r3, [sp, #28]
 800c460:	9607      	strlt	r6, [sp, #28]
 800c462:	1af2      	sublt	r2, r6, r3
 800c464:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c466:	bfb6      	itet	lt
 800c468:	189b      	addlt	r3, r3, r2
 800c46a:	1b9e      	subge	r6, r3, r6
 800c46c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c46e:	9b03      	ldr	r3, [sp, #12]
 800c470:	bfb8      	it	lt
 800c472:	2600      	movlt	r6, #0
 800c474:	2b00      	cmp	r3, #0
 800c476:	bfb7      	itett	lt
 800c478:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c47c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c480:	1a9d      	sublt	r5, r3, r2
 800c482:	2300      	movlt	r3, #0
 800c484:	e734      	b.n	800c2f0 <_dtoa_r+0x720>
 800c486:	9e07      	ldr	r6, [sp, #28]
 800c488:	9d04      	ldr	r5, [sp, #16]
 800c48a:	9f08      	ldr	r7, [sp, #32]
 800c48c:	e73b      	b.n	800c306 <_dtoa_r+0x736>
 800c48e:	9a07      	ldr	r2, [sp, #28]
 800c490:	e767      	b.n	800c362 <_dtoa_r+0x792>
 800c492:	9b06      	ldr	r3, [sp, #24]
 800c494:	2b01      	cmp	r3, #1
 800c496:	dc18      	bgt.n	800c4ca <_dtoa_r+0x8fa>
 800c498:	f1ba 0f00 	cmp.w	sl, #0
 800c49c:	d115      	bne.n	800c4ca <_dtoa_r+0x8fa>
 800c49e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4a2:	b993      	cbnz	r3, 800c4ca <_dtoa_r+0x8fa>
 800c4a4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c4a8:	0d1b      	lsrs	r3, r3, #20
 800c4aa:	051b      	lsls	r3, r3, #20
 800c4ac:	b183      	cbz	r3, 800c4d0 <_dtoa_r+0x900>
 800c4ae:	9b04      	ldr	r3, [sp, #16]
 800c4b0:	3301      	adds	r3, #1
 800c4b2:	9304      	str	r3, [sp, #16]
 800c4b4:	9b05      	ldr	r3, [sp, #20]
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	9305      	str	r3, [sp, #20]
 800c4ba:	f04f 0801 	mov.w	r8, #1
 800c4be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f47f af6a 	bne.w	800c39a <_dtoa_r+0x7ca>
 800c4c6:	2001      	movs	r0, #1
 800c4c8:	e76f      	b.n	800c3aa <_dtoa_r+0x7da>
 800c4ca:	f04f 0800 	mov.w	r8, #0
 800c4ce:	e7f6      	b.n	800c4be <_dtoa_r+0x8ee>
 800c4d0:	4698      	mov	r8, r3
 800c4d2:	e7f4      	b.n	800c4be <_dtoa_r+0x8ee>
 800c4d4:	f43f af7d 	beq.w	800c3d2 <_dtoa_r+0x802>
 800c4d8:	4618      	mov	r0, r3
 800c4da:	301c      	adds	r0, #28
 800c4dc:	e772      	b.n	800c3c4 <_dtoa_r+0x7f4>
 800c4de:	9b03      	ldr	r3, [sp, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	dc37      	bgt.n	800c554 <_dtoa_r+0x984>
 800c4e4:	9b06      	ldr	r3, [sp, #24]
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	dd34      	ble.n	800c554 <_dtoa_r+0x984>
 800c4ea:	9b03      	ldr	r3, [sp, #12]
 800c4ec:	9302      	str	r3, [sp, #8]
 800c4ee:	9b02      	ldr	r3, [sp, #8]
 800c4f0:	b96b      	cbnz	r3, 800c50e <_dtoa_r+0x93e>
 800c4f2:	4631      	mov	r1, r6
 800c4f4:	2205      	movs	r2, #5
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f000 fd5a 	bl	800cfb0 <__multadd>
 800c4fc:	4601      	mov	r1, r0
 800c4fe:	4606      	mov	r6, r0
 800c500:	ee18 0a10 	vmov	r0, s16
 800c504:	f000 ffbe 	bl	800d484 <__mcmp>
 800c508:	2800      	cmp	r0, #0
 800c50a:	f73f adbb 	bgt.w	800c084 <_dtoa_r+0x4b4>
 800c50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c510:	9d01      	ldr	r5, [sp, #4]
 800c512:	43db      	mvns	r3, r3
 800c514:	9300      	str	r3, [sp, #0]
 800c516:	f04f 0800 	mov.w	r8, #0
 800c51a:	4631      	mov	r1, r6
 800c51c:	4620      	mov	r0, r4
 800c51e:	f000 fd25 	bl	800cf6c <_Bfree>
 800c522:	2f00      	cmp	r7, #0
 800c524:	f43f aea4 	beq.w	800c270 <_dtoa_r+0x6a0>
 800c528:	f1b8 0f00 	cmp.w	r8, #0
 800c52c:	d005      	beq.n	800c53a <_dtoa_r+0x96a>
 800c52e:	45b8      	cmp	r8, r7
 800c530:	d003      	beq.n	800c53a <_dtoa_r+0x96a>
 800c532:	4641      	mov	r1, r8
 800c534:	4620      	mov	r0, r4
 800c536:	f000 fd19 	bl	800cf6c <_Bfree>
 800c53a:	4639      	mov	r1, r7
 800c53c:	4620      	mov	r0, r4
 800c53e:	f000 fd15 	bl	800cf6c <_Bfree>
 800c542:	e695      	b.n	800c270 <_dtoa_r+0x6a0>
 800c544:	2600      	movs	r6, #0
 800c546:	4637      	mov	r7, r6
 800c548:	e7e1      	b.n	800c50e <_dtoa_r+0x93e>
 800c54a:	9700      	str	r7, [sp, #0]
 800c54c:	4637      	mov	r7, r6
 800c54e:	e599      	b.n	800c084 <_dtoa_r+0x4b4>
 800c550:	40240000 	.word	0x40240000
 800c554:	9b08      	ldr	r3, [sp, #32]
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 80ca 	beq.w	800c6f0 <_dtoa_r+0xb20>
 800c55c:	9b03      	ldr	r3, [sp, #12]
 800c55e:	9302      	str	r3, [sp, #8]
 800c560:	2d00      	cmp	r5, #0
 800c562:	dd05      	ble.n	800c570 <_dtoa_r+0x9a0>
 800c564:	4639      	mov	r1, r7
 800c566:	462a      	mov	r2, r5
 800c568:	4620      	mov	r0, r4
 800c56a:	f000 ff1b 	bl	800d3a4 <__lshift>
 800c56e:	4607      	mov	r7, r0
 800c570:	f1b8 0f00 	cmp.w	r8, #0
 800c574:	d05b      	beq.n	800c62e <_dtoa_r+0xa5e>
 800c576:	6879      	ldr	r1, [r7, #4]
 800c578:	4620      	mov	r0, r4
 800c57a:	f000 fcb7 	bl	800ceec <_Balloc>
 800c57e:	4605      	mov	r5, r0
 800c580:	b928      	cbnz	r0, 800c58e <_dtoa_r+0x9be>
 800c582:	4b87      	ldr	r3, [pc, #540]	; (800c7a0 <_dtoa_r+0xbd0>)
 800c584:	4602      	mov	r2, r0
 800c586:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c58a:	f7ff bb3b 	b.w	800bc04 <_dtoa_r+0x34>
 800c58e:	693a      	ldr	r2, [r7, #16]
 800c590:	3202      	adds	r2, #2
 800c592:	0092      	lsls	r2, r2, #2
 800c594:	f107 010c 	add.w	r1, r7, #12
 800c598:	300c      	adds	r0, #12
 800c59a:	f7fd fd09 	bl	8009fb0 <memcpy>
 800c59e:	2201      	movs	r2, #1
 800c5a0:	4629      	mov	r1, r5
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f000 fefe 	bl	800d3a4 <__lshift>
 800c5a8:	9b01      	ldr	r3, [sp, #4]
 800c5aa:	f103 0901 	add.w	r9, r3, #1
 800c5ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	9305      	str	r3, [sp, #20]
 800c5b6:	f00a 0301 	and.w	r3, sl, #1
 800c5ba:	46b8      	mov	r8, r7
 800c5bc:	9304      	str	r3, [sp, #16]
 800c5be:	4607      	mov	r7, r0
 800c5c0:	4631      	mov	r1, r6
 800c5c2:	ee18 0a10 	vmov	r0, s16
 800c5c6:	f7ff fa75 	bl	800bab4 <quorem>
 800c5ca:	4641      	mov	r1, r8
 800c5cc:	9002      	str	r0, [sp, #8]
 800c5ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c5d2:	ee18 0a10 	vmov	r0, s16
 800c5d6:	f000 ff55 	bl	800d484 <__mcmp>
 800c5da:	463a      	mov	r2, r7
 800c5dc:	9003      	str	r0, [sp, #12]
 800c5de:	4631      	mov	r1, r6
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f000 ff6b 	bl	800d4bc <__mdiff>
 800c5e6:	68c2      	ldr	r2, [r0, #12]
 800c5e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c5ec:	4605      	mov	r5, r0
 800c5ee:	bb02      	cbnz	r2, 800c632 <_dtoa_r+0xa62>
 800c5f0:	4601      	mov	r1, r0
 800c5f2:	ee18 0a10 	vmov	r0, s16
 800c5f6:	f000 ff45 	bl	800d484 <__mcmp>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	4629      	mov	r1, r5
 800c5fe:	4620      	mov	r0, r4
 800c600:	9207      	str	r2, [sp, #28]
 800c602:	f000 fcb3 	bl	800cf6c <_Bfree>
 800c606:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c60a:	ea43 0102 	orr.w	r1, r3, r2
 800c60e:	9b04      	ldr	r3, [sp, #16]
 800c610:	430b      	orrs	r3, r1
 800c612:	464d      	mov	r5, r9
 800c614:	d10f      	bne.n	800c636 <_dtoa_r+0xa66>
 800c616:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c61a:	d02a      	beq.n	800c672 <_dtoa_r+0xaa2>
 800c61c:	9b03      	ldr	r3, [sp, #12]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	dd02      	ble.n	800c628 <_dtoa_r+0xa58>
 800c622:	9b02      	ldr	r3, [sp, #8]
 800c624:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c628:	f88b a000 	strb.w	sl, [fp]
 800c62c:	e775      	b.n	800c51a <_dtoa_r+0x94a>
 800c62e:	4638      	mov	r0, r7
 800c630:	e7ba      	b.n	800c5a8 <_dtoa_r+0x9d8>
 800c632:	2201      	movs	r2, #1
 800c634:	e7e2      	b.n	800c5fc <_dtoa_r+0xa2c>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	db04      	blt.n	800c646 <_dtoa_r+0xa76>
 800c63c:	9906      	ldr	r1, [sp, #24]
 800c63e:	430b      	orrs	r3, r1
 800c640:	9904      	ldr	r1, [sp, #16]
 800c642:	430b      	orrs	r3, r1
 800c644:	d122      	bne.n	800c68c <_dtoa_r+0xabc>
 800c646:	2a00      	cmp	r2, #0
 800c648:	ddee      	ble.n	800c628 <_dtoa_r+0xa58>
 800c64a:	ee18 1a10 	vmov	r1, s16
 800c64e:	2201      	movs	r2, #1
 800c650:	4620      	mov	r0, r4
 800c652:	f000 fea7 	bl	800d3a4 <__lshift>
 800c656:	4631      	mov	r1, r6
 800c658:	ee08 0a10 	vmov	s16, r0
 800c65c:	f000 ff12 	bl	800d484 <__mcmp>
 800c660:	2800      	cmp	r0, #0
 800c662:	dc03      	bgt.n	800c66c <_dtoa_r+0xa9c>
 800c664:	d1e0      	bne.n	800c628 <_dtoa_r+0xa58>
 800c666:	f01a 0f01 	tst.w	sl, #1
 800c66a:	d0dd      	beq.n	800c628 <_dtoa_r+0xa58>
 800c66c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c670:	d1d7      	bne.n	800c622 <_dtoa_r+0xa52>
 800c672:	2339      	movs	r3, #57	; 0x39
 800c674:	f88b 3000 	strb.w	r3, [fp]
 800c678:	462b      	mov	r3, r5
 800c67a:	461d      	mov	r5, r3
 800c67c:	3b01      	subs	r3, #1
 800c67e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c682:	2a39      	cmp	r2, #57	; 0x39
 800c684:	d071      	beq.n	800c76a <_dtoa_r+0xb9a>
 800c686:	3201      	adds	r2, #1
 800c688:	701a      	strb	r2, [r3, #0]
 800c68a:	e746      	b.n	800c51a <_dtoa_r+0x94a>
 800c68c:	2a00      	cmp	r2, #0
 800c68e:	dd07      	ble.n	800c6a0 <_dtoa_r+0xad0>
 800c690:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c694:	d0ed      	beq.n	800c672 <_dtoa_r+0xaa2>
 800c696:	f10a 0301 	add.w	r3, sl, #1
 800c69a:	f88b 3000 	strb.w	r3, [fp]
 800c69e:	e73c      	b.n	800c51a <_dtoa_r+0x94a>
 800c6a0:	9b05      	ldr	r3, [sp, #20]
 800c6a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c6a6:	4599      	cmp	r9, r3
 800c6a8:	d047      	beq.n	800c73a <_dtoa_r+0xb6a>
 800c6aa:	ee18 1a10 	vmov	r1, s16
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	220a      	movs	r2, #10
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f000 fc7c 	bl	800cfb0 <__multadd>
 800c6b8:	45b8      	cmp	r8, r7
 800c6ba:	ee08 0a10 	vmov	s16, r0
 800c6be:	f04f 0300 	mov.w	r3, #0
 800c6c2:	f04f 020a 	mov.w	r2, #10
 800c6c6:	4641      	mov	r1, r8
 800c6c8:	4620      	mov	r0, r4
 800c6ca:	d106      	bne.n	800c6da <_dtoa_r+0xb0a>
 800c6cc:	f000 fc70 	bl	800cfb0 <__multadd>
 800c6d0:	4680      	mov	r8, r0
 800c6d2:	4607      	mov	r7, r0
 800c6d4:	f109 0901 	add.w	r9, r9, #1
 800c6d8:	e772      	b.n	800c5c0 <_dtoa_r+0x9f0>
 800c6da:	f000 fc69 	bl	800cfb0 <__multadd>
 800c6de:	4639      	mov	r1, r7
 800c6e0:	4680      	mov	r8, r0
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	220a      	movs	r2, #10
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f000 fc62 	bl	800cfb0 <__multadd>
 800c6ec:	4607      	mov	r7, r0
 800c6ee:	e7f1      	b.n	800c6d4 <_dtoa_r+0xb04>
 800c6f0:	9b03      	ldr	r3, [sp, #12]
 800c6f2:	9302      	str	r3, [sp, #8]
 800c6f4:	9d01      	ldr	r5, [sp, #4]
 800c6f6:	ee18 0a10 	vmov	r0, s16
 800c6fa:	4631      	mov	r1, r6
 800c6fc:	f7ff f9da 	bl	800bab4 <quorem>
 800c700:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c704:	9b01      	ldr	r3, [sp, #4]
 800c706:	f805 ab01 	strb.w	sl, [r5], #1
 800c70a:	1aea      	subs	r2, r5, r3
 800c70c:	9b02      	ldr	r3, [sp, #8]
 800c70e:	4293      	cmp	r3, r2
 800c710:	dd09      	ble.n	800c726 <_dtoa_r+0xb56>
 800c712:	ee18 1a10 	vmov	r1, s16
 800c716:	2300      	movs	r3, #0
 800c718:	220a      	movs	r2, #10
 800c71a:	4620      	mov	r0, r4
 800c71c:	f000 fc48 	bl	800cfb0 <__multadd>
 800c720:	ee08 0a10 	vmov	s16, r0
 800c724:	e7e7      	b.n	800c6f6 <_dtoa_r+0xb26>
 800c726:	9b02      	ldr	r3, [sp, #8]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	bfc8      	it	gt
 800c72c:	461d      	movgt	r5, r3
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	bfd8      	it	le
 800c732:	2501      	movle	r5, #1
 800c734:	441d      	add	r5, r3
 800c736:	f04f 0800 	mov.w	r8, #0
 800c73a:	ee18 1a10 	vmov	r1, s16
 800c73e:	2201      	movs	r2, #1
 800c740:	4620      	mov	r0, r4
 800c742:	f000 fe2f 	bl	800d3a4 <__lshift>
 800c746:	4631      	mov	r1, r6
 800c748:	ee08 0a10 	vmov	s16, r0
 800c74c:	f000 fe9a 	bl	800d484 <__mcmp>
 800c750:	2800      	cmp	r0, #0
 800c752:	dc91      	bgt.n	800c678 <_dtoa_r+0xaa8>
 800c754:	d102      	bne.n	800c75c <_dtoa_r+0xb8c>
 800c756:	f01a 0f01 	tst.w	sl, #1
 800c75a:	d18d      	bne.n	800c678 <_dtoa_r+0xaa8>
 800c75c:	462b      	mov	r3, r5
 800c75e:	461d      	mov	r5, r3
 800c760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c764:	2a30      	cmp	r2, #48	; 0x30
 800c766:	d0fa      	beq.n	800c75e <_dtoa_r+0xb8e>
 800c768:	e6d7      	b.n	800c51a <_dtoa_r+0x94a>
 800c76a:	9a01      	ldr	r2, [sp, #4]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d184      	bne.n	800c67a <_dtoa_r+0xaaa>
 800c770:	9b00      	ldr	r3, [sp, #0]
 800c772:	3301      	adds	r3, #1
 800c774:	9300      	str	r3, [sp, #0]
 800c776:	2331      	movs	r3, #49	; 0x31
 800c778:	7013      	strb	r3, [r2, #0]
 800c77a:	e6ce      	b.n	800c51a <_dtoa_r+0x94a>
 800c77c:	4b09      	ldr	r3, [pc, #36]	; (800c7a4 <_dtoa_r+0xbd4>)
 800c77e:	f7ff ba95 	b.w	800bcac <_dtoa_r+0xdc>
 800c782:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c784:	2b00      	cmp	r3, #0
 800c786:	f47f aa6e 	bne.w	800bc66 <_dtoa_r+0x96>
 800c78a:	4b07      	ldr	r3, [pc, #28]	; (800c7a8 <_dtoa_r+0xbd8>)
 800c78c:	f7ff ba8e 	b.w	800bcac <_dtoa_r+0xdc>
 800c790:	9b02      	ldr	r3, [sp, #8]
 800c792:	2b00      	cmp	r3, #0
 800c794:	dcae      	bgt.n	800c6f4 <_dtoa_r+0xb24>
 800c796:	9b06      	ldr	r3, [sp, #24]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	f73f aea8 	bgt.w	800c4ee <_dtoa_r+0x91e>
 800c79e:	e7a9      	b.n	800c6f4 <_dtoa_r+0xb24>
 800c7a0:	0800eb4c 	.word	0x0800eb4c
 800c7a4:	0800e914 	.word	0x0800e914
 800c7a8:	0800eacd 	.word	0x0800eacd

0800c7ac <fiprintf>:
 800c7ac:	b40e      	push	{r1, r2, r3}
 800c7ae:	b503      	push	{r0, r1, lr}
 800c7b0:	4601      	mov	r1, r0
 800c7b2:	ab03      	add	r3, sp, #12
 800c7b4:	4805      	ldr	r0, [pc, #20]	; (800c7cc <fiprintf+0x20>)
 800c7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ba:	6800      	ldr	r0, [r0, #0]
 800c7bc:	9301      	str	r3, [sp, #4]
 800c7be:	f001 fad3 	bl	800dd68 <_vfiprintf_r>
 800c7c2:	b002      	add	sp, #8
 800c7c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7c8:	b003      	add	sp, #12
 800c7ca:	4770      	bx	lr
 800c7cc:	2000003c 	.word	0x2000003c

0800c7d0 <rshift>:
 800c7d0:	6903      	ldr	r3, [r0, #16]
 800c7d2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c7d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7da:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c7de:	f100 0414 	add.w	r4, r0, #20
 800c7e2:	dd45      	ble.n	800c870 <rshift+0xa0>
 800c7e4:	f011 011f 	ands.w	r1, r1, #31
 800c7e8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c7ec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c7f0:	d10c      	bne.n	800c80c <rshift+0x3c>
 800c7f2:	f100 0710 	add.w	r7, r0, #16
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	42b1      	cmp	r1, r6
 800c7fa:	d334      	bcc.n	800c866 <rshift+0x96>
 800c7fc:	1a9b      	subs	r3, r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	1eea      	subs	r2, r5, #3
 800c802:	4296      	cmp	r6, r2
 800c804:	bf38      	it	cc
 800c806:	2300      	movcc	r3, #0
 800c808:	4423      	add	r3, r4
 800c80a:	e015      	b.n	800c838 <rshift+0x68>
 800c80c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c810:	f1c1 0820 	rsb	r8, r1, #32
 800c814:	40cf      	lsrs	r7, r1
 800c816:	f105 0e04 	add.w	lr, r5, #4
 800c81a:	46a1      	mov	r9, r4
 800c81c:	4576      	cmp	r6, lr
 800c81e:	46f4      	mov	ip, lr
 800c820:	d815      	bhi.n	800c84e <rshift+0x7e>
 800c822:	1a9a      	subs	r2, r3, r2
 800c824:	0092      	lsls	r2, r2, #2
 800c826:	3a04      	subs	r2, #4
 800c828:	3501      	adds	r5, #1
 800c82a:	42ae      	cmp	r6, r5
 800c82c:	bf38      	it	cc
 800c82e:	2200      	movcc	r2, #0
 800c830:	18a3      	adds	r3, r4, r2
 800c832:	50a7      	str	r7, [r4, r2]
 800c834:	b107      	cbz	r7, 800c838 <rshift+0x68>
 800c836:	3304      	adds	r3, #4
 800c838:	1b1a      	subs	r2, r3, r4
 800c83a:	42a3      	cmp	r3, r4
 800c83c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c840:	bf08      	it	eq
 800c842:	2300      	moveq	r3, #0
 800c844:	6102      	str	r2, [r0, #16]
 800c846:	bf08      	it	eq
 800c848:	6143      	streq	r3, [r0, #20]
 800c84a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c84e:	f8dc c000 	ldr.w	ip, [ip]
 800c852:	fa0c fc08 	lsl.w	ip, ip, r8
 800c856:	ea4c 0707 	orr.w	r7, ip, r7
 800c85a:	f849 7b04 	str.w	r7, [r9], #4
 800c85e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c862:	40cf      	lsrs	r7, r1
 800c864:	e7da      	b.n	800c81c <rshift+0x4c>
 800c866:	f851 cb04 	ldr.w	ip, [r1], #4
 800c86a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c86e:	e7c3      	b.n	800c7f8 <rshift+0x28>
 800c870:	4623      	mov	r3, r4
 800c872:	e7e1      	b.n	800c838 <rshift+0x68>

0800c874 <__hexdig_fun>:
 800c874:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c878:	2b09      	cmp	r3, #9
 800c87a:	d802      	bhi.n	800c882 <__hexdig_fun+0xe>
 800c87c:	3820      	subs	r0, #32
 800c87e:	b2c0      	uxtb	r0, r0
 800c880:	4770      	bx	lr
 800c882:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c886:	2b05      	cmp	r3, #5
 800c888:	d801      	bhi.n	800c88e <__hexdig_fun+0x1a>
 800c88a:	3847      	subs	r0, #71	; 0x47
 800c88c:	e7f7      	b.n	800c87e <__hexdig_fun+0xa>
 800c88e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c892:	2b05      	cmp	r3, #5
 800c894:	d801      	bhi.n	800c89a <__hexdig_fun+0x26>
 800c896:	3827      	subs	r0, #39	; 0x27
 800c898:	e7f1      	b.n	800c87e <__hexdig_fun+0xa>
 800c89a:	2000      	movs	r0, #0
 800c89c:	4770      	bx	lr
	...

0800c8a0 <__gethex>:
 800c8a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a4:	ed2d 8b02 	vpush	{d8}
 800c8a8:	b089      	sub	sp, #36	; 0x24
 800c8aa:	ee08 0a10 	vmov	s16, r0
 800c8ae:	9304      	str	r3, [sp, #16]
 800c8b0:	4bb4      	ldr	r3, [pc, #720]	; (800cb84 <__gethex+0x2e4>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	9301      	str	r3, [sp, #4]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	468b      	mov	fp, r1
 800c8ba:	4690      	mov	r8, r2
 800c8bc:	f7f3 fcb0 	bl	8000220 <strlen>
 800c8c0:	9b01      	ldr	r3, [sp, #4]
 800c8c2:	f8db 2000 	ldr.w	r2, [fp]
 800c8c6:	4403      	add	r3, r0
 800c8c8:	4682      	mov	sl, r0
 800c8ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c8ce:	9305      	str	r3, [sp, #20]
 800c8d0:	1c93      	adds	r3, r2, #2
 800c8d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c8d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c8da:	32fe      	adds	r2, #254	; 0xfe
 800c8dc:	18d1      	adds	r1, r2, r3
 800c8de:	461f      	mov	r7, r3
 800c8e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c8e4:	9100      	str	r1, [sp, #0]
 800c8e6:	2830      	cmp	r0, #48	; 0x30
 800c8e8:	d0f8      	beq.n	800c8dc <__gethex+0x3c>
 800c8ea:	f7ff ffc3 	bl	800c874 <__hexdig_fun>
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d13a      	bne.n	800c96a <__gethex+0xca>
 800c8f4:	9901      	ldr	r1, [sp, #4]
 800c8f6:	4652      	mov	r2, sl
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	f001 fb7d 	bl	800dff8 <strncmp>
 800c8fe:	4605      	mov	r5, r0
 800c900:	2800      	cmp	r0, #0
 800c902:	d168      	bne.n	800c9d6 <__gethex+0x136>
 800c904:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c908:	eb07 060a 	add.w	r6, r7, sl
 800c90c:	f7ff ffb2 	bl	800c874 <__hexdig_fun>
 800c910:	2800      	cmp	r0, #0
 800c912:	d062      	beq.n	800c9da <__gethex+0x13a>
 800c914:	4633      	mov	r3, r6
 800c916:	7818      	ldrb	r0, [r3, #0]
 800c918:	2830      	cmp	r0, #48	; 0x30
 800c91a:	461f      	mov	r7, r3
 800c91c:	f103 0301 	add.w	r3, r3, #1
 800c920:	d0f9      	beq.n	800c916 <__gethex+0x76>
 800c922:	f7ff ffa7 	bl	800c874 <__hexdig_fun>
 800c926:	2301      	movs	r3, #1
 800c928:	fab0 f480 	clz	r4, r0
 800c92c:	0964      	lsrs	r4, r4, #5
 800c92e:	4635      	mov	r5, r6
 800c930:	9300      	str	r3, [sp, #0]
 800c932:	463a      	mov	r2, r7
 800c934:	4616      	mov	r6, r2
 800c936:	3201      	adds	r2, #1
 800c938:	7830      	ldrb	r0, [r6, #0]
 800c93a:	f7ff ff9b 	bl	800c874 <__hexdig_fun>
 800c93e:	2800      	cmp	r0, #0
 800c940:	d1f8      	bne.n	800c934 <__gethex+0x94>
 800c942:	9901      	ldr	r1, [sp, #4]
 800c944:	4652      	mov	r2, sl
 800c946:	4630      	mov	r0, r6
 800c948:	f001 fb56 	bl	800dff8 <strncmp>
 800c94c:	b980      	cbnz	r0, 800c970 <__gethex+0xd0>
 800c94e:	b94d      	cbnz	r5, 800c964 <__gethex+0xc4>
 800c950:	eb06 050a 	add.w	r5, r6, sl
 800c954:	462a      	mov	r2, r5
 800c956:	4616      	mov	r6, r2
 800c958:	3201      	adds	r2, #1
 800c95a:	7830      	ldrb	r0, [r6, #0]
 800c95c:	f7ff ff8a 	bl	800c874 <__hexdig_fun>
 800c960:	2800      	cmp	r0, #0
 800c962:	d1f8      	bne.n	800c956 <__gethex+0xb6>
 800c964:	1bad      	subs	r5, r5, r6
 800c966:	00ad      	lsls	r5, r5, #2
 800c968:	e004      	b.n	800c974 <__gethex+0xd4>
 800c96a:	2400      	movs	r4, #0
 800c96c:	4625      	mov	r5, r4
 800c96e:	e7e0      	b.n	800c932 <__gethex+0x92>
 800c970:	2d00      	cmp	r5, #0
 800c972:	d1f7      	bne.n	800c964 <__gethex+0xc4>
 800c974:	7833      	ldrb	r3, [r6, #0]
 800c976:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c97a:	2b50      	cmp	r3, #80	; 0x50
 800c97c:	d13b      	bne.n	800c9f6 <__gethex+0x156>
 800c97e:	7873      	ldrb	r3, [r6, #1]
 800c980:	2b2b      	cmp	r3, #43	; 0x2b
 800c982:	d02c      	beq.n	800c9de <__gethex+0x13e>
 800c984:	2b2d      	cmp	r3, #45	; 0x2d
 800c986:	d02e      	beq.n	800c9e6 <__gethex+0x146>
 800c988:	1c71      	adds	r1, r6, #1
 800c98a:	f04f 0900 	mov.w	r9, #0
 800c98e:	7808      	ldrb	r0, [r1, #0]
 800c990:	f7ff ff70 	bl	800c874 <__hexdig_fun>
 800c994:	1e43      	subs	r3, r0, #1
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2b18      	cmp	r3, #24
 800c99a:	d82c      	bhi.n	800c9f6 <__gethex+0x156>
 800c99c:	f1a0 0210 	sub.w	r2, r0, #16
 800c9a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c9a4:	f7ff ff66 	bl	800c874 <__hexdig_fun>
 800c9a8:	1e43      	subs	r3, r0, #1
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	2b18      	cmp	r3, #24
 800c9ae:	d91d      	bls.n	800c9ec <__gethex+0x14c>
 800c9b0:	f1b9 0f00 	cmp.w	r9, #0
 800c9b4:	d000      	beq.n	800c9b8 <__gethex+0x118>
 800c9b6:	4252      	negs	r2, r2
 800c9b8:	4415      	add	r5, r2
 800c9ba:	f8cb 1000 	str.w	r1, [fp]
 800c9be:	b1e4      	cbz	r4, 800c9fa <__gethex+0x15a>
 800c9c0:	9b00      	ldr	r3, [sp, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	bf14      	ite	ne
 800c9c6:	2700      	movne	r7, #0
 800c9c8:	2706      	moveq	r7, #6
 800c9ca:	4638      	mov	r0, r7
 800c9cc:	b009      	add	sp, #36	; 0x24
 800c9ce:	ecbd 8b02 	vpop	{d8}
 800c9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d6:	463e      	mov	r6, r7
 800c9d8:	4625      	mov	r5, r4
 800c9da:	2401      	movs	r4, #1
 800c9dc:	e7ca      	b.n	800c974 <__gethex+0xd4>
 800c9de:	f04f 0900 	mov.w	r9, #0
 800c9e2:	1cb1      	adds	r1, r6, #2
 800c9e4:	e7d3      	b.n	800c98e <__gethex+0xee>
 800c9e6:	f04f 0901 	mov.w	r9, #1
 800c9ea:	e7fa      	b.n	800c9e2 <__gethex+0x142>
 800c9ec:	230a      	movs	r3, #10
 800c9ee:	fb03 0202 	mla	r2, r3, r2, r0
 800c9f2:	3a10      	subs	r2, #16
 800c9f4:	e7d4      	b.n	800c9a0 <__gethex+0x100>
 800c9f6:	4631      	mov	r1, r6
 800c9f8:	e7df      	b.n	800c9ba <__gethex+0x11a>
 800c9fa:	1bf3      	subs	r3, r6, r7
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	4621      	mov	r1, r4
 800ca00:	2b07      	cmp	r3, #7
 800ca02:	dc0b      	bgt.n	800ca1c <__gethex+0x17c>
 800ca04:	ee18 0a10 	vmov	r0, s16
 800ca08:	f000 fa70 	bl	800ceec <_Balloc>
 800ca0c:	4604      	mov	r4, r0
 800ca0e:	b940      	cbnz	r0, 800ca22 <__gethex+0x182>
 800ca10:	4b5d      	ldr	r3, [pc, #372]	; (800cb88 <__gethex+0x2e8>)
 800ca12:	4602      	mov	r2, r0
 800ca14:	21de      	movs	r1, #222	; 0xde
 800ca16:	485d      	ldr	r0, [pc, #372]	; (800cb8c <__gethex+0x2ec>)
 800ca18:	f7ff f82e 	bl	800ba78 <__assert_func>
 800ca1c:	3101      	adds	r1, #1
 800ca1e:	105b      	asrs	r3, r3, #1
 800ca20:	e7ee      	b.n	800ca00 <__gethex+0x160>
 800ca22:	f100 0914 	add.w	r9, r0, #20
 800ca26:	f04f 0b00 	mov.w	fp, #0
 800ca2a:	f1ca 0301 	rsb	r3, sl, #1
 800ca2e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca32:	f8cd b000 	str.w	fp, [sp]
 800ca36:	9306      	str	r3, [sp, #24]
 800ca38:	42b7      	cmp	r7, r6
 800ca3a:	d340      	bcc.n	800cabe <__gethex+0x21e>
 800ca3c:	9802      	ldr	r0, [sp, #8]
 800ca3e:	9b00      	ldr	r3, [sp, #0]
 800ca40:	f840 3b04 	str.w	r3, [r0], #4
 800ca44:	eba0 0009 	sub.w	r0, r0, r9
 800ca48:	1080      	asrs	r0, r0, #2
 800ca4a:	0146      	lsls	r6, r0, #5
 800ca4c:	6120      	str	r0, [r4, #16]
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f000 fb3e 	bl	800d0d0 <__hi0bits>
 800ca54:	1a30      	subs	r0, r6, r0
 800ca56:	f8d8 6000 	ldr.w	r6, [r8]
 800ca5a:	42b0      	cmp	r0, r6
 800ca5c:	dd63      	ble.n	800cb26 <__gethex+0x286>
 800ca5e:	1b87      	subs	r7, r0, r6
 800ca60:	4639      	mov	r1, r7
 800ca62:	4620      	mov	r0, r4
 800ca64:	f000 fee2 	bl	800d82c <__any_on>
 800ca68:	4682      	mov	sl, r0
 800ca6a:	b1a8      	cbz	r0, 800ca98 <__gethex+0x1f8>
 800ca6c:	1e7b      	subs	r3, r7, #1
 800ca6e:	1159      	asrs	r1, r3, #5
 800ca70:	f003 021f 	and.w	r2, r3, #31
 800ca74:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ca78:	f04f 0a01 	mov.w	sl, #1
 800ca7c:	fa0a f202 	lsl.w	r2, sl, r2
 800ca80:	420a      	tst	r2, r1
 800ca82:	d009      	beq.n	800ca98 <__gethex+0x1f8>
 800ca84:	4553      	cmp	r3, sl
 800ca86:	dd05      	ble.n	800ca94 <__gethex+0x1f4>
 800ca88:	1eb9      	subs	r1, r7, #2
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f000 fece 	bl	800d82c <__any_on>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d145      	bne.n	800cb20 <__gethex+0x280>
 800ca94:	f04f 0a02 	mov.w	sl, #2
 800ca98:	4639      	mov	r1, r7
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f7ff fe98 	bl	800c7d0 <rshift>
 800caa0:	443d      	add	r5, r7
 800caa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800caa6:	42ab      	cmp	r3, r5
 800caa8:	da4c      	bge.n	800cb44 <__gethex+0x2a4>
 800caaa:	ee18 0a10 	vmov	r0, s16
 800caae:	4621      	mov	r1, r4
 800cab0:	f000 fa5c 	bl	800cf6c <_Bfree>
 800cab4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cab6:	2300      	movs	r3, #0
 800cab8:	6013      	str	r3, [r2, #0]
 800caba:	27a3      	movs	r7, #163	; 0xa3
 800cabc:	e785      	b.n	800c9ca <__gethex+0x12a>
 800cabe:	1e73      	subs	r3, r6, #1
 800cac0:	9a05      	ldr	r2, [sp, #20]
 800cac2:	9303      	str	r3, [sp, #12]
 800cac4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cac8:	4293      	cmp	r3, r2
 800caca:	d019      	beq.n	800cb00 <__gethex+0x260>
 800cacc:	f1bb 0f20 	cmp.w	fp, #32
 800cad0:	d107      	bne.n	800cae2 <__gethex+0x242>
 800cad2:	9b02      	ldr	r3, [sp, #8]
 800cad4:	9a00      	ldr	r2, [sp, #0]
 800cad6:	f843 2b04 	str.w	r2, [r3], #4
 800cada:	9302      	str	r3, [sp, #8]
 800cadc:	2300      	movs	r3, #0
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	469b      	mov	fp, r3
 800cae2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cae6:	f7ff fec5 	bl	800c874 <__hexdig_fun>
 800caea:	9b00      	ldr	r3, [sp, #0]
 800caec:	f000 000f 	and.w	r0, r0, #15
 800caf0:	fa00 f00b 	lsl.w	r0, r0, fp
 800caf4:	4303      	orrs	r3, r0
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	f10b 0b04 	add.w	fp, fp, #4
 800cafc:	9b03      	ldr	r3, [sp, #12]
 800cafe:	e00d      	b.n	800cb1c <__gethex+0x27c>
 800cb00:	9b03      	ldr	r3, [sp, #12]
 800cb02:	9a06      	ldr	r2, [sp, #24]
 800cb04:	4413      	add	r3, r2
 800cb06:	42bb      	cmp	r3, r7
 800cb08:	d3e0      	bcc.n	800cacc <__gethex+0x22c>
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	9901      	ldr	r1, [sp, #4]
 800cb0e:	9307      	str	r3, [sp, #28]
 800cb10:	4652      	mov	r2, sl
 800cb12:	f001 fa71 	bl	800dff8 <strncmp>
 800cb16:	9b07      	ldr	r3, [sp, #28]
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d1d7      	bne.n	800cacc <__gethex+0x22c>
 800cb1c:	461e      	mov	r6, r3
 800cb1e:	e78b      	b.n	800ca38 <__gethex+0x198>
 800cb20:	f04f 0a03 	mov.w	sl, #3
 800cb24:	e7b8      	b.n	800ca98 <__gethex+0x1f8>
 800cb26:	da0a      	bge.n	800cb3e <__gethex+0x29e>
 800cb28:	1a37      	subs	r7, r6, r0
 800cb2a:	4621      	mov	r1, r4
 800cb2c:	ee18 0a10 	vmov	r0, s16
 800cb30:	463a      	mov	r2, r7
 800cb32:	f000 fc37 	bl	800d3a4 <__lshift>
 800cb36:	1bed      	subs	r5, r5, r7
 800cb38:	4604      	mov	r4, r0
 800cb3a:	f100 0914 	add.w	r9, r0, #20
 800cb3e:	f04f 0a00 	mov.w	sl, #0
 800cb42:	e7ae      	b.n	800caa2 <__gethex+0x202>
 800cb44:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cb48:	42a8      	cmp	r0, r5
 800cb4a:	dd72      	ble.n	800cc32 <__gethex+0x392>
 800cb4c:	1b45      	subs	r5, r0, r5
 800cb4e:	42ae      	cmp	r6, r5
 800cb50:	dc36      	bgt.n	800cbc0 <__gethex+0x320>
 800cb52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d02a      	beq.n	800cbb0 <__gethex+0x310>
 800cb5a:	2b03      	cmp	r3, #3
 800cb5c:	d02c      	beq.n	800cbb8 <__gethex+0x318>
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d11c      	bne.n	800cb9c <__gethex+0x2fc>
 800cb62:	42ae      	cmp	r6, r5
 800cb64:	d11a      	bne.n	800cb9c <__gethex+0x2fc>
 800cb66:	2e01      	cmp	r6, #1
 800cb68:	d112      	bne.n	800cb90 <__gethex+0x2f0>
 800cb6a:	9a04      	ldr	r2, [sp, #16]
 800cb6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb70:	6013      	str	r3, [r2, #0]
 800cb72:	2301      	movs	r3, #1
 800cb74:	6123      	str	r3, [r4, #16]
 800cb76:	f8c9 3000 	str.w	r3, [r9]
 800cb7a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb7c:	2762      	movs	r7, #98	; 0x62
 800cb7e:	601c      	str	r4, [r3, #0]
 800cb80:	e723      	b.n	800c9ca <__gethex+0x12a>
 800cb82:	bf00      	nop
 800cb84:	0800ebc4 	.word	0x0800ebc4
 800cb88:	0800eb4c 	.word	0x0800eb4c
 800cb8c:	0800eb5d 	.word	0x0800eb5d
 800cb90:	1e71      	subs	r1, r6, #1
 800cb92:	4620      	mov	r0, r4
 800cb94:	f000 fe4a 	bl	800d82c <__any_on>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d1e6      	bne.n	800cb6a <__gethex+0x2ca>
 800cb9c:	ee18 0a10 	vmov	r0, s16
 800cba0:	4621      	mov	r1, r4
 800cba2:	f000 f9e3 	bl	800cf6c <_Bfree>
 800cba6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cba8:	2300      	movs	r3, #0
 800cbaa:	6013      	str	r3, [r2, #0]
 800cbac:	2750      	movs	r7, #80	; 0x50
 800cbae:	e70c      	b.n	800c9ca <__gethex+0x12a>
 800cbb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1f2      	bne.n	800cb9c <__gethex+0x2fc>
 800cbb6:	e7d8      	b.n	800cb6a <__gethex+0x2ca>
 800cbb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1d5      	bne.n	800cb6a <__gethex+0x2ca>
 800cbbe:	e7ed      	b.n	800cb9c <__gethex+0x2fc>
 800cbc0:	1e6f      	subs	r7, r5, #1
 800cbc2:	f1ba 0f00 	cmp.w	sl, #0
 800cbc6:	d131      	bne.n	800cc2c <__gethex+0x38c>
 800cbc8:	b127      	cbz	r7, 800cbd4 <__gethex+0x334>
 800cbca:	4639      	mov	r1, r7
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f000 fe2d 	bl	800d82c <__any_on>
 800cbd2:	4682      	mov	sl, r0
 800cbd4:	117b      	asrs	r3, r7, #5
 800cbd6:	2101      	movs	r1, #1
 800cbd8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cbdc:	f007 071f 	and.w	r7, r7, #31
 800cbe0:	fa01 f707 	lsl.w	r7, r1, r7
 800cbe4:	421f      	tst	r7, r3
 800cbe6:	4629      	mov	r1, r5
 800cbe8:	4620      	mov	r0, r4
 800cbea:	bf18      	it	ne
 800cbec:	f04a 0a02 	orrne.w	sl, sl, #2
 800cbf0:	1b76      	subs	r6, r6, r5
 800cbf2:	f7ff fded 	bl	800c7d0 <rshift>
 800cbf6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cbfa:	2702      	movs	r7, #2
 800cbfc:	f1ba 0f00 	cmp.w	sl, #0
 800cc00:	d048      	beq.n	800cc94 <__gethex+0x3f4>
 800cc02:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d015      	beq.n	800cc36 <__gethex+0x396>
 800cc0a:	2b03      	cmp	r3, #3
 800cc0c:	d017      	beq.n	800cc3e <__gethex+0x39e>
 800cc0e:	2b01      	cmp	r3, #1
 800cc10:	d109      	bne.n	800cc26 <__gethex+0x386>
 800cc12:	f01a 0f02 	tst.w	sl, #2
 800cc16:	d006      	beq.n	800cc26 <__gethex+0x386>
 800cc18:	f8d9 0000 	ldr.w	r0, [r9]
 800cc1c:	ea4a 0a00 	orr.w	sl, sl, r0
 800cc20:	f01a 0f01 	tst.w	sl, #1
 800cc24:	d10e      	bne.n	800cc44 <__gethex+0x3a4>
 800cc26:	f047 0710 	orr.w	r7, r7, #16
 800cc2a:	e033      	b.n	800cc94 <__gethex+0x3f4>
 800cc2c:	f04f 0a01 	mov.w	sl, #1
 800cc30:	e7d0      	b.n	800cbd4 <__gethex+0x334>
 800cc32:	2701      	movs	r7, #1
 800cc34:	e7e2      	b.n	800cbfc <__gethex+0x35c>
 800cc36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc38:	f1c3 0301 	rsb	r3, r3, #1
 800cc3c:	9315      	str	r3, [sp, #84]	; 0x54
 800cc3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d0f0      	beq.n	800cc26 <__gethex+0x386>
 800cc44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc48:	f104 0314 	add.w	r3, r4, #20
 800cc4c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc50:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc54:	f04f 0c00 	mov.w	ip, #0
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc5e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cc62:	d01c      	beq.n	800cc9e <__gethex+0x3fe>
 800cc64:	3201      	adds	r2, #1
 800cc66:	6002      	str	r2, [r0, #0]
 800cc68:	2f02      	cmp	r7, #2
 800cc6a:	f104 0314 	add.w	r3, r4, #20
 800cc6e:	d13f      	bne.n	800ccf0 <__gethex+0x450>
 800cc70:	f8d8 2000 	ldr.w	r2, [r8]
 800cc74:	3a01      	subs	r2, #1
 800cc76:	42b2      	cmp	r2, r6
 800cc78:	d10a      	bne.n	800cc90 <__gethex+0x3f0>
 800cc7a:	1171      	asrs	r1, r6, #5
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc82:	f006 061f 	and.w	r6, r6, #31
 800cc86:	fa02 f606 	lsl.w	r6, r2, r6
 800cc8a:	421e      	tst	r6, r3
 800cc8c:	bf18      	it	ne
 800cc8e:	4617      	movne	r7, r2
 800cc90:	f047 0720 	orr.w	r7, r7, #32
 800cc94:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc96:	601c      	str	r4, [r3, #0]
 800cc98:	9b04      	ldr	r3, [sp, #16]
 800cc9a:	601d      	str	r5, [r3, #0]
 800cc9c:	e695      	b.n	800c9ca <__gethex+0x12a>
 800cc9e:	4299      	cmp	r1, r3
 800cca0:	f843 cc04 	str.w	ip, [r3, #-4]
 800cca4:	d8d8      	bhi.n	800cc58 <__gethex+0x3b8>
 800cca6:	68a3      	ldr	r3, [r4, #8]
 800cca8:	459b      	cmp	fp, r3
 800ccaa:	db19      	blt.n	800cce0 <__gethex+0x440>
 800ccac:	6861      	ldr	r1, [r4, #4]
 800ccae:	ee18 0a10 	vmov	r0, s16
 800ccb2:	3101      	adds	r1, #1
 800ccb4:	f000 f91a 	bl	800ceec <_Balloc>
 800ccb8:	4681      	mov	r9, r0
 800ccba:	b918      	cbnz	r0, 800ccc4 <__gethex+0x424>
 800ccbc:	4b1a      	ldr	r3, [pc, #104]	; (800cd28 <__gethex+0x488>)
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	2184      	movs	r1, #132	; 0x84
 800ccc2:	e6a8      	b.n	800ca16 <__gethex+0x176>
 800ccc4:	6922      	ldr	r2, [r4, #16]
 800ccc6:	3202      	adds	r2, #2
 800ccc8:	f104 010c 	add.w	r1, r4, #12
 800cccc:	0092      	lsls	r2, r2, #2
 800ccce:	300c      	adds	r0, #12
 800ccd0:	f7fd f96e 	bl	8009fb0 <memcpy>
 800ccd4:	4621      	mov	r1, r4
 800ccd6:	ee18 0a10 	vmov	r0, s16
 800ccda:	f000 f947 	bl	800cf6c <_Bfree>
 800ccde:	464c      	mov	r4, r9
 800cce0:	6923      	ldr	r3, [r4, #16]
 800cce2:	1c5a      	adds	r2, r3, #1
 800cce4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cce8:	6122      	str	r2, [r4, #16]
 800ccea:	2201      	movs	r2, #1
 800ccec:	615a      	str	r2, [r3, #20]
 800ccee:	e7bb      	b.n	800cc68 <__gethex+0x3c8>
 800ccf0:	6922      	ldr	r2, [r4, #16]
 800ccf2:	455a      	cmp	r2, fp
 800ccf4:	dd0b      	ble.n	800cd0e <__gethex+0x46e>
 800ccf6:	2101      	movs	r1, #1
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f7ff fd69 	bl	800c7d0 <rshift>
 800ccfe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd02:	3501      	adds	r5, #1
 800cd04:	42ab      	cmp	r3, r5
 800cd06:	f6ff aed0 	blt.w	800caaa <__gethex+0x20a>
 800cd0a:	2701      	movs	r7, #1
 800cd0c:	e7c0      	b.n	800cc90 <__gethex+0x3f0>
 800cd0e:	f016 061f 	ands.w	r6, r6, #31
 800cd12:	d0fa      	beq.n	800cd0a <__gethex+0x46a>
 800cd14:	4453      	add	r3, sl
 800cd16:	f1c6 0620 	rsb	r6, r6, #32
 800cd1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cd1e:	f000 f9d7 	bl	800d0d0 <__hi0bits>
 800cd22:	42b0      	cmp	r0, r6
 800cd24:	dbe7      	blt.n	800ccf6 <__gethex+0x456>
 800cd26:	e7f0      	b.n	800cd0a <__gethex+0x46a>
 800cd28:	0800eb4c 	.word	0x0800eb4c

0800cd2c <L_shift>:
 800cd2c:	f1c2 0208 	rsb	r2, r2, #8
 800cd30:	0092      	lsls	r2, r2, #2
 800cd32:	b570      	push	{r4, r5, r6, lr}
 800cd34:	f1c2 0620 	rsb	r6, r2, #32
 800cd38:	6843      	ldr	r3, [r0, #4]
 800cd3a:	6804      	ldr	r4, [r0, #0]
 800cd3c:	fa03 f506 	lsl.w	r5, r3, r6
 800cd40:	432c      	orrs	r4, r5
 800cd42:	40d3      	lsrs	r3, r2
 800cd44:	6004      	str	r4, [r0, #0]
 800cd46:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd4a:	4288      	cmp	r0, r1
 800cd4c:	d3f4      	bcc.n	800cd38 <L_shift+0xc>
 800cd4e:	bd70      	pop	{r4, r5, r6, pc}

0800cd50 <__match>:
 800cd50:	b530      	push	{r4, r5, lr}
 800cd52:	6803      	ldr	r3, [r0, #0]
 800cd54:	3301      	adds	r3, #1
 800cd56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd5a:	b914      	cbnz	r4, 800cd62 <__match+0x12>
 800cd5c:	6003      	str	r3, [r0, #0]
 800cd5e:	2001      	movs	r0, #1
 800cd60:	bd30      	pop	{r4, r5, pc}
 800cd62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd66:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cd6a:	2d19      	cmp	r5, #25
 800cd6c:	bf98      	it	ls
 800cd6e:	3220      	addls	r2, #32
 800cd70:	42a2      	cmp	r2, r4
 800cd72:	d0f0      	beq.n	800cd56 <__match+0x6>
 800cd74:	2000      	movs	r0, #0
 800cd76:	e7f3      	b.n	800cd60 <__match+0x10>

0800cd78 <__hexnan>:
 800cd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd7c:	680b      	ldr	r3, [r1, #0]
 800cd7e:	115e      	asrs	r6, r3, #5
 800cd80:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd84:	f013 031f 	ands.w	r3, r3, #31
 800cd88:	b087      	sub	sp, #28
 800cd8a:	bf18      	it	ne
 800cd8c:	3604      	addne	r6, #4
 800cd8e:	2500      	movs	r5, #0
 800cd90:	1f37      	subs	r7, r6, #4
 800cd92:	4690      	mov	r8, r2
 800cd94:	6802      	ldr	r2, [r0, #0]
 800cd96:	9301      	str	r3, [sp, #4]
 800cd98:	4682      	mov	sl, r0
 800cd9a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd9e:	46b9      	mov	r9, r7
 800cda0:	463c      	mov	r4, r7
 800cda2:	9502      	str	r5, [sp, #8]
 800cda4:	46ab      	mov	fp, r5
 800cda6:	7851      	ldrb	r1, [r2, #1]
 800cda8:	1c53      	adds	r3, r2, #1
 800cdaa:	9303      	str	r3, [sp, #12]
 800cdac:	b341      	cbz	r1, 800ce00 <__hexnan+0x88>
 800cdae:	4608      	mov	r0, r1
 800cdb0:	9205      	str	r2, [sp, #20]
 800cdb2:	9104      	str	r1, [sp, #16]
 800cdb4:	f7ff fd5e 	bl	800c874 <__hexdig_fun>
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d14f      	bne.n	800ce5c <__hexnan+0xe4>
 800cdbc:	9904      	ldr	r1, [sp, #16]
 800cdbe:	9a05      	ldr	r2, [sp, #20]
 800cdc0:	2920      	cmp	r1, #32
 800cdc2:	d818      	bhi.n	800cdf6 <__hexnan+0x7e>
 800cdc4:	9b02      	ldr	r3, [sp, #8]
 800cdc6:	459b      	cmp	fp, r3
 800cdc8:	dd13      	ble.n	800cdf2 <__hexnan+0x7a>
 800cdca:	454c      	cmp	r4, r9
 800cdcc:	d206      	bcs.n	800cddc <__hexnan+0x64>
 800cdce:	2d07      	cmp	r5, #7
 800cdd0:	dc04      	bgt.n	800cddc <__hexnan+0x64>
 800cdd2:	462a      	mov	r2, r5
 800cdd4:	4649      	mov	r1, r9
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f7ff ffa8 	bl	800cd2c <L_shift>
 800cddc:	4544      	cmp	r4, r8
 800cdde:	d950      	bls.n	800ce82 <__hexnan+0x10a>
 800cde0:	2300      	movs	r3, #0
 800cde2:	f1a4 0904 	sub.w	r9, r4, #4
 800cde6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdea:	f8cd b008 	str.w	fp, [sp, #8]
 800cdee:	464c      	mov	r4, r9
 800cdf0:	461d      	mov	r5, r3
 800cdf2:	9a03      	ldr	r2, [sp, #12]
 800cdf4:	e7d7      	b.n	800cda6 <__hexnan+0x2e>
 800cdf6:	2929      	cmp	r1, #41	; 0x29
 800cdf8:	d156      	bne.n	800cea8 <__hexnan+0x130>
 800cdfa:	3202      	adds	r2, #2
 800cdfc:	f8ca 2000 	str.w	r2, [sl]
 800ce00:	f1bb 0f00 	cmp.w	fp, #0
 800ce04:	d050      	beq.n	800cea8 <__hexnan+0x130>
 800ce06:	454c      	cmp	r4, r9
 800ce08:	d206      	bcs.n	800ce18 <__hexnan+0xa0>
 800ce0a:	2d07      	cmp	r5, #7
 800ce0c:	dc04      	bgt.n	800ce18 <__hexnan+0xa0>
 800ce0e:	462a      	mov	r2, r5
 800ce10:	4649      	mov	r1, r9
 800ce12:	4620      	mov	r0, r4
 800ce14:	f7ff ff8a 	bl	800cd2c <L_shift>
 800ce18:	4544      	cmp	r4, r8
 800ce1a:	d934      	bls.n	800ce86 <__hexnan+0x10e>
 800ce1c:	f1a8 0204 	sub.w	r2, r8, #4
 800ce20:	4623      	mov	r3, r4
 800ce22:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce26:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce2a:	429f      	cmp	r7, r3
 800ce2c:	d2f9      	bcs.n	800ce22 <__hexnan+0xaa>
 800ce2e:	1b3b      	subs	r3, r7, r4
 800ce30:	f023 0303 	bic.w	r3, r3, #3
 800ce34:	3304      	adds	r3, #4
 800ce36:	3401      	adds	r4, #1
 800ce38:	3e03      	subs	r6, #3
 800ce3a:	42b4      	cmp	r4, r6
 800ce3c:	bf88      	it	hi
 800ce3e:	2304      	movhi	r3, #4
 800ce40:	4443      	add	r3, r8
 800ce42:	2200      	movs	r2, #0
 800ce44:	f843 2b04 	str.w	r2, [r3], #4
 800ce48:	429f      	cmp	r7, r3
 800ce4a:	d2fb      	bcs.n	800ce44 <__hexnan+0xcc>
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	b91b      	cbnz	r3, 800ce58 <__hexnan+0xe0>
 800ce50:	4547      	cmp	r7, r8
 800ce52:	d127      	bne.n	800cea4 <__hexnan+0x12c>
 800ce54:	2301      	movs	r3, #1
 800ce56:	603b      	str	r3, [r7, #0]
 800ce58:	2005      	movs	r0, #5
 800ce5a:	e026      	b.n	800ceaa <__hexnan+0x132>
 800ce5c:	3501      	adds	r5, #1
 800ce5e:	2d08      	cmp	r5, #8
 800ce60:	f10b 0b01 	add.w	fp, fp, #1
 800ce64:	dd06      	ble.n	800ce74 <__hexnan+0xfc>
 800ce66:	4544      	cmp	r4, r8
 800ce68:	d9c3      	bls.n	800cdf2 <__hexnan+0x7a>
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce70:	2501      	movs	r5, #1
 800ce72:	3c04      	subs	r4, #4
 800ce74:	6822      	ldr	r2, [r4, #0]
 800ce76:	f000 000f 	and.w	r0, r0, #15
 800ce7a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ce7e:	6022      	str	r2, [r4, #0]
 800ce80:	e7b7      	b.n	800cdf2 <__hexnan+0x7a>
 800ce82:	2508      	movs	r5, #8
 800ce84:	e7b5      	b.n	800cdf2 <__hexnan+0x7a>
 800ce86:	9b01      	ldr	r3, [sp, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d0df      	beq.n	800ce4c <__hexnan+0xd4>
 800ce8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce90:	f1c3 0320 	rsb	r3, r3, #32
 800ce94:	fa22 f303 	lsr.w	r3, r2, r3
 800ce98:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce9c:	401a      	ands	r2, r3
 800ce9e:	f846 2c04 	str.w	r2, [r6, #-4]
 800cea2:	e7d3      	b.n	800ce4c <__hexnan+0xd4>
 800cea4:	3f04      	subs	r7, #4
 800cea6:	e7d1      	b.n	800ce4c <__hexnan+0xd4>
 800cea8:	2004      	movs	r0, #4
 800ceaa:	b007      	add	sp, #28
 800ceac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ceb0 <_localeconv_r>:
 800ceb0:	4800      	ldr	r0, [pc, #0]	; (800ceb4 <_localeconv_r+0x4>)
 800ceb2:	4770      	bx	lr
 800ceb4:	20000194 	.word	0x20000194

0800ceb8 <malloc>:
 800ceb8:	4b02      	ldr	r3, [pc, #8]	; (800cec4 <malloc+0xc>)
 800ceba:	4601      	mov	r1, r0
 800cebc:	6818      	ldr	r0, [r3, #0]
 800cebe:	f000 bd59 	b.w	800d974 <_malloc_r>
 800cec2:	bf00      	nop
 800cec4:	2000003c 	.word	0x2000003c

0800cec8 <__ascii_mbtowc>:
 800cec8:	b082      	sub	sp, #8
 800ceca:	b901      	cbnz	r1, 800cece <__ascii_mbtowc+0x6>
 800cecc:	a901      	add	r1, sp, #4
 800cece:	b142      	cbz	r2, 800cee2 <__ascii_mbtowc+0x1a>
 800ced0:	b14b      	cbz	r3, 800cee6 <__ascii_mbtowc+0x1e>
 800ced2:	7813      	ldrb	r3, [r2, #0]
 800ced4:	600b      	str	r3, [r1, #0]
 800ced6:	7812      	ldrb	r2, [r2, #0]
 800ced8:	1e10      	subs	r0, r2, #0
 800ceda:	bf18      	it	ne
 800cedc:	2001      	movne	r0, #1
 800cede:	b002      	add	sp, #8
 800cee0:	4770      	bx	lr
 800cee2:	4610      	mov	r0, r2
 800cee4:	e7fb      	b.n	800cede <__ascii_mbtowc+0x16>
 800cee6:	f06f 0001 	mvn.w	r0, #1
 800ceea:	e7f8      	b.n	800cede <__ascii_mbtowc+0x16>

0800ceec <_Balloc>:
 800ceec:	b570      	push	{r4, r5, r6, lr}
 800ceee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cef0:	4604      	mov	r4, r0
 800cef2:	460d      	mov	r5, r1
 800cef4:	b976      	cbnz	r6, 800cf14 <_Balloc+0x28>
 800cef6:	2010      	movs	r0, #16
 800cef8:	f7ff ffde 	bl	800ceb8 <malloc>
 800cefc:	4602      	mov	r2, r0
 800cefe:	6260      	str	r0, [r4, #36]	; 0x24
 800cf00:	b920      	cbnz	r0, 800cf0c <_Balloc+0x20>
 800cf02:	4b18      	ldr	r3, [pc, #96]	; (800cf64 <_Balloc+0x78>)
 800cf04:	4818      	ldr	r0, [pc, #96]	; (800cf68 <_Balloc+0x7c>)
 800cf06:	2166      	movs	r1, #102	; 0x66
 800cf08:	f7fe fdb6 	bl	800ba78 <__assert_func>
 800cf0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf10:	6006      	str	r6, [r0, #0]
 800cf12:	60c6      	str	r6, [r0, #12]
 800cf14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf16:	68f3      	ldr	r3, [r6, #12]
 800cf18:	b183      	cbz	r3, 800cf3c <_Balloc+0x50>
 800cf1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf22:	b9b8      	cbnz	r0, 800cf54 <_Balloc+0x68>
 800cf24:	2101      	movs	r1, #1
 800cf26:	fa01 f605 	lsl.w	r6, r1, r5
 800cf2a:	1d72      	adds	r2, r6, #5
 800cf2c:	0092      	lsls	r2, r2, #2
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f000 fc9d 	bl	800d86e <_calloc_r>
 800cf34:	b160      	cbz	r0, 800cf50 <_Balloc+0x64>
 800cf36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf3a:	e00e      	b.n	800cf5a <_Balloc+0x6e>
 800cf3c:	2221      	movs	r2, #33	; 0x21
 800cf3e:	2104      	movs	r1, #4
 800cf40:	4620      	mov	r0, r4
 800cf42:	f000 fc94 	bl	800d86e <_calloc_r>
 800cf46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf48:	60f0      	str	r0, [r6, #12]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1e4      	bne.n	800cf1a <_Balloc+0x2e>
 800cf50:	2000      	movs	r0, #0
 800cf52:	bd70      	pop	{r4, r5, r6, pc}
 800cf54:	6802      	ldr	r2, [r0, #0]
 800cf56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf60:	e7f7      	b.n	800cf52 <_Balloc+0x66>
 800cf62:	bf00      	nop
 800cf64:	0800eada 	.word	0x0800eada
 800cf68:	0800ebd8 	.word	0x0800ebd8

0800cf6c <_Bfree>:
 800cf6c:	b570      	push	{r4, r5, r6, lr}
 800cf6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf70:	4605      	mov	r5, r0
 800cf72:	460c      	mov	r4, r1
 800cf74:	b976      	cbnz	r6, 800cf94 <_Bfree+0x28>
 800cf76:	2010      	movs	r0, #16
 800cf78:	f7ff ff9e 	bl	800ceb8 <malloc>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	6268      	str	r0, [r5, #36]	; 0x24
 800cf80:	b920      	cbnz	r0, 800cf8c <_Bfree+0x20>
 800cf82:	4b09      	ldr	r3, [pc, #36]	; (800cfa8 <_Bfree+0x3c>)
 800cf84:	4809      	ldr	r0, [pc, #36]	; (800cfac <_Bfree+0x40>)
 800cf86:	218a      	movs	r1, #138	; 0x8a
 800cf88:	f7fe fd76 	bl	800ba78 <__assert_func>
 800cf8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf90:	6006      	str	r6, [r0, #0]
 800cf92:	60c6      	str	r6, [r0, #12]
 800cf94:	b13c      	cbz	r4, 800cfa6 <_Bfree+0x3a>
 800cf96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cf98:	6862      	ldr	r2, [r4, #4]
 800cf9a:	68db      	ldr	r3, [r3, #12]
 800cf9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfa0:	6021      	str	r1, [r4, #0]
 800cfa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfa6:	bd70      	pop	{r4, r5, r6, pc}
 800cfa8:	0800eada 	.word	0x0800eada
 800cfac:	0800ebd8 	.word	0x0800ebd8

0800cfb0 <__multadd>:
 800cfb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb4:	690d      	ldr	r5, [r1, #16]
 800cfb6:	4607      	mov	r7, r0
 800cfb8:	460c      	mov	r4, r1
 800cfba:	461e      	mov	r6, r3
 800cfbc:	f101 0c14 	add.w	ip, r1, #20
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	f8dc 3000 	ldr.w	r3, [ip]
 800cfc6:	b299      	uxth	r1, r3
 800cfc8:	fb02 6101 	mla	r1, r2, r1, r6
 800cfcc:	0c1e      	lsrs	r6, r3, #16
 800cfce:	0c0b      	lsrs	r3, r1, #16
 800cfd0:	fb02 3306 	mla	r3, r2, r6, r3
 800cfd4:	b289      	uxth	r1, r1
 800cfd6:	3001      	adds	r0, #1
 800cfd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cfdc:	4285      	cmp	r5, r0
 800cfde:	f84c 1b04 	str.w	r1, [ip], #4
 800cfe2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cfe6:	dcec      	bgt.n	800cfc2 <__multadd+0x12>
 800cfe8:	b30e      	cbz	r6, 800d02e <__multadd+0x7e>
 800cfea:	68a3      	ldr	r3, [r4, #8]
 800cfec:	42ab      	cmp	r3, r5
 800cfee:	dc19      	bgt.n	800d024 <__multadd+0x74>
 800cff0:	6861      	ldr	r1, [r4, #4]
 800cff2:	4638      	mov	r0, r7
 800cff4:	3101      	adds	r1, #1
 800cff6:	f7ff ff79 	bl	800ceec <_Balloc>
 800cffa:	4680      	mov	r8, r0
 800cffc:	b928      	cbnz	r0, 800d00a <__multadd+0x5a>
 800cffe:	4602      	mov	r2, r0
 800d000:	4b0c      	ldr	r3, [pc, #48]	; (800d034 <__multadd+0x84>)
 800d002:	480d      	ldr	r0, [pc, #52]	; (800d038 <__multadd+0x88>)
 800d004:	21b5      	movs	r1, #181	; 0xb5
 800d006:	f7fe fd37 	bl	800ba78 <__assert_func>
 800d00a:	6922      	ldr	r2, [r4, #16]
 800d00c:	3202      	adds	r2, #2
 800d00e:	f104 010c 	add.w	r1, r4, #12
 800d012:	0092      	lsls	r2, r2, #2
 800d014:	300c      	adds	r0, #12
 800d016:	f7fc ffcb 	bl	8009fb0 <memcpy>
 800d01a:	4621      	mov	r1, r4
 800d01c:	4638      	mov	r0, r7
 800d01e:	f7ff ffa5 	bl	800cf6c <_Bfree>
 800d022:	4644      	mov	r4, r8
 800d024:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d028:	3501      	adds	r5, #1
 800d02a:	615e      	str	r6, [r3, #20]
 800d02c:	6125      	str	r5, [r4, #16]
 800d02e:	4620      	mov	r0, r4
 800d030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d034:	0800eb4c 	.word	0x0800eb4c
 800d038:	0800ebd8 	.word	0x0800ebd8

0800d03c <__s2b>:
 800d03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d040:	460c      	mov	r4, r1
 800d042:	4615      	mov	r5, r2
 800d044:	461f      	mov	r7, r3
 800d046:	2209      	movs	r2, #9
 800d048:	3308      	adds	r3, #8
 800d04a:	4606      	mov	r6, r0
 800d04c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d050:	2100      	movs	r1, #0
 800d052:	2201      	movs	r2, #1
 800d054:	429a      	cmp	r2, r3
 800d056:	db09      	blt.n	800d06c <__s2b+0x30>
 800d058:	4630      	mov	r0, r6
 800d05a:	f7ff ff47 	bl	800ceec <_Balloc>
 800d05e:	b940      	cbnz	r0, 800d072 <__s2b+0x36>
 800d060:	4602      	mov	r2, r0
 800d062:	4b19      	ldr	r3, [pc, #100]	; (800d0c8 <__s2b+0x8c>)
 800d064:	4819      	ldr	r0, [pc, #100]	; (800d0cc <__s2b+0x90>)
 800d066:	21ce      	movs	r1, #206	; 0xce
 800d068:	f7fe fd06 	bl	800ba78 <__assert_func>
 800d06c:	0052      	lsls	r2, r2, #1
 800d06e:	3101      	adds	r1, #1
 800d070:	e7f0      	b.n	800d054 <__s2b+0x18>
 800d072:	9b08      	ldr	r3, [sp, #32]
 800d074:	6143      	str	r3, [r0, #20]
 800d076:	2d09      	cmp	r5, #9
 800d078:	f04f 0301 	mov.w	r3, #1
 800d07c:	6103      	str	r3, [r0, #16]
 800d07e:	dd16      	ble.n	800d0ae <__s2b+0x72>
 800d080:	f104 0909 	add.w	r9, r4, #9
 800d084:	46c8      	mov	r8, r9
 800d086:	442c      	add	r4, r5
 800d088:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d08c:	4601      	mov	r1, r0
 800d08e:	3b30      	subs	r3, #48	; 0x30
 800d090:	220a      	movs	r2, #10
 800d092:	4630      	mov	r0, r6
 800d094:	f7ff ff8c 	bl	800cfb0 <__multadd>
 800d098:	45a0      	cmp	r8, r4
 800d09a:	d1f5      	bne.n	800d088 <__s2b+0x4c>
 800d09c:	f1a5 0408 	sub.w	r4, r5, #8
 800d0a0:	444c      	add	r4, r9
 800d0a2:	1b2d      	subs	r5, r5, r4
 800d0a4:	1963      	adds	r3, r4, r5
 800d0a6:	42bb      	cmp	r3, r7
 800d0a8:	db04      	blt.n	800d0b4 <__s2b+0x78>
 800d0aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ae:	340a      	adds	r4, #10
 800d0b0:	2509      	movs	r5, #9
 800d0b2:	e7f6      	b.n	800d0a2 <__s2b+0x66>
 800d0b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d0b8:	4601      	mov	r1, r0
 800d0ba:	3b30      	subs	r3, #48	; 0x30
 800d0bc:	220a      	movs	r2, #10
 800d0be:	4630      	mov	r0, r6
 800d0c0:	f7ff ff76 	bl	800cfb0 <__multadd>
 800d0c4:	e7ee      	b.n	800d0a4 <__s2b+0x68>
 800d0c6:	bf00      	nop
 800d0c8:	0800eb4c 	.word	0x0800eb4c
 800d0cc:	0800ebd8 	.word	0x0800ebd8

0800d0d0 <__hi0bits>:
 800d0d0:	0c03      	lsrs	r3, r0, #16
 800d0d2:	041b      	lsls	r3, r3, #16
 800d0d4:	b9d3      	cbnz	r3, 800d10c <__hi0bits+0x3c>
 800d0d6:	0400      	lsls	r0, r0, #16
 800d0d8:	2310      	movs	r3, #16
 800d0da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d0de:	bf04      	itt	eq
 800d0e0:	0200      	lsleq	r0, r0, #8
 800d0e2:	3308      	addeq	r3, #8
 800d0e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d0e8:	bf04      	itt	eq
 800d0ea:	0100      	lsleq	r0, r0, #4
 800d0ec:	3304      	addeq	r3, #4
 800d0ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d0f2:	bf04      	itt	eq
 800d0f4:	0080      	lsleq	r0, r0, #2
 800d0f6:	3302      	addeq	r3, #2
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	db05      	blt.n	800d108 <__hi0bits+0x38>
 800d0fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d100:	f103 0301 	add.w	r3, r3, #1
 800d104:	bf08      	it	eq
 800d106:	2320      	moveq	r3, #32
 800d108:	4618      	mov	r0, r3
 800d10a:	4770      	bx	lr
 800d10c:	2300      	movs	r3, #0
 800d10e:	e7e4      	b.n	800d0da <__hi0bits+0xa>

0800d110 <__lo0bits>:
 800d110:	6803      	ldr	r3, [r0, #0]
 800d112:	f013 0207 	ands.w	r2, r3, #7
 800d116:	4601      	mov	r1, r0
 800d118:	d00b      	beq.n	800d132 <__lo0bits+0x22>
 800d11a:	07da      	lsls	r2, r3, #31
 800d11c:	d423      	bmi.n	800d166 <__lo0bits+0x56>
 800d11e:	0798      	lsls	r0, r3, #30
 800d120:	bf49      	itett	mi
 800d122:	085b      	lsrmi	r3, r3, #1
 800d124:	089b      	lsrpl	r3, r3, #2
 800d126:	2001      	movmi	r0, #1
 800d128:	600b      	strmi	r3, [r1, #0]
 800d12a:	bf5c      	itt	pl
 800d12c:	600b      	strpl	r3, [r1, #0]
 800d12e:	2002      	movpl	r0, #2
 800d130:	4770      	bx	lr
 800d132:	b298      	uxth	r0, r3
 800d134:	b9a8      	cbnz	r0, 800d162 <__lo0bits+0x52>
 800d136:	0c1b      	lsrs	r3, r3, #16
 800d138:	2010      	movs	r0, #16
 800d13a:	b2da      	uxtb	r2, r3
 800d13c:	b90a      	cbnz	r2, 800d142 <__lo0bits+0x32>
 800d13e:	3008      	adds	r0, #8
 800d140:	0a1b      	lsrs	r3, r3, #8
 800d142:	071a      	lsls	r2, r3, #28
 800d144:	bf04      	itt	eq
 800d146:	091b      	lsreq	r3, r3, #4
 800d148:	3004      	addeq	r0, #4
 800d14a:	079a      	lsls	r2, r3, #30
 800d14c:	bf04      	itt	eq
 800d14e:	089b      	lsreq	r3, r3, #2
 800d150:	3002      	addeq	r0, #2
 800d152:	07da      	lsls	r2, r3, #31
 800d154:	d403      	bmi.n	800d15e <__lo0bits+0x4e>
 800d156:	085b      	lsrs	r3, r3, #1
 800d158:	f100 0001 	add.w	r0, r0, #1
 800d15c:	d005      	beq.n	800d16a <__lo0bits+0x5a>
 800d15e:	600b      	str	r3, [r1, #0]
 800d160:	4770      	bx	lr
 800d162:	4610      	mov	r0, r2
 800d164:	e7e9      	b.n	800d13a <__lo0bits+0x2a>
 800d166:	2000      	movs	r0, #0
 800d168:	4770      	bx	lr
 800d16a:	2020      	movs	r0, #32
 800d16c:	4770      	bx	lr
	...

0800d170 <__i2b>:
 800d170:	b510      	push	{r4, lr}
 800d172:	460c      	mov	r4, r1
 800d174:	2101      	movs	r1, #1
 800d176:	f7ff feb9 	bl	800ceec <_Balloc>
 800d17a:	4602      	mov	r2, r0
 800d17c:	b928      	cbnz	r0, 800d18a <__i2b+0x1a>
 800d17e:	4b05      	ldr	r3, [pc, #20]	; (800d194 <__i2b+0x24>)
 800d180:	4805      	ldr	r0, [pc, #20]	; (800d198 <__i2b+0x28>)
 800d182:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d186:	f7fe fc77 	bl	800ba78 <__assert_func>
 800d18a:	2301      	movs	r3, #1
 800d18c:	6144      	str	r4, [r0, #20]
 800d18e:	6103      	str	r3, [r0, #16]
 800d190:	bd10      	pop	{r4, pc}
 800d192:	bf00      	nop
 800d194:	0800eb4c 	.word	0x0800eb4c
 800d198:	0800ebd8 	.word	0x0800ebd8

0800d19c <__multiply>:
 800d19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a0:	4691      	mov	r9, r2
 800d1a2:	690a      	ldr	r2, [r1, #16]
 800d1a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	bfb8      	it	lt
 800d1ac:	460b      	movlt	r3, r1
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	bfbc      	itt	lt
 800d1b2:	464c      	movlt	r4, r9
 800d1b4:	4699      	movlt	r9, r3
 800d1b6:	6927      	ldr	r7, [r4, #16]
 800d1b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d1bc:	68a3      	ldr	r3, [r4, #8]
 800d1be:	6861      	ldr	r1, [r4, #4]
 800d1c0:	eb07 060a 	add.w	r6, r7, sl
 800d1c4:	42b3      	cmp	r3, r6
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	bfb8      	it	lt
 800d1ca:	3101      	addlt	r1, #1
 800d1cc:	f7ff fe8e 	bl	800ceec <_Balloc>
 800d1d0:	b930      	cbnz	r0, 800d1e0 <__multiply+0x44>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	4b44      	ldr	r3, [pc, #272]	; (800d2e8 <__multiply+0x14c>)
 800d1d6:	4845      	ldr	r0, [pc, #276]	; (800d2ec <__multiply+0x150>)
 800d1d8:	f240 115d 	movw	r1, #349	; 0x15d
 800d1dc:	f7fe fc4c 	bl	800ba78 <__assert_func>
 800d1e0:	f100 0514 	add.w	r5, r0, #20
 800d1e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d1e8:	462b      	mov	r3, r5
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	4543      	cmp	r3, r8
 800d1ee:	d321      	bcc.n	800d234 <__multiply+0x98>
 800d1f0:	f104 0314 	add.w	r3, r4, #20
 800d1f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d1f8:	f109 0314 	add.w	r3, r9, #20
 800d1fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d200:	9202      	str	r2, [sp, #8]
 800d202:	1b3a      	subs	r2, r7, r4
 800d204:	3a15      	subs	r2, #21
 800d206:	f022 0203 	bic.w	r2, r2, #3
 800d20a:	3204      	adds	r2, #4
 800d20c:	f104 0115 	add.w	r1, r4, #21
 800d210:	428f      	cmp	r7, r1
 800d212:	bf38      	it	cc
 800d214:	2204      	movcc	r2, #4
 800d216:	9201      	str	r2, [sp, #4]
 800d218:	9a02      	ldr	r2, [sp, #8]
 800d21a:	9303      	str	r3, [sp, #12]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d80c      	bhi.n	800d23a <__multiply+0x9e>
 800d220:	2e00      	cmp	r6, #0
 800d222:	dd03      	ble.n	800d22c <__multiply+0x90>
 800d224:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d05a      	beq.n	800d2e2 <__multiply+0x146>
 800d22c:	6106      	str	r6, [r0, #16]
 800d22e:	b005      	add	sp, #20
 800d230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d234:	f843 2b04 	str.w	r2, [r3], #4
 800d238:	e7d8      	b.n	800d1ec <__multiply+0x50>
 800d23a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d23e:	f1ba 0f00 	cmp.w	sl, #0
 800d242:	d024      	beq.n	800d28e <__multiply+0xf2>
 800d244:	f104 0e14 	add.w	lr, r4, #20
 800d248:	46a9      	mov	r9, r5
 800d24a:	f04f 0c00 	mov.w	ip, #0
 800d24e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d252:	f8d9 1000 	ldr.w	r1, [r9]
 800d256:	fa1f fb82 	uxth.w	fp, r2
 800d25a:	b289      	uxth	r1, r1
 800d25c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d260:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d264:	f8d9 2000 	ldr.w	r2, [r9]
 800d268:	4461      	add	r1, ip
 800d26a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d26e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d272:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d276:	b289      	uxth	r1, r1
 800d278:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d27c:	4577      	cmp	r7, lr
 800d27e:	f849 1b04 	str.w	r1, [r9], #4
 800d282:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d286:	d8e2      	bhi.n	800d24e <__multiply+0xb2>
 800d288:	9a01      	ldr	r2, [sp, #4]
 800d28a:	f845 c002 	str.w	ip, [r5, r2]
 800d28e:	9a03      	ldr	r2, [sp, #12]
 800d290:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d294:	3304      	adds	r3, #4
 800d296:	f1b9 0f00 	cmp.w	r9, #0
 800d29a:	d020      	beq.n	800d2de <__multiply+0x142>
 800d29c:	6829      	ldr	r1, [r5, #0]
 800d29e:	f104 0c14 	add.w	ip, r4, #20
 800d2a2:	46ae      	mov	lr, r5
 800d2a4:	f04f 0a00 	mov.w	sl, #0
 800d2a8:	f8bc b000 	ldrh.w	fp, [ip]
 800d2ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d2b0:	fb09 220b 	mla	r2, r9, fp, r2
 800d2b4:	4492      	add	sl, r2
 800d2b6:	b289      	uxth	r1, r1
 800d2b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d2bc:	f84e 1b04 	str.w	r1, [lr], #4
 800d2c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d2c4:	f8be 1000 	ldrh.w	r1, [lr]
 800d2c8:	0c12      	lsrs	r2, r2, #16
 800d2ca:	fb09 1102 	mla	r1, r9, r2, r1
 800d2ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d2d2:	4567      	cmp	r7, ip
 800d2d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d2d8:	d8e6      	bhi.n	800d2a8 <__multiply+0x10c>
 800d2da:	9a01      	ldr	r2, [sp, #4]
 800d2dc:	50a9      	str	r1, [r5, r2]
 800d2de:	3504      	adds	r5, #4
 800d2e0:	e79a      	b.n	800d218 <__multiply+0x7c>
 800d2e2:	3e01      	subs	r6, #1
 800d2e4:	e79c      	b.n	800d220 <__multiply+0x84>
 800d2e6:	bf00      	nop
 800d2e8:	0800eb4c 	.word	0x0800eb4c
 800d2ec:	0800ebd8 	.word	0x0800ebd8

0800d2f0 <__pow5mult>:
 800d2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2f4:	4615      	mov	r5, r2
 800d2f6:	f012 0203 	ands.w	r2, r2, #3
 800d2fa:	4606      	mov	r6, r0
 800d2fc:	460f      	mov	r7, r1
 800d2fe:	d007      	beq.n	800d310 <__pow5mult+0x20>
 800d300:	4c25      	ldr	r4, [pc, #148]	; (800d398 <__pow5mult+0xa8>)
 800d302:	3a01      	subs	r2, #1
 800d304:	2300      	movs	r3, #0
 800d306:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d30a:	f7ff fe51 	bl	800cfb0 <__multadd>
 800d30e:	4607      	mov	r7, r0
 800d310:	10ad      	asrs	r5, r5, #2
 800d312:	d03d      	beq.n	800d390 <__pow5mult+0xa0>
 800d314:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d316:	b97c      	cbnz	r4, 800d338 <__pow5mult+0x48>
 800d318:	2010      	movs	r0, #16
 800d31a:	f7ff fdcd 	bl	800ceb8 <malloc>
 800d31e:	4602      	mov	r2, r0
 800d320:	6270      	str	r0, [r6, #36]	; 0x24
 800d322:	b928      	cbnz	r0, 800d330 <__pow5mult+0x40>
 800d324:	4b1d      	ldr	r3, [pc, #116]	; (800d39c <__pow5mult+0xac>)
 800d326:	481e      	ldr	r0, [pc, #120]	; (800d3a0 <__pow5mult+0xb0>)
 800d328:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d32c:	f7fe fba4 	bl	800ba78 <__assert_func>
 800d330:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d334:	6004      	str	r4, [r0, #0]
 800d336:	60c4      	str	r4, [r0, #12]
 800d338:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d33c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d340:	b94c      	cbnz	r4, 800d356 <__pow5mult+0x66>
 800d342:	f240 2171 	movw	r1, #625	; 0x271
 800d346:	4630      	mov	r0, r6
 800d348:	f7ff ff12 	bl	800d170 <__i2b>
 800d34c:	2300      	movs	r3, #0
 800d34e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d352:	4604      	mov	r4, r0
 800d354:	6003      	str	r3, [r0, #0]
 800d356:	f04f 0900 	mov.w	r9, #0
 800d35a:	07eb      	lsls	r3, r5, #31
 800d35c:	d50a      	bpl.n	800d374 <__pow5mult+0x84>
 800d35e:	4639      	mov	r1, r7
 800d360:	4622      	mov	r2, r4
 800d362:	4630      	mov	r0, r6
 800d364:	f7ff ff1a 	bl	800d19c <__multiply>
 800d368:	4639      	mov	r1, r7
 800d36a:	4680      	mov	r8, r0
 800d36c:	4630      	mov	r0, r6
 800d36e:	f7ff fdfd 	bl	800cf6c <_Bfree>
 800d372:	4647      	mov	r7, r8
 800d374:	106d      	asrs	r5, r5, #1
 800d376:	d00b      	beq.n	800d390 <__pow5mult+0xa0>
 800d378:	6820      	ldr	r0, [r4, #0]
 800d37a:	b938      	cbnz	r0, 800d38c <__pow5mult+0x9c>
 800d37c:	4622      	mov	r2, r4
 800d37e:	4621      	mov	r1, r4
 800d380:	4630      	mov	r0, r6
 800d382:	f7ff ff0b 	bl	800d19c <__multiply>
 800d386:	6020      	str	r0, [r4, #0]
 800d388:	f8c0 9000 	str.w	r9, [r0]
 800d38c:	4604      	mov	r4, r0
 800d38e:	e7e4      	b.n	800d35a <__pow5mult+0x6a>
 800d390:	4638      	mov	r0, r7
 800d392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d396:	bf00      	nop
 800d398:	0800ed28 	.word	0x0800ed28
 800d39c:	0800eada 	.word	0x0800eada
 800d3a0:	0800ebd8 	.word	0x0800ebd8

0800d3a4 <__lshift>:
 800d3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a8:	460c      	mov	r4, r1
 800d3aa:	6849      	ldr	r1, [r1, #4]
 800d3ac:	6923      	ldr	r3, [r4, #16]
 800d3ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3b2:	68a3      	ldr	r3, [r4, #8]
 800d3b4:	4607      	mov	r7, r0
 800d3b6:	4691      	mov	r9, r2
 800d3b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3bc:	f108 0601 	add.w	r6, r8, #1
 800d3c0:	42b3      	cmp	r3, r6
 800d3c2:	db0b      	blt.n	800d3dc <__lshift+0x38>
 800d3c4:	4638      	mov	r0, r7
 800d3c6:	f7ff fd91 	bl	800ceec <_Balloc>
 800d3ca:	4605      	mov	r5, r0
 800d3cc:	b948      	cbnz	r0, 800d3e2 <__lshift+0x3e>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	4b2a      	ldr	r3, [pc, #168]	; (800d47c <__lshift+0xd8>)
 800d3d2:	482b      	ldr	r0, [pc, #172]	; (800d480 <__lshift+0xdc>)
 800d3d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d3d8:	f7fe fb4e 	bl	800ba78 <__assert_func>
 800d3dc:	3101      	adds	r1, #1
 800d3de:	005b      	lsls	r3, r3, #1
 800d3e0:	e7ee      	b.n	800d3c0 <__lshift+0x1c>
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	f100 0114 	add.w	r1, r0, #20
 800d3e8:	f100 0210 	add.w	r2, r0, #16
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	4553      	cmp	r3, sl
 800d3f0:	db37      	blt.n	800d462 <__lshift+0xbe>
 800d3f2:	6920      	ldr	r0, [r4, #16]
 800d3f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3f8:	f104 0314 	add.w	r3, r4, #20
 800d3fc:	f019 091f 	ands.w	r9, r9, #31
 800d400:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d404:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d408:	d02f      	beq.n	800d46a <__lshift+0xc6>
 800d40a:	f1c9 0e20 	rsb	lr, r9, #32
 800d40e:	468a      	mov	sl, r1
 800d410:	f04f 0c00 	mov.w	ip, #0
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	fa02 f209 	lsl.w	r2, r2, r9
 800d41a:	ea42 020c 	orr.w	r2, r2, ip
 800d41e:	f84a 2b04 	str.w	r2, [sl], #4
 800d422:	f853 2b04 	ldr.w	r2, [r3], #4
 800d426:	4298      	cmp	r0, r3
 800d428:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d42c:	d8f2      	bhi.n	800d414 <__lshift+0x70>
 800d42e:	1b03      	subs	r3, r0, r4
 800d430:	3b15      	subs	r3, #21
 800d432:	f023 0303 	bic.w	r3, r3, #3
 800d436:	3304      	adds	r3, #4
 800d438:	f104 0215 	add.w	r2, r4, #21
 800d43c:	4290      	cmp	r0, r2
 800d43e:	bf38      	it	cc
 800d440:	2304      	movcc	r3, #4
 800d442:	f841 c003 	str.w	ip, [r1, r3]
 800d446:	f1bc 0f00 	cmp.w	ip, #0
 800d44a:	d001      	beq.n	800d450 <__lshift+0xac>
 800d44c:	f108 0602 	add.w	r6, r8, #2
 800d450:	3e01      	subs	r6, #1
 800d452:	4638      	mov	r0, r7
 800d454:	612e      	str	r6, [r5, #16]
 800d456:	4621      	mov	r1, r4
 800d458:	f7ff fd88 	bl	800cf6c <_Bfree>
 800d45c:	4628      	mov	r0, r5
 800d45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d462:	f842 0f04 	str.w	r0, [r2, #4]!
 800d466:	3301      	adds	r3, #1
 800d468:	e7c1      	b.n	800d3ee <__lshift+0x4a>
 800d46a:	3904      	subs	r1, #4
 800d46c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d470:	f841 2f04 	str.w	r2, [r1, #4]!
 800d474:	4298      	cmp	r0, r3
 800d476:	d8f9      	bhi.n	800d46c <__lshift+0xc8>
 800d478:	e7ea      	b.n	800d450 <__lshift+0xac>
 800d47a:	bf00      	nop
 800d47c:	0800eb4c 	.word	0x0800eb4c
 800d480:	0800ebd8 	.word	0x0800ebd8

0800d484 <__mcmp>:
 800d484:	b530      	push	{r4, r5, lr}
 800d486:	6902      	ldr	r2, [r0, #16]
 800d488:	690c      	ldr	r4, [r1, #16]
 800d48a:	1b12      	subs	r2, r2, r4
 800d48c:	d10e      	bne.n	800d4ac <__mcmp+0x28>
 800d48e:	f100 0314 	add.w	r3, r0, #20
 800d492:	3114      	adds	r1, #20
 800d494:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d498:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d49c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d4a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d4a4:	42a5      	cmp	r5, r4
 800d4a6:	d003      	beq.n	800d4b0 <__mcmp+0x2c>
 800d4a8:	d305      	bcc.n	800d4b6 <__mcmp+0x32>
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	4610      	mov	r0, r2
 800d4ae:	bd30      	pop	{r4, r5, pc}
 800d4b0:	4283      	cmp	r3, r0
 800d4b2:	d3f3      	bcc.n	800d49c <__mcmp+0x18>
 800d4b4:	e7fa      	b.n	800d4ac <__mcmp+0x28>
 800d4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800d4ba:	e7f7      	b.n	800d4ac <__mcmp+0x28>

0800d4bc <__mdiff>:
 800d4bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4c0:	460c      	mov	r4, r1
 800d4c2:	4606      	mov	r6, r0
 800d4c4:	4611      	mov	r1, r2
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	4690      	mov	r8, r2
 800d4ca:	f7ff ffdb 	bl	800d484 <__mcmp>
 800d4ce:	1e05      	subs	r5, r0, #0
 800d4d0:	d110      	bne.n	800d4f4 <__mdiff+0x38>
 800d4d2:	4629      	mov	r1, r5
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f7ff fd09 	bl	800ceec <_Balloc>
 800d4da:	b930      	cbnz	r0, 800d4ea <__mdiff+0x2e>
 800d4dc:	4b3a      	ldr	r3, [pc, #232]	; (800d5c8 <__mdiff+0x10c>)
 800d4de:	4602      	mov	r2, r0
 800d4e0:	f240 2132 	movw	r1, #562	; 0x232
 800d4e4:	4839      	ldr	r0, [pc, #228]	; (800d5cc <__mdiff+0x110>)
 800d4e6:	f7fe fac7 	bl	800ba78 <__assert_func>
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d4f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f4:	bfa4      	itt	ge
 800d4f6:	4643      	movge	r3, r8
 800d4f8:	46a0      	movge	r8, r4
 800d4fa:	4630      	mov	r0, r6
 800d4fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d500:	bfa6      	itte	ge
 800d502:	461c      	movge	r4, r3
 800d504:	2500      	movge	r5, #0
 800d506:	2501      	movlt	r5, #1
 800d508:	f7ff fcf0 	bl	800ceec <_Balloc>
 800d50c:	b920      	cbnz	r0, 800d518 <__mdiff+0x5c>
 800d50e:	4b2e      	ldr	r3, [pc, #184]	; (800d5c8 <__mdiff+0x10c>)
 800d510:	4602      	mov	r2, r0
 800d512:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d516:	e7e5      	b.n	800d4e4 <__mdiff+0x28>
 800d518:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d51c:	6926      	ldr	r6, [r4, #16]
 800d51e:	60c5      	str	r5, [r0, #12]
 800d520:	f104 0914 	add.w	r9, r4, #20
 800d524:	f108 0514 	add.w	r5, r8, #20
 800d528:	f100 0e14 	add.w	lr, r0, #20
 800d52c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d530:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d534:	f108 0210 	add.w	r2, r8, #16
 800d538:	46f2      	mov	sl, lr
 800d53a:	2100      	movs	r1, #0
 800d53c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d540:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d544:	fa1f f883 	uxth.w	r8, r3
 800d548:	fa11 f18b 	uxtah	r1, r1, fp
 800d54c:	0c1b      	lsrs	r3, r3, #16
 800d54e:	eba1 0808 	sub.w	r8, r1, r8
 800d552:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d556:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d55a:	fa1f f888 	uxth.w	r8, r8
 800d55e:	1419      	asrs	r1, r3, #16
 800d560:	454e      	cmp	r6, r9
 800d562:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d566:	f84a 3b04 	str.w	r3, [sl], #4
 800d56a:	d8e7      	bhi.n	800d53c <__mdiff+0x80>
 800d56c:	1b33      	subs	r3, r6, r4
 800d56e:	3b15      	subs	r3, #21
 800d570:	f023 0303 	bic.w	r3, r3, #3
 800d574:	3304      	adds	r3, #4
 800d576:	3415      	adds	r4, #21
 800d578:	42a6      	cmp	r6, r4
 800d57a:	bf38      	it	cc
 800d57c:	2304      	movcc	r3, #4
 800d57e:	441d      	add	r5, r3
 800d580:	4473      	add	r3, lr
 800d582:	469e      	mov	lr, r3
 800d584:	462e      	mov	r6, r5
 800d586:	4566      	cmp	r6, ip
 800d588:	d30e      	bcc.n	800d5a8 <__mdiff+0xec>
 800d58a:	f10c 0203 	add.w	r2, ip, #3
 800d58e:	1b52      	subs	r2, r2, r5
 800d590:	f022 0203 	bic.w	r2, r2, #3
 800d594:	3d03      	subs	r5, #3
 800d596:	45ac      	cmp	ip, r5
 800d598:	bf38      	it	cc
 800d59a:	2200      	movcc	r2, #0
 800d59c:	441a      	add	r2, r3
 800d59e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d5a2:	b17b      	cbz	r3, 800d5c4 <__mdiff+0x108>
 800d5a4:	6107      	str	r7, [r0, #16]
 800d5a6:	e7a3      	b.n	800d4f0 <__mdiff+0x34>
 800d5a8:	f856 8b04 	ldr.w	r8, [r6], #4
 800d5ac:	fa11 f288 	uxtah	r2, r1, r8
 800d5b0:	1414      	asrs	r4, r2, #16
 800d5b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d5b6:	b292      	uxth	r2, r2
 800d5b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d5bc:	f84e 2b04 	str.w	r2, [lr], #4
 800d5c0:	1421      	asrs	r1, r4, #16
 800d5c2:	e7e0      	b.n	800d586 <__mdiff+0xca>
 800d5c4:	3f01      	subs	r7, #1
 800d5c6:	e7ea      	b.n	800d59e <__mdiff+0xe2>
 800d5c8:	0800eb4c 	.word	0x0800eb4c
 800d5cc:	0800ebd8 	.word	0x0800ebd8

0800d5d0 <__ulp>:
 800d5d0:	b082      	sub	sp, #8
 800d5d2:	ed8d 0b00 	vstr	d0, [sp]
 800d5d6:	9b01      	ldr	r3, [sp, #4]
 800d5d8:	4912      	ldr	r1, [pc, #72]	; (800d624 <__ulp+0x54>)
 800d5da:	4019      	ands	r1, r3
 800d5dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d5e0:	2900      	cmp	r1, #0
 800d5e2:	dd05      	ble.n	800d5f0 <__ulp+0x20>
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	460b      	mov	r3, r1
 800d5e8:	ec43 2b10 	vmov	d0, r2, r3
 800d5ec:	b002      	add	sp, #8
 800d5ee:	4770      	bx	lr
 800d5f0:	4249      	negs	r1, r1
 800d5f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d5f6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d5fa:	f04f 0200 	mov.w	r2, #0
 800d5fe:	f04f 0300 	mov.w	r3, #0
 800d602:	da04      	bge.n	800d60e <__ulp+0x3e>
 800d604:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d608:	fa41 f300 	asr.w	r3, r1, r0
 800d60c:	e7ec      	b.n	800d5e8 <__ulp+0x18>
 800d60e:	f1a0 0114 	sub.w	r1, r0, #20
 800d612:	291e      	cmp	r1, #30
 800d614:	bfda      	itte	le
 800d616:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d61a:	fa20 f101 	lsrle.w	r1, r0, r1
 800d61e:	2101      	movgt	r1, #1
 800d620:	460a      	mov	r2, r1
 800d622:	e7e1      	b.n	800d5e8 <__ulp+0x18>
 800d624:	7ff00000 	.word	0x7ff00000

0800d628 <__b2d>:
 800d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62a:	6905      	ldr	r5, [r0, #16]
 800d62c:	f100 0714 	add.w	r7, r0, #20
 800d630:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d634:	1f2e      	subs	r6, r5, #4
 800d636:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d63a:	4620      	mov	r0, r4
 800d63c:	f7ff fd48 	bl	800d0d0 <__hi0bits>
 800d640:	f1c0 0320 	rsb	r3, r0, #32
 800d644:	280a      	cmp	r0, #10
 800d646:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d6c4 <__b2d+0x9c>
 800d64a:	600b      	str	r3, [r1, #0]
 800d64c:	dc14      	bgt.n	800d678 <__b2d+0x50>
 800d64e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d652:	fa24 f10e 	lsr.w	r1, r4, lr
 800d656:	42b7      	cmp	r7, r6
 800d658:	ea41 030c 	orr.w	r3, r1, ip
 800d65c:	bf34      	ite	cc
 800d65e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d662:	2100      	movcs	r1, #0
 800d664:	3015      	adds	r0, #21
 800d666:	fa04 f000 	lsl.w	r0, r4, r0
 800d66a:	fa21 f10e 	lsr.w	r1, r1, lr
 800d66e:	ea40 0201 	orr.w	r2, r0, r1
 800d672:	ec43 2b10 	vmov	d0, r2, r3
 800d676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d678:	42b7      	cmp	r7, r6
 800d67a:	bf3a      	itte	cc
 800d67c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d680:	f1a5 0608 	subcc.w	r6, r5, #8
 800d684:	2100      	movcs	r1, #0
 800d686:	380b      	subs	r0, #11
 800d688:	d017      	beq.n	800d6ba <__b2d+0x92>
 800d68a:	f1c0 0c20 	rsb	ip, r0, #32
 800d68e:	fa04 f500 	lsl.w	r5, r4, r0
 800d692:	42be      	cmp	r6, r7
 800d694:	fa21 f40c 	lsr.w	r4, r1, ip
 800d698:	ea45 0504 	orr.w	r5, r5, r4
 800d69c:	bf8c      	ite	hi
 800d69e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d6a2:	2400      	movls	r4, #0
 800d6a4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d6a8:	fa01 f000 	lsl.w	r0, r1, r0
 800d6ac:	fa24 f40c 	lsr.w	r4, r4, ip
 800d6b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d6b4:	ea40 0204 	orr.w	r2, r0, r4
 800d6b8:	e7db      	b.n	800d672 <__b2d+0x4a>
 800d6ba:	ea44 030c 	orr.w	r3, r4, ip
 800d6be:	460a      	mov	r2, r1
 800d6c0:	e7d7      	b.n	800d672 <__b2d+0x4a>
 800d6c2:	bf00      	nop
 800d6c4:	3ff00000 	.word	0x3ff00000

0800d6c8 <__d2b>:
 800d6c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d6cc:	4689      	mov	r9, r1
 800d6ce:	2101      	movs	r1, #1
 800d6d0:	ec57 6b10 	vmov	r6, r7, d0
 800d6d4:	4690      	mov	r8, r2
 800d6d6:	f7ff fc09 	bl	800ceec <_Balloc>
 800d6da:	4604      	mov	r4, r0
 800d6dc:	b930      	cbnz	r0, 800d6ec <__d2b+0x24>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	4b25      	ldr	r3, [pc, #148]	; (800d778 <__d2b+0xb0>)
 800d6e2:	4826      	ldr	r0, [pc, #152]	; (800d77c <__d2b+0xb4>)
 800d6e4:	f240 310a 	movw	r1, #778	; 0x30a
 800d6e8:	f7fe f9c6 	bl	800ba78 <__assert_func>
 800d6ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d6f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d6f4:	bb35      	cbnz	r5, 800d744 <__d2b+0x7c>
 800d6f6:	2e00      	cmp	r6, #0
 800d6f8:	9301      	str	r3, [sp, #4]
 800d6fa:	d028      	beq.n	800d74e <__d2b+0x86>
 800d6fc:	4668      	mov	r0, sp
 800d6fe:	9600      	str	r6, [sp, #0]
 800d700:	f7ff fd06 	bl	800d110 <__lo0bits>
 800d704:	9900      	ldr	r1, [sp, #0]
 800d706:	b300      	cbz	r0, 800d74a <__d2b+0x82>
 800d708:	9a01      	ldr	r2, [sp, #4]
 800d70a:	f1c0 0320 	rsb	r3, r0, #32
 800d70e:	fa02 f303 	lsl.w	r3, r2, r3
 800d712:	430b      	orrs	r3, r1
 800d714:	40c2      	lsrs	r2, r0
 800d716:	6163      	str	r3, [r4, #20]
 800d718:	9201      	str	r2, [sp, #4]
 800d71a:	9b01      	ldr	r3, [sp, #4]
 800d71c:	61a3      	str	r3, [r4, #24]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	bf14      	ite	ne
 800d722:	2202      	movne	r2, #2
 800d724:	2201      	moveq	r2, #1
 800d726:	6122      	str	r2, [r4, #16]
 800d728:	b1d5      	cbz	r5, 800d760 <__d2b+0x98>
 800d72a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d72e:	4405      	add	r5, r0
 800d730:	f8c9 5000 	str.w	r5, [r9]
 800d734:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d738:	f8c8 0000 	str.w	r0, [r8]
 800d73c:	4620      	mov	r0, r4
 800d73e:	b003      	add	sp, #12
 800d740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d748:	e7d5      	b.n	800d6f6 <__d2b+0x2e>
 800d74a:	6161      	str	r1, [r4, #20]
 800d74c:	e7e5      	b.n	800d71a <__d2b+0x52>
 800d74e:	a801      	add	r0, sp, #4
 800d750:	f7ff fcde 	bl	800d110 <__lo0bits>
 800d754:	9b01      	ldr	r3, [sp, #4]
 800d756:	6163      	str	r3, [r4, #20]
 800d758:	2201      	movs	r2, #1
 800d75a:	6122      	str	r2, [r4, #16]
 800d75c:	3020      	adds	r0, #32
 800d75e:	e7e3      	b.n	800d728 <__d2b+0x60>
 800d760:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d764:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d768:	f8c9 0000 	str.w	r0, [r9]
 800d76c:	6918      	ldr	r0, [r3, #16]
 800d76e:	f7ff fcaf 	bl	800d0d0 <__hi0bits>
 800d772:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d776:	e7df      	b.n	800d738 <__d2b+0x70>
 800d778:	0800eb4c 	.word	0x0800eb4c
 800d77c:	0800ebd8 	.word	0x0800ebd8

0800d780 <__ratio>:
 800d780:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d784:	4688      	mov	r8, r1
 800d786:	4669      	mov	r1, sp
 800d788:	4681      	mov	r9, r0
 800d78a:	f7ff ff4d 	bl	800d628 <__b2d>
 800d78e:	a901      	add	r1, sp, #4
 800d790:	4640      	mov	r0, r8
 800d792:	ec55 4b10 	vmov	r4, r5, d0
 800d796:	f7ff ff47 	bl	800d628 <__b2d>
 800d79a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d79e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d7a2:	eba3 0c02 	sub.w	ip, r3, r2
 800d7a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d7aa:	1a9b      	subs	r3, r3, r2
 800d7ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d7b0:	ec51 0b10 	vmov	r0, r1, d0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	bfd6      	itet	le
 800d7b8:	460a      	movle	r2, r1
 800d7ba:	462a      	movgt	r2, r5
 800d7bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d7c0:	468b      	mov	fp, r1
 800d7c2:	462f      	mov	r7, r5
 800d7c4:	bfd4      	ite	le
 800d7c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d7ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	ee10 2a10 	vmov	r2, s0
 800d7d4:	465b      	mov	r3, fp
 800d7d6:	4639      	mov	r1, r7
 800d7d8:	f7f3 f860 	bl	800089c <__aeabi_ddiv>
 800d7dc:	ec41 0b10 	vmov	d0, r0, r1
 800d7e0:	b003      	add	sp, #12
 800d7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d7e6 <__copybits>:
 800d7e6:	3901      	subs	r1, #1
 800d7e8:	b570      	push	{r4, r5, r6, lr}
 800d7ea:	1149      	asrs	r1, r1, #5
 800d7ec:	6914      	ldr	r4, [r2, #16]
 800d7ee:	3101      	adds	r1, #1
 800d7f0:	f102 0314 	add.w	r3, r2, #20
 800d7f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d7f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d7fc:	1f05      	subs	r5, r0, #4
 800d7fe:	42a3      	cmp	r3, r4
 800d800:	d30c      	bcc.n	800d81c <__copybits+0x36>
 800d802:	1aa3      	subs	r3, r4, r2
 800d804:	3b11      	subs	r3, #17
 800d806:	f023 0303 	bic.w	r3, r3, #3
 800d80a:	3211      	adds	r2, #17
 800d80c:	42a2      	cmp	r2, r4
 800d80e:	bf88      	it	hi
 800d810:	2300      	movhi	r3, #0
 800d812:	4418      	add	r0, r3
 800d814:	2300      	movs	r3, #0
 800d816:	4288      	cmp	r0, r1
 800d818:	d305      	bcc.n	800d826 <__copybits+0x40>
 800d81a:	bd70      	pop	{r4, r5, r6, pc}
 800d81c:	f853 6b04 	ldr.w	r6, [r3], #4
 800d820:	f845 6f04 	str.w	r6, [r5, #4]!
 800d824:	e7eb      	b.n	800d7fe <__copybits+0x18>
 800d826:	f840 3b04 	str.w	r3, [r0], #4
 800d82a:	e7f4      	b.n	800d816 <__copybits+0x30>

0800d82c <__any_on>:
 800d82c:	f100 0214 	add.w	r2, r0, #20
 800d830:	6900      	ldr	r0, [r0, #16]
 800d832:	114b      	asrs	r3, r1, #5
 800d834:	4298      	cmp	r0, r3
 800d836:	b510      	push	{r4, lr}
 800d838:	db11      	blt.n	800d85e <__any_on+0x32>
 800d83a:	dd0a      	ble.n	800d852 <__any_on+0x26>
 800d83c:	f011 011f 	ands.w	r1, r1, #31
 800d840:	d007      	beq.n	800d852 <__any_on+0x26>
 800d842:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d846:	fa24 f001 	lsr.w	r0, r4, r1
 800d84a:	fa00 f101 	lsl.w	r1, r0, r1
 800d84e:	428c      	cmp	r4, r1
 800d850:	d10b      	bne.n	800d86a <__any_on+0x3e>
 800d852:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d856:	4293      	cmp	r3, r2
 800d858:	d803      	bhi.n	800d862 <__any_on+0x36>
 800d85a:	2000      	movs	r0, #0
 800d85c:	bd10      	pop	{r4, pc}
 800d85e:	4603      	mov	r3, r0
 800d860:	e7f7      	b.n	800d852 <__any_on+0x26>
 800d862:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d866:	2900      	cmp	r1, #0
 800d868:	d0f5      	beq.n	800d856 <__any_on+0x2a>
 800d86a:	2001      	movs	r0, #1
 800d86c:	e7f6      	b.n	800d85c <__any_on+0x30>

0800d86e <_calloc_r>:
 800d86e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d870:	fba1 2402 	umull	r2, r4, r1, r2
 800d874:	b94c      	cbnz	r4, 800d88a <_calloc_r+0x1c>
 800d876:	4611      	mov	r1, r2
 800d878:	9201      	str	r2, [sp, #4]
 800d87a:	f000 f87b 	bl	800d974 <_malloc_r>
 800d87e:	9a01      	ldr	r2, [sp, #4]
 800d880:	4605      	mov	r5, r0
 800d882:	b930      	cbnz	r0, 800d892 <_calloc_r+0x24>
 800d884:	4628      	mov	r0, r5
 800d886:	b003      	add	sp, #12
 800d888:	bd30      	pop	{r4, r5, pc}
 800d88a:	220c      	movs	r2, #12
 800d88c:	6002      	str	r2, [r0, #0]
 800d88e:	2500      	movs	r5, #0
 800d890:	e7f8      	b.n	800d884 <_calloc_r+0x16>
 800d892:	4621      	mov	r1, r4
 800d894:	f7fc fb9a 	bl	8009fcc <memset>
 800d898:	e7f4      	b.n	800d884 <_calloc_r+0x16>
	...

0800d89c <_free_r>:
 800d89c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d89e:	2900      	cmp	r1, #0
 800d8a0:	d044      	beq.n	800d92c <_free_r+0x90>
 800d8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8a6:	9001      	str	r0, [sp, #4]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	f1a1 0404 	sub.w	r4, r1, #4
 800d8ae:	bfb8      	it	lt
 800d8b0:	18e4      	addlt	r4, r4, r3
 800d8b2:	f000 fec5 	bl	800e640 <__malloc_lock>
 800d8b6:	4a1e      	ldr	r2, [pc, #120]	; (800d930 <_free_r+0x94>)
 800d8b8:	9801      	ldr	r0, [sp, #4]
 800d8ba:	6813      	ldr	r3, [r2, #0]
 800d8bc:	b933      	cbnz	r3, 800d8cc <_free_r+0x30>
 800d8be:	6063      	str	r3, [r4, #4]
 800d8c0:	6014      	str	r4, [r2, #0]
 800d8c2:	b003      	add	sp, #12
 800d8c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8c8:	f000 bec0 	b.w	800e64c <__malloc_unlock>
 800d8cc:	42a3      	cmp	r3, r4
 800d8ce:	d908      	bls.n	800d8e2 <_free_r+0x46>
 800d8d0:	6825      	ldr	r5, [r4, #0]
 800d8d2:	1961      	adds	r1, r4, r5
 800d8d4:	428b      	cmp	r3, r1
 800d8d6:	bf01      	itttt	eq
 800d8d8:	6819      	ldreq	r1, [r3, #0]
 800d8da:	685b      	ldreq	r3, [r3, #4]
 800d8dc:	1949      	addeq	r1, r1, r5
 800d8de:	6021      	streq	r1, [r4, #0]
 800d8e0:	e7ed      	b.n	800d8be <_free_r+0x22>
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	b10b      	cbz	r3, 800d8ec <_free_r+0x50>
 800d8e8:	42a3      	cmp	r3, r4
 800d8ea:	d9fa      	bls.n	800d8e2 <_free_r+0x46>
 800d8ec:	6811      	ldr	r1, [r2, #0]
 800d8ee:	1855      	adds	r5, r2, r1
 800d8f0:	42a5      	cmp	r5, r4
 800d8f2:	d10b      	bne.n	800d90c <_free_r+0x70>
 800d8f4:	6824      	ldr	r4, [r4, #0]
 800d8f6:	4421      	add	r1, r4
 800d8f8:	1854      	adds	r4, r2, r1
 800d8fa:	42a3      	cmp	r3, r4
 800d8fc:	6011      	str	r1, [r2, #0]
 800d8fe:	d1e0      	bne.n	800d8c2 <_free_r+0x26>
 800d900:	681c      	ldr	r4, [r3, #0]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	6053      	str	r3, [r2, #4]
 800d906:	4421      	add	r1, r4
 800d908:	6011      	str	r1, [r2, #0]
 800d90a:	e7da      	b.n	800d8c2 <_free_r+0x26>
 800d90c:	d902      	bls.n	800d914 <_free_r+0x78>
 800d90e:	230c      	movs	r3, #12
 800d910:	6003      	str	r3, [r0, #0]
 800d912:	e7d6      	b.n	800d8c2 <_free_r+0x26>
 800d914:	6825      	ldr	r5, [r4, #0]
 800d916:	1961      	adds	r1, r4, r5
 800d918:	428b      	cmp	r3, r1
 800d91a:	bf04      	itt	eq
 800d91c:	6819      	ldreq	r1, [r3, #0]
 800d91e:	685b      	ldreq	r3, [r3, #4]
 800d920:	6063      	str	r3, [r4, #4]
 800d922:	bf04      	itt	eq
 800d924:	1949      	addeq	r1, r1, r5
 800d926:	6021      	streq	r1, [r4, #0]
 800d928:	6054      	str	r4, [r2, #4]
 800d92a:	e7ca      	b.n	800d8c2 <_free_r+0x26>
 800d92c:	b003      	add	sp, #12
 800d92e:	bd30      	pop	{r4, r5, pc}
 800d930:	20000554 	.word	0x20000554

0800d934 <sbrk_aligned>:
 800d934:	b570      	push	{r4, r5, r6, lr}
 800d936:	4e0e      	ldr	r6, [pc, #56]	; (800d970 <sbrk_aligned+0x3c>)
 800d938:	460c      	mov	r4, r1
 800d93a:	6831      	ldr	r1, [r6, #0]
 800d93c:	4605      	mov	r5, r0
 800d93e:	b911      	cbnz	r1, 800d946 <sbrk_aligned+0x12>
 800d940:	f000 fb4a 	bl	800dfd8 <_sbrk_r>
 800d944:	6030      	str	r0, [r6, #0]
 800d946:	4621      	mov	r1, r4
 800d948:	4628      	mov	r0, r5
 800d94a:	f000 fb45 	bl	800dfd8 <_sbrk_r>
 800d94e:	1c43      	adds	r3, r0, #1
 800d950:	d00a      	beq.n	800d968 <sbrk_aligned+0x34>
 800d952:	1cc4      	adds	r4, r0, #3
 800d954:	f024 0403 	bic.w	r4, r4, #3
 800d958:	42a0      	cmp	r0, r4
 800d95a:	d007      	beq.n	800d96c <sbrk_aligned+0x38>
 800d95c:	1a21      	subs	r1, r4, r0
 800d95e:	4628      	mov	r0, r5
 800d960:	f000 fb3a 	bl	800dfd8 <_sbrk_r>
 800d964:	3001      	adds	r0, #1
 800d966:	d101      	bne.n	800d96c <sbrk_aligned+0x38>
 800d968:	f04f 34ff 	mov.w	r4, #4294967295
 800d96c:	4620      	mov	r0, r4
 800d96e:	bd70      	pop	{r4, r5, r6, pc}
 800d970:	20000558 	.word	0x20000558

0800d974 <_malloc_r>:
 800d974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d978:	1ccd      	adds	r5, r1, #3
 800d97a:	f025 0503 	bic.w	r5, r5, #3
 800d97e:	3508      	adds	r5, #8
 800d980:	2d0c      	cmp	r5, #12
 800d982:	bf38      	it	cc
 800d984:	250c      	movcc	r5, #12
 800d986:	2d00      	cmp	r5, #0
 800d988:	4607      	mov	r7, r0
 800d98a:	db01      	blt.n	800d990 <_malloc_r+0x1c>
 800d98c:	42a9      	cmp	r1, r5
 800d98e:	d905      	bls.n	800d99c <_malloc_r+0x28>
 800d990:	230c      	movs	r3, #12
 800d992:	603b      	str	r3, [r7, #0]
 800d994:	2600      	movs	r6, #0
 800d996:	4630      	mov	r0, r6
 800d998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d99c:	4e2e      	ldr	r6, [pc, #184]	; (800da58 <_malloc_r+0xe4>)
 800d99e:	f000 fe4f 	bl	800e640 <__malloc_lock>
 800d9a2:	6833      	ldr	r3, [r6, #0]
 800d9a4:	461c      	mov	r4, r3
 800d9a6:	bb34      	cbnz	r4, 800d9f6 <_malloc_r+0x82>
 800d9a8:	4629      	mov	r1, r5
 800d9aa:	4638      	mov	r0, r7
 800d9ac:	f7ff ffc2 	bl	800d934 <sbrk_aligned>
 800d9b0:	1c43      	adds	r3, r0, #1
 800d9b2:	4604      	mov	r4, r0
 800d9b4:	d14d      	bne.n	800da52 <_malloc_r+0xde>
 800d9b6:	6834      	ldr	r4, [r6, #0]
 800d9b8:	4626      	mov	r6, r4
 800d9ba:	2e00      	cmp	r6, #0
 800d9bc:	d140      	bne.n	800da40 <_malloc_r+0xcc>
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	4631      	mov	r1, r6
 800d9c2:	4638      	mov	r0, r7
 800d9c4:	eb04 0803 	add.w	r8, r4, r3
 800d9c8:	f000 fb06 	bl	800dfd8 <_sbrk_r>
 800d9cc:	4580      	cmp	r8, r0
 800d9ce:	d13a      	bne.n	800da46 <_malloc_r+0xd2>
 800d9d0:	6821      	ldr	r1, [r4, #0]
 800d9d2:	3503      	adds	r5, #3
 800d9d4:	1a6d      	subs	r5, r5, r1
 800d9d6:	f025 0503 	bic.w	r5, r5, #3
 800d9da:	3508      	adds	r5, #8
 800d9dc:	2d0c      	cmp	r5, #12
 800d9de:	bf38      	it	cc
 800d9e0:	250c      	movcc	r5, #12
 800d9e2:	4629      	mov	r1, r5
 800d9e4:	4638      	mov	r0, r7
 800d9e6:	f7ff ffa5 	bl	800d934 <sbrk_aligned>
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	d02b      	beq.n	800da46 <_malloc_r+0xd2>
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	442b      	add	r3, r5
 800d9f2:	6023      	str	r3, [r4, #0]
 800d9f4:	e00e      	b.n	800da14 <_malloc_r+0xa0>
 800d9f6:	6822      	ldr	r2, [r4, #0]
 800d9f8:	1b52      	subs	r2, r2, r5
 800d9fa:	d41e      	bmi.n	800da3a <_malloc_r+0xc6>
 800d9fc:	2a0b      	cmp	r2, #11
 800d9fe:	d916      	bls.n	800da2e <_malloc_r+0xba>
 800da00:	1961      	adds	r1, r4, r5
 800da02:	42a3      	cmp	r3, r4
 800da04:	6025      	str	r5, [r4, #0]
 800da06:	bf18      	it	ne
 800da08:	6059      	strne	r1, [r3, #4]
 800da0a:	6863      	ldr	r3, [r4, #4]
 800da0c:	bf08      	it	eq
 800da0e:	6031      	streq	r1, [r6, #0]
 800da10:	5162      	str	r2, [r4, r5]
 800da12:	604b      	str	r3, [r1, #4]
 800da14:	4638      	mov	r0, r7
 800da16:	f104 060b 	add.w	r6, r4, #11
 800da1a:	f000 fe17 	bl	800e64c <__malloc_unlock>
 800da1e:	f026 0607 	bic.w	r6, r6, #7
 800da22:	1d23      	adds	r3, r4, #4
 800da24:	1af2      	subs	r2, r6, r3
 800da26:	d0b6      	beq.n	800d996 <_malloc_r+0x22>
 800da28:	1b9b      	subs	r3, r3, r6
 800da2a:	50a3      	str	r3, [r4, r2]
 800da2c:	e7b3      	b.n	800d996 <_malloc_r+0x22>
 800da2e:	6862      	ldr	r2, [r4, #4]
 800da30:	42a3      	cmp	r3, r4
 800da32:	bf0c      	ite	eq
 800da34:	6032      	streq	r2, [r6, #0]
 800da36:	605a      	strne	r2, [r3, #4]
 800da38:	e7ec      	b.n	800da14 <_malloc_r+0xa0>
 800da3a:	4623      	mov	r3, r4
 800da3c:	6864      	ldr	r4, [r4, #4]
 800da3e:	e7b2      	b.n	800d9a6 <_malloc_r+0x32>
 800da40:	4634      	mov	r4, r6
 800da42:	6876      	ldr	r6, [r6, #4]
 800da44:	e7b9      	b.n	800d9ba <_malloc_r+0x46>
 800da46:	230c      	movs	r3, #12
 800da48:	603b      	str	r3, [r7, #0]
 800da4a:	4638      	mov	r0, r7
 800da4c:	f000 fdfe 	bl	800e64c <__malloc_unlock>
 800da50:	e7a1      	b.n	800d996 <_malloc_r+0x22>
 800da52:	6025      	str	r5, [r4, #0]
 800da54:	e7de      	b.n	800da14 <_malloc_r+0xa0>
 800da56:	bf00      	nop
 800da58:	20000554 	.word	0x20000554

0800da5c <__ssputs_r>:
 800da5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da60:	688e      	ldr	r6, [r1, #8]
 800da62:	429e      	cmp	r6, r3
 800da64:	4682      	mov	sl, r0
 800da66:	460c      	mov	r4, r1
 800da68:	4690      	mov	r8, r2
 800da6a:	461f      	mov	r7, r3
 800da6c:	d838      	bhi.n	800dae0 <__ssputs_r+0x84>
 800da6e:	898a      	ldrh	r2, [r1, #12]
 800da70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da74:	d032      	beq.n	800dadc <__ssputs_r+0x80>
 800da76:	6825      	ldr	r5, [r4, #0]
 800da78:	6909      	ldr	r1, [r1, #16]
 800da7a:	eba5 0901 	sub.w	r9, r5, r1
 800da7e:	6965      	ldr	r5, [r4, #20]
 800da80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da88:	3301      	adds	r3, #1
 800da8a:	444b      	add	r3, r9
 800da8c:	106d      	asrs	r5, r5, #1
 800da8e:	429d      	cmp	r5, r3
 800da90:	bf38      	it	cc
 800da92:	461d      	movcc	r5, r3
 800da94:	0553      	lsls	r3, r2, #21
 800da96:	d531      	bpl.n	800dafc <__ssputs_r+0xa0>
 800da98:	4629      	mov	r1, r5
 800da9a:	f7ff ff6b 	bl	800d974 <_malloc_r>
 800da9e:	4606      	mov	r6, r0
 800daa0:	b950      	cbnz	r0, 800dab8 <__ssputs_r+0x5c>
 800daa2:	230c      	movs	r3, #12
 800daa4:	f8ca 3000 	str.w	r3, [sl]
 800daa8:	89a3      	ldrh	r3, [r4, #12]
 800daaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daae:	81a3      	strh	r3, [r4, #12]
 800dab0:	f04f 30ff 	mov.w	r0, #4294967295
 800dab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dab8:	6921      	ldr	r1, [r4, #16]
 800daba:	464a      	mov	r2, r9
 800dabc:	f7fc fa78 	bl	8009fb0 <memcpy>
 800dac0:	89a3      	ldrh	r3, [r4, #12]
 800dac2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daca:	81a3      	strh	r3, [r4, #12]
 800dacc:	6126      	str	r6, [r4, #16]
 800dace:	6165      	str	r5, [r4, #20]
 800dad0:	444e      	add	r6, r9
 800dad2:	eba5 0509 	sub.w	r5, r5, r9
 800dad6:	6026      	str	r6, [r4, #0]
 800dad8:	60a5      	str	r5, [r4, #8]
 800dada:	463e      	mov	r6, r7
 800dadc:	42be      	cmp	r6, r7
 800dade:	d900      	bls.n	800dae2 <__ssputs_r+0x86>
 800dae0:	463e      	mov	r6, r7
 800dae2:	6820      	ldr	r0, [r4, #0]
 800dae4:	4632      	mov	r2, r6
 800dae6:	4641      	mov	r1, r8
 800dae8:	f000 fd90 	bl	800e60c <memmove>
 800daec:	68a3      	ldr	r3, [r4, #8]
 800daee:	1b9b      	subs	r3, r3, r6
 800daf0:	60a3      	str	r3, [r4, #8]
 800daf2:	6823      	ldr	r3, [r4, #0]
 800daf4:	4433      	add	r3, r6
 800daf6:	6023      	str	r3, [r4, #0]
 800daf8:	2000      	movs	r0, #0
 800dafa:	e7db      	b.n	800dab4 <__ssputs_r+0x58>
 800dafc:	462a      	mov	r2, r5
 800dafe:	f000 fdab 	bl	800e658 <_realloc_r>
 800db02:	4606      	mov	r6, r0
 800db04:	2800      	cmp	r0, #0
 800db06:	d1e1      	bne.n	800dacc <__ssputs_r+0x70>
 800db08:	6921      	ldr	r1, [r4, #16]
 800db0a:	4650      	mov	r0, sl
 800db0c:	f7ff fec6 	bl	800d89c <_free_r>
 800db10:	e7c7      	b.n	800daa2 <__ssputs_r+0x46>
	...

0800db14 <_svfiprintf_r>:
 800db14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db18:	4698      	mov	r8, r3
 800db1a:	898b      	ldrh	r3, [r1, #12]
 800db1c:	061b      	lsls	r3, r3, #24
 800db1e:	b09d      	sub	sp, #116	; 0x74
 800db20:	4607      	mov	r7, r0
 800db22:	460d      	mov	r5, r1
 800db24:	4614      	mov	r4, r2
 800db26:	d50e      	bpl.n	800db46 <_svfiprintf_r+0x32>
 800db28:	690b      	ldr	r3, [r1, #16]
 800db2a:	b963      	cbnz	r3, 800db46 <_svfiprintf_r+0x32>
 800db2c:	2140      	movs	r1, #64	; 0x40
 800db2e:	f7ff ff21 	bl	800d974 <_malloc_r>
 800db32:	6028      	str	r0, [r5, #0]
 800db34:	6128      	str	r0, [r5, #16]
 800db36:	b920      	cbnz	r0, 800db42 <_svfiprintf_r+0x2e>
 800db38:	230c      	movs	r3, #12
 800db3a:	603b      	str	r3, [r7, #0]
 800db3c:	f04f 30ff 	mov.w	r0, #4294967295
 800db40:	e0d1      	b.n	800dce6 <_svfiprintf_r+0x1d2>
 800db42:	2340      	movs	r3, #64	; 0x40
 800db44:	616b      	str	r3, [r5, #20]
 800db46:	2300      	movs	r3, #0
 800db48:	9309      	str	r3, [sp, #36]	; 0x24
 800db4a:	2320      	movs	r3, #32
 800db4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db50:	f8cd 800c 	str.w	r8, [sp, #12]
 800db54:	2330      	movs	r3, #48	; 0x30
 800db56:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd00 <_svfiprintf_r+0x1ec>
 800db5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db5e:	f04f 0901 	mov.w	r9, #1
 800db62:	4623      	mov	r3, r4
 800db64:	469a      	mov	sl, r3
 800db66:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db6a:	b10a      	cbz	r2, 800db70 <_svfiprintf_r+0x5c>
 800db6c:	2a25      	cmp	r2, #37	; 0x25
 800db6e:	d1f9      	bne.n	800db64 <_svfiprintf_r+0x50>
 800db70:	ebba 0b04 	subs.w	fp, sl, r4
 800db74:	d00b      	beq.n	800db8e <_svfiprintf_r+0x7a>
 800db76:	465b      	mov	r3, fp
 800db78:	4622      	mov	r2, r4
 800db7a:	4629      	mov	r1, r5
 800db7c:	4638      	mov	r0, r7
 800db7e:	f7ff ff6d 	bl	800da5c <__ssputs_r>
 800db82:	3001      	adds	r0, #1
 800db84:	f000 80aa 	beq.w	800dcdc <_svfiprintf_r+0x1c8>
 800db88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db8a:	445a      	add	r2, fp
 800db8c:	9209      	str	r2, [sp, #36]	; 0x24
 800db8e:	f89a 3000 	ldrb.w	r3, [sl]
 800db92:	2b00      	cmp	r3, #0
 800db94:	f000 80a2 	beq.w	800dcdc <_svfiprintf_r+0x1c8>
 800db98:	2300      	movs	r3, #0
 800db9a:	f04f 32ff 	mov.w	r2, #4294967295
 800db9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dba2:	f10a 0a01 	add.w	sl, sl, #1
 800dba6:	9304      	str	r3, [sp, #16]
 800dba8:	9307      	str	r3, [sp, #28]
 800dbaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbae:	931a      	str	r3, [sp, #104]	; 0x68
 800dbb0:	4654      	mov	r4, sl
 800dbb2:	2205      	movs	r2, #5
 800dbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbb8:	4851      	ldr	r0, [pc, #324]	; (800dd00 <_svfiprintf_r+0x1ec>)
 800dbba:	f7f2 fb39 	bl	8000230 <memchr>
 800dbbe:	9a04      	ldr	r2, [sp, #16]
 800dbc0:	b9d8      	cbnz	r0, 800dbfa <_svfiprintf_r+0xe6>
 800dbc2:	06d0      	lsls	r0, r2, #27
 800dbc4:	bf44      	itt	mi
 800dbc6:	2320      	movmi	r3, #32
 800dbc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbcc:	0711      	lsls	r1, r2, #28
 800dbce:	bf44      	itt	mi
 800dbd0:	232b      	movmi	r3, #43	; 0x2b
 800dbd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbd6:	f89a 3000 	ldrb.w	r3, [sl]
 800dbda:	2b2a      	cmp	r3, #42	; 0x2a
 800dbdc:	d015      	beq.n	800dc0a <_svfiprintf_r+0xf6>
 800dbde:	9a07      	ldr	r2, [sp, #28]
 800dbe0:	4654      	mov	r4, sl
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	f04f 0c0a 	mov.w	ip, #10
 800dbe8:	4621      	mov	r1, r4
 800dbea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbee:	3b30      	subs	r3, #48	; 0x30
 800dbf0:	2b09      	cmp	r3, #9
 800dbf2:	d94e      	bls.n	800dc92 <_svfiprintf_r+0x17e>
 800dbf4:	b1b0      	cbz	r0, 800dc24 <_svfiprintf_r+0x110>
 800dbf6:	9207      	str	r2, [sp, #28]
 800dbf8:	e014      	b.n	800dc24 <_svfiprintf_r+0x110>
 800dbfa:	eba0 0308 	sub.w	r3, r0, r8
 800dbfe:	fa09 f303 	lsl.w	r3, r9, r3
 800dc02:	4313      	orrs	r3, r2
 800dc04:	9304      	str	r3, [sp, #16]
 800dc06:	46a2      	mov	sl, r4
 800dc08:	e7d2      	b.n	800dbb0 <_svfiprintf_r+0x9c>
 800dc0a:	9b03      	ldr	r3, [sp, #12]
 800dc0c:	1d19      	adds	r1, r3, #4
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	9103      	str	r1, [sp, #12]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	bfbb      	ittet	lt
 800dc16:	425b      	neglt	r3, r3
 800dc18:	f042 0202 	orrlt.w	r2, r2, #2
 800dc1c:	9307      	strge	r3, [sp, #28]
 800dc1e:	9307      	strlt	r3, [sp, #28]
 800dc20:	bfb8      	it	lt
 800dc22:	9204      	strlt	r2, [sp, #16]
 800dc24:	7823      	ldrb	r3, [r4, #0]
 800dc26:	2b2e      	cmp	r3, #46	; 0x2e
 800dc28:	d10c      	bne.n	800dc44 <_svfiprintf_r+0x130>
 800dc2a:	7863      	ldrb	r3, [r4, #1]
 800dc2c:	2b2a      	cmp	r3, #42	; 0x2a
 800dc2e:	d135      	bne.n	800dc9c <_svfiprintf_r+0x188>
 800dc30:	9b03      	ldr	r3, [sp, #12]
 800dc32:	1d1a      	adds	r2, r3, #4
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	9203      	str	r2, [sp, #12]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	bfb8      	it	lt
 800dc3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc40:	3402      	adds	r4, #2
 800dc42:	9305      	str	r3, [sp, #20]
 800dc44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd10 <_svfiprintf_r+0x1fc>
 800dc48:	7821      	ldrb	r1, [r4, #0]
 800dc4a:	2203      	movs	r2, #3
 800dc4c:	4650      	mov	r0, sl
 800dc4e:	f7f2 faef 	bl	8000230 <memchr>
 800dc52:	b140      	cbz	r0, 800dc66 <_svfiprintf_r+0x152>
 800dc54:	2340      	movs	r3, #64	; 0x40
 800dc56:	eba0 000a 	sub.w	r0, r0, sl
 800dc5a:	fa03 f000 	lsl.w	r0, r3, r0
 800dc5e:	9b04      	ldr	r3, [sp, #16]
 800dc60:	4303      	orrs	r3, r0
 800dc62:	3401      	adds	r4, #1
 800dc64:	9304      	str	r3, [sp, #16]
 800dc66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc6a:	4826      	ldr	r0, [pc, #152]	; (800dd04 <_svfiprintf_r+0x1f0>)
 800dc6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc70:	2206      	movs	r2, #6
 800dc72:	f7f2 fadd 	bl	8000230 <memchr>
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d038      	beq.n	800dcec <_svfiprintf_r+0x1d8>
 800dc7a:	4b23      	ldr	r3, [pc, #140]	; (800dd08 <_svfiprintf_r+0x1f4>)
 800dc7c:	bb1b      	cbnz	r3, 800dcc6 <_svfiprintf_r+0x1b2>
 800dc7e:	9b03      	ldr	r3, [sp, #12]
 800dc80:	3307      	adds	r3, #7
 800dc82:	f023 0307 	bic.w	r3, r3, #7
 800dc86:	3308      	adds	r3, #8
 800dc88:	9303      	str	r3, [sp, #12]
 800dc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc8c:	4433      	add	r3, r6
 800dc8e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc90:	e767      	b.n	800db62 <_svfiprintf_r+0x4e>
 800dc92:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc96:	460c      	mov	r4, r1
 800dc98:	2001      	movs	r0, #1
 800dc9a:	e7a5      	b.n	800dbe8 <_svfiprintf_r+0xd4>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	3401      	adds	r4, #1
 800dca0:	9305      	str	r3, [sp, #20]
 800dca2:	4619      	mov	r1, r3
 800dca4:	f04f 0c0a 	mov.w	ip, #10
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcae:	3a30      	subs	r2, #48	; 0x30
 800dcb0:	2a09      	cmp	r2, #9
 800dcb2:	d903      	bls.n	800dcbc <_svfiprintf_r+0x1a8>
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d0c5      	beq.n	800dc44 <_svfiprintf_r+0x130>
 800dcb8:	9105      	str	r1, [sp, #20]
 800dcba:	e7c3      	b.n	800dc44 <_svfiprintf_r+0x130>
 800dcbc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcc0:	4604      	mov	r4, r0
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e7f0      	b.n	800dca8 <_svfiprintf_r+0x194>
 800dcc6:	ab03      	add	r3, sp, #12
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	462a      	mov	r2, r5
 800dccc:	4b0f      	ldr	r3, [pc, #60]	; (800dd0c <_svfiprintf_r+0x1f8>)
 800dcce:	a904      	add	r1, sp, #16
 800dcd0:	4638      	mov	r0, r7
 800dcd2:	f7fc fa23 	bl	800a11c <_printf_float>
 800dcd6:	1c42      	adds	r2, r0, #1
 800dcd8:	4606      	mov	r6, r0
 800dcda:	d1d6      	bne.n	800dc8a <_svfiprintf_r+0x176>
 800dcdc:	89ab      	ldrh	r3, [r5, #12]
 800dcde:	065b      	lsls	r3, r3, #25
 800dce0:	f53f af2c 	bmi.w	800db3c <_svfiprintf_r+0x28>
 800dce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dce6:	b01d      	add	sp, #116	; 0x74
 800dce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcec:	ab03      	add	r3, sp, #12
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	462a      	mov	r2, r5
 800dcf2:	4b06      	ldr	r3, [pc, #24]	; (800dd0c <_svfiprintf_r+0x1f8>)
 800dcf4:	a904      	add	r1, sp, #16
 800dcf6:	4638      	mov	r0, r7
 800dcf8:	f7fc fcb4 	bl	800a664 <_printf_i>
 800dcfc:	e7eb      	b.n	800dcd6 <_svfiprintf_r+0x1c2>
 800dcfe:	bf00      	nop
 800dd00:	0800ed34 	.word	0x0800ed34
 800dd04:	0800ed3e 	.word	0x0800ed3e
 800dd08:	0800a11d 	.word	0x0800a11d
 800dd0c:	0800da5d 	.word	0x0800da5d
 800dd10:	0800ed3a 	.word	0x0800ed3a

0800dd14 <__sfputc_r>:
 800dd14:	6893      	ldr	r3, [r2, #8]
 800dd16:	3b01      	subs	r3, #1
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	b410      	push	{r4}
 800dd1c:	6093      	str	r3, [r2, #8]
 800dd1e:	da08      	bge.n	800dd32 <__sfputc_r+0x1e>
 800dd20:	6994      	ldr	r4, [r2, #24]
 800dd22:	42a3      	cmp	r3, r4
 800dd24:	db01      	blt.n	800dd2a <__sfputc_r+0x16>
 800dd26:	290a      	cmp	r1, #10
 800dd28:	d103      	bne.n	800dd32 <__sfputc_r+0x1e>
 800dd2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd2e:	f000 b977 	b.w	800e020 <__swbuf_r>
 800dd32:	6813      	ldr	r3, [r2, #0]
 800dd34:	1c58      	adds	r0, r3, #1
 800dd36:	6010      	str	r0, [r2, #0]
 800dd38:	7019      	strb	r1, [r3, #0]
 800dd3a:	4608      	mov	r0, r1
 800dd3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd40:	4770      	bx	lr

0800dd42 <__sfputs_r>:
 800dd42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd44:	4606      	mov	r6, r0
 800dd46:	460f      	mov	r7, r1
 800dd48:	4614      	mov	r4, r2
 800dd4a:	18d5      	adds	r5, r2, r3
 800dd4c:	42ac      	cmp	r4, r5
 800dd4e:	d101      	bne.n	800dd54 <__sfputs_r+0x12>
 800dd50:	2000      	movs	r0, #0
 800dd52:	e007      	b.n	800dd64 <__sfputs_r+0x22>
 800dd54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd58:	463a      	mov	r2, r7
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	f7ff ffda 	bl	800dd14 <__sfputc_r>
 800dd60:	1c43      	adds	r3, r0, #1
 800dd62:	d1f3      	bne.n	800dd4c <__sfputs_r+0xa>
 800dd64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd68 <_vfiprintf_r>:
 800dd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6c:	460d      	mov	r5, r1
 800dd6e:	b09d      	sub	sp, #116	; 0x74
 800dd70:	4614      	mov	r4, r2
 800dd72:	4698      	mov	r8, r3
 800dd74:	4606      	mov	r6, r0
 800dd76:	b118      	cbz	r0, 800dd80 <_vfiprintf_r+0x18>
 800dd78:	6983      	ldr	r3, [r0, #24]
 800dd7a:	b90b      	cbnz	r3, 800dd80 <_vfiprintf_r+0x18>
 800dd7c:	f000 fb40 	bl	800e400 <__sinit>
 800dd80:	4b89      	ldr	r3, [pc, #548]	; (800dfa8 <_vfiprintf_r+0x240>)
 800dd82:	429d      	cmp	r5, r3
 800dd84:	d11b      	bne.n	800ddbe <_vfiprintf_r+0x56>
 800dd86:	6875      	ldr	r5, [r6, #4]
 800dd88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd8a:	07d9      	lsls	r1, r3, #31
 800dd8c:	d405      	bmi.n	800dd9a <_vfiprintf_r+0x32>
 800dd8e:	89ab      	ldrh	r3, [r5, #12]
 800dd90:	059a      	lsls	r2, r3, #22
 800dd92:	d402      	bmi.n	800dd9a <_vfiprintf_r+0x32>
 800dd94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd96:	f000 fbd1 	bl	800e53c <__retarget_lock_acquire_recursive>
 800dd9a:	89ab      	ldrh	r3, [r5, #12]
 800dd9c:	071b      	lsls	r3, r3, #28
 800dd9e:	d501      	bpl.n	800dda4 <_vfiprintf_r+0x3c>
 800dda0:	692b      	ldr	r3, [r5, #16]
 800dda2:	b9eb      	cbnz	r3, 800dde0 <_vfiprintf_r+0x78>
 800dda4:	4629      	mov	r1, r5
 800dda6:	4630      	mov	r0, r6
 800dda8:	f000 f99a 	bl	800e0e0 <__swsetup_r>
 800ddac:	b1c0      	cbz	r0, 800dde0 <_vfiprintf_r+0x78>
 800ddae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddb0:	07dc      	lsls	r4, r3, #31
 800ddb2:	d50e      	bpl.n	800ddd2 <_vfiprintf_r+0x6a>
 800ddb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb8:	b01d      	add	sp, #116	; 0x74
 800ddba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddbe:	4b7b      	ldr	r3, [pc, #492]	; (800dfac <_vfiprintf_r+0x244>)
 800ddc0:	429d      	cmp	r5, r3
 800ddc2:	d101      	bne.n	800ddc8 <_vfiprintf_r+0x60>
 800ddc4:	68b5      	ldr	r5, [r6, #8]
 800ddc6:	e7df      	b.n	800dd88 <_vfiprintf_r+0x20>
 800ddc8:	4b79      	ldr	r3, [pc, #484]	; (800dfb0 <_vfiprintf_r+0x248>)
 800ddca:	429d      	cmp	r5, r3
 800ddcc:	bf08      	it	eq
 800ddce:	68f5      	ldreq	r5, [r6, #12]
 800ddd0:	e7da      	b.n	800dd88 <_vfiprintf_r+0x20>
 800ddd2:	89ab      	ldrh	r3, [r5, #12]
 800ddd4:	0598      	lsls	r0, r3, #22
 800ddd6:	d4ed      	bmi.n	800ddb4 <_vfiprintf_r+0x4c>
 800ddd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddda:	f000 fbb0 	bl	800e53e <__retarget_lock_release_recursive>
 800ddde:	e7e9      	b.n	800ddb4 <_vfiprintf_r+0x4c>
 800dde0:	2300      	movs	r3, #0
 800dde2:	9309      	str	r3, [sp, #36]	; 0x24
 800dde4:	2320      	movs	r3, #32
 800dde6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ddea:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddee:	2330      	movs	r3, #48	; 0x30
 800ddf0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dfb4 <_vfiprintf_r+0x24c>
 800ddf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddf8:	f04f 0901 	mov.w	r9, #1
 800ddfc:	4623      	mov	r3, r4
 800ddfe:	469a      	mov	sl, r3
 800de00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de04:	b10a      	cbz	r2, 800de0a <_vfiprintf_r+0xa2>
 800de06:	2a25      	cmp	r2, #37	; 0x25
 800de08:	d1f9      	bne.n	800ddfe <_vfiprintf_r+0x96>
 800de0a:	ebba 0b04 	subs.w	fp, sl, r4
 800de0e:	d00b      	beq.n	800de28 <_vfiprintf_r+0xc0>
 800de10:	465b      	mov	r3, fp
 800de12:	4622      	mov	r2, r4
 800de14:	4629      	mov	r1, r5
 800de16:	4630      	mov	r0, r6
 800de18:	f7ff ff93 	bl	800dd42 <__sfputs_r>
 800de1c:	3001      	adds	r0, #1
 800de1e:	f000 80aa 	beq.w	800df76 <_vfiprintf_r+0x20e>
 800de22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de24:	445a      	add	r2, fp
 800de26:	9209      	str	r2, [sp, #36]	; 0x24
 800de28:	f89a 3000 	ldrb.w	r3, [sl]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f000 80a2 	beq.w	800df76 <_vfiprintf_r+0x20e>
 800de32:	2300      	movs	r3, #0
 800de34:	f04f 32ff 	mov.w	r2, #4294967295
 800de38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de3c:	f10a 0a01 	add.w	sl, sl, #1
 800de40:	9304      	str	r3, [sp, #16]
 800de42:	9307      	str	r3, [sp, #28]
 800de44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de48:	931a      	str	r3, [sp, #104]	; 0x68
 800de4a:	4654      	mov	r4, sl
 800de4c:	2205      	movs	r2, #5
 800de4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de52:	4858      	ldr	r0, [pc, #352]	; (800dfb4 <_vfiprintf_r+0x24c>)
 800de54:	f7f2 f9ec 	bl	8000230 <memchr>
 800de58:	9a04      	ldr	r2, [sp, #16]
 800de5a:	b9d8      	cbnz	r0, 800de94 <_vfiprintf_r+0x12c>
 800de5c:	06d1      	lsls	r1, r2, #27
 800de5e:	bf44      	itt	mi
 800de60:	2320      	movmi	r3, #32
 800de62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de66:	0713      	lsls	r3, r2, #28
 800de68:	bf44      	itt	mi
 800de6a:	232b      	movmi	r3, #43	; 0x2b
 800de6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de70:	f89a 3000 	ldrb.w	r3, [sl]
 800de74:	2b2a      	cmp	r3, #42	; 0x2a
 800de76:	d015      	beq.n	800dea4 <_vfiprintf_r+0x13c>
 800de78:	9a07      	ldr	r2, [sp, #28]
 800de7a:	4654      	mov	r4, sl
 800de7c:	2000      	movs	r0, #0
 800de7e:	f04f 0c0a 	mov.w	ip, #10
 800de82:	4621      	mov	r1, r4
 800de84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de88:	3b30      	subs	r3, #48	; 0x30
 800de8a:	2b09      	cmp	r3, #9
 800de8c:	d94e      	bls.n	800df2c <_vfiprintf_r+0x1c4>
 800de8e:	b1b0      	cbz	r0, 800debe <_vfiprintf_r+0x156>
 800de90:	9207      	str	r2, [sp, #28]
 800de92:	e014      	b.n	800debe <_vfiprintf_r+0x156>
 800de94:	eba0 0308 	sub.w	r3, r0, r8
 800de98:	fa09 f303 	lsl.w	r3, r9, r3
 800de9c:	4313      	orrs	r3, r2
 800de9e:	9304      	str	r3, [sp, #16]
 800dea0:	46a2      	mov	sl, r4
 800dea2:	e7d2      	b.n	800de4a <_vfiprintf_r+0xe2>
 800dea4:	9b03      	ldr	r3, [sp, #12]
 800dea6:	1d19      	adds	r1, r3, #4
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	9103      	str	r1, [sp, #12]
 800deac:	2b00      	cmp	r3, #0
 800deae:	bfbb      	ittet	lt
 800deb0:	425b      	neglt	r3, r3
 800deb2:	f042 0202 	orrlt.w	r2, r2, #2
 800deb6:	9307      	strge	r3, [sp, #28]
 800deb8:	9307      	strlt	r3, [sp, #28]
 800deba:	bfb8      	it	lt
 800debc:	9204      	strlt	r2, [sp, #16]
 800debe:	7823      	ldrb	r3, [r4, #0]
 800dec0:	2b2e      	cmp	r3, #46	; 0x2e
 800dec2:	d10c      	bne.n	800dede <_vfiprintf_r+0x176>
 800dec4:	7863      	ldrb	r3, [r4, #1]
 800dec6:	2b2a      	cmp	r3, #42	; 0x2a
 800dec8:	d135      	bne.n	800df36 <_vfiprintf_r+0x1ce>
 800deca:	9b03      	ldr	r3, [sp, #12]
 800decc:	1d1a      	adds	r2, r3, #4
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	9203      	str	r2, [sp, #12]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	bfb8      	it	lt
 800ded6:	f04f 33ff 	movlt.w	r3, #4294967295
 800deda:	3402      	adds	r4, #2
 800dedc:	9305      	str	r3, [sp, #20]
 800dede:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dfc4 <_vfiprintf_r+0x25c>
 800dee2:	7821      	ldrb	r1, [r4, #0]
 800dee4:	2203      	movs	r2, #3
 800dee6:	4650      	mov	r0, sl
 800dee8:	f7f2 f9a2 	bl	8000230 <memchr>
 800deec:	b140      	cbz	r0, 800df00 <_vfiprintf_r+0x198>
 800deee:	2340      	movs	r3, #64	; 0x40
 800def0:	eba0 000a 	sub.w	r0, r0, sl
 800def4:	fa03 f000 	lsl.w	r0, r3, r0
 800def8:	9b04      	ldr	r3, [sp, #16]
 800defa:	4303      	orrs	r3, r0
 800defc:	3401      	adds	r4, #1
 800defe:	9304      	str	r3, [sp, #16]
 800df00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df04:	482c      	ldr	r0, [pc, #176]	; (800dfb8 <_vfiprintf_r+0x250>)
 800df06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df0a:	2206      	movs	r2, #6
 800df0c:	f7f2 f990 	bl	8000230 <memchr>
 800df10:	2800      	cmp	r0, #0
 800df12:	d03f      	beq.n	800df94 <_vfiprintf_r+0x22c>
 800df14:	4b29      	ldr	r3, [pc, #164]	; (800dfbc <_vfiprintf_r+0x254>)
 800df16:	bb1b      	cbnz	r3, 800df60 <_vfiprintf_r+0x1f8>
 800df18:	9b03      	ldr	r3, [sp, #12]
 800df1a:	3307      	adds	r3, #7
 800df1c:	f023 0307 	bic.w	r3, r3, #7
 800df20:	3308      	adds	r3, #8
 800df22:	9303      	str	r3, [sp, #12]
 800df24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df26:	443b      	add	r3, r7
 800df28:	9309      	str	r3, [sp, #36]	; 0x24
 800df2a:	e767      	b.n	800ddfc <_vfiprintf_r+0x94>
 800df2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800df30:	460c      	mov	r4, r1
 800df32:	2001      	movs	r0, #1
 800df34:	e7a5      	b.n	800de82 <_vfiprintf_r+0x11a>
 800df36:	2300      	movs	r3, #0
 800df38:	3401      	adds	r4, #1
 800df3a:	9305      	str	r3, [sp, #20]
 800df3c:	4619      	mov	r1, r3
 800df3e:	f04f 0c0a 	mov.w	ip, #10
 800df42:	4620      	mov	r0, r4
 800df44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df48:	3a30      	subs	r2, #48	; 0x30
 800df4a:	2a09      	cmp	r2, #9
 800df4c:	d903      	bls.n	800df56 <_vfiprintf_r+0x1ee>
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d0c5      	beq.n	800dede <_vfiprintf_r+0x176>
 800df52:	9105      	str	r1, [sp, #20]
 800df54:	e7c3      	b.n	800dede <_vfiprintf_r+0x176>
 800df56:	fb0c 2101 	mla	r1, ip, r1, r2
 800df5a:	4604      	mov	r4, r0
 800df5c:	2301      	movs	r3, #1
 800df5e:	e7f0      	b.n	800df42 <_vfiprintf_r+0x1da>
 800df60:	ab03      	add	r3, sp, #12
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	462a      	mov	r2, r5
 800df66:	4b16      	ldr	r3, [pc, #88]	; (800dfc0 <_vfiprintf_r+0x258>)
 800df68:	a904      	add	r1, sp, #16
 800df6a:	4630      	mov	r0, r6
 800df6c:	f7fc f8d6 	bl	800a11c <_printf_float>
 800df70:	4607      	mov	r7, r0
 800df72:	1c78      	adds	r0, r7, #1
 800df74:	d1d6      	bne.n	800df24 <_vfiprintf_r+0x1bc>
 800df76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df78:	07d9      	lsls	r1, r3, #31
 800df7a:	d405      	bmi.n	800df88 <_vfiprintf_r+0x220>
 800df7c:	89ab      	ldrh	r3, [r5, #12]
 800df7e:	059a      	lsls	r2, r3, #22
 800df80:	d402      	bmi.n	800df88 <_vfiprintf_r+0x220>
 800df82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df84:	f000 fadb 	bl	800e53e <__retarget_lock_release_recursive>
 800df88:	89ab      	ldrh	r3, [r5, #12]
 800df8a:	065b      	lsls	r3, r3, #25
 800df8c:	f53f af12 	bmi.w	800ddb4 <_vfiprintf_r+0x4c>
 800df90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df92:	e711      	b.n	800ddb8 <_vfiprintf_r+0x50>
 800df94:	ab03      	add	r3, sp, #12
 800df96:	9300      	str	r3, [sp, #0]
 800df98:	462a      	mov	r2, r5
 800df9a:	4b09      	ldr	r3, [pc, #36]	; (800dfc0 <_vfiprintf_r+0x258>)
 800df9c:	a904      	add	r1, sp, #16
 800df9e:	4630      	mov	r0, r6
 800dfa0:	f7fc fb60 	bl	800a664 <_printf_i>
 800dfa4:	e7e4      	b.n	800df70 <_vfiprintf_r+0x208>
 800dfa6:	bf00      	nop
 800dfa8:	0800ed68 	.word	0x0800ed68
 800dfac:	0800ed88 	.word	0x0800ed88
 800dfb0:	0800ed48 	.word	0x0800ed48
 800dfb4:	0800ed34 	.word	0x0800ed34
 800dfb8:	0800ed3e 	.word	0x0800ed3e
 800dfbc:	0800a11d 	.word	0x0800a11d
 800dfc0:	0800dd43 	.word	0x0800dd43
 800dfc4:	0800ed3a 	.word	0x0800ed3a

0800dfc8 <nan>:
 800dfc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dfd0 <nan+0x8>
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	00000000 	.word	0x00000000
 800dfd4:	7ff80000 	.word	0x7ff80000

0800dfd8 <_sbrk_r>:
 800dfd8:	b538      	push	{r3, r4, r5, lr}
 800dfda:	4d06      	ldr	r5, [pc, #24]	; (800dff4 <_sbrk_r+0x1c>)
 800dfdc:	2300      	movs	r3, #0
 800dfde:	4604      	mov	r4, r0
 800dfe0:	4608      	mov	r0, r1
 800dfe2:	602b      	str	r3, [r5, #0]
 800dfe4:	f7f3 ff2c 	bl	8001e40 <_sbrk>
 800dfe8:	1c43      	adds	r3, r0, #1
 800dfea:	d102      	bne.n	800dff2 <_sbrk_r+0x1a>
 800dfec:	682b      	ldr	r3, [r5, #0]
 800dfee:	b103      	cbz	r3, 800dff2 <_sbrk_r+0x1a>
 800dff0:	6023      	str	r3, [r4, #0]
 800dff2:	bd38      	pop	{r3, r4, r5, pc}
 800dff4:	20000560 	.word	0x20000560

0800dff8 <strncmp>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	b17a      	cbz	r2, 800e01c <strncmp+0x24>
 800dffc:	4603      	mov	r3, r0
 800dffe:	3901      	subs	r1, #1
 800e000:	1884      	adds	r4, r0, r2
 800e002:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e006:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e00a:	4290      	cmp	r0, r2
 800e00c:	d101      	bne.n	800e012 <strncmp+0x1a>
 800e00e:	42a3      	cmp	r3, r4
 800e010:	d101      	bne.n	800e016 <strncmp+0x1e>
 800e012:	1a80      	subs	r0, r0, r2
 800e014:	bd10      	pop	{r4, pc}
 800e016:	2800      	cmp	r0, #0
 800e018:	d1f3      	bne.n	800e002 <strncmp+0xa>
 800e01a:	e7fa      	b.n	800e012 <strncmp+0x1a>
 800e01c:	4610      	mov	r0, r2
 800e01e:	e7f9      	b.n	800e014 <strncmp+0x1c>

0800e020 <__swbuf_r>:
 800e020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e022:	460e      	mov	r6, r1
 800e024:	4614      	mov	r4, r2
 800e026:	4605      	mov	r5, r0
 800e028:	b118      	cbz	r0, 800e032 <__swbuf_r+0x12>
 800e02a:	6983      	ldr	r3, [r0, #24]
 800e02c:	b90b      	cbnz	r3, 800e032 <__swbuf_r+0x12>
 800e02e:	f000 f9e7 	bl	800e400 <__sinit>
 800e032:	4b21      	ldr	r3, [pc, #132]	; (800e0b8 <__swbuf_r+0x98>)
 800e034:	429c      	cmp	r4, r3
 800e036:	d12b      	bne.n	800e090 <__swbuf_r+0x70>
 800e038:	686c      	ldr	r4, [r5, #4]
 800e03a:	69a3      	ldr	r3, [r4, #24]
 800e03c:	60a3      	str	r3, [r4, #8]
 800e03e:	89a3      	ldrh	r3, [r4, #12]
 800e040:	071a      	lsls	r2, r3, #28
 800e042:	d52f      	bpl.n	800e0a4 <__swbuf_r+0x84>
 800e044:	6923      	ldr	r3, [r4, #16]
 800e046:	b36b      	cbz	r3, 800e0a4 <__swbuf_r+0x84>
 800e048:	6923      	ldr	r3, [r4, #16]
 800e04a:	6820      	ldr	r0, [r4, #0]
 800e04c:	1ac0      	subs	r0, r0, r3
 800e04e:	6963      	ldr	r3, [r4, #20]
 800e050:	b2f6      	uxtb	r6, r6
 800e052:	4283      	cmp	r3, r0
 800e054:	4637      	mov	r7, r6
 800e056:	dc04      	bgt.n	800e062 <__swbuf_r+0x42>
 800e058:	4621      	mov	r1, r4
 800e05a:	4628      	mov	r0, r5
 800e05c:	f000 f93c 	bl	800e2d8 <_fflush_r>
 800e060:	bb30      	cbnz	r0, 800e0b0 <__swbuf_r+0x90>
 800e062:	68a3      	ldr	r3, [r4, #8]
 800e064:	3b01      	subs	r3, #1
 800e066:	60a3      	str	r3, [r4, #8]
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	1c5a      	adds	r2, r3, #1
 800e06c:	6022      	str	r2, [r4, #0]
 800e06e:	701e      	strb	r6, [r3, #0]
 800e070:	6963      	ldr	r3, [r4, #20]
 800e072:	3001      	adds	r0, #1
 800e074:	4283      	cmp	r3, r0
 800e076:	d004      	beq.n	800e082 <__swbuf_r+0x62>
 800e078:	89a3      	ldrh	r3, [r4, #12]
 800e07a:	07db      	lsls	r3, r3, #31
 800e07c:	d506      	bpl.n	800e08c <__swbuf_r+0x6c>
 800e07e:	2e0a      	cmp	r6, #10
 800e080:	d104      	bne.n	800e08c <__swbuf_r+0x6c>
 800e082:	4621      	mov	r1, r4
 800e084:	4628      	mov	r0, r5
 800e086:	f000 f927 	bl	800e2d8 <_fflush_r>
 800e08a:	b988      	cbnz	r0, 800e0b0 <__swbuf_r+0x90>
 800e08c:	4638      	mov	r0, r7
 800e08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e090:	4b0a      	ldr	r3, [pc, #40]	; (800e0bc <__swbuf_r+0x9c>)
 800e092:	429c      	cmp	r4, r3
 800e094:	d101      	bne.n	800e09a <__swbuf_r+0x7a>
 800e096:	68ac      	ldr	r4, [r5, #8]
 800e098:	e7cf      	b.n	800e03a <__swbuf_r+0x1a>
 800e09a:	4b09      	ldr	r3, [pc, #36]	; (800e0c0 <__swbuf_r+0xa0>)
 800e09c:	429c      	cmp	r4, r3
 800e09e:	bf08      	it	eq
 800e0a0:	68ec      	ldreq	r4, [r5, #12]
 800e0a2:	e7ca      	b.n	800e03a <__swbuf_r+0x1a>
 800e0a4:	4621      	mov	r1, r4
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f000 f81a 	bl	800e0e0 <__swsetup_r>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d0cb      	beq.n	800e048 <__swbuf_r+0x28>
 800e0b0:	f04f 37ff 	mov.w	r7, #4294967295
 800e0b4:	e7ea      	b.n	800e08c <__swbuf_r+0x6c>
 800e0b6:	bf00      	nop
 800e0b8:	0800ed68 	.word	0x0800ed68
 800e0bc:	0800ed88 	.word	0x0800ed88
 800e0c0:	0800ed48 	.word	0x0800ed48

0800e0c4 <__ascii_wctomb>:
 800e0c4:	b149      	cbz	r1, 800e0da <__ascii_wctomb+0x16>
 800e0c6:	2aff      	cmp	r2, #255	; 0xff
 800e0c8:	bf85      	ittet	hi
 800e0ca:	238a      	movhi	r3, #138	; 0x8a
 800e0cc:	6003      	strhi	r3, [r0, #0]
 800e0ce:	700a      	strbls	r2, [r1, #0]
 800e0d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e0d4:	bf98      	it	ls
 800e0d6:	2001      	movls	r0, #1
 800e0d8:	4770      	bx	lr
 800e0da:	4608      	mov	r0, r1
 800e0dc:	4770      	bx	lr
	...

0800e0e0 <__swsetup_r>:
 800e0e0:	4b32      	ldr	r3, [pc, #200]	; (800e1ac <__swsetup_r+0xcc>)
 800e0e2:	b570      	push	{r4, r5, r6, lr}
 800e0e4:	681d      	ldr	r5, [r3, #0]
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	460c      	mov	r4, r1
 800e0ea:	b125      	cbz	r5, 800e0f6 <__swsetup_r+0x16>
 800e0ec:	69ab      	ldr	r3, [r5, #24]
 800e0ee:	b913      	cbnz	r3, 800e0f6 <__swsetup_r+0x16>
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f000 f985 	bl	800e400 <__sinit>
 800e0f6:	4b2e      	ldr	r3, [pc, #184]	; (800e1b0 <__swsetup_r+0xd0>)
 800e0f8:	429c      	cmp	r4, r3
 800e0fa:	d10f      	bne.n	800e11c <__swsetup_r+0x3c>
 800e0fc:	686c      	ldr	r4, [r5, #4]
 800e0fe:	89a3      	ldrh	r3, [r4, #12]
 800e100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e104:	0719      	lsls	r1, r3, #28
 800e106:	d42c      	bmi.n	800e162 <__swsetup_r+0x82>
 800e108:	06dd      	lsls	r5, r3, #27
 800e10a:	d411      	bmi.n	800e130 <__swsetup_r+0x50>
 800e10c:	2309      	movs	r3, #9
 800e10e:	6033      	str	r3, [r6, #0]
 800e110:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e114:	81a3      	strh	r3, [r4, #12]
 800e116:	f04f 30ff 	mov.w	r0, #4294967295
 800e11a:	e03e      	b.n	800e19a <__swsetup_r+0xba>
 800e11c:	4b25      	ldr	r3, [pc, #148]	; (800e1b4 <__swsetup_r+0xd4>)
 800e11e:	429c      	cmp	r4, r3
 800e120:	d101      	bne.n	800e126 <__swsetup_r+0x46>
 800e122:	68ac      	ldr	r4, [r5, #8]
 800e124:	e7eb      	b.n	800e0fe <__swsetup_r+0x1e>
 800e126:	4b24      	ldr	r3, [pc, #144]	; (800e1b8 <__swsetup_r+0xd8>)
 800e128:	429c      	cmp	r4, r3
 800e12a:	bf08      	it	eq
 800e12c:	68ec      	ldreq	r4, [r5, #12]
 800e12e:	e7e6      	b.n	800e0fe <__swsetup_r+0x1e>
 800e130:	0758      	lsls	r0, r3, #29
 800e132:	d512      	bpl.n	800e15a <__swsetup_r+0x7a>
 800e134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e136:	b141      	cbz	r1, 800e14a <__swsetup_r+0x6a>
 800e138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e13c:	4299      	cmp	r1, r3
 800e13e:	d002      	beq.n	800e146 <__swsetup_r+0x66>
 800e140:	4630      	mov	r0, r6
 800e142:	f7ff fbab 	bl	800d89c <_free_r>
 800e146:	2300      	movs	r3, #0
 800e148:	6363      	str	r3, [r4, #52]	; 0x34
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e150:	81a3      	strh	r3, [r4, #12]
 800e152:	2300      	movs	r3, #0
 800e154:	6063      	str	r3, [r4, #4]
 800e156:	6923      	ldr	r3, [r4, #16]
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	89a3      	ldrh	r3, [r4, #12]
 800e15c:	f043 0308 	orr.w	r3, r3, #8
 800e160:	81a3      	strh	r3, [r4, #12]
 800e162:	6923      	ldr	r3, [r4, #16]
 800e164:	b94b      	cbnz	r3, 800e17a <__swsetup_r+0x9a>
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e16c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e170:	d003      	beq.n	800e17a <__swsetup_r+0x9a>
 800e172:	4621      	mov	r1, r4
 800e174:	4630      	mov	r0, r6
 800e176:	f000 fa09 	bl	800e58c <__smakebuf_r>
 800e17a:	89a0      	ldrh	r0, [r4, #12]
 800e17c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e180:	f010 0301 	ands.w	r3, r0, #1
 800e184:	d00a      	beq.n	800e19c <__swsetup_r+0xbc>
 800e186:	2300      	movs	r3, #0
 800e188:	60a3      	str	r3, [r4, #8]
 800e18a:	6963      	ldr	r3, [r4, #20]
 800e18c:	425b      	negs	r3, r3
 800e18e:	61a3      	str	r3, [r4, #24]
 800e190:	6923      	ldr	r3, [r4, #16]
 800e192:	b943      	cbnz	r3, 800e1a6 <__swsetup_r+0xc6>
 800e194:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e198:	d1ba      	bne.n	800e110 <__swsetup_r+0x30>
 800e19a:	bd70      	pop	{r4, r5, r6, pc}
 800e19c:	0781      	lsls	r1, r0, #30
 800e19e:	bf58      	it	pl
 800e1a0:	6963      	ldrpl	r3, [r4, #20]
 800e1a2:	60a3      	str	r3, [r4, #8]
 800e1a4:	e7f4      	b.n	800e190 <__swsetup_r+0xb0>
 800e1a6:	2000      	movs	r0, #0
 800e1a8:	e7f7      	b.n	800e19a <__swsetup_r+0xba>
 800e1aa:	bf00      	nop
 800e1ac:	2000003c 	.word	0x2000003c
 800e1b0:	0800ed68 	.word	0x0800ed68
 800e1b4:	0800ed88 	.word	0x0800ed88
 800e1b8:	0800ed48 	.word	0x0800ed48

0800e1bc <abort>:
 800e1bc:	b508      	push	{r3, lr}
 800e1be:	2006      	movs	r0, #6
 800e1c0:	f000 faa2 	bl	800e708 <raise>
 800e1c4:	2001      	movs	r0, #1
 800e1c6:	f7f3 fdc3 	bl	8001d50 <_exit>
	...

0800e1cc <__sflush_r>:
 800e1cc:	898a      	ldrh	r2, [r1, #12]
 800e1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	0710      	lsls	r0, r2, #28
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	d458      	bmi.n	800e28c <__sflush_r+0xc0>
 800e1da:	684b      	ldr	r3, [r1, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	dc05      	bgt.n	800e1ec <__sflush_r+0x20>
 800e1e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	dc02      	bgt.n	800e1ec <__sflush_r+0x20>
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1ee:	2e00      	cmp	r6, #0
 800e1f0:	d0f9      	beq.n	800e1e6 <__sflush_r+0x1a>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1f8:	682f      	ldr	r7, [r5, #0]
 800e1fa:	602b      	str	r3, [r5, #0]
 800e1fc:	d032      	beq.n	800e264 <__sflush_r+0x98>
 800e1fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e200:	89a3      	ldrh	r3, [r4, #12]
 800e202:	075a      	lsls	r2, r3, #29
 800e204:	d505      	bpl.n	800e212 <__sflush_r+0x46>
 800e206:	6863      	ldr	r3, [r4, #4]
 800e208:	1ac0      	subs	r0, r0, r3
 800e20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e20c:	b10b      	cbz	r3, 800e212 <__sflush_r+0x46>
 800e20e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e210:	1ac0      	subs	r0, r0, r3
 800e212:	2300      	movs	r3, #0
 800e214:	4602      	mov	r2, r0
 800e216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e218:	6a21      	ldr	r1, [r4, #32]
 800e21a:	4628      	mov	r0, r5
 800e21c:	47b0      	blx	r6
 800e21e:	1c43      	adds	r3, r0, #1
 800e220:	89a3      	ldrh	r3, [r4, #12]
 800e222:	d106      	bne.n	800e232 <__sflush_r+0x66>
 800e224:	6829      	ldr	r1, [r5, #0]
 800e226:	291d      	cmp	r1, #29
 800e228:	d82c      	bhi.n	800e284 <__sflush_r+0xb8>
 800e22a:	4a2a      	ldr	r2, [pc, #168]	; (800e2d4 <__sflush_r+0x108>)
 800e22c:	40ca      	lsrs	r2, r1
 800e22e:	07d6      	lsls	r6, r2, #31
 800e230:	d528      	bpl.n	800e284 <__sflush_r+0xb8>
 800e232:	2200      	movs	r2, #0
 800e234:	6062      	str	r2, [r4, #4]
 800e236:	04d9      	lsls	r1, r3, #19
 800e238:	6922      	ldr	r2, [r4, #16]
 800e23a:	6022      	str	r2, [r4, #0]
 800e23c:	d504      	bpl.n	800e248 <__sflush_r+0x7c>
 800e23e:	1c42      	adds	r2, r0, #1
 800e240:	d101      	bne.n	800e246 <__sflush_r+0x7a>
 800e242:	682b      	ldr	r3, [r5, #0]
 800e244:	b903      	cbnz	r3, 800e248 <__sflush_r+0x7c>
 800e246:	6560      	str	r0, [r4, #84]	; 0x54
 800e248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e24a:	602f      	str	r7, [r5, #0]
 800e24c:	2900      	cmp	r1, #0
 800e24e:	d0ca      	beq.n	800e1e6 <__sflush_r+0x1a>
 800e250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e254:	4299      	cmp	r1, r3
 800e256:	d002      	beq.n	800e25e <__sflush_r+0x92>
 800e258:	4628      	mov	r0, r5
 800e25a:	f7ff fb1f 	bl	800d89c <_free_r>
 800e25e:	2000      	movs	r0, #0
 800e260:	6360      	str	r0, [r4, #52]	; 0x34
 800e262:	e7c1      	b.n	800e1e8 <__sflush_r+0x1c>
 800e264:	6a21      	ldr	r1, [r4, #32]
 800e266:	2301      	movs	r3, #1
 800e268:	4628      	mov	r0, r5
 800e26a:	47b0      	blx	r6
 800e26c:	1c41      	adds	r1, r0, #1
 800e26e:	d1c7      	bne.n	800e200 <__sflush_r+0x34>
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d0c4      	beq.n	800e200 <__sflush_r+0x34>
 800e276:	2b1d      	cmp	r3, #29
 800e278:	d001      	beq.n	800e27e <__sflush_r+0xb2>
 800e27a:	2b16      	cmp	r3, #22
 800e27c:	d101      	bne.n	800e282 <__sflush_r+0xb6>
 800e27e:	602f      	str	r7, [r5, #0]
 800e280:	e7b1      	b.n	800e1e6 <__sflush_r+0x1a>
 800e282:	89a3      	ldrh	r3, [r4, #12]
 800e284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e288:	81a3      	strh	r3, [r4, #12]
 800e28a:	e7ad      	b.n	800e1e8 <__sflush_r+0x1c>
 800e28c:	690f      	ldr	r7, [r1, #16]
 800e28e:	2f00      	cmp	r7, #0
 800e290:	d0a9      	beq.n	800e1e6 <__sflush_r+0x1a>
 800e292:	0793      	lsls	r3, r2, #30
 800e294:	680e      	ldr	r6, [r1, #0]
 800e296:	bf08      	it	eq
 800e298:	694b      	ldreq	r3, [r1, #20]
 800e29a:	600f      	str	r7, [r1, #0]
 800e29c:	bf18      	it	ne
 800e29e:	2300      	movne	r3, #0
 800e2a0:	eba6 0807 	sub.w	r8, r6, r7
 800e2a4:	608b      	str	r3, [r1, #8]
 800e2a6:	f1b8 0f00 	cmp.w	r8, #0
 800e2aa:	dd9c      	ble.n	800e1e6 <__sflush_r+0x1a>
 800e2ac:	6a21      	ldr	r1, [r4, #32]
 800e2ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2b0:	4643      	mov	r3, r8
 800e2b2:	463a      	mov	r2, r7
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	47b0      	blx	r6
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	dc06      	bgt.n	800e2ca <__sflush_r+0xfe>
 800e2bc:	89a3      	ldrh	r3, [r4, #12]
 800e2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2c2:	81a3      	strh	r3, [r4, #12]
 800e2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c8:	e78e      	b.n	800e1e8 <__sflush_r+0x1c>
 800e2ca:	4407      	add	r7, r0
 800e2cc:	eba8 0800 	sub.w	r8, r8, r0
 800e2d0:	e7e9      	b.n	800e2a6 <__sflush_r+0xda>
 800e2d2:	bf00      	nop
 800e2d4:	20400001 	.word	0x20400001

0800e2d8 <_fflush_r>:
 800e2d8:	b538      	push	{r3, r4, r5, lr}
 800e2da:	690b      	ldr	r3, [r1, #16]
 800e2dc:	4605      	mov	r5, r0
 800e2de:	460c      	mov	r4, r1
 800e2e0:	b913      	cbnz	r3, 800e2e8 <_fflush_r+0x10>
 800e2e2:	2500      	movs	r5, #0
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	bd38      	pop	{r3, r4, r5, pc}
 800e2e8:	b118      	cbz	r0, 800e2f2 <_fflush_r+0x1a>
 800e2ea:	6983      	ldr	r3, [r0, #24]
 800e2ec:	b90b      	cbnz	r3, 800e2f2 <_fflush_r+0x1a>
 800e2ee:	f000 f887 	bl	800e400 <__sinit>
 800e2f2:	4b14      	ldr	r3, [pc, #80]	; (800e344 <_fflush_r+0x6c>)
 800e2f4:	429c      	cmp	r4, r3
 800e2f6:	d11b      	bne.n	800e330 <_fflush_r+0x58>
 800e2f8:	686c      	ldr	r4, [r5, #4]
 800e2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d0ef      	beq.n	800e2e2 <_fflush_r+0xa>
 800e302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e304:	07d0      	lsls	r0, r2, #31
 800e306:	d404      	bmi.n	800e312 <_fflush_r+0x3a>
 800e308:	0599      	lsls	r1, r3, #22
 800e30a:	d402      	bmi.n	800e312 <_fflush_r+0x3a>
 800e30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e30e:	f000 f915 	bl	800e53c <__retarget_lock_acquire_recursive>
 800e312:	4628      	mov	r0, r5
 800e314:	4621      	mov	r1, r4
 800e316:	f7ff ff59 	bl	800e1cc <__sflush_r>
 800e31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e31c:	07da      	lsls	r2, r3, #31
 800e31e:	4605      	mov	r5, r0
 800e320:	d4e0      	bmi.n	800e2e4 <_fflush_r+0xc>
 800e322:	89a3      	ldrh	r3, [r4, #12]
 800e324:	059b      	lsls	r3, r3, #22
 800e326:	d4dd      	bmi.n	800e2e4 <_fflush_r+0xc>
 800e328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e32a:	f000 f908 	bl	800e53e <__retarget_lock_release_recursive>
 800e32e:	e7d9      	b.n	800e2e4 <_fflush_r+0xc>
 800e330:	4b05      	ldr	r3, [pc, #20]	; (800e348 <_fflush_r+0x70>)
 800e332:	429c      	cmp	r4, r3
 800e334:	d101      	bne.n	800e33a <_fflush_r+0x62>
 800e336:	68ac      	ldr	r4, [r5, #8]
 800e338:	e7df      	b.n	800e2fa <_fflush_r+0x22>
 800e33a:	4b04      	ldr	r3, [pc, #16]	; (800e34c <_fflush_r+0x74>)
 800e33c:	429c      	cmp	r4, r3
 800e33e:	bf08      	it	eq
 800e340:	68ec      	ldreq	r4, [r5, #12]
 800e342:	e7da      	b.n	800e2fa <_fflush_r+0x22>
 800e344:	0800ed68 	.word	0x0800ed68
 800e348:	0800ed88 	.word	0x0800ed88
 800e34c:	0800ed48 	.word	0x0800ed48

0800e350 <std>:
 800e350:	2300      	movs	r3, #0
 800e352:	b510      	push	{r4, lr}
 800e354:	4604      	mov	r4, r0
 800e356:	e9c0 3300 	strd	r3, r3, [r0]
 800e35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e35e:	6083      	str	r3, [r0, #8]
 800e360:	8181      	strh	r1, [r0, #12]
 800e362:	6643      	str	r3, [r0, #100]	; 0x64
 800e364:	81c2      	strh	r2, [r0, #14]
 800e366:	6183      	str	r3, [r0, #24]
 800e368:	4619      	mov	r1, r3
 800e36a:	2208      	movs	r2, #8
 800e36c:	305c      	adds	r0, #92	; 0x5c
 800e36e:	f7fb fe2d 	bl	8009fcc <memset>
 800e372:	4b05      	ldr	r3, [pc, #20]	; (800e388 <std+0x38>)
 800e374:	6263      	str	r3, [r4, #36]	; 0x24
 800e376:	4b05      	ldr	r3, [pc, #20]	; (800e38c <std+0x3c>)
 800e378:	62a3      	str	r3, [r4, #40]	; 0x28
 800e37a:	4b05      	ldr	r3, [pc, #20]	; (800e390 <std+0x40>)
 800e37c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e37e:	4b05      	ldr	r3, [pc, #20]	; (800e394 <std+0x44>)
 800e380:	6224      	str	r4, [r4, #32]
 800e382:	6323      	str	r3, [r4, #48]	; 0x30
 800e384:	bd10      	pop	{r4, pc}
 800e386:	bf00      	nop
 800e388:	0800e741 	.word	0x0800e741
 800e38c:	0800e763 	.word	0x0800e763
 800e390:	0800e79b 	.word	0x0800e79b
 800e394:	0800e7bf 	.word	0x0800e7bf

0800e398 <_cleanup_r>:
 800e398:	4901      	ldr	r1, [pc, #4]	; (800e3a0 <_cleanup_r+0x8>)
 800e39a:	f000 b8af 	b.w	800e4fc <_fwalk_reent>
 800e39e:	bf00      	nop
 800e3a0:	0800e2d9 	.word	0x0800e2d9

0800e3a4 <__sfmoreglue>:
 800e3a4:	b570      	push	{r4, r5, r6, lr}
 800e3a6:	2268      	movs	r2, #104	; 0x68
 800e3a8:	1e4d      	subs	r5, r1, #1
 800e3aa:	4355      	muls	r5, r2
 800e3ac:	460e      	mov	r6, r1
 800e3ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e3b2:	f7ff fadf 	bl	800d974 <_malloc_r>
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	b140      	cbz	r0, 800e3cc <__sfmoreglue+0x28>
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	e9c0 1600 	strd	r1, r6, [r0]
 800e3c0:	300c      	adds	r0, #12
 800e3c2:	60a0      	str	r0, [r4, #8]
 800e3c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e3c8:	f7fb fe00 	bl	8009fcc <memset>
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	bd70      	pop	{r4, r5, r6, pc}

0800e3d0 <__sfp_lock_acquire>:
 800e3d0:	4801      	ldr	r0, [pc, #4]	; (800e3d8 <__sfp_lock_acquire+0x8>)
 800e3d2:	f000 b8b3 	b.w	800e53c <__retarget_lock_acquire_recursive>
 800e3d6:	bf00      	nop
 800e3d8:	2000055d 	.word	0x2000055d

0800e3dc <__sfp_lock_release>:
 800e3dc:	4801      	ldr	r0, [pc, #4]	; (800e3e4 <__sfp_lock_release+0x8>)
 800e3de:	f000 b8ae 	b.w	800e53e <__retarget_lock_release_recursive>
 800e3e2:	bf00      	nop
 800e3e4:	2000055d 	.word	0x2000055d

0800e3e8 <__sinit_lock_acquire>:
 800e3e8:	4801      	ldr	r0, [pc, #4]	; (800e3f0 <__sinit_lock_acquire+0x8>)
 800e3ea:	f000 b8a7 	b.w	800e53c <__retarget_lock_acquire_recursive>
 800e3ee:	bf00      	nop
 800e3f0:	2000055e 	.word	0x2000055e

0800e3f4 <__sinit_lock_release>:
 800e3f4:	4801      	ldr	r0, [pc, #4]	; (800e3fc <__sinit_lock_release+0x8>)
 800e3f6:	f000 b8a2 	b.w	800e53e <__retarget_lock_release_recursive>
 800e3fa:	bf00      	nop
 800e3fc:	2000055e 	.word	0x2000055e

0800e400 <__sinit>:
 800e400:	b510      	push	{r4, lr}
 800e402:	4604      	mov	r4, r0
 800e404:	f7ff fff0 	bl	800e3e8 <__sinit_lock_acquire>
 800e408:	69a3      	ldr	r3, [r4, #24]
 800e40a:	b11b      	cbz	r3, 800e414 <__sinit+0x14>
 800e40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e410:	f7ff bff0 	b.w	800e3f4 <__sinit_lock_release>
 800e414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e418:	6523      	str	r3, [r4, #80]	; 0x50
 800e41a:	4b13      	ldr	r3, [pc, #76]	; (800e468 <__sinit+0x68>)
 800e41c:	4a13      	ldr	r2, [pc, #76]	; (800e46c <__sinit+0x6c>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	62a2      	str	r2, [r4, #40]	; 0x28
 800e422:	42a3      	cmp	r3, r4
 800e424:	bf04      	itt	eq
 800e426:	2301      	moveq	r3, #1
 800e428:	61a3      	streq	r3, [r4, #24]
 800e42a:	4620      	mov	r0, r4
 800e42c:	f000 f820 	bl	800e470 <__sfp>
 800e430:	6060      	str	r0, [r4, #4]
 800e432:	4620      	mov	r0, r4
 800e434:	f000 f81c 	bl	800e470 <__sfp>
 800e438:	60a0      	str	r0, [r4, #8]
 800e43a:	4620      	mov	r0, r4
 800e43c:	f000 f818 	bl	800e470 <__sfp>
 800e440:	2200      	movs	r2, #0
 800e442:	60e0      	str	r0, [r4, #12]
 800e444:	2104      	movs	r1, #4
 800e446:	6860      	ldr	r0, [r4, #4]
 800e448:	f7ff ff82 	bl	800e350 <std>
 800e44c:	68a0      	ldr	r0, [r4, #8]
 800e44e:	2201      	movs	r2, #1
 800e450:	2109      	movs	r1, #9
 800e452:	f7ff ff7d 	bl	800e350 <std>
 800e456:	68e0      	ldr	r0, [r4, #12]
 800e458:	2202      	movs	r2, #2
 800e45a:	2112      	movs	r1, #18
 800e45c:	f7ff ff78 	bl	800e350 <std>
 800e460:	2301      	movs	r3, #1
 800e462:	61a3      	str	r3, [r4, #24]
 800e464:	e7d2      	b.n	800e40c <__sinit+0xc>
 800e466:	bf00      	nop
 800e468:	0800e900 	.word	0x0800e900
 800e46c:	0800e399 	.word	0x0800e399

0800e470 <__sfp>:
 800e470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e472:	4607      	mov	r7, r0
 800e474:	f7ff ffac 	bl	800e3d0 <__sfp_lock_acquire>
 800e478:	4b1e      	ldr	r3, [pc, #120]	; (800e4f4 <__sfp+0x84>)
 800e47a:	681e      	ldr	r6, [r3, #0]
 800e47c:	69b3      	ldr	r3, [r6, #24]
 800e47e:	b913      	cbnz	r3, 800e486 <__sfp+0x16>
 800e480:	4630      	mov	r0, r6
 800e482:	f7ff ffbd 	bl	800e400 <__sinit>
 800e486:	3648      	adds	r6, #72	; 0x48
 800e488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e48c:	3b01      	subs	r3, #1
 800e48e:	d503      	bpl.n	800e498 <__sfp+0x28>
 800e490:	6833      	ldr	r3, [r6, #0]
 800e492:	b30b      	cbz	r3, 800e4d8 <__sfp+0x68>
 800e494:	6836      	ldr	r6, [r6, #0]
 800e496:	e7f7      	b.n	800e488 <__sfp+0x18>
 800e498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e49c:	b9d5      	cbnz	r5, 800e4d4 <__sfp+0x64>
 800e49e:	4b16      	ldr	r3, [pc, #88]	; (800e4f8 <__sfp+0x88>)
 800e4a0:	60e3      	str	r3, [r4, #12]
 800e4a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e4a6:	6665      	str	r5, [r4, #100]	; 0x64
 800e4a8:	f000 f847 	bl	800e53a <__retarget_lock_init_recursive>
 800e4ac:	f7ff ff96 	bl	800e3dc <__sfp_lock_release>
 800e4b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e4b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e4b8:	6025      	str	r5, [r4, #0]
 800e4ba:	61a5      	str	r5, [r4, #24]
 800e4bc:	2208      	movs	r2, #8
 800e4be:	4629      	mov	r1, r5
 800e4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e4c4:	f7fb fd82 	bl	8009fcc <memset>
 800e4c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e4cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4d4:	3468      	adds	r4, #104	; 0x68
 800e4d6:	e7d9      	b.n	800e48c <__sfp+0x1c>
 800e4d8:	2104      	movs	r1, #4
 800e4da:	4638      	mov	r0, r7
 800e4dc:	f7ff ff62 	bl	800e3a4 <__sfmoreglue>
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	6030      	str	r0, [r6, #0]
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	d1d5      	bne.n	800e494 <__sfp+0x24>
 800e4e8:	f7ff ff78 	bl	800e3dc <__sfp_lock_release>
 800e4ec:	230c      	movs	r3, #12
 800e4ee:	603b      	str	r3, [r7, #0]
 800e4f0:	e7ee      	b.n	800e4d0 <__sfp+0x60>
 800e4f2:	bf00      	nop
 800e4f4:	0800e900 	.word	0x0800e900
 800e4f8:	ffff0001 	.word	0xffff0001

0800e4fc <_fwalk_reent>:
 800e4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e500:	4606      	mov	r6, r0
 800e502:	4688      	mov	r8, r1
 800e504:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e508:	2700      	movs	r7, #0
 800e50a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e50e:	f1b9 0901 	subs.w	r9, r9, #1
 800e512:	d505      	bpl.n	800e520 <_fwalk_reent+0x24>
 800e514:	6824      	ldr	r4, [r4, #0]
 800e516:	2c00      	cmp	r4, #0
 800e518:	d1f7      	bne.n	800e50a <_fwalk_reent+0xe>
 800e51a:	4638      	mov	r0, r7
 800e51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e520:	89ab      	ldrh	r3, [r5, #12]
 800e522:	2b01      	cmp	r3, #1
 800e524:	d907      	bls.n	800e536 <_fwalk_reent+0x3a>
 800e526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e52a:	3301      	adds	r3, #1
 800e52c:	d003      	beq.n	800e536 <_fwalk_reent+0x3a>
 800e52e:	4629      	mov	r1, r5
 800e530:	4630      	mov	r0, r6
 800e532:	47c0      	blx	r8
 800e534:	4307      	orrs	r7, r0
 800e536:	3568      	adds	r5, #104	; 0x68
 800e538:	e7e9      	b.n	800e50e <_fwalk_reent+0x12>

0800e53a <__retarget_lock_init_recursive>:
 800e53a:	4770      	bx	lr

0800e53c <__retarget_lock_acquire_recursive>:
 800e53c:	4770      	bx	lr

0800e53e <__retarget_lock_release_recursive>:
 800e53e:	4770      	bx	lr

0800e540 <__swhatbuf_r>:
 800e540:	b570      	push	{r4, r5, r6, lr}
 800e542:	460e      	mov	r6, r1
 800e544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e548:	2900      	cmp	r1, #0
 800e54a:	b096      	sub	sp, #88	; 0x58
 800e54c:	4614      	mov	r4, r2
 800e54e:	461d      	mov	r5, r3
 800e550:	da08      	bge.n	800e564 <__swhatbuf_r+0x24>
 800e552:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e556:	2200      	movs	r2, #0
 800e558:	602a      	str	r2, [r5, #0]
 800e55a:	061a      	lsls	r2, r3, #24
 800e55c:	d410      	bmi.n	800e580 <__swhatbuf_r+0x40>
 800e55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e562:	e00e      	b.n	800e582 <__swhatbuf_r+0x42>
 800e564:	466a      	mov	r2, sp
 800e566:	f000 f951 	bl	800e80c <_fstat_r>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	dbf1      	blt.n	800e552 <__swhatbuf_r+0x12>
 800e56e:	9a01      	ldr	r2, [sp, #4]
 800e570:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e574:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e578:	425a      	negs	r2, r3
 800e57a:	415a      	adcs	r2, r3
 800e57c:	602a      	str	r2, [r5, #0]
 800e57e:	e7ee      	b.n	800e55e <__swhatbuf_r+0x1e>
 800e580:	2340      	movs	r3, #64	; 0x40
 800e582:	2000      	movs	r0, #0
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	b016      	add	sp, #88	; 0x58
 800e588:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e58c <__smakebuf_r>:
 800e58c:	898b      	ldrh	r3, [r1, #12]
 800e58e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e590:	079d      	lsls	r5, r3, #30
 800e592:	4606      	mov	r6, r0
 800e594:	460c      	mov	r4, r1
 800e596:	d507      	bpl.n	800e5a8 <__smakebuf_r+0x1c>
 800e598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e59c:	6023      	str	r3, [r4, #0]
 800e59e:	6123      	str	r3, [r4, #16]
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	6163      	str	r3, [r4, #20]
 800e5a4:	b002      	add	sp, #8
 800e5a6:	bd70      	pop	{r4, r5, r6, pc}
 800e5a8:	ab01      	add	r3, sp, #4
 800e5aa:	466a      	mov	r2, sp
 800e5ac:	f7ff ffc8 	bl	800e540 <__swhatbuf_r>
 800e5b0:	9900      	ldr	r1, [sp, #0]
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f7ff f9dd 	bl	800d974 <_malloc_r>
 800e5ba:	b948      	cbnz	r0, 800e5d0 <__smakebuf_r+0x44>
 800e5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5c0:	059a      	lsls	r2, r3, #22
 800e5c2:	d4ef      	bmi.n	800e5a4 <__smakebuf_r+0x18>
 800e5c4:	f023 0303 	bic.w	r3, r3, #3
 800e5c8:	f043 0302 	orr.w	r3, r3, #2
 800e5cc:	81a3      	strh	r3, [r4, #12]
 800e5ce:	e7e3      	b.n	800e598 <__smakebuf_r+0xc>
 800e5d0:	4b0d      	ldr	r3, [pc, #52]	; (800e608 <__smakebuf_r+0x7c>)
 800e5d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e5d4:	89a3      	ldrh	r3, [r4, #12]
 800e5d6:	6020      	str	r0, [r4, #0]
 800e5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5dc:	81a3      	strh	r3, [r4, #12]
 800e5de:	9b00      	ldr	r3, [sp, #0]
 800e5e0:	6163      	str	r3, [r4, #20]
 800e5e2:	9b01      	ldr	r3, [sp, #4]
 800e5e4:	6120      	str	r0, [r4, #16]
 800e5e6:	b15b      	cbz	r3, 800e600 <__smakebuf_r+0x74>
 800e5e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	f000 f91f 	bl	800e830 <_isatty_r>
 800e5f2:	b128      	cbz	r0, 800e600 <__smakebuf_r+0x74>
 800e5f4:	89a3      	ldrh	r3, [r4, #12]
 800e5f6:	f023 0303 	bic.w	r3, r3, #3
 800e5fa:	f043 0301 	orr.w	r3, r3, #1
 800e5fe:	81a3      	strh	r3, [r4, #12]
 800e600:	89a0      	ldrh	r0, [r4, #12]
 800e602:	4305      	orrs	r5, r0
 800e604:	81a5      	strh	r5, [r4, #12]
 800e606:	e7cd      	b.n	800e5a4 <__smakebuf_r+0x18>
 800e608:	0800e399 	.word	0x0800e399

0800e60c <memmove>:
 800e60c:	4288      	cmp	r0, r1
 800e60e:	b510      	push	{r4, lr}
 800e610:	eb01 0402 	add.w	r4, r1, r2
 800e614:	d902      	bls.n	800e61c <memmove+0x10>
 800e616:	4284      	cmp	r4, r0
 800e618:	4623      	mov	r3, r4
 800e61a:	d807      	bhi.n	800e62c <memmove+0x20>
 800e61c:	1e43      	subs	r3, r0, #1
 800e61e:	42a1      	cmp	r1, r4
 800e620:	d008      	beq.n	800e634 <memmove+0x28>
 800e622:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e62a:	e7f8      	b.n	800e61e <memmove+0x12>
 800e62c:	4402      	add	r2, r0
 800e62e:	4601      	mov	r1, r0
 800e630:	428a      	cmp	r2, r1
 800e632:	d100      	bne.n	800e636 <memmove+0x2a>
 800e634:	bd10      	pop	{r4, pc}
 800e636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e63a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e63e:	e7f7      	b.n	800e630 <memmove+0x24>

0800e640 <__malloc_lock>:
 800e640:	4801      	ldr	r0, [pc, #4]	; (800e648 <__malloc_lock+0x8>)
 800e642:	f7ff bf7b 	b.w	800e53c <__retarget_lock_acquire_recursive>
 800e646:	bf00      	nop
 800e648:	2000055c 	.word	0x2000055c

0800e64c <__malloc_unlock>:
 800e64c:	4801      	ldr	r0, [pc, #4]	; (800e654 <__malloc_unlock+0x8>)
 800e64e:	f7ff bf76 	b.w	800e53e <__retarget_lock_release_recursive>
 800e652:	bf00      	nop
 800e654:	2000055c 	.word	0x2000055c

0800e658 <_realloc_r>:
 800e658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e65c:	4680      	mov	r8, r0
 800e65e:	4614      	mov	r4, r2
 800e660:	460e      	mov	r6, r1
 800e662:	b921      	cbnz	r1, 800e66e <_realloc_r+0x16>
 800e664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e668:	4611      	mov	r1, r2
 800e66a:	f7ff b983 	b.w	800d974 <_malloc_r>
 800e66e:	b92a      	cbnz	r2, 800e67c <_realloc_r+0x24>
 800e670:	f7ff f914 	bl	800d89c <_free_r>
 800e674:	4625      	mov	r5, r4
 800e676:	4628      	mov	r0, r5
 800e678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e67c:	f000 f8fa 	bl	800e874 <_malloc_usable_size_r>
 800e680:	4284      	cmp	r4, r0
 800e682:	4607      	mov	r7, r0
 800e684:	d802      	bhi.n	800e68c <_realloc_r+0x34>
 800e686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e68a:	d812      	bhi.n	800e6b2 <_realloc_r+0x5a>
 800e68c:	4621      	mov	r1, r4
 800e68e:	4640      	mov	r0, r8
 800e690:	f7ff f970 	bl	800d974 <_malloc_r>
 800e694:	4605      	mov	r5, r0
 800e696:	2800      	cmp	r0, #0
 800e698:	d0ed      	beq.n	800e676 <_realloc_r+0x1e>
 800e69a:	42bc      	cmp	r4, r7
 800e69c:	4622      	mov	r2, r4
 800e69e:	4631      	mov	r1, r6
 800e6a0:	bf28      	it	cs
 800e6a2:	463a      	movcs	r2, r7
 800e6a4:	f7fb fc84 	bl	8009fb0 <memcpy>
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	4640      	mov	r0, r8
 800e6ac:	f7ff f8f6 	bl	800d89c <_free_r>
 800e6b0:	e7e1      	b.n	800e676 <_realloc_r+0x1e>
 800e6b2:	4635      	mov	r5, r6
 800e6b4:	e7df      	b.n	800e676 <_realloc_r+0x1e>

0800e6b6 <_raise_r>:
 800e6b6:	291f      	cmp	r1, #31
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	460d      	mov	r5, r1
 800e6be:	d904      	bls.n	800e6ca <_raise_r+0x14>
 800e6c0:	2316      	movs	r3, #22
 800e6c2:	6003      	str	r3, [r0, #0]
 800e6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c8:	bd38      	pop	{r3, r4, r5, pc}
 800e6ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e6cc:	b112      	cbz	r2, 800e6d4 <_raise_r+0x1e>
 800e6ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6d2:	b94b      	cbnz	r3, 800e6e8 <_raise_r+0x32>
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f000 f831 	bl	800e73c <_getpid_r>
 800e6da:	462a      	mov	r2, r5
 800e6dc:	4601      	mov	r1, r0
 800e6de:	4620      	mov	r0, r4
 800e6e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6e4:	f000 b818 	b.w	800e718 <_kill_r>
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d00a      	beq.n	800e702 <_raise_r+0x4c>
 800e6ec:	1c59      	adds	r1, r3, #1
 800e6ee:	d103      	bne.n	800e6f8 <_raise_r+0x42>
 800e6f0:	2316      	movs	r3, #22
 800e6f2:	6003      	str	r3, [r0, #0]
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	e7e7      	b.n	800e6c8 <_raise_r+0x12>
 800e6f8:	2400      	movs	r4, #0
 800e6fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e6fe:	4628      	mov	r0, r5
 800e700:	4798      	blx	r3
 800e702:	2000      	movs	r0, #0
 800e704:	e7e0      	b.n	800e6c8 <_raise_r+0x12>
	...

0800e708 <raise>:
 800e708:	4b02      	ldr	r3, [pc, #8]	; (800e714 <raise+0xc>)
 800e70a:	4601      	mov	r1, r0
 800e70c:	6818      	ldr	r0, [r3, #0]
 800e70e:	f7ff bfd2 	b.w	800e6b6 <_raise_r>
 800e712:	bf00      	nop
 800e714:	2000003c 	.word	0x2000003c

0800e718 <_kill_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4d07      	ldr	r5, [pc, #28]	; (800e738 <_kill_r+0x20>)
 800e71c:	2300      	movs	r3, #0
 800e71e:	4604      	mov	r4, r0
 800e720:	4608      	mov	r0, r1
 800e722:	4611      	mov	r1, r2
 800e724:	602b      	str	r3, [r5, #0]
 800e726:	f7f3 fb03 	bl	8001d30 <_kill>
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	d102      	bne.n	800e734 <_kill_r+0x1c>
 800e72e:	682b      	ldr	r3, [r5, #0]
 800e730:	b103      	cbz	r3, 800e734 <_kill_r+0x1c>
 800e732:	6023      	str	r3, [r4, #0]
 800e734:	bd38      	pop	{r3, r4, r5, pc}
 800e736:	bf00      	nop
 800e738:	20000560 	.word	0x20000560

0800e73c <_getpid_r>:
 800e73c:	f7f3 baf0 	b.w	8001d20 <_getpid>

0800e740 <__sread>:
 800e740:	b510      	push	{r4, lr}
 800e742:	460c      	mov	r4, r1
 800e744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e748:	f000 f89c 	bl	800e884 <_read_r>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	bfab      	itete	ge
 800e750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e752:	89a3      	ldrhlt	r3, [r4, #12]
 800e754:	181b      	addge	r3, r3, r0
 800e756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e75a:	bfac      	ite	ge
 800e75c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e75e:	81a3      	strhlt	r3, [r4, #12]
 800e760:	bd10      	pop	{r4, pc}

0800e762 <__swrite>:
 800e762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e766:	461f      	mov	r7, r3
 800e768:	898b      	ldrh	r3, [r1, #12]
 800e76a:	05db      	lsls	r3, r3, #23
 800e76c:	4605      	mov	r5, r0
 800e76e:	460c      	mov	r4, r1
 800e770:	4616      	mov	r6, r2
 800e772:	d505      	bpl.n	800e780 <__swrite+0x1e>
 800e774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e778:	2302      	movs	r3, #2
 800e77a:	2200      	movs	r2, #0
 800e77c:	f000 f868 	bl	800e850 <_lseek_r>
 800e780:	89a3      	ldrh	r3, [r4, #12]
 800e782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e78a:	81a3      	strh	r3, [r4, #12]
 800e78c:	4632      	mov	r2, r6
 800e78e:	463b      	mov	r3, r7
 800e790:	4628      	mov	r0, r5
 800e792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e796:	f000 b817 	b.w	800e7c8 <_write_r>

0800e79a <__sseek>:
 800e79a:	b510      	push	{r4, lr}
 800e79c:	460c      	mov	r4, r1
 800e79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a2:	f000 f855 	bl	800e850 <_lseek_r>
 800e7a6:	1c43      	adds	r3, r0, #1
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	bf15      	itete	ne
 800e7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800e7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7b6:	81a3      	strheq	r3, [r4, #12]
 800e7b8:	bf18      	it	ne
 800e7ba:	81a3      	strhne	r3, [r4, #12]
 800e7bc:	bd10      	pop	{r4, pc}

0800e7be <__sclose>:
 800e7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c2:	f000 b813 	b.w	800e7ec <_close_r>
	...

0800e7c8 <_write_r>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	4d07      	ldr	r5, [pc, #28]	; (800e7e8 <_write_r+0x20>)
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	4608      	mov	r0, r1
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	602a      	str	r2, [r5, #0]
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f7f3 fae1 	bl	8001d9e <_write>
 800e7dc:	1c43      	adds	r3, r0, #1
 800e7de:	d102      	bne.n	800e7e6 <_write_r+0x1e>
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	b103      	cbz	r3, 800e7e6 <_write_r+0x1e>
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	bd38      	pop	{r3, r4, r5, pc}
 800e7e8:	20000560 	.word	0x20000560

0800e7ec <_close_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	4d06      	ldr	r5, [pc, #24]	; (800e808 <_close_r+0x1c>)
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	4608      	mov	r0, r1
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	f7f3 faed 	bl	8001dd6 <_close>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	d102      	bne.n	800e806 <_close_r+0x1a>
 800e800:	682b      	ldr	r3, [r5, #0]
 800e802:	b103      	cbz	r3, 800e806 <_close_r+0x1a>
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	bd38      	pop	{r3, r4, r5, pc}
 800e808:	20000560 	.word	0x20000560

0800e80c <_fstat_r>:
 800e80c:	b538      	push	{r3, r4, r5, lr}
 800e80e:	4d07      	ldr	r5, [pc, #28]	; (800e82c <_fstat_r+0x20>)
 800e810:	2300      	movs	r3, #0
 800e812:	4604      	mov	r4, r0
 800e814:	4608      	mov	r0, r1
 800e816:	4611      	mov	r1, r2
 800e818:	602b      	str	r3, [r5, #0]
 800e81a:	f7f3 fae8 	bl	8001dee <_fstat>
 800e81e:	1c43      	adds	r3, r0, #1
 800e820:	d102      	bne.n	800e828 <_fstat_r+0x1c>
 800e822:	682b      	ldr	r3, [r5, #0]
 800e824:	b103      	cbz	r3, 800e828 <_fstat_r+0x1c>
 800e826:	6023      	str	r3, [r4, #0]
 800e828:	bd38      	pop	{r3, r4, r5, pc}
 800e82a:	bf00      	nop
 800e82c:	20000560 	.word	0x20000560

0800e830 <_isatty_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	4d06      	ldr	r5, [pc, #24]	; (800e84c <_isatty_r+0x1c>)
 800e834:	2300      	movs	r3, #0
 800e836:	4604      	mov	r4, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	602b      	str	r3, [r5, #0]
 800e83c:	f7f3 fae7 	bl	8001e0e <_isatty>
 800e840:	1c43      	adds	r3, r0, #1
 800e842:	d102      	bne.n	800e84a <_isatty_r+0x1a>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	b103      	cbz	r3, 800e84a <_isatty_r+0x1a>
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	bd38      	pop	{r3, r4, r5, pc}
 800e84c:	20000560 	.word	0x20000560

0800e850 <_lseek_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4d07      	ldr	r5, [pc, #28]	; (800e870 <_lseek_r+0x20>)
 800e854:	4604      	mov	r4, r0
 800e856:	4608      	mov	r0, r1
 800e858:	4611      	mov	r1, r2
 800e85a:	2200      	movs	r2, #0
 800e85c:	602a      	str	r2, [r5, #0]
 800e85e:	461a      	mov	r2, r3
 800e860:	f7f3 fae0 	bl	8001e24 <_lseek>
 800e864:	1c43      	adds	r3, r0, #1
 800e866:	d102      	bne.n	800e86e <_lseek_r+0x1e>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	b103      	cbz	r3, 800e86e <_lseek_r+0x1e>
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	bd38      	pop	{r3, r4, r5, pc}
 800e870:	20000560 	.word	0x20000560

0800e874 <_malloc_usable_size_r>:
 800e874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e878:	1f18      	subs	r0, r3, #4
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	bfbc      	itt	lt
 800e87e:	580b      	ldrlt	r3, [r1, r0]
 800e880:	18c0      	addlt	r0, r0, r3
 800e882:	4770      	bx	lr

0800e884 <_read_r>:
 800e884:	b538      	push	{r3, r4, r5, lr}
 800e886:	4d07      	ldr	r5, [pc, #28]	; (800e8a4 <_read_r+0x20>)
 800e888:	4604      	mov	r4, r0
 800e88a:	4608      	mov	r0, r1
 800e88c:	4611      	mov	r1, r2
 800e88e:	2200      	movs	r2, #0
 800e890:	602a      	str	r2, [r5, #0]
 800e892:	461a      	mov	r2, r3
 800e894:	f7f3 fa66 	bl	8001d64 <_read>
 800e898:	1c43      	adds	r3, r0, #1
 800e89a:	d102      	bne.n	800e8a2 <_read_r+0x1e>
 800e89c:	682b      	ldr	r3, [r5, #0]
 800e89e:	b103      	cbz	r3, 800e8a2 <_read_r+0x1e>
 800e8a0:	6023      	str	r3, [r4, #0]
 800e8a2:	bd38      	pop	{r3, r4, r5, pc}
 800e8a4:	20000560 	.word	0x20000560

0800e8a8 <_init>:
 800e8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8aa:	bf00      	nop
 800e8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ae:	bc08      	pop	{r3}
 800e8b0:	469e      	mov	lr, r3
 800e8b2:	4770      	bx	lr

0800e8b4 <_fini>:
 800e8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8b6:	bf00      	nop
 800e8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ba:	bc08      	pop	{r3}
 800e8bc:	469e      	mov	lr, r3
 800e8be:	4770      	bx	lr
